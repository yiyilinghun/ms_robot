; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24210.0 

;	TITLE	F:\src\MsCommon\decode.cpp
;	.686P
;	.XMM
;	include listing.inc
;	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?jpeg_bit@@3EA					; jpeg_bit
PUBLIC	?jpeg_stream@@3PAEA				; jpeg_stream
PUBLIC	?jpeg_zigzag@@3PAEA				; jpeg_zigzag
_BSS	SEGMENT
?jpeg_bit@@3EA DB 01H DUP (?)				; jpeg_bit
	ALIGN	4

?jpeg_stream@@3PAEA DD 01H DUP (?)			; jpeg_stream
_BSS	ENDS
_DATA	SEGMENT
?jpeg_zigzag@@3PAEA DB 00H				; jpeg_zigzag
	DB	03fH
	DB	037H
	DB	03eH
	DB	03dH
	DB	036H
	DB	02fH
	DB	027H
	DB	02eH
	DB	035H
	DB	03cH
	DB	03bH
	DB	034H
	DB	02dH
	DB	026H
	DB	01fH
	DB	017H
	DB	01eH
	DB	025H
	DB	02cH
	DB	033H
	DB	03aH
	DB	039H
	DB	032H
	DB	02bH
	DB	024H
	DB	01dH
	DB	016H
	DB	0fH
	DB	07H
	DB	0eH
	DB	015H
	DB	01cH
	DB	023H
	DB	02aH
	DB	031H
	DB	038H
	DB	030H
	DB	029H
	DB	022H
	DB	01bH
	DB	014H
	DB	0dH
	DB	06H
	DB	05H
	DB	0cH
	DB	013H
	DB	01aH
	DB	021H
	DB	028H
	DB	020H
	DB	019H
	DB	012H
	DB	0bH
	DB	04H
	DB	03H
	DB	0aH
	DB	011H
	DB	018H
	DB	010H
	DB	09H
	DB	02H
	DB	01H
	DB	08H
_DATA	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?jpeg_preprocess@@YAXPAE@Z			; jpeg_preprocess
PUBLIC	?jpeg_decode_DU@@YAXPAFH@Z			; jpeg_decode_DU
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	?jpeg_htable@@3PAUJPEG_HUFFMANTABLE@@A:BYTE	; jpeg_htable
EXTRN	?jpeg_qtable@@3PAPAFA:BYTE			; jpeg_qtable
EXTRN	?jpeg_head@@3UJPEG_SOF0@@A:BYTE			; jpeg_head
EXTRN	?jpeg_DC@@3PAFA:FWORD				; jpeg_DC
EXTRN	?jpeg_idct@@3P6AXPAF@ZA:DWORD			; jpeg_idct
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
;__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
;__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_jpeg_dc$ = -20						; size = 2
_DCT$ = -16						; size = 4
_ACT$ = -12						; size = 4
_QTB$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_buf$ = 8						; size = 4
_com$ = 12						; size = 4
?jpeg_decode_DU@@YAXPAFH@Z PROC				; jpeg_decode_DU
; File f:\src\mscommon\decode.cpp
; Line 94
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 95
	imul	eax, DWORD PTR _com$[ebp], 5
	movzx	ecx, BYTE PTR ?jpeg_head@@3UJPEG_SOF0@@A[eax+8]
	mov	edx, DWORD PTR ?jpeg_qtable@@3PAPAFA[ecx*4]
	mov	DWORD PTR _QTB$[ebp], edx
; Line 96
	imul	eax, DWORD PTR _com$[ebp], 5
	movzx	ecx, BYTE PTR ?jpeg_head@@3UJPEG_SOF0@@A[eax+9]
	lea	edx, DWORD PTR ?jpeg_htable@@3PAUJPEG_HUFFMANTABLE@@A[ecx*8]
	mov	DWORD PTR _ACT$[ebp], edx
; Line 97
	imul	eax, DWORD PTR _com$[ebp], 5
	movzx	ecx, BYTE PTR ?jpeg_head@@3UJPEG_SOF0@@A[eax+10]
	lea	edx, DWORD PTR ?jpeg_htable@@3PAUJPEG_HUFFMANTABLE@@A[ecx*8]
	mov	DWORD PTR _DCT$[ebp], edx
; Line 98
	mov	eax, DWORD PTR _com$[ebp]
	mov	cx, WORD PTR ?jpeg_DC@@3PAFA[eax*2]
	mov	WORD PTR _jpeg_dc$[ebp], cx
; Line 102
	mov	edx, DWORD PTR _DCT$[ebp]
; Line 103
	mov	esi, DWORD PTR ?jpeg_stream@@3PAEA	; jpeg_stream
; Line 104
	mov	edi, DWORD PTR _QTB$[ebp]
; Line 105
	cld
; Line 106
	mov	ch, BYTE PTR [edx+4]
; Line 107
	mov	edx, DWORD PTR [edx]
; Line 108
	mov	cl, BYTE PTR ?jpeg_bit@@3EA		; jpeg_bit
; Line 109
	lodsd
; Line 110
	mov	ebx, eax
; Line 111
	mov	eax, DWORD PTR [esi]
; Line 112
	bswap	ebx
; Line 113
	bswap	eax
; Line 114
	shld	ebx, eax, cl
$_loop_dct$3:
; Line 116
	mov	cl, BYTE PTR [edx+2]
; Line 117
	xor	eax, eax
; Line 118
	shld	eax, ebx, cl
; Line 119
	cmp	ax, WORD PTR [edx]
; Line 120
	je	SHORT $_decode_dct$4
; Line 121
	add	edx, 4
; Line 122
	dec	ch
; Line 123
	jmp	SHORT $_loop_dct$3
$_decode_dct$4:
; Line 125
	mov	ch, cl
; Line 126
	mov	cl, BYTE PTR ?jpeg_bit@@3EA		; jpeg_bit
; Line 127
	shr	ebx, cl
; Line 128
	add	cl, ch
; Line 129
	cmp	cl, 32					; 00000020H
; Line 130
	jl	SHORT $_lt4byte_dc$5
; Line 131
	sub	cl, 32					; 00000020H
; Line 132
	lodsd
; Line 133
	bswap	eax
; Line 134
	mov	ebx, eax
$_lt4byte_dc$5:
; Line 136
	mov	eax, DWORD PTR [esi]
; Line 137
	bswap	eax
; Line 138
	shld	ebx, eax, cl
; Line 140
	mov	ch, cl
; Line 141
	mov	cl, BYTE PTR [edx+3]
; Line 142
	xor	eax, eax
; Line 143
	shld	eax, ebx, cl
; Line 145
	xchg	ch, cl
; Line 146
	shr	ebx, cl
; Line 147
	add	cl, ch
; Line 148
	xchg	ch, cl
; Line 150
	dec	cl
; Line 151
	bt	eax, ecx
; Line 152
	jb	SHORT $_get_diff$6
; Line 153
	inc	cl
; Line 154
	mov	edx, 1
; Line 155
	inc	eax
; Line 156
	shl	edx, cl
; Line 157
	sub	eax, edx
$_get_diff$6:
; Line 159
	add	ax, WORD PTR _jpeg_dc$[ebp]
; Line 160
	mov	edx, DWORD PTR _com$[ebp]
; Line 161
	mov	cl, ch
; Line 162
	mov	WORD PTR ?jpeg_DC@@3PAFA[edx*2], ax
; Line 163
	imul	WORD PTR [edi]
; Line 164
	mov	edx, DWORD PTR _buf$[ebp]
; Line 165
	add	edi, 2
; Line 166
	mov	WORD PTR [edx], ax
; Line 169
	cmp	cl, 32					; 00000020H
; Line 170
	jl	SHORT $_lt4byte_dc0$7
; Line 171
	sub	cl, 32					; 00000020H
; Line 172
	lodsd
; Line 173
	bswap	eax
; Line 174
	mov	ebx, eax
$_lt4byte_dc0$7:
; Line 177
	mov	eax, DWORD PTR [esi]
; Line 178
	bswap	eax
; Line 179
	shld	ebx, eax, cl
; Line 181
	mov	BYTE PTR ?jpeg_bit@@3EA, cl		; jpeg_bit
; Line 183
	mov	cx, 63					; 0000003fH
$_loop_decode_act$8:
; Line 186
	mov	edx, DWORD PTR _ACT$[ebp]
; Line 187
	bswap	ecx
; Line 188
	mov	ch, BYTE PTR [edx+4]
; Line 189
	mov	edx, DWORD PTR [edx]
$_loop_act$9:
; Line 192
	mov	cl, BYTE PTR [edx+2]
; Line 193
	xor	eax, eax
; Line 194
	shld	eax, ebx, cl
; Line 195
	cmp	ax, WORD PTR [edx]
; Line 196
	je	SHORT $_decode_act$10
; Line 197
	add	edx, 4
; Line 198
	dec	ch
; Line 199
	jmp	SHORT $_loop_act$9
$_decode_act$10:
; Line 202
	mov	ch, cl
; Line 203
	mov	cl, BYTE PTR ?jpeg_bit@@3EA		; jpeg_bit
; Line 204
	shr	ebx, cl
; Line 205
	add	cl, ch
; Line 206
	cmp	cl, 32					; 00000020H
; Line 207
	jl	SHORT $_lt4byte$11
; Line 208
	sub	cl, 32					; 00000020H
; Line 209
	lodsd
; Line 210
	bswap	eax
; Line 211
	mov	ebx, eax
$_lt4byte$11:
; Line 213
	mov	eax, DWORD PTR [esi]
; Line 214
	bswap	eax
; Line 215
	shld	ebx, eax, cl
; Line 216
	mov	BYTE PTR ?jpeg_bit@@3EA, cl		; jpeg_bit
; Line 218
	movzx	eax, BYTE PTR [edx+3]
; Line 219
	bswap	ecx
; Line 220
	test	ax, ax
; Line 221
	je	$_decode_end$12
; Line 223
	ror	eax, 4
; Line 224
	cmp	cx, ax
; Line 225
	je	$_decode_end$12
; Line 226
	sub	cx, ax
; Line 227
	rol	eax, 4
; Line 228
	bswap	ecx
; Line 229
	mov	cl, al
; Line 230
	mov	ch, al
; Line 231
	and	cl, 15					; 0000000fH
; Line 232
	shr	ch, 4
; Line 233
	je	SHORT $_skip_set0$13
; Line 235
	movzx	eax, ch
; Line 236
	bswap	ecx
; Line 238
	lea	edi, DWORD PTR [edi+eax*2]
; Line 239
	add	ax, cx
; Line 240
	bswap	ecx
$_set0$14:
; Line 242
	movzx	edx, BYTE PTR ?jpeg_zigzag@@3PAEA[eax]
; Line 243
	add	edx, edx
; Line 244
	add	edx, DWORD PTR _buf$[ebp]
; Line 245
	dec	eax
; Line 246
	dec	ch
; Line 247
	mov	WORD PTR [edx], 0
; Line 248
	jne	SHORT $_set0$14
$_skip_set0$13:
; Line 251
	xor	eax, eax
; Line 252
	shld	eax, ebx, cl
; Line 253
	dec	cl
; Line 254
	bt	eax, ecx
; Line 255
	jb	SHORT $_get_ac$15
; Line 256
	mov	edx, 2
; Line 257
	inc	eax
; Line 258
	shl	edx, cl
; Line 259
	sub	eax, edx
$_get_ac$15:
; Line 261
	inc	cl
; Line 262
	imul	WORD PTR [edi]
; Line 264
	test	dx, dx
; Line 265
	je	SHORT $_2byte$16
; Line 267
	inc	dx
; Line 268
	je	SHORT $_2byte$16
; Line 270
	mov	ax, 32767				; 00007fffH
; Line 271
	bt	dx, 15					; 0000000fH
; Line 272
	adc	ax, 0
$_2byte$16:
; Line 275
	bswap	ecx
; Line 276
	movzx	edx, cx
; Line 277
	movzx	edx, BYTE PTR ?jpeg_zigzag@@3PAEA[edx]
; Line 278
	add	edx, edx
; Line 279
	add	edx, DWORD PTR _buf$[ebp]
; Line 280
	add	edi, 2
; Line 281
	mov	WORD PTR [edx], ax
; Line 283
	bswap	ecx
; Line 285
	mov	ch, cl
; Line 286
	mov	cl, BYTE PTR ?jpeg_bit@@3EA		; jpeg_bit
; Line 287
	shr	ebx, cl
; Line 288
	add	cl, ch
; Line 289
	cmp	cl, 32					; 00000020H
; Line 290
	jl	SHORT $_lt4byte_2$17
; Line 291
	sub	cl, 32					; 00000020H
; Line 292
	lodsd
; Line 293
	bswap	eax
; Line 294
	mov	ebx, eax
$_lt4byte_2$17:
; Line 296
	mov	eax, DWORD PTR [esi]
; Line 297
	bswap	eax
; Line 298
	shld	ebx, eax, cl
; Line 299
	mov	BYTE PTR ?jpeg_bit@@3EA, cl		; jpeg_bit
; Line 300
	bswap	ecx
; Line 302
	dec	cx
; Line 303
	jne	$_loop_decode_act$8
; Line 304
	jmp	SHORT $_end$18
$_decode_end$12:
; Line 306
	movzx	ecx, cx
; Line 307
	xor	eax, eax
; Line 308
	mov	edi, DWORD PTR _buf$[ebp]
$_end_loop$19:
; Line 310
	movzx	edx, BYTE PTR ?jpeg_zigzag@@3PAEA[ecx]
; Line 311
	dec	ecx
; Line 312
	mov	WORD PTR [edi+edx*2], ax
; Line 313
	jne	SHORT $_end_loop$19
$_end$18:
; Line 315
	sub	esi, 4
; Line 316
	mov	DWORD PTR ?jpeg_stream@@3PAEA, esi	; jpeg_stream
; Line 319
	mov	esi, esp
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	DWORD PTR ?jpeg_idct@@3P6AXPAF@ZA	; jpeg_idct
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 320
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?jpeg_decode_DU@@YAXPAFH@Z ENDP				; jpeg_decode_DU
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_stream$ = 8						; size = 4
?jpeg_preprocess@@YAXPAE@Z PROC				; jpeg_preprocess
; File f:\src\mscommon\decode.cpp
; Line 49
	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
; Line 51
	mov	esi, DWORD PTR _stream$[ebp]
; Line 52
	mov	edi, DWORD PTR _stream$[ebp]
; Line 53
	cld
$_loop$3:
; Line 56
	lodsb
; Line 57
	cmp	al, -1
; Line 58
	je	SHORT $_getFF$4
; Line 59
	stosb
; Line 60
	jmp	SHORT $_loop$3
$_getFF$4:
; Line 62
	lodsb
; Line 63
	test	al, al
; Line 64
	jne	SHORT $_not0$5
; Line 65
	mov	BYTE PTR [edi], -1
; Line 66
	inc	edi
; Line 67
	jmp	SHORT $_loop$3
$_not0$5:
; Line 69
	cmp	al, -39					; ffffffd9H
; Line 70
	je	SHORT $_end$6
; Line 71
	cmp	al, -1
; Line 72
	je	SHORT $_getFF$4
; Line 74
	mov	BYTE PTR [edi], -1
; Line 75
	inc	edi
; Line 77
	jmp	SHORT $_loop$3
$_end$6:
; Line 89
	pop	edi
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?jpeg_preprocess@@YAXPAE@Z ENDP				; jpeg_preprocess
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT
; File f:\src\mscommon\decode.cpp
; Line 322
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT
; File f:\src\mscommon\decode.cpp
; Line 322
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
