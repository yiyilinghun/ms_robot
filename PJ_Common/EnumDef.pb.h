// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EnumDef.proto

#ifndef PROTOBUF_EnumDef_2eproto__INCLUDED
#define PROTOBUF_EnumDef_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_EnumDef_2eproto();
void protobuf_AssignDesc_EnumDef_2eproto();
void protobuf_ShutdownFile_EnumDef_2eproto();


enum E_MSG_VERSION {
  MSG_VERSION_INVALID = 0,
  MSG_VERSION_ID = 1
};
bool E_MSG_VERSION_IsValid(int value);

const ::google::protobuf::EnumDescriptor* E_MSG_VERSION_descriptor();
inline const ::std::string& E_MSG_VERSION_Name(E_MSG_VERSION value) {
  return ::google::protobuf::internal::NameOfEnum(
    E_MSG_VERSION_descriptor(), value);
}
inline bool E_MSG_VERSION_Parse(
    const ::std::string& name, E_MSG_VERSION* value) {
  return ::google::protobuf::internal::ParseNamedEnum<E_MSG_VERSION>(
    E_MSG_VERSION_descriptor(), name, value);
}
enum E_OBJECT_TYPE {
  EOT_INVALID = 0,
  EOT_PLAYER = 1,
  EOT_SUMMONPET = 2,
  EOT_NPC = 3,
  EOT_MONSTER = 4,
  EOT_TRANSFER_POINT = 5
};
bool E_OBJECT_TYPE_IsValid(int value);

const ::google::protobuf::EnumDescriptor* E_OBJECT_TYPE_descriptor();
inline const ::std::string& E_OBJECT_TYPE_Name(E_OBJECT_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    E_OBJECT_TYPE_descriptor(), value);
}
inline bool E_OBJECT_TYPE_Parse(
    const ::std::string& name, E_OBJECT_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<E_OBJECT_TYPE>(
    E_OBJECT_TYPE_descriptor(), name, value);
}
enum E_ITEM_DEF {
  EID_INVALID = 0,
  GOLD_ID = 1,
  ENDURANCE_ID = 2,
  DIAMOND_COIN_ID = 3,
  EXP_ID = 4,
  SKILL_POIN_ID = 5,
  PACKAGE_MIN_ID = 10001,
  PACKAGE_MAX_ID = 19999,
  ITEM_MIN_ID = 10000000,
  ITEM_MAX_ID = 19999999,
  EQUIP_MIN_ID = 20000000,
  EQUIP_MAX_ID = 29999999
};
bool E_ITEM_DEF_IsValid(int value);

const ::google::protobuf::EnumDescriptor* E_ITEM_DEF_descriptor();
inline const ::std::string& E_ITEM_DEF_Name(E_ITEM_DEF value) {
  return ::google::protobuf::internal::NameOfEnum(
    E_ITEM_DEF_descriptor(), value);
}
inline bool E_ITEM_DEF_Parse(
    const ::std::string& name, E_ITEM_DEF* value) {
  return ::google::protobuf::internal::ParseNamedEnum<E_ITEM_DEF>(
    E_ITEM_DEF_descriptor(), name, value);
}
enum E_EQUIP_SITE_TYPE {
  EEST_INVALID = 0,
  EEST_HELMET = 1,
  EEST_CLOTHES = 2,
  EEST_SHOES = 3,
  EEST_ORNAMENTS = 4,
  EEST_WEAPONS = 5,
  EEST_VEHICLE = 6
};
bool E_EQUIP_SITE_TYPE_IsValid(int value);

const ::google::protobuf::EnumDescriptor* E_EQUIP_SITE_TYPE_descriptor();
inline const ::std::string& E_EQUIP_SITE_TYPE_Name(E_EQUIP_SITE_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    E_EQUIP_SITE_TYPE_descriptor(), value);
}
inline bool E_EQUIP_SITE_TYPE_Parse(
    const ::std::string& name, E_EQUIP_SITE_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<E_EQUIP_SITE_TYPE>(
    E_EQUIP_SITE_TYPE_descriptor(), name, value);
}
enum E_GOODS_TYPE {
  EGT_INVALID = 0,
  EGT_GOLD = 1,
  EGT_STAMINA = 2,
  EGT_DIAMOND_COIN = 3,
  EGT_EXP = 4,
  EGT_SKILL_POINT = 5,
  EGT_PACKAGE = 101,
  EGT_ITEM = 102,
  EGT_EQUIP = 103
};
bool E_GOODS_TYPE_IsValid(int value);

const ::google::protobuf::EnumDescriptor* E_GOODS_TYPE_descriptor();
inline const ::std::string& E_GOODS_TYPE_Name(E_GOODS_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    E_GOODS_TYPE_descriptor(), value);
}
inline bool E_GOODS_TYPE_Parse(
    const ::std::string& name, E_GOODS_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<E_GOODS_TYPE>(
    E_GOODS_TYPE_descriptor(), name, value);
}
enum E_ROLE_STATE {
  ERS_IN_DB = 0,
  ERS_IN_LOGIN = 1,
  ERS_IN_SCENE = 2
};
bool E_ROLE_STATE_IsValid(int value);

const ::google::protobuf::EnumDescriptor* E_ROLE_STATE_descriptor();
inline const ::std::string& E_ROLE_STATE_Name(E_ROLE_STATE value) {
  return ::google::protobuf::internal::NameOfEnum(
    E_ROLE_STATE_descriptor(), value);
}
inline bool E_ROLE_STATE_Parse(
    const ::std::string& name, E_ROLE_STATE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<E_ROLE_STATE>(
    E_ROLE_STATE_descriptor(), name, value);
}
enum E_SCENE_TYPE {
  EST_INVALID = 0,
  EST_GAME_SCENE = 1,
  EST_BATTLE_SCENE = 2
};
bool E_SCENE_TYPE_IsValid(int value);

const ::google::protobuf::EnumDescriptor* E_SCENE_TYPE_descriptor();
inline const ::std::string& E_SCENE_TYPE_Name(E_SCENE_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    E_SCENE_TYPE_descriptor(), value);
}
inline bool E_SCENE_TYPE_Parse(
    const ::std::string& name, E_SCENE_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<E_SCENE_TYPE>(
    E_SCENE_TYPE_descriptor(), name, value);
}
enum E_SYUC_RET_CODE {
  RC_OK = 0,
  RC_YES = 1,
  RC_NO = 2
};
bool E_SYUC_RET_CODE_IsValid(int value);

const ::google::protobuf::EnumDescriptor* E_SYUC_RET_CODE_descriptor();
inline const ::std::string& E_SYUC_RET_CODE_Name(E_SYUC_RET_CODE value) {
  return ::google::protobuf::internal::NameOfEnum(
    E_SYUC_RET_CODE_descriptor(), value);
}
inline bool E_SYUC_RET_CODE_Parse(
    const ::std::string& name, E_SYUC_RET_CODE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<E_SYUC_RET_CODE>(
    E_SYUC_RET_CODE_descriptor(), name, value);
}
enum E_CHAT_TYPE {
  ECT_CURRENT = 0,
  ECT_TEAM = 1
};
bool E_CHAT_TYPE_IsValid(int value);

const ::google::protobuf::EnumDescriptor* E_CHAT_TYPE_descriptor();
inline const ::std::string& E_CHAT_TYPE_Name(E_CHAT_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    E_CHAT_TYPE_descriptor(), value);
}
inline bool E_CHAT_TYPE_Parse(
    const ::std::string& name, E_CHAT_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<E_CHAT_TYPE>(
    E_CHAT_TYPE_descriptor(), name, value);
}
enum FACE_SHOP_TYPE {
  FST_INVALID = 0,
  FST_NORMAL = 1,
  FST_DISCOUNT = 2
};
bool FACE_SHOP_TYPE_IsValid(int value);

const ::google::protobuf::EnumDescriptor* FACE_SHOP_TYPE_descriptor();
inline const ::std::string& FACE_SHOP_TYPE_Name(FACE_SHOP_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    FACE_SHOP_TYPE_descriptor(), value);
}
inline bool FACE_SHOP_TYPE_Parse(
    const ::std::string& name, FACE_SHOP_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FACE_SHOP_TYPE>(
    FACE_SHOP_TYPE_descriptor(), name, value);
}
enum E_BATTLE_TYPE {
  EBT_INVALID = 0,
  EBT_PVE = 1,
  EBT_PVP = 2
};
bool E_BATTLE_TYPE_IsValid(int value);

const ::google::protobuf::EnumDescriptor* E_BATTLE_TYPE_descriptor();
inline const ::std::string& E_BATTLE_TYPE_Name(E_BATTLE_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    E_BATTLE_TYPE_descriptor(), value);
}
inline bool E_BATTLE_TYPE_Parse(
    const ::std::string& name, E_BATTLE_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<E_BATTLE_TYPE>(
    E_BATTLE_TYPE_descriptor(), name, value);
}
enum E_BATTLE_FIGHT_TYPE {
  EBFT_INVALID = 0,
  EBFT_RISK = 1,
  EBFT_ARENA = 2
};
bool E_BATTLE_FIGHT_TYPE_IsValid(int value);

const ::google::protobuf::EnumDescriptor* E_BATTLE_FIGHT_TYPE_descriptor();
inline const ::std::string& E_BATTLE_FIGHT_TYPE_Name(E_BATTLE_FIGHT_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    E_BATTLE_FIGHT_TYPE_descriptor(), value);
}
inline bool E_BATTLE_FIGHT_TYPE_Parse(
    const ::std::string& name, E_BATTLE_FIGHT_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<E_BATTLE_FIGHT_TYPE>(
    E_BATTLE_FIGHT_TYPE_descriptor(), name, value);
}
enum E_BATTLE_PLAY_TYPE {
  EBPT_INVALID = 0,
  EBPT_NOMAL = 1,
  EBPT_REPLAY = 2
};
bool E_BATTLE_PLAY_TYPE_IsValid(int value);

const ::google::protobuf::EnumDescriptor* E_BATTLE_PLAY_TYPE_descriptor();
inline const ::std::string& E_BATTLE_PLAY_TYPE_Name(E_BATTLE_PLAY_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    E_BATTLE_PLAY_TYPE_descriptor(), value);
}
inline bool E_BATTLE_PLAY_TYPE_Parse(
    const ::std::string& name, E_BATTLE_PLAY_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<E_BATTLE_PLAY_TYPE>(
    E_BATTLE_PLAY_TYPE_descriptor(), name, value);
}
enum E_BATTLE_MODE_TYPE {
  EBMT_INVALID = 0,
  EBMT_NORMAL = 1,
  EBMT_MODE_VIDEO = 2
};
bool E_BATTLE_MODE_TYPE_IsValid(int value);

const ::google::protobuf::EnumDescriptor* E_BATTLE_MODE_TYPE_descriptor();
inline const ::std::string& E_BATTLE_MODE_TYPE_Name(E_BATTLE_MODE_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    E_BATTLE_MODE_TYPE_descriptor(), value);
}
inline bool E_BATTLE_MODE_TYPE_Parse(
    const ::std::string& name, E_BATTLE_MODE_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<E_BATTLE_MODE_TYPE>(
    E_BATTLE_MODE_TYPE_descriptor(), name, value);
}
enum E_BATTLE_RESULT_TYPE {
  EBRT_INVALID = 0,
  EBRT_WIN = 1,
  EBRT_LOSE = 2,
  EBRT_DOGFULL = 3
};
bool E_BATTLE_RESULT_TYPE_IsValid(int value);

const ::google::protobuf::EnumDescriptor* E_BATTLE_RESULT_TYPE_descriptor();
inline const ::std::string& E_BATTLE_RESULT_TYPE_Name(E_BATTLE_RESULT_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    E_BATTLE_RESULT_TYPE_descriptor(), value);
}
inline bool E_BATTLE_RESULT_TYPE_Parse(
    const ::std::string& name, E_BATTLE_RESULT_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<E_BATTLE_RESULT_TYPE>(
    E_BATTLE_RESULT_TYPE_descriptor(), name, value);
}
enum E_BATTLE_LOG_TYPE {
  LOGT_INVALID = 0,
  LOGT_USER_CARD = 1,
  LOGT_COLLECT_BOX = 2
};
bool E_BATTLE_LOG_TYPE_IsValid(int value);

const ::google::protobuf::EnumDescriptor* E_BATTLE_LOG_TYPE_descriptor();
inline const ::std::string& E_BATTLE_LOG_TYPE_Name(E_BATTLE_LOG_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    E_BATTLE_LOG_TYPE_descriptor(), value);
}
inline bool E_BATTLE_LOG_TYPE_Parse(
    const ::std::string& name, E_BATTLE_LOG_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<E_BATTLE_LOG_TYPE>(
    E_BATTLE_LOG_TYPE_descriptor(), name, value);
}
enum E_BATTLE_CAMP_TYPE {
  CAMP_INVALID = 0,
  CAMP_TYPE_OWN = 1,
  CAMP_TYPE_ENEMY = 2
};
bool E_BATTLE_CAMP_TYPE_IsValid(int value);

const ::google::protobuf::EnumDescriptor* E_BATTLE_CAMP_TYPE_descriptor();
inline const ::std::string& E_BATTLE_CAMP_TYPE_Name(E_BATTLE_CAMP_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    E_BATTLE_CAMP_TYPE_descriptor(), value);
}
inline bool E_BATTLE_CAMP_TYPE_Parse(
    const ::std::string& name, E_BATTLE_CAMP_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<E_BATTLE_CAMP_TYPE>(
    E_BATTLE_CAMP_TYPE_descriptor(), name, value);
}
enum E_ONLINE_UNIT_RET {
  EOUR_OK = 0,
  EOUR_FAILED = 1,
  EOUR_NOT_EXIST = 2,
  EOUR_EXIST = 3,
  EOUR_COUNT_LIMIT = 4,
  EOUR_CENTER_CAN_NOT_REACH = 5
};
bool E_ONLINE_UNIT_RET_IsValid(int value);

const ::google::protobuf::EnumDescriptor* E_ONLINE_UNIT_RET_descriptor();
inline const ::std::string& E_ONLINE_UNIT_RET_Name(E_ONLINE_UNIT_RET value) {
  return ::google::protobuf::internal::NameOfEnum(
    E_ONLINE_UNIT_RET_descriptor(), value);
}
inline bool E_ONLINE_UNIT_RET_Parse(
    const ::std::string& name, E_ONLINE_UNIT_RET* value) {
  return ::google::protobuf::internal::ParseNamedEnum<E_ONLINE_UNIT_RET>(
    E_ONLINE_UNIT_RET_descriptor(), name, value);
}
enum EQUIP_POS_TYPE {
  EPT_PI_FENG = 0,
  EPT_MAO_ZI = 1,
  EPT_WU_QI = 2,
  EPT_YI_FU = 3,
  EPT_GUA_JIAN = 4,
  EPT_XIE_ZI = 5,
  EPT_MIAN_JU = 6,
  EPT_XIANG_LIAN = 7,
  EPT_JIE_ZHI = 8,
  EPT_YAO_DAI = 9
};
bool EQUIP_POS_TYPE_IsValid(int value);

const ::google::protobuf::EnumDescriptor* EQUIP_POS_TYPE_descriptor();
inline const ::std::string& EQUIP_POS_TYPE_Name(EQUIP_POS_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    EQUIP_POS_TYPE_descriptor(), value);
}
inline bool EQUIP_POS_TYPE_Parse(
    const ::std::string& name, EQUIP_POS_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EQUIP_POS_TYPE>(
    EQUIP_POS_TYPE_descriptor(), name, value);
}
enum EQUIP_TYPE {
  ET_INVALID = 0,
  ET_PI_FENG_NAN = 1,
  ET_PI_FENG_NV = 2,
  ET_MAO_ZI_NAN = 3,
  ET_MAO_ZI_NV = 4,
  ET_YI_FU_NAN = 5,
  ET_YI_FU_NV = 6,
  ET_GUA_JIAN_NAN = 7,
  ET_GUA_JIAN_NV = 8,
  ET_MIAN_JU_NAN = 9,
  ET_MIAN_JU_NV = 10,
  ET_WU_QI_JIAN = 16,
  ET_WU_QI_DAO = 17,
  ET_WU_QI_BIAN = 18,
  ET_WU_QI_CHUI = 19,
  ET_WU_QI_GUN = 20,
  ET_WU_QI_ZHUA = 21,
  ET_WU_QI_QIANG = 22,
  ET_WU_QI_FU = 23,
  ET_WU_QI_SHAN = 24,
  ET_WU_QI_GOU = 25,
  ET_WU_QI_QUAN = 26,
  ET_WU_QI_CHEN = 27,
  ET_WU_QI_FAN = 28,
  ET_WU_QI_DAI = 29,
  ET_XIANG_LIAN = 32,
  ET_XIE_ZI = 33,
  ET_JIE_ZHI = 34,
  ET_YAO_DAI = 35
};
bool EQUIP_TYPE_IsValid(int value);

const ::google::protobuf::EnumDescriptor* EQUIP_TYPE_descriptor();
inline const ::std::string& EQUIP_TYPE_Name(EQUIP_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    EQUIP_TYPE_descriptor(), value);
}
inline bool EQUIP_TYPE_Parse(
    const ::std::string& name, EQUIP_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EQUIP_TYPE>(
    EQUIP_TYPE_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::E_MSG_VERSION>() {
  return ::E_MSG_VERSION_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::E_OBJECT_TYPE>() {
  return ::E_OBJECT_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::E_ITEM_DEF>() {
  return ::E_ITEM_DEF_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::E_EQUIP_SITE_TYPE>() {
  return ::E_EQUIP_SITE_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::E_GOODS_TYPE>() {
  return ::E_GOODS_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::E_ROLE_STATE>() {
  return ::E_ROLE_STATE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::E_SCENE_TYPE>() {
  return ::E_SCENE_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::E_SYUC_RET_CODE>() {
  return ::E_SYUC_RET_CODE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::E_CHAT_TYPE>() {
  return ::E_CHAT_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FACE_SHOP_TYPE>() {
  return ::FACE_SHOP_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::E_BATTLE_TYPE>() {
  return ::E_BATTLE_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::E_BATTLE_FIGHT_TYPE>() {
  return ::E_BATTLE_FIGHT_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::E_BATTLE_PLAY_TYPE>() {
  return ::E_BATTLE_PLAY_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::E_BATTLE_MODE_TYPE>() {
  return ::E_BATTLE_MODE_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::E_BATTLE_RESULT_TYPE>() {
  return ::E_BATTLE_RESULT_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::E_BATTLE_LOG_TYPE>() {
  return ::E_BATTLE_LOG_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::E_BATTLE_CAMP_TYPE>() {
  return ::E_BATTLE_CAMP_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::E_ONLINE_UNIT_RET>() {
  return ::E_ONLINE_UNIT_RET_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EQUIP_POS_TYPE>() {
  return ::EQUIP_POS_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EQUIP_TYPE>() {
  return ::EQUIP_TYPE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_EnumDef_2eproto__INCLUDED
