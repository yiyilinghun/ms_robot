// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* universal_data_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  universal_data_reflection_ = nullptr;
const ::google::protobuf::Descriptor* item_config_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  item_config_reflection_ = nullptr;
const ::google::protobuf::Descriptor* Sql_Result_Login_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sql_Result_Login_reflection_ = nullptr;
const ::google::protobuf::Descriptor* GameSkillActionInfos_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameSkillActionInfos_reflection_ = nullptr;
const ::google::protobuf::Descriptor* GameShopAvatarInfo_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameShopAvatarInfo_reflection_ = nullptr;
const ::google::protobuf::Descriptor* reward_info_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  reward_info_reflection_ = nullptr;
const ::google::protobuf::Descriptor* BattleHeroAttribute_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleHeroAttribute_reflection_ = nullptr;
const ::google::protobuf::Descriptor* BattleHeroData_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleHeroData_reflection_ = nullptr;
const ::google::protobuf::Descriptor* BattleHeroGroup_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleHeroGroup_reflection_ = nullptr;
const ::google::protobuf::Descriptor* BattleFightData_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleFightData_reflection_ = nullptr;
const ::google::protobuf::Descriptor* BattleData_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleData_reflection_ = nullptr;
const ::google::protobuf::Descriptor* BattleEventData_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleEventData_reflection_ = nullptr;
const ::google::protobuf::Descriptor* proto_BattleEvent_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  proto_BattleEvent_reflection_ = nullptr;
const ::google::protobuf::Descriptor* BattleLog_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleLog_reflection_ = nullptr;
const ::google::protobuf::Descriptor* BattleResultData_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleResultData_reflection_ = nullptr;
const ::google::protobuf::Descriptor* FindWayPath_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FindWayPath_reflection_ = nullptr;
const ::google::protobuf::Descriptor* FindWayInfo_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FindWayInfo_reflection_ = nullptr;
const ::google::protobuf::Descriptor* FindWayData_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FindWayData_reflection_ = nullptr;

}  // namespace


void protobuf_AssignDesc_Common_2eproto() {
  protobuf_AddDesc_Common_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Common.proto");
  GOOGLE_CHECK(file != nullptr);
  universal_data_descriptor_ = file->message_type(0);
  static const int universal_data_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(universal_data, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(universal_data, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(universal_data, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(universal_data, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(universal_data, b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(universal_data, f_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(universal_data, d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(universal_data, e_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(universal_data, i32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(universal_data, i64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(universal_data, u32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(universal_data, u64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(universal_data, str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(universal_data, sub_),
  };
  universal_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      universal_data_descriptor_,
      universal_data::default_instance_,
      universal_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(universal_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(universal_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(universal_data));
  item_config_descriptor_ = file->message_type(1);
  static const int item_config_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_config, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_config, item_count_),
  };
  item_config_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      item_config_descriptor_,
      item_config::default_instance_,
      item_config_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_config, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_config, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(item_config));
  Sql_Result_Login_descriptor_ = file->message_type(2);
  static const int Sql_Result_Login_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sql_Result_Login, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sql_Result_Login, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sql_Result_Login, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sql_Result_Login, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sql_Result_Login, logintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sql_Result_Login, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sql_Result_Login, email_),
  };
  Sql_Result_Login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sql_Result_Login_descriptor_,
      Sql_Result_Login::default_instance_,
      Sql_Result_Login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sql_Result_Login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sql_Result_Login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sql_Result_Login));
  GameSkillActionInfos_descriptor_ = file->message_type(3);
  static const int GameSkillActionInfos_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSkillActionInfos, res_file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSkillActionInfos, action_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSkillActionInfos, action_wav_),
  };
  GameSkillActionInfos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameSkillActionInfos_descriptor_,
      GameSkillActionInfos::default_instance_,
      GameSkillActionInfos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSkillActionInfos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSkillActionInfos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameSkillActionInfos));
  GameShopAvatarInfo_descriptor_ = file->message_type(4);
  static const int GameShopAvatarInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameShopAvatarInfo, face_shop_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameShopAvatarInfo, goods_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameShopAvatarInfo, face_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameShopAvatarInfo, already_buy_),
  };
  GameShopAvatarInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameShopAvatarInfo_descriptor_,
      GameShopAvatarInfo::default_instance_,
      GameShopAvatarInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameShopAvatarInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameShopAvatarInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameShopAvatarInfo));
  reward_info_descriptor_ = file->message_type(5);
  static const int reward_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reward_info, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reward_info, count_),
  };
  reward_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      reward_info_descriptor_,
      reward_info::default_instance_,
      reward_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reward_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reward_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(reward_info));
  BattleHeroAttribute_descriptor_ = file->message_type(6);
  static const int BattleHeroAttribute_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHeroAttribute, max_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHeroAttribute, atk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHeroAttribute, def_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHeroAttribute, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHeroAttribute, crit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHeroAttribute, block_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHeroAttribute, act_),
  };
  BattleHeroAttribute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleHeroAttribute_descriptor_,
      BattleHeroAttribute::default_instance_,
      BattleHeroAttribute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHeroAttribute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHeroAttribute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleHeroAttribute));
  BattleHeroData_descriptor_ = file->message_type(7);
  static const int BattleHeroData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHeroData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHeroData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHeroData, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHeroData, fight_attr_),
  };
  BattleHeroData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleHeroData_descriptor_,
      BattleHeroData::default_instance_,
      BattleHeroData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHeroData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHeroData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleHeroData));
  BattleHeroGroup_descriptor_ = file->message_type(8);
  static const int BattleHeroGroup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHeroGroup, list_players_),
  };
  BattleHeroGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleHeroGroup_descriptor_,
      BattleHeroGroup::default_instance_,
      BattleHeroGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHeroGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleHeroGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleHeroGroup));
  BattleFightData_descriptor_ = file->message_type(9);
  static const int BattleFightData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFightData, list_groups_),
  };
  BattleFightData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleFightData_descriptor_,
      BattleFightData::default_instance_,
      BattleFightData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFightData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFightData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleFightData));
  BattleData_descriptor_ = file->message_type(10);
  static const int BattleData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleData, attacker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleData, defender_),
  };
  BattleData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleData_descriptor_,
      BattleData::default_instance_,
      BattleData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleData));
  BattleEventData_descriptor_ = file->message_type(11);
  static const int BattleEventData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleEventData, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleEventData, box_id_),
  };
  BattleEventData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleEventData_descriptor_,
      BattleEventData::default_instance_,
      BattleEventData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleEventData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleEventData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleEventData));
  proto_BattleEvent_descriptor_ = file->message_type(12);
  static const int proto_BattleEvent_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_BattleEvent, log_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_BattleEvent, camp_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_BattleEvent, time_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_BattleEvent, data_),
  };
  proto_BattleEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      proto_BattleEvent_descriptor_,
      proto_BattleEvent::default_instance_,
      proto_BattleEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_BattleEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(proto_BattleEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(proto_BattleEvent));
  BattleLog_descriptor_ = file->message_type(13);
  static const int BattleLog_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleLog, battle_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleLog, random_seed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleLog, chapter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleLog, level_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleLog, list_events_),
  };
  BattleLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleLog_descriptor_,
      BattleLog::default_instance_,
      BattleLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleLog));
  BattleResultData_descriptor_ = file->message_type(14);
  static const int BattleResultData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleResultData, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleResultData, list_atk_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleResultData, def_hp_),
  };
  BattleResultData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleResultData_descriptor_,
      BattleResultData::default_instance_,
      BattleResultData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleResultData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleResultData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleResultData));
  FindWayPath_descriptor_ = file->message_type(15);
  static const int FindWayPath_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindWayPath, tar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindWayPath, pos_),
  };
  FindWayPath_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FindWayPath_descriptor_,
      FindWayPath::default_instance_,
      FindWayPath_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindWayPath, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindWayPath, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FindWayPath));
  FindWayInfo_descriptor_ = file->message_type(16);
  static const int FindWayInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindWayInfo, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindWayInfo, path_),
  };
  FindWayInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FindWayInfo_descriptor_,
      FindWayInfo::default_instance_,
      FindWayInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindWayInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindWayInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FindWayInfo));
  FindWayData_descriptor_ = file->message_type(17);
  static const int FindWayData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindWayData, data_),
  };
  FindWayData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FindWayData_descriptor_,
      FindWayData::default_instance_,
      FindWayData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindWayData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindWayData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FindWayData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Common_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    universal_data_descriptor_, &universal_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    item_config_descriptor_, &item_config::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sql_Result_Login_descriptor_, &Sql_Result_Login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameSkillActionInfos_descriptor_, &GameSkillActionInfos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameShopAvatarInfo_descriptor_, &GameShopAvatarInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    reward_info_descriptor_, &reward_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleHeroAttribute_descriptor_, &BattleHeroAttribute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleHeroData_descriptor_, &BattleHeroData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleHeroGroup_descriptor_, &BattleHeroGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleFightData_descriptor_, &BattleFightData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleData_descriptor_, &BattleData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleEventData_descriptor_, &BattleEventData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    proto_BattleEvent_descriptor_, &proto_BattleEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleLog_descriptor_, &BattleLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleResultData_descriptor_, &BattleResultData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FindWayPath_descriptor_, &FindWayPath::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FindWayInfo_descriptor_, &FindWayInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FindWayData_descriptor_, &FindWayData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Common_2eproto() {
  delete universal_data::default_instance_;
  delete universal_data_reflection_;
  delete item_config::default_instance_;
  delete item_config_reflection_;
  delete Sql_Result_Login::default_instance_;
  delete Sql_Result_Login_reflection_;
  delete GameSkillActionInfos::default_instance_;
  delete GameSkillActionInfos_reflection_;
  delete GameShopAvatarInfo::default_instance_;
  delete GameShopAvatarInfo_reflection_;
  delete reward_info::default_instance_;
  delete reward_info_reflection_;
  delete BattleHeroAttribute::default_instance_;
  delete BattleHeroAttribute_reflection_;
  delete BattleHeroData::default_instance_;
  delete BattleHeroData_reflection_;
  delete BattleHeroGroup::default_instance_;
  delete BattleHeroGroup_reflection_;
  delete BattleFightData::default_instance_;
  delete BattleFightData_reflection_;
  delete BattleData::default_instance_;
  delete BattleData_reflection_;
  delete BattleEventData::default_instance_;
  delete BattleEventData_reflection_;
  delete proto_BattleEvent::default_instance_;
  delete proto_BattleEvent_reflection_;
  delete BattleLog::default_instance_;
  delete BattleLog_reflection_;
  delete BattleResultData::default_instance_;
  delete BattleResultData_reflection_;
  delete FindWayPath::default_instance_;
  delete FindWayPath_reflection_;
  delete FindWayInfo::default_instance_;
  delete FindWayInfo_reflection_;
  delete FindWayData::default_instance_;
  delete FindWayData_reflection_;
}

void protobuf_AddDesc_Common_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_EnumDef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Common.proto\032\rEnumDef.proto\"\322\001\n\016univer"
    "sal_data\022\013\n\003key\030\001 \001(\003\022\014\n\004type\030\002 \001(\014\022\014\n\004n"
    "ame\030\003 \001(\014\022\014\n\004code\030\004 \001(\005\022\t\n\001b\030\n \003(\010\022\t\n\001f\030"
    "\013 \003(\002\022\t\n\001d\030\014 \003(\001\022\t\n\001e\030\r \003(\021\022\013\n\003i32\030\016 \003(\021"
    "\022\013\n\003i64\030\017 \003(\022\022\013\n\003u32\030\020 \003(\r\022\013\n\003u64\030\021 \003(\004\022"
    "\013\n\003str\030\022 \003(\014\022\034\n\003sub\030d \003(\0132\017.universal_da"
    "ta\"2\n\013item_config\022\017\n\007item_id\030\001 \002(\r\022\022\n\nit"
    "em_count\030\002 \002(\r\"\207\001\n\020Sql_Result_Login\022\n\n\002i"
    "d\030\001 \002(\003\022\020\n\010username\030\002 \002(\014\022\020\n\010password\030\003 "
    "\002(\014\022\022\n\ncreatetime\030\004 \002(\003\022\021\n\tlogintime\030\005 \002"
    "(\003\022\r\n\005phone\030\006 \002(\004\022\r\n\005email\030\007 \002(\003\"U\n\024Game"
    "SkillActionInfos\022\025\n\rres_file_name\030\001 \002(\014\022"
    "\022\n\naction_key\030\002 \002(\021\022\022\n\naction_wav\030\003 \002(\021\""
    "\204\001\n\022GameShopAvatarInfo\0223\n\016face_shop_type"
    "\030\001 \002(\0162\017.FACE_SHOP_TYPE:\nFST_NORMAL\022\023\n\013g"
    "oods_index\030\002 \002(\021\022\017\n\007face_id\030\003 \002(\021\022\023\n\013alr"
    "eady_buy\030\004 \002(\010\"(\n\013reward_info\022\n\n\002id\030\001 \002("
    "\021\022\r\n\005count\030\002 \002(\021\"x\n\023BattleHeroAttribute\022"
    "\016\n\006max_hp\030\001 \002(\021\022\013\n\003atk\030\002 \002(\021\022\013\n\003def\030\003 \002("
    "\021\022\r\n\005speed\030\004 \002(\021\022\014\n\004crit\030\005 \002(\021\022\r\n\005block\030"
    "\006 \002(\021\022\013\n\003act\030\007 \002(\021\"i\n\016BattleHeroData\022\r\n\005"
    "level\030\001 \002(\021\022\014\n\004name\030\002 \002(\014\022\020\n\010position\030\003 "
    "\002(\021\022(\n\nfight_attr\030\004 \002(\0132\024.BattleHeroAttr"
    "ibute\"8\n\017BattleHeroGroup\022%\n\014list_players"
    "\030\001 \003(\0132\017.BattleHeroData\"8\n\017BattleFightDa"
    "ta\022%\n\013list_groups\030\001 \003(\0132\020.BattleHeroGrou"
    "p\"T\n\nBattleData\022\"\n\010attacker\030\001 \002(\0132\020.Batt"
    "leFightData\022\"\n\010defender\030\002 \002(\0132\020.BattleFi"
    "ghtData\"3\n\017BattleEventData\022\020\n\010position\030\001"
    " \001(\021\022\016\n\006box_id\030\002 \001(\021\"\263\001\n\021proto_BattleEve"
    "nt\0224\n\010log_type\030\001 \002(\0162\022.E_BATTLE_LOG_TYPE"
    ":\016LOGT_USER_CARD\0225\n\tcamp_type\030\002 \002(\0162\023.E_"
    "BATTLE_CAMP_TYPE:\rCAMP_TYPE_OWN\022\021\n\ttime_"
    "tick\030\003 \002(\002\022\036\n\004data\030\004 \001(\0132\020.BattleEventDa"
    "ta\"\235\001\n\tBattleLog\022,\n\013battle_type\030\001 \002(\0162\016."
    "E_BATTLE_TYPE:\007EBT_PVE\022\023\n\013random_seed\030\002 "
    "\002(\021\022\022\n\nchapter_id\030\003 \001(\021\022\020\n\010level_id\030\004 \001("
    "\021\022\'\n\013list_events\030\005 \003(\0132\022.proto_BattleEve"
    "nt\"l\n\020BattleResultData\0223\n\006result\030\001 \002(\0162\025"
    ".E_BATTLE_RESULT_TYPE:\014EBRT_DOGFULL\022\023\n\013l"
    "ist_atk_hp\030\002 \003(\021\022\016\n\006def_hp\030\003 \002(\021\"\'\n\013Find"
    "WayPath\022\013\n\003tar\030\001 \002(\r\022\013\n\003pos\030\002 \003(\r\"6\n\013Fin"
    "dWayInfo\022\013\n\003src\030\001 \002(\r\022\032\n\004path\030\002 \003(\0132\014.Fi"
    "ndWayPath\")\n\013FindWayData\022\032\n\004data\030\001 \003(\0132\014"
    ".FindWayInfo", 1772);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Common.proto", &protobuf_RegisterTypes);
  universal_data::default_instance_ = new universal_data();
  item_config::default_instance_ = new item_config();
  Sql_Result_Login::default_instance_ = new Sql_Result_Login();
  GameSkillActionInfos::default_instance_ = new GameSkillActionInfos();
  GameShopAvatarInfo::default_instance_ = new GameShopAvatarInfo();
  reward_info::default_instance_ = new reward_info();
  BattleHeroAttribute::default_instance_ = new BattleHeroAttribute();
  BattleHeroData::default_instance_ = new BattleHeroData();
  BattleHeroGroup::default_instance_ = new BattleHeroGroup();
  BattleFightData::default_instance_ = new BattleFightData();
  BattleData::default_instance_ = new BattleData();
  BattleEventData::default_instance_ = new BattleEventData();
  proto_BattleEvent::default_instance_ = new proto_BattleEvent();
  BattleLog::default_instance_ = new BattleLog();
  BattleResultData::default_instance_ = new BattleResultData();
  FindWayPath::default_instance_ = new FindWayPath();
  FindWayInfo::default_instance_ = new FindWayInfo();
  FindWayData::default_instance_ = new FindWayData();
  universal_data::default_instance_->InitAsDefaultInstance();
  item_config::default_instance_->InitAsDefaultInstance();
  Sql_Result_Login::default_instance_->InitAsDefaultInstance();
  GameSkillActionInfos::default_instance_->InitAsDefaultInstance();
  GameShopAvatarInfo::default_instance_->InitAsDefaultInstance();
  reward_info::default_instance_->InitAsDefaultInstance();
  BattleHeroAttribute::default_instance_->InitAsDefaultInstance();
  BattleHeroData::default_instance_->InitAsDefaultInstance();
  BattleHeroGroup::default_instance_->InitAsDefaultInstance();
  BattleFightData::default_instance_->InitAsDefaultInstance();
  BattleData::default_instance_->InitAsDefaultInstance();
  BattleEventData::default_instance_->InitAsDefaultInstance();
  proto_BattleEvent::default_instance_->InitAsDefaultInstance();
  BattleLog::default_instance_->InitAsDefaultInstance();
  BattleResultData::default_instance_->InitAsDefaultInstance();
  FindWayPath::default_instance_->InitAsDefaultInstance();
  FindWayInfo::default_instance_->InitAsDefaultInstance();
  FindWayData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Common_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Common_2eproto {
  StaticDescriptorInitializer_Common_2eproto() {
    protobuf_AddDesc_Common_2eproto();
  }
} static_descriptor_initializer_Common_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int universal_data::kKeyFieldNumber;
const int universal_data::kTypeFieldNumber;
const int universal_data::kNameFieldNumber;
const int universal_data::kCodeFieldNumber;
const int universal_data::kBFieldNumber;
const int universal_data::kFFieldNumber;
const int universal_data::kDFieldNumber;
const int universal_data::kEFieldNumber;
const int universal_data::kI32FieldNumber;
const int universal_data::kI64FieldNumber;
const int universal_data::kU32FieldNumber;
const int universal_data::kU64FieldNumber;
const int universal_data::kStrFieldNumber;
const int universal_data::kSubFieldNumber;
#endif  // !_MSC_VER

universal_data::universal_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void universal_data::InitAsDefaultInstance() {
}

universal_data::universal_data(const universal_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void universal_data::SharedCtor() {
  _cached_size_ = 0;
  key_ = GOOGLE_LONGLONG(0);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

universal_data::~universal_data() {
  SharedDtor();
}

void universal_data::SharedDtor() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void universal_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* universal_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return universal_data_descriptor_;
}

const universal_data& universal_data::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Common_2eproto();
  return *default_instance_;
}

universal_data* universal_data::default_instance_ = nullptr;

universal_data* universal_data::New() const {
  return new universal_data;
}

void universal_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = GOOGLE_LONGLONG(0);
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    code_ = 0;
  }
  b_.Clear();
  f_.Clear();
  d_.Clear();
  e_.Clear();
  i32_.Clear();
  i64_.Clear();
  u32_.Clear();
  u64_.Clear();
  str_.Clear();
  sub_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool universal_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // optional bytes type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_code;
        break;
      }

      // optional int32 code = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_b;
        break;
      }

      // repeated bool b = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 80, input, this->mutable_b())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_b())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_b;
        if (input->ExpectTag(93)) goto parse_f;
        break;
      }

      // repeated float f = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_f:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 93, input, this->mutable_f())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_f())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_f;
        if (input->ExpectTag(97)) goto parse_d;
        break;
      }

      // repeated double d = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_d:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 97, input, this->mutable_d())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_d())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_d;
        if (input->ExpectTag(104)) goto parse_e;
        break;
      }

      // repeated sint32 e = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 104, input, this->mutable_e())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_e())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_e;
        if (input->ExpectTag(112)) goto parse_i32;
        break;
      }

      // repeated sint32 i32 = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_i32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 112, input, this->mutable_i32())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_i32())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_i32;
        if (input->ExpectTag(120)) goto parse_i64;
        break;
      }

      // repeated sint64 i64 = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_i64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 120, input, this->mutable_i64())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_i64())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_i64;
        if (input->ExpectTag(128)) goto parse_u32;
        break;
      }

      // repeated uint32 u32 = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_u32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 128, input, this->mutable_u32())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_u32())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_u32;
        if (input->ExpectTag(136)) goto parse_u64;
        break;
      }

      // repeated uint64 u64 = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_u64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 136, input, this->mutable_u64())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_u64())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_u64;
        if (input->ExpectTag(146)) goto parse_str;
        break;
      }

      // repeated bytes str = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_str()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_str;
        if (input->ExpectTag(802)) goto parse_sub;
        break;
      }

      // repeated .universal_data sub = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sub:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sub()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_sub;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void universal_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->key(), output);
  }

  // optional bytes type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->type(), output);
  }

  // optional bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }

  // optional int32 code = 4;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->code(), output);
  }

  // repeated bool b = 10;
  for (int i = 0; i < this->b_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      10, this->b(i), output);
  }

  // repeated float f = 11;
  for (int i = 0; i < this->f_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      11, this->f(i), output);
  }

  // repeated double d = 12;
  for (int i = 0; i < this->d_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      12, this->d(i), output);
  }

  // repeated sint32 e = 13;
  for (int i = 0; i < this->e_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      13, this->e(i), output);
  }

  // repeated sint32 i32 = 14;
  for (int i = 0; i < this->i32_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      14, this->i32(i), output);
  }

  // repeated sint64 i64 = 15;
  for (int i = 0; i < this->i64_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(
      15, this->i64(i), output);
  }

  // repeated uint32 u32 = 16;
  for (int i = 0; i < this->u32_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      16, this->u32(i), output);
  }

  // repeated uint64 u64 = 17;
  for (int i = 0; i < this->u64_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      17, this->u64(i), output);
  }

  // repeated bytes str = 18;
  for (int i = 0; i < this->str_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      18, this->str(i), output);
  }

  // repeated .universal_data sub = 100;
  for (int i = 0; i < this->sub_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->sub(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* universal_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->key(), target);
  }

  // optional bytes type = 2;
  if (has_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->type(), target);
  }

  // optional bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // optional int32 code = 4;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->code(), target);
  }

  // repeated bool b = 10;
  for (int i = 0; i < this->b_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(10, this->b(i), target);
  }

  // repeated float f = 11;
  for (int i = 0; i < this->f_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(11, this->f(i), target);
  }

  // repeated double d = 12;
  for (int i = 0; i < this->d_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(12, this->d(i), target);
  }

  // repeated sint32 e = 13;
  for (int i = 0; i < this->e_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32ToArray(13, this->e(i), target);
  }

  // repeated sint32 i32 = 14;
  for (int i = 0; i < this->i32_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32ToArray(14, this->i32(i), target);
  }

  // repeated sint64 i64 = 15;
  for (int i = 0; i < this->i64_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64ToArray(15, this->i64(i), target);
  }

  // repeated uint32 u32 = 16;
  for (int i = 0; i < this->u32_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(16, this->u32(i), target);
  }

  // repeated uint64 u64 = 17;
  for (int i = 0; i < this->u64_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(17, this->u64(i), target);
  }

  // repeated bytes str = 18;
  for (int i = 0; i < this->str_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(18, this->str(i), target);
  }

  // repeated .universal_data sub = 100;
  for (int i = 0; i < this->sub_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->sub(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int universal_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->key());
    }

    // optional bytes type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->type());
    }

    // optional bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 code = 4;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

  }
  // repeated bool b = 10;
  {
    int data_size = 0;
    data_size = 1 * this->b_size();
    total_size += 1 * this->b_size() + data_size;
  }

  // repeated float f = 11;
  {
    int data_size = 0;
    data_size = 4 * this->f_size();
    total_size += 1 * this->f_size() + data_size;
  }

  // repeated double d = 12;
  {
    int data_size = 0;
    data_size = 8 * this->d_size();
    total_size += 1 * this->d_size() + data_size;
  }

  // repeated sint32 e = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->e_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->e(i));
    }
    total_size += 1 * this->e_size() + data_size;
  }

  // repeated sint32 i32 = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->i32_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->i32(i));
    }
    total_size += 1 * this->i32_size() + data_size;
  }

  // repeated sint64 i64 = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->i64_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->i64(i));
    }
    total_size += 1 * this->i64_size() + data_size;
  }

  // repeated uint32 u32 = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->u32_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->u32(i));
    }
    total_size += 2 * this->u32_size() + data_size;
  }

  // repeated uint64 u64 = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->u64_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->u64(i));
    }
    total_size += 2 * this->u64_size() + data_size;
  }

  // repeated bytes str = 18;
  total_size += 2 * this->str_size();
  for (int i = 0; i < this->str_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->str(i));
  }

  // repeated .universal_data sub = 100;
  total_size += 2 * this->sub_size();
  for (int i = 0; i < this->sub_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sub(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void universal_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const universal_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const universal_data*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void universal_data::MergeFrom(const universal_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  b_.MergeFrom(from.b_);
  f_.MergeFrom(from.f_);
  d_.MergeFrom(from.d_);
  e_.MergeFrom(from.e_);
  i32_.MergeFrom(from.i32_);
  i64_.MergeFrom(from.i64_);
  u32_.MergeFrom(from.u32_);
  u64_.MergeFrom(from.u64_);
  str_.MergeFrom(from.str_);
  sub_.MergeFrom(from.sub_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void universal_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void universal_data::CopyFrom(const universal_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool universal_data::IsInitialized() const {

  return true;
}

void universal_data::Swap(universal_data* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(code_, other->code_);
    b_.Swap(&other->b_);
    f_.Swap(&other->f_);
    d_.Swap(&other->d_);
    e_.Swap(&other->e_);
    i32_.Swap(&other->i32_);
    i64_.Swap(&other->i64_);
    u32_.Swap(&other->u32_);
    u64_.Swap(&other->u64_);
    str_.Swap(&other->str_);
    sub_.Swap(&other->sub_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata universal_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = universal_data_descriptor_;
  metadata.reflection = universal_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int item_config::kItemIdFieldNumber;
const int item_config::kItemCountFieldNumber;
#endif  // !_MSC_VER

item_config::item_config()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void item_config::InitAsDefaultInstance() {
}

item_config::item_config(const item_config& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void item_config::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0u;
  item_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

item_config::~item_config() {
  SharedDtor();
}

void item_config::SharedDtor() {
  if (this != default_instance_) {
  }
}

void item_config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* item_config::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return item_config_descriptor_;
}

const item_config& item_config::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Common_2eproto();
  return *default_instance_;
}

item_config* item_config::default_instance_ = nullptr;

item_config* item_config::New() const {
  return new item_config;
}

void item_config::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = 0u;
    item_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool item_config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_count;
        break;
      }

      // required uint32 item_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void item_config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_id(), output);
  }

  // required uint32 item_count = 2;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* item_config::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_id(), target);
  }

  // required uint32 item_count = 2;
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int item_config::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

    // required uint32 item_count = 2;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void item_config::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const item_config* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const item_config*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void item_config::MergeFrom(const item_config& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void item_config::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void item_config::CopyFrom(const item_config& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool item_config::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void item_config::Swap(item_config* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(item_count_, other->item_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata item_config::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = item_config_descriptor_;
  metadata.reflection = item_config_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sql_Result_Login::kIdFieldNumber;
const int Sql_Result_Login::kUsernameFieldNumber;
const int Sql_Result_Login::kPasswordFieldNumber;
const int Sql_Result_Login::kCreatetimeFieldNumber;
const int Sql_Result_Login::kLogintimeFieldNumber;
const int Sql_Result_Login::kPhoneFieldNumber;
const int Sql_Result_Login::kEmailFieldNumber;
#endif  // !_MSC_VER

Sql_Result_Login::Sql_Result_Login()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sql_Result_Login::InitAsDefaultInstance() {
}

Sql_Result_Login::Sql_Result_Login(const Sql_Result_Login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sql_Result_Login::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  createtime_ = GOOGLE_LONGLONG(0);
  logintime_ = GOOGLE_LONGLONG(0);
  phone_ = GOOGLE_ULONGLONG(0);
  email_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sql_Result_Login::~Sql_Result_Login() {
  SharedDtor();
}

void Sql_Result_Login::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void Sql_Result_Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sql_Result_Login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sql_Result_Login_descriptor_;
}

const Sql_Result_Login& Sql_Result_Login::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Common_2eproto();
  return *default_instance_;
}

Sql_Result_Login* Sql_Result_Login::default_instance_ = nullptr;

Sql_Result_Login* Sql_Result_Login::New() const {
  return new Sql_Result_Login;
}

void Sql_Result_Login::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    createtime_ = GOOGLE_LONGLONG(0);
    logintime_ = GOOGLE_LONGLONG(0);
    phone_ = GOOGLE_ULONGLONG(0);
    email_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sql_Result_Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_username;
        break;
      }

      // required bytes username = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_username()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // required bytes password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_password()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_createtime;
        break;
      }

      // required int64 createtime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_logintime;
        break;
      }

      // required int64 logintime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logintime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &logintime_)));
          set_has_logintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_phone;
        break;
      }

      // required uint64 phone = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &phone_)));
          set_has_phone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_email;
        break;
      }

      // required int64 email = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_email:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &email_)));
          set_has_email();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sql_Result_Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required bytes username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->username(), output);
  }

  // required bytes password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->password(), output);
  }

  // required int64 createtime = 4;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->createtime(), output);
  }

  // required int64 logintime = 5;
  if (has_logintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->logintime(), output);
  }

  // required uint64 phone = 6;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->phone(), output);
  }

  // required int64 email = 7;
  if (has_email()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->email(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sql_Result_Login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // required bytes username = 2;
  if (has_username()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->username(), target);
  }

  // required bytes password = 3;
  if (has_password()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->password(), target);
  }

  // required int64 createtime = 4;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->createtime(), target);
  }

  // required int64 logintime = 5;
  if (has_logintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->logintime(), target);
  }

  // required uint64 phone = 6;
  if (has_phone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->phone(), target);
  }

  // required int64 email = 7;
  if (has_email()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->email(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sql_Result_Login::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // required bytes username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->username());
    }

    // required bytes password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->password());
    }

    // required int64 createtime = 4;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required int64 logintime = 5;
    if (has_logintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->logintime());
    }

    // required uint64 phone = 6;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->phone());
    }

    // required int64 email = 7;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->email());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sql_Result_Login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sql_Result_Login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sql_Result_Login*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sql_Result_Login::MergeFrom(const Sql_Result_Login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_logintime()) {
      set_logintime(from.logintime());
    }
    if (from.has_phone()) {
      set_phone(from.phone());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sql_Result_Login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sql_Result_Login::CopyFrom(const Sql_Result_Login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sql_Result_Login::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void Sql_Result_Login::Swap(Sql_Result_Login* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    std::swap(createtime_, other->createtime_);
    std::swap(logintime_, other->logintime_);
    std::swap(phone_, other->phone_);
    std::swap(email_, other->email_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sql_Result_Login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sql_Result_Login_descriptor_;
  metadata.reflection = Sql_Result_Login_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameSkillActionInfos::kResFileNameFieldNumber;
const int GameSkillActionInfos::kActionKeyFieldNumber;
const int GameSkillActionInfos::kActionWavFieldNumber;
#endif  // !_MSC_VER

GameSkillActionInfos::GameSkillActionInfos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameSkillActionInfos::InitAsDefaultInstance() {
}

GameSkillActionInfos::GameSkillActionInfos(const GameSkillActionInfos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameSkillActionInfos::SharedCtor() {
  _cached_size_ = 0;
  res_file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  action_key_ = 0;
  action_wav_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameSkillActionInfos::~GameSkillActionInfos() {
  SharedDtor();
}

void GameSkillActionInfos::SharedDtor() {
  if (res_file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete res_file_name_;
  }
  if (this != default_instance_) {
  }
}

void GameSkillActionInfos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameSkillActionInfos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameSkillActionInfos_descriptor_;
}

const GameSkillActionInfos& GameSkillActionInfos::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Common_2eproto();
  return *default_instance_;
}

GameSkillActionInfos* GameSkillActionInfos::default_instance_ = nullptr;

GameSkillActionInfos* GameSkillActionInfos::New() const {
  return new GameSkillActionInfos;
}

void GameSkillActionInfos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_res_file_name()) {
      if (res_file_name_ != &::google::protobuf::internal::kEmptyString) {
        res_file_name_->clear();
      }
    }
    action_key_ = 0;
    action_wav_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameSkillActionInfos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes res_file_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_res_file_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_action_key;
        break;
      }

      // required sint32 action_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &action_key_)));
          set_has_action_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_action_wav;
        break;
      }

      // required sint32 action_wav = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_wav:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &action_wav_)));
          set_has_action_wav();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameSkillActionInfos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes res_file_name = 1;
  if (has_res_file_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->res_file_name(), output);
  }

  // required sint32 action_key = 2;
  if (has_action_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->action_key(), output);
  }

  // required sint32 action_wav = 3;
  if (has_action_wav()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->action_wav(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameSkillActionInfos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes res_file_name = 1;
  if (has_res_file_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->res_file_name(), target);
  }

  // required sint32 action_key = 2;
  if (has_action_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->action_key(), target);
  }

  // required sint32 action_wav = 3;
  if (has_action_wav()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->action_wav(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameSkillActionInfos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes res_file_name = 1;
    if (has_res_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->res_file_name());
    }

    // required sint32 action_key = 2;
    if (has_action_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->action_key());
    }

    // required sint32 action_wav = 3;
    if (has_action_wav()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->action_wav());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameSkillActionInfos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameSkillActionInfos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameSkillActionInfos*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameSkillActionInfos::MergeFrom(const GameSkillActionInfos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_res_file_name()) {
      set_res_file_name(from.res_file_name());
    }
    if (from.has_action_key()) {
      set_action_key(from.action_key());
    }
    if (from.has_action_wav()) {
      set_action_wav(from.action_wav());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameSkillActionInfos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameSkillActionInfos::CopyFrom(const GameSkillActionInfos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameSkillActionInfos::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GameSkillActionInfos::Swap(GameSkillActionInfos* other) {
  if (other != this) {
    std::swap(res_file_name_, other->res_file_name_);
    std::swap(action_key_, other->action_key_);
    std::swap(action_wav_, other->action_wav_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameSkillActionInfos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameSkillActionInfos_descriptor_;
  metadata.reflection = GameSkillActionInfos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameShopAvatarInfo::kFaceShopTypeFieldNumber;
const int GameShopAvatarInfo::kGoodsIndexFieldNumber;
const int GameShopAvatarInfo::kFaceIdFieldNumber;
const int GameShopAvatarInfo::kAlreadyBuyFieldNumber;
#endif  // !_MSC_VER

GameShopAvatarInfo::GameShopAvatarInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameShopAvatarInfo::InitAsDefaultInstance() {
}

GameShopAvatarInfo::GameShopAvatarInfo(const GameShopAvatarInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameShopAvatarInfo::SharedCtor() {
  _cached_size_ = 0;
  face_shop_type_ = 1;
  goods_index_ = 0;
  face_id_ = 0;
  already_buy_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameShopAvatarInfo::~GameShopAvatarInfo() {
  SharedDtor();
}

void GameShopAvatarInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameShopAvatarInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameShopAvatarInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameShopAvatarInfo_descriptor_;
}

const GameShopAvatarInfo& GameShopAvatarInfo::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Common_2eproto();
  return *default_instance_;
}

GameShopAvatarInfo* GameShopAvatarInfo::default_instance_ = nullptr;

GameShopAvatarInfo* GameShopAvatarInfo::New() const {
  return new GameShopAvatarInfo;
}

void GameShopAvatarInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    face_shop_type_ = 1;
    goods_index_ = 0;
    face_id_ = 0;
    already_buy_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameShopAvatarInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .FACE_SHOP_TYPE face_shop_type = 1 [default = FST_NORMAL];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::FACE_SHOP_TYPE_IsValid(value)) {
            set_face_shop_type(static_cast< ::FACE_SHOP_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_goods_index;
        break;
      }

      // required sint32 goods_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goods_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &goods_index_)));
          set_has_goods_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_face_id;
        break;
      }

      // required sint32 face_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_face_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &face_id_)));
          set_has_face_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_already_buy;
        break;
      }

      // required bool already_buy = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_already_buy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &already_buy_)));
          set_has_already_buy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameShopAvatarInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .FACE_SHOP_TYPE face_shop_type = 1 [default = FST_NORMAL];
  if (has_face_shop_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->face_shop_type(), output);
  }

  // required sint32 goods_index = 2;
  if (has_goods_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->goods_index(), output);
  }

  // required sint32 face_id = 3;
  if (has_face_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->face_id(), output);
  }

  // required bool already_buy = 4;
  if (has_already_buy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->already_buy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameShopAvatarInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .FACE_SHOP_TYPE face_shop_type = 1 [default = FST_NORMAL];
  if (has_face_shop_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->face_shop_type(), target);
  }

  // required sint32 goods_index = 2;
  if (has_goods_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->goods_index(), target);
  }

  // required sint32 face_id = 3;
  if (has_face_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->face_id(), target);
  }

  // required bool already_buy = 4;
  if (has_already_buy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->already_buy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameShopAvatarInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .FACE_SHOP_TYPE face_shop_type = 1 [default = FST_NORMAL];
    if (has_face_shop_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->face_shop_type());
    }

    // required sint32 goods_index = 2;
    if (has_goods_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->goods_index());
    }

    // required sint32 face_id = 3;
    if (has_face_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->face_id());
    }

    // required bool already_buy = 4;
    if (has_already_buy()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameShopAvatarInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameShopAvatarInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameShopAvatarInfo*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameShopAvatarInfo::MergeFrom(const GameShopAvatarInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_face_shop_type()) {
      set_face_shop_type(from.face_shop_type());
    }
    if (from.has_goods_index()) {
      set_goods_index(from.goods_index());
    }
    if (from.has_face_id()) {
      set_face_id(from.face_id());
    }
    if (from.has_already_buy()) {
      set_already_buy(from.already_buy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameShopAvatarInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameShopAvatarInfo::CopyFrom(const GameShopAvatarInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameShopAvatarInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GameShopAvatarInfo::Swap(GameShopAvatarInfo* other) {
  if (other != this) {
    std::swap(face_shop_type_, other->face_shop_type_);
    std::swap(goods_index_, other->goods_index_);
    std::swap(face_id_, other->face_id_);
    std::swap(already_buy_, other->already_buy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameShopAvatarInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameShopAvatarInfo_descriptor_;
  metadata.reflection = GameShopAvatarInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int reward_info::kIdFieldNumber;
const int reward_info::kCountFieldNumber;
#endif  // !_MSC_VER

reward_info::reward_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void reward_info::InitAsDefaultInstance() {
}

reward_info::reward_info(const reward_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void reward_info::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

reward_info::~reward_info() {
  SharedDtor();
}

void reward_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void reward_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* reward_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return reward_info_descriptor_;
}

const reward_info& reward_info::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Common_2eproto();
  return *default_instance_;
}

reward_info* reward_info::default_instance_ = nullptr;

reward_info* reward_info::New() const {
  return new reward_info;
}

void reward_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool reward_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required sint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void reward_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->id(), output);
  }

  // required sint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* reward_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->id(), target);
  }

  // required sint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int reward_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->id());
    }

    // required sint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void reward_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const reward_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const reward_info*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void reward_info::MergeFrom(const reward_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void reward_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reward_info::CopyFrom(const reward_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reward_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void reward_info::Swap(reward_info* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata reward_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = reward_info_descriptor_;
  metadata.reflection = reward_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleHeroAttribute::kMaxHpFieldNumber;
const int BattleHeroAttribute::kAtkFieldNumber;
const int BattleHeroAttribute::kDefFieldNumber;
const int BattleHeroAttribute::kSpeedFieldNumber;
const int BattleHeroAttribute::kCritFieldNumber;
const int BattleHeroAttribute::kBlockFieldNumber;
const int BattleHeroAttribute::kActFieldNumber;
#endif  // !_MSC_VER

BattleHeroAttribute::BattleHeroAttribute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleHeroAttribute::InitAsDefaultInstance() {
}

BattleHeroAttribute::BattleHeroAttribute(const BattleHeroAttribute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleHeroAttribute::SharedCtor() {
  _cached_size_ = 0;
  max_hp_ = 0;
  atk_ = 0;
  def_ = 0;
  speed_ = 0;
  crit_ = 0;
  block_ = 0;
  act_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleHeroAttribute::~BattleHeroAttribute() {
  SharedDtor();
}

void BattleHeroAttribute::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleHeroAttribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleHeroAttribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleHeroAttribute_descriptor_;
}

const BattleHeroAttribute& BattleHeroAttribute::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Common_2eproto();
  return *default_instance_;
}

BattleHeroAttribute* BattleHeroAttribute::default_instance_ = nullptr;

BattleHeroAttribute* BattleHeroAttribute::New() const {
  return new BattleHeroAttribute;
}

void BattleHeroAttribute::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    max_hp_ = 0;
    atk_ = 0;
    def_ = 0;
    speed_ = 0;
    crit_ = 0;
    block_ = 0;
    act_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleHeroAttribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 max_hp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &max_hp_)));
          set_has_max_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_atk;
        break;
      }

      // required sint32 atk = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &atk_)));
          set_has_atk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_def;
        break;
      }

      // required sint32 def = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_def:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &def_)));
          set_has_def();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_speed;
        break;
      }

      // required sint32 speed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_crit;
        break;
      }

      // required sint32 crit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &crit_)));
          set_has_crit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_block;
        break;
      }

      // required sint32 block = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_block:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &block_)));
          set_has_block();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_act;
        break;
      }

      // required sint32 act = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_act:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &act_)));
          set_has_act();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleHeroAttribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 max_hp = 1;
  if (has_max_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->max_hp(), output);
  }

  // required sint32 atk = 2;
  if (has_atk()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->atk(), output);
  }

  // required sint32 def = 3;
  if (has_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->def(), output);
  }

  // required sint32 speed = 4;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->speed(), output);
  }

  // required sint32 crit = 5;
  if (has_crit()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->crit(), output);
  }

  // required sint32 block = 6;
  if (has_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->block(), output);
  }

  // required sint32 act = 7;
  if (has_act()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->act(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleHeroAttribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 max_hp = 1;
  if (has_max_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->max_hp(), target);
  }

  // required sint32 atk = 2;
  if (has_atk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->atk(), target);
  }

  // required sint32 def = 3;
  if (has_def()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->def(), target);
  }

  // required sint32 speed = 4;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->speed(), target);
  }

  // required sint32 crit = 5;
  if (has_crit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->crit(), target);
  }

  // required sint32 block = 6;
  if (has_block()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->block(), target);
  }

  // required sint32 act = 7;
  if (has_act()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->act(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleHeroAttribute::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 max_hp = 1;
    if (has_max_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->max_hp());
    }

    // required sint32 atk = 2;
    if (has_atk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->atk());
    }

    // required sint32 def = 3;
    if (has_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->def());
    }

    // required sint32 speed = 4;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->speed());
    }

    // required sint32 crit = 5;
    if (has_crit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->crit());
    }

    // required sint32 block = 6;
    if (has_block()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->block());
    }

    // required sint32 act = 7;
    if (has_act()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->act());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleHeroAttribute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleHeroAttribute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleHeroAttribute*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleHeroAttribute::MergeFrom(const BattleHeroAttribute& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_hp()) {
      set_max_hp(from.max_hp());
    }
    if (from.has_atk()) {
      set_atk(from.atk());
    }
    if (from.has_def()) {
      set_def(from.def());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_crit()) {
      set_crit(from.crit());
    }
    if (from.has_block()) {
      set_block(from.block());
    }
    if (from.has_act()) {
      set_act(from.act());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleHeroAttribute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleHeroAttribute::CopyFrom(const BattleHeroAttribute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleHeroAttribute::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void BattleHeroAttribute::Swap(BattleHeroAttribute* other) {
  if (other != this) {
    std::swap(max_hp_, other->max_hp_);
    std::swap(atk_, other->atk_);
    std::swap(def_, other->def_);
    std::swap(speed_, other->speed_);
    std::swap(crit_, other->crit_);
    std::swap(block_, other->block_);
    std::swap(act_, other->act_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleHeroAttribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleHeroAttribute_descriptor_;
  metadata.reflection = BattleHeroAttribute_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleHeroData::kLevelFieldNumber;
const int BattleHeroData::kNameFieldNumber;
const int BattleHeroData::kPositionFieldNumber;
const int BattleHeroData::kFightAttrFieldNumber;
#endif  // !_MSC_VER

BattleHeroData::BattleHeroData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleHeroData::InitAsDefaultInstance() {
  fight_attr_ = const_cast< ::BattleHeroAttribute*>(&::BattleHeroAttribute::default_instance());
}

BattleHeroData::BattleHeroData(const BattleHeroData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleHeroData::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  position_ = 0;
  fight_attr_ = nullptr;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleHeroData::~BattleHeroData() {
  SharedDtor();
}

void BattleHeroData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete fight_attr_;
  }
}

void BattleHeroData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleHeroData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleHeroData_descriptor_;
}

const BattleHeroData& BattleHeroData::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Common_2eproto();
  return *default_instance_;
}

BattleHeroData* BattleHeroData::default_instance_ = nullptr;

BattleHeroData* BattleHeroData::New() const {
  return new BattleHeroData;
}

void BattleHeroData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    position_ = 0;
    if (has_fight_attr()) {
      if (fight_attr_ != nullptr) fight_attr_->::BattleHeroAttribute::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleHeroData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_position;
        break;
      }

      // required sint32 position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_fight_attr;
        break;
      }

      // required .BattleHeroAttribute fight_attr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fight_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fight_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleHeroData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->level(), output);
  }

  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // required sint32 position = 3;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->position(), output);
  }

  // required .BattleHeroAttribute fight_attr = 4;
  if (has_fight_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->fight_attr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleHeroData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->level(), target);
  }

  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // required sint32 position = 3;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->position(), target);
  }

  // required .BattleHeroAttribute fight_attr = 4;
  if (has_fight_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->fight_attr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleHeroData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->level());
    }

    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required sint32 position = 3;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->position());
    }

    // required .BattleHeroAttribute fight_attr = 4;
    if (has_fight_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fight_attr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleHeroData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleHeroData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleHeroData*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleHeroData::MergeFrom(const BattleHeroData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_fight_attr()) {
      mutable_fight_attr()->::BattleHeroAttribute::MergeFrom(from.fight_attr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleHeroData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleHeroData::CopyFrom(const BattleHeroData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleHeroData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_fight_attr()) {
    if (!this->fight_attr().IsInitialized()) return false;
  }
  return true;
}

void BattleHeroData::Swap(BattleHeroData* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(name_, other->name_);
    std::swap(position_, other->position_);
    std::swap(fight_attr_, other->fight_attr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleHeroData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleHeroData_descriptor_;
  metadata.reflection = BattleHeroData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleHeroGroup::kListPlayersFieldNumber;
#endif  // !_MSC_VER

BattleHeroGroup::BattleHeroGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleHeroGroup::InitAsDefaultInstance() {
}

BattleHeroGroup::BattleHeroGroup(const BattleHeroGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleHeroGroup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleHeroGroup::~BattleHeroGroup() {
  SharedDtor();
}

void BattleHeroGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleHeroGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleHeroGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleHeroGroup_descriptor_;
}

const BattleHeroGroup& BattleHeroGroup::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Common_2eproto();
  return *default_instance_;
}

BattleHeroGroup* BattleHeroGroup::default_instance_ = nullptr;

BattleHeroGroup* BattleHeroGroup::New() const {
  return new BattleHeroGroup;
}

void BattleHeroGroup::Clear() {
  list_players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleHeroGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BattleHeroData list_players = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list_players;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleHeroGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .BattleHeroData list_players = 1;
  for (int i = 0; i < this->list_players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list_players(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleHeroGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .BattleHeroData list_players = 1;
  for (int i = 0; i < this->list_players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list_players(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleHeroGroup::ByteSize() const {
  int total_size = 0;

  // repeated .BattleHeroData list_players = 1;
  total_size += 1 * this->list_players_size();
  for (int i = 0; i < this->list_players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleHeroGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleHeroGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleHeroGroup*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleHeroGroup::MergeFrom(const BattleHeroGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_players_.MergeFrom(from.list_players_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleHeroGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleHeroGroup::CopyFrom(const BattleHeroGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleHeroGroup::IsInitialized() const {

  for (int i = 0; i < list_players_size(); i++) {
    if (!this->list_players(i).IsInitialized()) return false;
  }
  return true;
}

void BattleHeroGroup::Swap(BattleHeroGroup* other) {
  if (other != this) {
    list_players_.Swap(&other->list_players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleHeroGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleHeroGroup_descriptor_;
  metadata.reflection = BattleHeroGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleFightData::kListGroupsFieldNumber;
#endif  // !_MSC_VER

BattleFightData::BattleFightData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleFightData::InitAsDefaultInstance() {
}

BattleFightData::BattleFightData(const BattleFightData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleFightData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleFightData::~BattleFightData() {
  SharedDtor();
}

void BattleFightData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleFightData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleFightData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleFightData_descriptor_;
}

const BattleFightData& BattleFightData::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Common_2eproto();
  return *default_instance_;
}

BattleFightData* BattleFightData::default_instance_ = nullptr;

BattleFightData* BattleFightData::New() const {
  return new BattleFightData;
}

void BattleFightData::Clear() {
  list_groups_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleFightData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BattleHeroGroup list_groups = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_groups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_groups()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list_groups;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleFightData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .BattleHeroGroup list_groups = 1;
  for (int i = 0; i < this->list_groups_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list_groups(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleFightData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .BattleHeroGroup list_groups = 1;
  for (int i = 0; i < this->list_groups_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list_groups(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleFightData::ByteSize() const {
  int total_size = 0;

  // repeated .BattleHeroGroup list_groups = 1;
  total_size += 1 * this->list_groups_size();
  for (int i = 0; i < this->list_groups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_groups(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleFightData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleFightData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleFightData*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleFightData::MergeFrom(const BattleFightData& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_groups_.MergeFrom(from.list_groups_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleFightData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleFightData::CopyFrom(const BattleFightData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleFightData::IsInitialized() const {

  for (int i = 0; i < list_groups_size(); i++) {
    if (!this->list_groups(i).IsInitialized()) return false;
  }
  return true;
}

void BattleFightData::Swap(BattleFightData* other) {
  if (other != this) {
    list_groups_.Swap(&other->list_groups_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleFightData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleFightData_descriptor_;
  metadata.reflection = BattleFightData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleData::kAttackerFieldNumber;
const int BattleData::kDefenderFieldNumber;
#endif  // !_MSC_VER

BattleData::BattleData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleData::InitAsDefaultInstance() {
  attacker_ = const_cast< ::BattleFightData*>(&::BattleFightData::default_instance());
  defender_ = const_cast< ::BattleFightData*>(&::BattleFightData::default_instance());
}

BattleData::BattleData(const BattleData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleData::SharedCtor() {
  _cached_size_ = 0;
  attacker_ = nullptr;
  defender_ = nullptr;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleData::~BattleData() {
  SharedDtor();
}

void BattleData::SharedDtor() {
  if (this != default_instance_) {
    delete attacker_;
    delete defender_;
  }
}

void BattleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleData_descriptor_;
}

const BattleData& BattleData::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Common_2eproto();
  return *default_instance_;
}

BattleData* BattleData::default_instance_ = nullptr;

BattleData* BattleData::New() const {
  return new BattleData;
}

void BattleData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_attacker()) {
      if (attacker_ != nullptr) attacker_->::BattleFightData::Clear();
    }
    if (has_defender()) {
      if (defender_ != nullptr) defender_->::BattleFightData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .BattleFightData attacker = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attacker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_defender;
        break;
      }

      // required .BattleFightData defender = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defender()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .BattleFightData attacker = 1;
  if (has_attacker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attacker(), output);
  }

  // required .BattleFightData defender = 2;
  if (has_defender()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->defender(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .BattleFightData attacker = 1;
  if (has_attacker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attacker(), target);
  }

  // required .BattleFightData defender = 2;
  if (has_defender()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->defender(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .BattleFightData attacker = 1;
    if (has_attacker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attacker());
    }

    // required .BattleFightData defender = 2;
    if (has_defender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->defender());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleData*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleData::MergeFrom(const BattleData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attacker()) {
      mutable_attacker()->::BattleFightData::MergeFrom(from.attacker());
    }
    if (from.has_defender()) {
      mutable_defender()->::BattleFightData::MergeFrom(from.defender());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleData::CopyFrom(const BattleData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_attacker()) {
    if (!this->attacker().IsInitialized()) return false;
  }
  if (has_defender()) {
    if (!this->defender().IsInitialized()) return false;
  }
  return true;
}

void BattleData::Swap(BattleData* other) {
  if (other != this) {
    std::swap(attacker_, other->attacker_);
    std::swap(defender_, other->defender_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleData_descriptor_;
  metadata.reflection = BattleData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleEventData::kPositionFieldNumber;
const int BattleEventData::kBoxIdFieldNumber;
#endif  // !_MSC_VER

BattleEventData::BattleEventData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleEventData::InitAsDefaultInstance() {
}

BattleEventData::BattleEventData(const BattleEventData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleEventData::SharedCtor() {
  _cached_size_ = 0;
  position_ = 0;
  box_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleEventData::~BattleEventData() {
  SharedDtor();
}

void BattleEventData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleEventData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleEventData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleEventData_descriptor_;
}

const BattleEventData& BattleEventData::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Common_2eproto();
  return *default_instance_;
}

BattleEventData* BattleEventData::default_instance_ = nullptr;

BattleEventData* BattleEventData::New() const {
  return new BattleEventData;
}

void BattleEventData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    position_ = 0;
    box_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleEventData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 position = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_box_id;
        break;
      }

      // optional sint32 box_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_box_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &box_id_)));
          set_has_box_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleEventData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->position(), output);
  }

  // optional sint32 box_id = 2;
  if (has_box_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->box_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleEventData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->position(), target);
  }

  // optional sint32 box_id = 2;
  if (has_box_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->box_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleEventData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->position());
    }

    // optional sint32 box_id = 2;
    if (has_box_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->box_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleEventData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleEventData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleEventData*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleEventData::MergeFrom(const BattleEventData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_box_id()) {
      set_box_id(from.box_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleEventData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleEventData::CopyFrom(const BattleEventData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleEventData::IsInitialized() const {

  return true;
}

void BattleEventData::Swap(BattleEventData* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    std::swap(box_id_, other->box_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleEventData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleEventData_descriptor_;
  metadata.reflection = BattleEventData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int proto_BattleEvent::kLogTypeFieldNumber;
const int proto_BattleEvent::kCampTypeFieldNumber;
const int proto_BattleEvent::kTimeTickFieldNumber;
const int proto_BattleEvent::kDataFieldNumber;
#endif  // !_MSC_VER

proto_BattleEvent::proto_BattleEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void proto_BattleEvent::InitAsDefaultInstance() {
  data_ = const_cast< ::BattleEventData*>(&::BattleEventData::default_instance());
}

proto_BattleEvent::proto_BattleEvent(const proto_BattleEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void proto_BattleEvent::SharedCtor() {
  _cached_size_ = 0;
  log_type_ = 1;
  camp_type_ = 1;
  time_tick_ = 0;
  data_ = nullptr;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

proto_BattleEvent::~proto_BattleEvent() {
  SharedDtor();
}

void proto_BattleEvent::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void proto_BattleEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* proto_BattleEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return proto_BattleEvent_descriptor_;
}

const proto_BattleEvent& proto_BattleEvent::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Common_2eproto();
  return *default_instance_;
}

proto_BattleEvent* proto_BattleEvent::default_instance_ = nullptr;

proto_BattleEvent* proto_BattleEvent::New() const {
  return new proto_BattleEvent;
}

void proto_BattleEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    log_type_ = 1;
    camp_type_ = 1;
    time_tick_ = 0;
    if (has_data()) {
      if (data_ != nullptr) data_->::BattleEventData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool proto_BattleEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .E_BATTLE_LOG_TYPE log_type = 1 [default = LOGT_USER_CARD];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::E_BATTLE_LOG_TYPE_IsValid(value)) {
            set_log_type(static_cast< ::E_BATTLE_LOG_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_camp_type;
        break;
      }

      // required .E_BATTLE_CAMP_TYPE camp_type = 2 [default = CAMP_TYPE_OWN];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_camp_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::E_BATTLE_CAMP_TYPE_IsValid(value)) {
            set_camp_type(static_cast< ::E_BATTLE_CAMP_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_time_tick;
        break;
      }

      // required float time_tick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_time_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_tick_)));
          set_has_time_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional .BattleEventData data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void proto_BattleEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .E_BATTLE_LOG_TYPE log_type = 1 [default = LOGT_USER_CARD];
  if (has_log_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->log_type(), output);
  }

  // required .E_BATTLE_CAMP_TYPE camp_type = 2 [default = CAMP_TYPE_OWN];
  if (has_camp_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->camp_type(), output);
  }

  // required float time_tick = 3;
  if (has_time_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->time_tick(), output);
  }

  // optional .BattleEventData data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* proto_BattleEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .E_BATTLE_LOG_TYPE log_type = 1 [default = LOGT_USER_CARD];
  if (has_log_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->log_type(), target);
  }

  // required .E_BATTLE_CAMP_TYPE camp_type = 2 [default = CAMP_TYPE_OWN];
  if (has_camp_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->camp_type(), target);
  }

  // required float time_tick = 3;
  if (has_time_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->time_tick(), target);
  }

  // optional .BattleEventData data = 4;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int proto_BattleEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .E_BATTLE_LOG_TYPE log_type = 1 [default = LOGT_USER_CARD];
    if (has_log_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->log_type());
    }

    // required .E_BATTLE_CAMP_TYPE camp_type = 2 [default = CAMP_TYPE_OWN];
    if (has_camp_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->camp_type());
    }

    // required float time_tick = 3;
    if (has_time_tick()) {
      total_size += 1 + 4;
    }

    // optional .BattleEventData data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void proto_BattleEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const proto_BattleEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const proto_BattleEvent*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void proto_BattleEvent::MergeFrom(const proto_BattleEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_log_type()) {
      set_log_type(from.log_type());
    }
    if (from.has_camp_type()) {
      set_camp_type(from.camp_type());
    }
    if (from.has_time_tick()) {
      set_time_tick(from.time_tick());
    }
    if (from.has_data()) {
      mutable_data()->::BattleEventData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void proto_BattleEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void proto_BattleEvent::CopyFrom(const proto_BattleEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proto_BattleEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void proto_BattleEvent::Swap(proto_BattleEvent* other) {
  if (other != this) {
    std::swap(log_type_, other->log_type_);
    std::swap(camp_type_, other->camp_type_);
    std::swap(time_tick_, other->time_tick_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata proto_BattleEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = proto_BattleEvent_descriptor_;
  metadata.reflection = proto_BattleEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleLog::kBattleTypeFieldNumber;
const int BattleLog::kRandomSeedFieldNumber;
const int BattleLog::kChapterIdFieldNumber;
const int BattleLog::kLevelIdFieldNumber;
const int BattleLog::kListEventsFieldNumber;
#endif  // !_MSC_VER

BattleLog::BattleLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleLog::InitAsDefaultInstance() {
}

BattleLog::BattleLog(const BattleLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleLog::SharedCtor() {
  _cached_size_ = 0;
  battle_type_ = 1;
  random_seed_ = 0;
  chapter_id_ = 0;
  level_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleLog::~BattleLog() {
  SharedDtor();
}

void BattleLog::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleLog_descriptor_;
}

const BattleLog& BattleLog::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Common_2eproto();
  return *default_instance_;
}

BattleLog* BattleLog::default_instance_ = nullptr;

BattleLog* BattleLog::New() const {
  return new BattleLog;
}

void BattleLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battle_type_ = 1;
    random_seed_ = 0;
    chapter_id_ = 0;
    level_id_ = 0;
  }
  list_events_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .E_BATTLE_TYPE battle_type = 1 [default = EBT_PVE];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::E_BATTLE_TYPE_IsValid(value)) {
            set_battle_type(static_cast< ::E_BATTLE_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_random_seed;
        break;
      }

      // required sint32 random_seed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_random_seed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &random_seed_)));
          set_has_random_seed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_chapter_id;
        break;
      }

      // optional sint32 chapter_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chapter_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &chapter_id_)));
          set_has_chapter_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level_id;
        break;
      }

      // optional sint32 level_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &level_id_)));
          set_has_level_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_list_events;
        break;
      }

      // repeated .proto_BattleEvent list_events = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_events()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_list_events;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .E_BATTLE_TYPE battle_type = 1 [default = EBT_PVE];
  if (has_battle_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->battle_type(), output);
  }

  // required sint32 random_seed = 2;
  if (has_random_seed()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->random_seed(), output);
  }

  // optional sint32 chapter_id = 3;
  if (has_chapter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->chapter_id(), output);
  }

  // optional sint32 level_id = 4;
  if (has_level_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->level_id(), output);
  }

  // repeated .proto_BattleEvent list_events = 5;
  for (int i = 0; i < this->list_events_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->list_events(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .E_BATTLE_TYPE battle_type = 1 [default = EBT_PVE];
  if (has_battle_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->battle_type(), target);
  }

  // required sint32 random_seed = 2;
  if (has_random_seed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->random_seed(), target);
  }

  // optional sint32 chapter_id = 3;
  if (has_chapter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->chapter_id(), target);
  }

  // optional sint32 level_id = 4;
  if (has_level_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->level_id(), target);
  }

  // repeated .proto_BattleEvent list_events = 5;
  for (int i = 0; i < this->list_events_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->list_events(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .E_BATTLE_TYPE battle_type = 1 [default = EBT_PVE];
    if (has_battle_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->battle_type());
    }

    // required sint32 random_seed = 2;
    if (has_random_seed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->random_seed());
    }

    // optional sint32 chapter_id = 3;
    if (has_chapter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->chapter_id());
    }

    // optional sint32 level_id = 4;
    if (has_level_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->level_id());
    }

  }
  // repeated .proto_BattleEvent list_events = 5;
  total_size += 1 * this->list_events_size();
  for (int i = 0; i < this->list_events_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_events(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleLog*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleLog::MergeFrom(const BattleLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_events_.MergeFrom(from.list_events_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battle_type()) {
      set_battle_type(from.battle_type());
    }
    if (from.has_random_seed()) {
      set_random_seed(from.random_seed());
    }
    if (from.has_chapter_id()) {
      set_chapter_id(from.chapter_id());
    }
    if (from.has_level_id()) {
      set_level_id(from.level_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleLog::CopyFrom(const BattleLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleLog::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < list_events_size(); i++) {
    if (!this->list_events(i).IsInitialized()) return false;
  }
  return true;
}

void BattleLog::Swap(BattleLog* other) {
  if (other != this) {
    std::swap(battle_type_, other->battle_type_);
    std::swap(random_seed_, other->random_seed_);
    std::swap(chapter_id_, other->chapter_id_);
    std::swap(level_id_, other->level_id_);
    list_events_.Swap(&other->list_events_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleLog_descriptor_;
  metadata.reflection = BattleLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleResultData::kResultFieldNumber;
const int BattleResultData::kListAtkHpFieldNumber;
const int BattleResultData::kDefHpFieldNumber;
#endif  // !_MSC_VER

BattleResultData::BattleResultData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleResultData::InitAsDefaultInstance() {
}

BattleResultData::BattleResultData(const BattleResultData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleResultData::SharedCtor() {
  _cached_size_ = 0;
  result_ = 3;
  def_hp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleResultData::~BattleResultData() {
  SharedDtor();
}

void BattleResultData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleResultData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleResultData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleResultData_descriptor_;
}

const BattleResultData& BattleResultData::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Common_2eproto();
  return *default_instance_;
}

BattleResultData* BattleResultData::default_instance_ = nullptr;

BattleResultData* BattleResultData::New() const {
  return new BattleResultData;
}

void BattleResultData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 3;
    def_hp_ = 0;
  }
  list_atk_hp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleResultData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .E_BATTLE_RESULT_TYPE result = 1 [default = EBRT_DOGFULL];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::E_BATTLE_RESULT_TYPE_IsValid(value)) {
            set_result(static_cast< ::E_BATTLE_RESULT_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_list_atk_hp;
        break;
      }

      // repeated sint32 list_atk_hp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_list_atk_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 16, input, this->mutable_list_atk_hp())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_list_atk_hp())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_list_atk_hp;
        if (input->ExpectTag(24)) goto parse_def_hp;
        break;
      }

      // required sint32 def_hp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_def_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &def_hp_)));
          set_has_def_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleResultData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .E_BATTLE_RESULT_TYPE result = 1 [default = EBRT_DOGFULL];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // repeated sint32 list_atk_hp = 2;
  for (int i = 0; i < this->list_atk_hp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      2, this->list_atk_hp(i), output);
  }

  // required sint32 def_hp = 3;
  if (has_def_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->def_hp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleResultData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .E_BATTLE_RESULT_TYPE result = 1 [default = EBRT_DOGFULL];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // repeated sint32 list_atk_hp = 2;
  for (int i = 0; i < this->list_atk_hp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32ToArray(2, this->list_atk_hp(i), target);
  }

  // required sint32 def_hp = 3;
  if (has_def_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->def_hp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleResultData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .E_BATTLE_RESULT_TYPE result = 1 [default = EBRT_DOGFULL];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // required sint32 def_hp = 3;
    if (has_def_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->def_hp());
    }

  }
  // repeated sint32 list_atk_hp = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->list_atk_hp_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->list_atk_hp(i));
    }
    total_size += 1 * this->list_atk_hp_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleResultData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleResultData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleResultData*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleResultData::MergeFrom(const BattleResultData& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_atk_hp_.MergeFrom(from.list_atk_hp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_def_hp()) {
      set_def_hp(from.def_hp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleResultData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleResultData::CopyFrom(const BattleResultData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleResultData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void BattleResultData::Swap(BattleResultData* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    list_atk_hp_.Swap(&other->list_atk_hp_);
    std::swap(def_hp_, other->def_hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleResultData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleResultData_descriptor_;
  metadata.reflection = BattleResultData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FindWayPath::kTarFieldNumber;
const int FindWayPath::kPosFieldNumber;
#endif  // !_MSC_VER

FindWayPath::FindWayPath()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FindWayPath::InitAsDefaultInstance() {
}

FindWayPath::FindWayPath(const FindWayPath& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FindWayPath::SharedCtor() {
  _cached_size_ = 0;
  tar_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FindWayPath::~FindWayPath() {
  SharedDtor();
}

void FindWayPath::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FindWayPath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FindWayPath::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FindWayPath_descriptor_;
}

const FindWayPath& FindWayPath::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Common_2eproto();
  return *default_instance_;
}

FindWayPath* FindWayPath::default_instance_ = nullptr;

FindWayPath* FindWayPath::New() const {
  return new FindWayPath;
}

void FindWayPath::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tar_ = 0u;
  }
  pos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FindWayPath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 tar = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tar_)));
          set_has_tar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // repeated uint32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_pos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_pos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FindWayPath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 tar = 1;
  if (has_tar()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tar(), output);
  }

  // repeated uint32 pos = 2;
  for (int i = 0; i < this->pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->pos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FindWayPath::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 tar = 1;
  if (has_tar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tar(), target);
  }

  // repeated uint32 pos = 2;
  for (int i = 0; i < this->pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->pos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FindWayPath::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 tar = 1;
    if (has_tar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tar());
    }

  }
  // repeated uint32 pos = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->pos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->pos(i));
    }
    total_size += 1 * this->pos_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FindWayPath::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FindWayPath* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FindWayPath*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FindWayPath::MergeFrom(const FindWayPath& from) {
  GOOGLE_CHECK_NE(&from, this);
  pos_.MergeFrom(from.pos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tar()) {
      set_tar(from.tar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FindWayPath::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindWayPath::CopyFrom(const FindWayPath& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindWayPath::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FindWayPath::Swap(FindWayPath* other) {
  if (other != this) {
    std::swap(tar_, other->tar_);
    pos_.Swap(&other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FindWayPath::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FindWayPath_descriptor_;
  metadata.reflection = FindWayPath_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FindWayInfo::kSrcFieldNumber;
const int FindWayInfo::kPathFieldNumber;
#endif  // !_MSC_VER

FindWayInfo::FindWayInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FindWayInfo::InitAsDefaultInstance() {
}

FindWayInfo::FindWayInfo(const FindWayInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FindWayInfo::SharedCtor() {
  _cached_size_ = 0;
  src_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FindWayInfo::~FindWayInfo() {
  SharedDtor();
}

void FindWayInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FindWayInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FindWayInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FindWayInfo_descriptor_;
}

const FindWayInfo& FindWayInfo::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Common_2eproto();
  return *default_instance_;
}

FindWayInfo* FindWayInfo::default_instance_ = nullptr;

FindWayInfo* FindWayInfo::New() const {
  return new FindWayInfo;
}

void FindWayInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    src_ = 0u;
  }
  path_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FindWayInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 src = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_)));
          set_has_src();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // repeated .FindWayPath path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FindWayInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->src(), output);
  }

  // repeated .FindWayPath path = 2;
  for (int i = 0; i < this->path_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->path(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FindWayInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 src = 1;
  if (has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->src(), target);
  }

  // repeated .FindWayPath path = 2;
  for (int i = 0; i < this->path_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->path(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FindWayInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->src());
    }

  }
  // repeated .FindWayPath path = 2;
  total_size += 1 * this->path_size();
  for (int i = 0; i < this->path_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->path(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FindWayInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FindWayInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FindWayInfo*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FindWayInfo::MergeFrom(const FindWayInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  path_.MergeFrom(from.path_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      set_src(from.src());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FindWayInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindWayInfo::CopyFrom(const FindWayInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindWayInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < path_size(); i++) {
    if (!this->path(i).IsInitialized()) return false;
  }
  return true;
}

void FindWayInfo::Swap(FindWayInfo* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    path_.Swap(&other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FindWayInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FindWayInfo_descriptor_;
  metadata.reflection = FindWayInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FindWayData::kDataFieldNumber;
#endif  // !_MSC_VER

FindWayData::FindWayData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FindWayData::InitAsDefaultInstance() {
}

FindWayData::FindWayData(const FindWayData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FindWayData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FindWayData::~FindWayData() {
  SharedDtor();
}

void FindWayData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FindWayData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FindWayData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FindWayData_descriptor_;
}

const FindWayData& FindWayData::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Common_2eproto();
  return *default_instance_;
}

FindWayData* FindWayData::default_instance_ = nullptr;

FindWayData* FindWayData::New() const {
  return new FindWayData;
}

void FindWayData::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FindWayData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FindWayInfo data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FindWayData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .FindWayInfo data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FindWayData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .FindWayInfo data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FindWayData::ByteSize() const {
  int total_size = 0;

  // repeated .FindWayInfo data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FindWayData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FindWayData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FindWayData*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FindWayData::MergeFrom(const FindWayData& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FindWayData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindWayData::CopyFrom(const FindWayData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindWayData::IsInitialized() const {

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void FindWayData::Swap(FindWayData* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FindWayData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FindWayData_descriptor_;
  metadata.reflection = FindWayData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
