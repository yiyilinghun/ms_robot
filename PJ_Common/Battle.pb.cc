// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Battle.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Battle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* BattleUnitBaseInfo_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleUnitBaseInfo_reflection_ = nullptr;
const ::google::protobuf::Descriptor* BattleUnitInfo_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleUnitInfo_reflection_ = nullptr;
const ::google::protobuf::Descriptor* ServerBattleUnitInfo_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerBattleUnitInfo_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_EnterBattleScene_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_EnterBattleScene_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_BattleFrameTick_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_BattleFrameTick_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_BattleActionForce_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_BattleActionForce_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_BattleUpdateMP_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_BattleUpdateMP_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_BattleWaitAction_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_BattleWaitAction_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_BattleCommandDefend_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_BattleCommandDefend_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_BattleCommandDefend_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_BattleCommandDefend_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_BattleCommandDamage_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_BattleCommandDamage_reflection_ = nullptr;
const ::google::protobuf::Descriptor* BattleSkillBuffInfo_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleSkillBuffInfo_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_Ask_SetDefaultSkillType_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Ask_SetDefaultSkillType_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_BattleCommandAttack_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_BattleCommandAttack_reflection_ = nullptr;
const ::google::protobuf::Descriptor* BattleCommandAttackInfo_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleCommandAttackInfo_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_BattleCommandAttack_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_BattleCommandAttack_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_BattleCommandUseSkill_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_BattleCommandUseSkill_reflection_ = nullptr;
const ::google::protobuf::Descriptor* BattleCommandSkillInfo_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleCommandSkillInfo_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_BattleCommandUseSkill_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_BattleCommandUseSkill_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_BattleCommandTriggerBuff_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_BattleCommandTriggerBuff_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_BattleCommandRemoveBuff_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_BattleCommandRemoveBuff_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_BattleCommandCallSummon_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_BattleCommandCallSummon_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_BattleCommandActionDone_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_BattleCommandActionDone_reflection_ = nullptr;

}  // namespace


void protobuf_AssignDesc_Battle_2eproto() {
  protobuf_AddDesc_Battle_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Battle.proto");
  GOOGLE_CHECK(file != nullptr);
  BattleUnitBaseInfo_descriptor_ = file->message_type(0);
  static const int BattleUnitBaseInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleUnitBaseInfo, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleUnitBaseInfo, object_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleUnitBaseInfo, display_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleUnitBaseInfo, team_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleUnitBaseInfo, team_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleUnitBaseInfo, is_master_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleUnitBaseInfo, reborn_sum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleUnitBaseInfo, object_type_),
  };
  BattleUnitBaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleUnitBaseInfo_descriptor_,
      BattleUnitBaseInfo::default_instance_,
      BattleUnitBaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleUnitBaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleUnitBaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleUnitBaseInfo));
  BattleUnitInfo_descriptor_ = file->message_type(1);
  static const int BattleUnitInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleUnitInfo, base_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleUnitInfo, attr_),
  };
  BattleUnitInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleUnitInfo_descriptor_,
      BattleUnitInfo::default_instance_,
      BattleUnitInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleUnitInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleUnitInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleUnitInfo));
  ServerBattleUnitInfo_descriptor_ = file->message_type(2);
  static const int ServerBattleUnitInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerBattleUnitInfo, base_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerBattleUnitInfo, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerBattleUnitInfo, defaule_skill_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerBattleUnitInfo, skill_info_),
  };
  ServerBattleUnitInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerBattleUnitInfo_descriptor_,
      ServerBattleUnitInfo::default_instance_,
      ServerBattleUnitInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerBattleUnitInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerBattleUnitInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerBattleUnitInfo));
  S2C_EnterBattleScene_descriptor_ = file->message_type(3);
  static const int S2C_EnterBattleScene_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_EnterBattleScene, self_team_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_EnterBattleScene, list_public_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_EnterBattleScene, list_memory_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_EnterBattleScene, list_battle_unit_info_),
  };
  S2C_EnterBattleScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_EnterBattleScene_descriptor_,
      S2C_EnterBattleScene::default_instance_,
      S2C_EnterBattleScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_EnterBattleScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_EnterBattleScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_EnterBattleScene));
  S2C_BattleFrameTick_descriptor_ = file->message_type(4);
  static const int S2C_BattleFrameTick_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BattleFrameTick, new_tick_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BattleFrameTick, sum_tick_num_),
  };
  S2C_BattleFrameTick_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_BattleFrameTick_descriptor_,
      S2C_BattleFrameTick::default_instance_,
      S2C_BattleFrameTick_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BattleFrameTick, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BattleFrameTick, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_BattleFrameTick));
  S2C_BattleActionForce_descriptor_ = file->message_type(5);
  static const int S2C_BattleActionForce_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BattleActionForce, src_role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BattleActionForce, action_force_),
  };
  S2C_BattleActionForce_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_BattleActionForce_descriptor_,
      S2C_BattleActionForce::default_instance_,
      S2C_BattleActionForce_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BattleActionForce, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BattleActionForce, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_BattleActionForce));
  S2C_BattleUpdateMP_descriptor_ = file->message_type(6);
  static const int S2C_BattleUpdateMP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BattleUpdateMP, src_role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BattleUpdateMP, new_mp_),
  };
  S2C_BattleUpdateMP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_BattleUpdateMP_descriptor_,
      S2C_BattleUpdateMP::default_instance_,
      S2C_BattleUpdateMP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BattleUpdateMP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BattleUpdateMP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_BattleUpdateMP));
  S2C_BattleWaitAction_descriptor_ = file->message_type(7);
  static const int S2C_BattleWaitAction_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BattleWaitAction, src_role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BattleWaitAction, surplus_operation_second_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BattleWaitAction, can_action_),
  };
  S2C_BattleWaitAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_BattleWaitAction_descriptor_,
      S2C_BattleWaitAction::default_instance_,
      S2C_BattleWaitAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BattleWaitAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BattleWaitAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_BattleWaitAction));
  C2S_BattleCommandDefend_descriptor_ = file->message_type(8);
  static const int C2S_BattleCommandDefend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_BattleCommandDefend, role_index_),
  };
  C2S_BattleCommandDefend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_BattleCommandDefend_descriptor_,
      C2S_BattleCommandDefend::default_instance_,
      C2S_BattleCommandDefend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_BattleCommandDefend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_BattleCommandDefend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_BattleCommandDefend));
  S2C_BattleCommandDefend_descriptor_ = file->message_type(9);
  static const int S2C_BattleCommandDefend_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BattleCommandDefend, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BattleCommandDefend, recovery_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BattleCommandDefend, recovery_mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BattleCommandDefend, recovery_action_),
  };
  S2C_BattleCommandDefend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_BattleCommandDefend_descriptor_,
      S2C_BattleCommandDefend::default_instance_,
      S2C_BattleCommandDefend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BattleCommandDefend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BattleCommandDefend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_BattleCommandDefend));
  S2C_BattleCommandDamage_descriptor_ = file->message_type(10);
  static const int S2C_BattleCommandDamage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BattleCommandDamage, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BattleCommandDamage, damage_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BattleCommandDamage, damage_mp_),
  };
  S2C_BattleCommandDamage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_BattleCommandDamage_descriptor_,
      S2C_BattleCommandDamage::default_instance_,
      S2C_BattleCommandDamage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BattleCommandDamage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BattleCommandDamage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_BattleCommandDamage));
  BattleSkillBuffInfo_descriptor_ = file->message_type(11);
  static const int BattleSkillBuffInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSkillBuffInfo, buff_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSkillBuffInfo, surplus_frames_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSkillBuffInfo, list_param_int32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSkillBuffInfo, list_param_float_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSkillBuffInfo, list_param_string_),
  };
  BattleSkillBuffInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleSkillBuffInfo_descriptor_,
      BattleSkillBuffInfo::default_instance_,
      BattleSkillBuffInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSkillBuffInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSkillBuffInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleSkillBuffInfo));
  C2S_Ask_SetDefaultSkillType_descriptor_ = file->message_type(12);
  static const int C2S_Ask_SetDefaultSkillType_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_SetDefaultSkillType, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_SetDefaultSkillType, tar_role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_SetDefaultSkillType, default_skill_name_),
  };
  C2S_Ask_SetDefaultSkillType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Ask_SetDefaultSkillType_descriptor_,
      C2S_Ask_SetDefaultSkillType::default_instance_,
      C2S_Ask_SetDefaultSkillType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_SetDefaultSkillType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_SetDefaultSkillType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Ask_SetDefaultSkillType));
  C2S_BattleCommandAttack_descriptor_ = file->message_type(13);
  static const int C2S_BattleCommandAttack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_BattleCommandAttack, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_BattleCommandAttack, tar_role_index_),
  };
  C2S_BattleCommandAttack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_BattleCommandAttack_descriptor_,
      C2S_BattleCommandAttack::default_instance_,
      C2S_BattleCommandAttack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_BattleCommandAttack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_BattleCommandAttack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_BattleCommandAttack));
  BattleCommandAttackInfo_descriptor_ = file->message_type(14);
  static const int BattleCommandAttackInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleCommandAttackInfo, tar_role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleCommandAttackInfo, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleCommandAttackInfo, crit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleCommandAttackInfo, deadly_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleCommandAttackInfo, miss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleCommandAttackInfo, list_buff_),
  };
  BattleCommandAttackInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleCommandAttackInfo_descriptor_,
      BattleCommandAttackInfo::default_instance_,
      BattleCommandAttackInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleCommandAttackInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleCommandAttackInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleCommandAttackInfo));
  S2C_BattleCommandAttack_descriptor_ = file->message_type(15);
  static const int S2C_BattleCommandAttack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BattleCommandAttack, src_role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BattleCommandAttack, list_tar_),
  };
  S2C_BattleCommandAttack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_BattleCommandAttack_descriptor_,
      S2C_BattleCommandAttack::default_instance_,
      S2C_BattleCommandAttack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BattleCommandAttack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BattleCommandAttack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_BattleCommandAttack));
  C2S_BattleCommandUseSkill_descriptor_ = file->message_type(16);
  static const int C2S_BattleCommandUseSkill_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_BattleCommandUseSkill, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_BattleCommandUseSkill, tar_role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_BattleCommandUseSkill, skill_name_),
  };
  C2S_BattleCommandUseSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_BattleCommandUseSkill_descriptor_,
      C2S_BattleCommandUseSkill::default_instance_,
      C2S_BattleCommandUseSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_BattleCommandUseSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_BattleCommandUseSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_BattleCommandUseSkill));
  BattleCommandSkillInfo_descriptor_ = file->message_type(17);
  static const int BattleCommandSkillInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleCommandSkillInfo, tar_role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleCommandSkillInfo, crit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleCommandSkillInfo, list_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleCommandSkillInfo, list_buff_),
  };
  BattleCommandSkillInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleCommandSkillInfo_descriptor_,
      BattleCommandSkillInfo::default_instance_,
      BattleCommandSkillInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleCommandSkillInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleCommandSkillInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleCommandSkillInfo));
  S2C_BattleCommandUseSkill_descriptor_ = file->message_type(18);
  static const int S2C_BattleCommandUseSkill_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BattleCommandUseSkill, src_role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BattleCommandUseSkill, src_role_new_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BattleCommandUseSkill, src_role_new_mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BattleCommandUseSkill, skill_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BattleCommandUseSkill, skill_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BattleCommandUseSkill, list_tar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BattleCommandUseSkill, list_tar_splash_),
  };
  S2C_BattleCommandUseSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_BattleCommandUseSkill_descriptor_,
      S2C_BattleCommandUseSkill::default_instance_,
      S2C_BattleCommandUseSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BattleCommandUseSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BattleCommandUseSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_BattleCommandUseSkill));
  S2C_BattleCommandTriggerBuff_descriptor_ = file->message_type(19);
  static const int S2C_BattleCommandTriggerBuff_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BattleCommandTriggerBuff, tar_role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BattleCommandTriggerBuff, buff_),
  };
  S2C_BattleCommandTriggerBuff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_BattleCommandTriggerBuff_descriptor_,
      S2C_BattleCommandTriggerBuff::default_instance_,
      S2C_BattleCommandTriggerBuff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BattleCommandTriggerBuff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BattleCommandTriggerBuff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_BattleCommandTriggerBuff));
  S2C_BattleCommandRemoveBuff_descriptor_ = file->message_type(20);
  static const int S2C_BattleCommandRemoveBuff_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BattleCommandRemoveBuff, tar_role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BattleCommandRemoveBuff, buff_id_),
  };
  S2C_BattleCommandRemoveBuff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_BattleCommandRemoveBuff_descriptor_,
      S2C_BattleCommandRemoveBuff::default_instance_,
      S2C_BattleCommandRemoveBuff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BattleCommandRemoveBuff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BattleCommandRemoveBuff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_BattleCommandRemoveBuff));
  C2S_BattleCommandCallSummon_descriptor_ = file->message_type(21);
  static const int C2S_BattleCommandCallSummon_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_BattleCommandCallSummon, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_BattleCommandCallSummon, summon_role_index_),
  };
  C2S_BattleCommandCallSummon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_BattleCommandCallSummon_descriptor_,
      C2S_BattleCommandCallSummon::default_instance_,
      C2S_BattleCommandCallSummon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_BattleCommandCallSummon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_BattleCommandCallSummon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_BattleCommandCallSummon));
  C2S_BattleCommandActionDone_descriptor_ = file->message_type(22);
  static const int C2S_BattleCommandActionDone_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_BattleCommandActionDone, role_index_),
  };
  C2S_BattleCommandActionDone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_BattleCommandActionDone_descriptor_,
      C2S_BattleCommandActionDone::default_instance_,
      C2S_BattleCommandActionDone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_BattleCommandActionDone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_BattleCommandActionDone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_BattleCommandActionDone));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Battle_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleUnitBaseInfo_descriptor_, &BattleUnitBaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleUnitInfo_descriptor_, &BattleUnitInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerBattleUnitInfo_descriptor_, &ServerBattleUnitInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_EnterBattleScene_descriptor_, &S2C_EnterBattleScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_BattleFrameTick_descriptor_, &S2C_BattleFrameTick::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_BattleActionForce_descriptor_, &S2C_BattleActionForce::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_BattleUpdateMP_descriptor_, &S2C_BattleUpdateMP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_BattleWaitAction_descriptor_, &S2C_BattleWaitAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_BattleCommandDefend_descriptor_, &C2S_BattleCommandDefend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_BattleCommandDefend_descriptor_, &S2C_BattleCommandDefend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_BattleCommandDamage_descriptor_, &S2C_BattleCommandDamage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleSkillBuffInfo_descriptor_, &BattleSkillBuffInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Ask_SetDefaultSkillType_descriptor_, &C2S_Ask_SetDefaultSkillType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_BattleCommandAttack_descriptor_, &C2S_BattleCommandAttack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleCommandAttackInfo_descriptor_, &BattleCommandAttackInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_BattleCommandAttack_descriptor_, &S2C_BattleCommandAttack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_BattleCommandUseSkill_descriptor_, &C2S_BattleCommandUseSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleCommandSkillInfo_descriptor_, &BattleCommandSkillInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_BattleCommandUseSkill_descriptor_, &S2C_BattleCommandUseSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_BattleCommandTriggerBuff_descriptor_, &S2C_BattleCommandTriggerBuff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_BattleCommandRemoveBuff_descriptor_, &S2C_BattleCommandRemoveBuff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_BattleCommandCallSummon_descriptor_, &C2S_BattleCommandCallSummon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_BattleCommandActionDone_descriptor_, &C2S_BattleCommandActionDone::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Battle_2eproto() {
  delete BattleUnitBaseInfo::default_instance_;
  delete BattleUnitBaseInfo_reflection_;
  delete BattleUnitInfo::default_instance_;
  delete BattleUnitInfo_reflection_;
  delete ServerBattleUnitInfo::default_instance_;
  delete ServerBattleUnitInfo_reflection_;
  delete S2C_EnterBattleScene::default_instance_;
  delete S2C_EnterBattleScene_reflection_;
  delete S2C_BattleFrameTick::default_instance_;
  delete S2C_BattleFrameTick_reflection_;
  delete S2C_BattleActionForce::default_instance_;
  delete S2C_BattleActionForce_reflection_;
  delete S2C_BattleUpdateMP::default_instance_;
  delete S2C_BattleUpdateMP_reflection_;
  delete S2C_BattleWaitAction::default_instance_;
  delete S2C_BattleWaitAction_reflection_;
  delete C2S_BattleCommandDefend::default_instance_;
  delete C2S_BattleCommandDefend_reflection_;
  delete S2C_BattleCommandDefend::default_instance_;
  delete S2C_BattleCommandDefend_reflection_;
  delete S2C_BattleCommandDamage::default_instance_;
  delete S2C_BattleCommandDamage_reflection_;
  delete BattleSkillBuffInfo::default_instance_;
  delete BattleSkillBuffInfo_reflection_;
  delete C2S_Ask_SetDefaultSkillType::default_instance_;
  delete C2S_Ask_SetDefaultSkillType_reflection_;
  delete C2S_BattleCommandAttack::default_instance_;
  delete C2S_BattleCommandAttack_reflection_;
  delete BattleCommandAttackInfo::default_instance_;
  delete BattleCommandAttackInfo_reflection_;
  delete S2C_BattleCommandAttack::default_instance_;
  delete S2C_BattleCommandAttack_reflection_;
  delete C2S_BattleCommandUseSkill::default_instance_;
  delete C2S_BattleCommandUseSkill_reflection_;
  delete BattleCommandSkillInfo::default_instance_;
  delete BattleCommandSkillInfo_reflection_;
  delete S2C_BattleCommandUseSkill::default_instance_;
  delete S2C_BattleCommandUseSkill_reflection_;
  delete S2C_BattleCommandTriggerBuff::default_instance_;
  delete S2C_BattleCommandTriggerBuff_reflection_;
  delete S2C_BattleCommandRemoveBuff::default_instance_;
  delete S2C_BattleCommandRemoveBuff_reflection_;
  delete C2S_BattleCommandCallSummon::default_instance_;
  delete C2S_BattleCommandCallSummon_reflection_;
  delete C2S_BattleCommandActionDone::default_instance_;
  delete C2S_BattleCommandActionDone_reflection_;
}

void protobuf_AddDesc_Battle_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_EnumDef_2eproto();
  ::protobuf_AddDesc_Common_2eproto();
  ::protobuf_AddDesc_Database_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Battle.proto\032\rEnumDef.proto\032\014Common.pr"
    "oto\032\016Database.proto\"\322\001\n\022BattleUnitBaseIn"
    "fo\022\022\n\nrole_index\030\001 \002(\022\022\023\n\013object_name\030\002 "
    "\002(\014\022\024\n\014display_name\030\003 \002(\014\022\022\n\nteam_index\030"
    "\004 \002(\022\022\020\n\010team_pos\030\005 \002(\021\022\021\n\tis_master\030\006 \002"
    "(\010\022\022\n\nreborn_sum\030\007 \002(\021\0220\n\013object_type\030\010 "
    "\002(\0162\016.E_OBJECT_TYPE:\013EOT_INVALID\"W\n\016Batt"
    "leUnitInfo\022&\n\tbase_info\030\001 \002(\0132\023.BattleUn"
    "itBaseInfo\022\035\n\004attr\030\002 \002(\0132\017.universal_dat"
    "a\"\236\001\n\024ServerBattleUnitInfo\022&\n\tbase_info\030"
    "\001 \002(\0132\023.BattleUnitBaseInfo\022\035\n\004attr\030\002 \002(\013"
    "2\017.universal_data\022\032\n\022defaule_skill_type\030"
    "\003 \002(\021\022#\n\nskill_info\030\004 \002(\0132\017.universal_da"
    "ta\"\265\001\n\024S2C_EnterBattleScene\022\027\n\017self_team"
    "_index\030\001 \002(\022\022)\n\020list_public_info\030\002 \003(\0132\017"
    ".universal_data\022)\n\020list_memory_info\030\003 \003("
    "\0132\017.universal_data\022.\n\025list_battle_unit_i"
    "nfo\030\004 \003(\0132\017.BattleUnitInfo\"A\n\023S2C_Battle"
    "FrameTick\022\024\n\014new_tick_num\030\001 \002(\022\022\024\n\014sum_t"
    "ick_num\030\002 \002(\022\"E\n\025S2C_BattleActionForce\022\026"
    "\n\016src_role_index\030\001 \002(\022\022\024\n\014action_force\030\002"
    " \002(\021\"<\n\022S2C_BattleUpdateMP\022\026\n\016src_role_i"
    "ndex\030\001 \002(\022\022\016\n\006new_mp\030\002 \002(\021\"d\n\024S2C_Battle"
    "WaitAction\022\026\n\016src_role_index\030\001 \002(\022\022 \n\030su"
    "rplus_operation_second\030\002 \002(\021\022\022\n\ncan_acti"
    "on\030\003 \002(\010\"-\n\027C2S_BattleCommandDefend\022\022\n\nr"
    "ole_index\030\001 \002(\022\"p\n\027S2C_BattleCommandDefe"
    "nd\022\022\n\nrole_index\030\001 \002(\022\022\023\n\013recovery_hp\030\002 "
    "\002(\021\022\023\n\013recovery_mp\030\003 \002(\021\022\027\n\017recovery_act"
    "ion\030\004 \002(\021\"S\n\027S2C_BattleCommandDamage\022\022\n\n"
    "role_index\030\001 \002(\022\022\021\n\tdamage_hp\030\002 \002(\021\022\021\n\td"
    "amage_mp\030\003 \002(\021\"\215\001\n\023BattleSkillBuffInfo\022\017"
    "\n\007buff_id\030\001 \002(\021\022\026\n\016surplus_frames\030\002 \002(\021\022"
    "\030\n\020list_param_int32\030\005 \003(\021\022\030\n\020list_param_"
    "float\030\006 \003(\002\022\031\n\021list_param_string\030\007 \003(\014\"e"
    "\n\033C2S_Ask_SetDefaultSkillType\022\022\n\nrole_in"
    "dex\030\001 \002(\022\022\026\n\016tar_role_index\030\002 \002(\022\022\032\n\022def"
    "ault_skill_name\030\003 \002(\014\"E\n\027C2S_BattleComma"
    "ndAttack\022\022\n\nrole_index\030\001 \002(\022\022\026\n\016tar_role"
    "_index\030\002 \002(\022\"\226\001\n\027BattleCommandAttackInfo"
    "\022\026\n\016tar_role_index\030\001 \002(\022\022\016\n\006damage\030\002 \002(\021"
    "\022\014\n\004crit\030\003 \002(\010\022\016\n\006deadly\030\004 \002(\010\022\014\n\004miss\030\005"
    " \002(\010\022\'\n\tlist_buff\030\006 \003(\0132\024.BattleSkillBuf"
    "fInfo\"]\n\027S2C_BattleCommandAttack\022\026\n\016src_"
    "role_index\030\001 \002(\022\022*\n\010list_tar\030\002 \003(\0132\030.Bat"
    "tleCommandAttackInfo\"[\n\031C2S_BattleComman"
    "dUseSkill\022\022\n\nrole_index\030\001 \002(\022\022\026\n\016tar_rol"
    "e_index\030\002 \002(\022\022\022\n\nskill_name\030\003 \002(\014\"{\n\026Bat"
    "tleCommandSkillInfo\022\026\n\016tar_role_index\030\001 "
    "\002(\022\022\014\n\004crit\030\002 \002(\010\022\022\n\nlist_power\030\003 \003(\021\022\'\n"
    "\tlist_buff\030\004 \003(\0132\024.BattleSkillBuffInfo\"\373"
    "\001\n\031S2C_BattleCommandUseSkill\022\026\n\016src_role"
    "_index\030\001 \002(\022\022\027\n\017src_role_new_hp\030\002 \002(\021\022\027\n"
    "\017src_role_new_mp\030\003 \002(\021\022\022\n\nskill_name\030\004 \002"
    "(\014\022#\n\nskill_info\030\005 \002(\0132\017.universal_data\022"
    ")\n\010list_tar\030\006 \003(\0132\027.BattleCommandSkillIn"
    "fo\0220\n\017list_tar_splash\030\007 \003(\0132\027.BattleComm"
    "andSkillInfo\"Z\n\034S2C_BattleCommandTrigger"
    "Buff\022\026\n\016tar_role_index\030\001 \002(\022\022\"\n\004buff\030\002 \002"
    "(\0132\024.BattleSkillBuffInfo\"F\n\033S2C_BattleCo"
    "mmandRemoveBuff\022\026\n\016tar_role_index\030\001 \002(\022\022"
    "\017\n\007buff_id\030\002 \002(\021\"L\n\033C2S_BattleCommandCal"
    "lSummon\022\022\n\nrole_index\030\001 \002(\022\022\031\n\021summon_ro"
    "le_index\030\002 \002(\022\"1\n\033C2S_BattleCommandActio"
    "nDone\022\022\n\nrole_index\030\001 \002(\022", 2585);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Battle.proto", &protobuf_RegisterTypes);
  BattleUnitBaseInfo::default_instance_ = new BattleUnitBaseInfo();
  BattleUnitInfo::default_instance_ = new BattleUnitInfo();
  ServerBattleUnitInfo::default_instance_ = new ServerBattleUnitInfo();
  S2C_EnterBattleScene::default_instance_ = new S2C_EnterBattleScene();
  S2C_BattleFrameTick::default_instance_ = new S2C_BattleFrameTick();
  S2C_BattleActionForce::default_instance_ = new S2C_BattleActionForce();
  S2C_BattleUpdateMP::default_instance_ = new S2C_BattleUpdateMP();
  S2C_BattleWaitAction::default_instance_ = new S2C_BattleWaitAction();
  C2S_BattleCommandDefend::default_instance_ = new C2S_BattleCommandDefend();
  S2C_BattleCommandDefend::default_instance_ = new S2C_BattleCommandDefend();
  S2C_BattleCommandDamage::default_instance_ = new S2C_BattleCommandDamage();
  BattleSkillBuffInfo::default_instance_ = new BattleSkillBuffInfo();
  C2S_Ask_SetDefaultSkillType::default_instance_ = new C2S_Ask_SetDefaultSkillType();
  C2S_BattleCommandAttack::default_instance_ = new C2S_BattleCommandAttack();
  BattleCommandAttackInfo::default_instance_ = new BattleCommandAttackInfo();
  S2C_BattleCommandAttack::default_instance_ = new S2C_BattleCommandAttack();
  C2S_BattleCommandUseSkill::default_instance_ = new C2S_BattleCommandUseSkill();
  BattleCommandSkillInfo::default_instance_ = new BattleCommandSkillInfo();
  S2C_BattleCommandUseSkill::default_instance_ = new S2C_BattleCommandUseSkill();
  S2C_BattleCommandTriggerBuff::default_instance_ = new S2C_BattleCommandTriggerBuff();
  S2C_BattleCommandRemoveBuff::default_instance_ = new S2C_BattleCommandRemoveBuff();
  C2S_BattleCommandCallSummon::default_instance_ = new C2S_BattleCommandCallSummon();
  C2S_BattleCommandActionDone::default_instance_ = new C2S_BattleCommandActionDone();
  BattleUnitBaseInfo::default_instance_->InitAsDefaultInstance();
  BattleUnitInfo::default_instance_->InitAsDefaultInstance();
  ServerBattleUnitInfo::default_instance_->InitAsDefaultInstance();
  S2C_EnterBattleScene::default_instance_->InitAsDefaultInstance();
  S2C_BattleFrameTick::default_instance_->InitAsDefaultInstance();
  S2C_BattleActionForce::default_instance_->InitAsDefaultInstance();
  S2C_BattleUpdateMP::default_instance_->InitAsDefaultInstance();
  S2C_BattleWaitAction::default_instance_->InitAsDefaultInstance();
  C2S_BattleCommandDefend::default_instance_->InitAsDefaultInstance();
  S2C_BattleCommandDefend::default_instance_->InitAsDefaultInstance();
  S2C_BattleCommandDamage::default_instance_->InitAsDefaultInstance();
  BattleSkillBuffInfo::default_instance_->InitAsDefaultInstance();
  C2S_Ask_SetDefaultSkillType::default_instance_->InitAsDefaultInstance();
  C2S_BattleCommandAttack::default_instance_->InitAsDefaultInstance();
  BattleCommandAttackInfo::default_instance_->InitAsDefaultInstance();
  S2C_BattleCommandAttack::default_instance_->InitAsDefaultInstance();
  C2S_BattleCommandUseSkill::default_instance_->InitAsDefaultInstance();
  BattleCommandSkillInfo::default_instance_->InitAsDefaultInstance();
  S2C_BattleCommandUseSkill::default_instance_->InitAsDefaultInstance();
  S2C_BattleCommandTriggerBuff::default_instance_->InitAsDefaultInstance();
  S2C_BattleCommandRemoveBuff::default_instance_->InitAsDefaultInstance();
  C2S_BattleCommandCallSummon::default_instance_->InitAsDefaultInstance();
  C2S_BattleCommandActionDone::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Battle_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Battle_2eproto {
  StaticDescriptorInitializer_Battle_2eproto() {
    protobuf_AddDesc_Battle_2eproto();
  }
} static_descriptor_initializer_Battle_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BattleUnitBaseInfo::kRoleIndexFieldNumber;
const int BattleUnitBaseInfo::kObjectNameFieldNumber;
const int BattleUnitBaseInfo::kDisplayNameFieldNumber;
const int BattleUnitBaseInfo::kTeamIndexFieldNumber;
const int BattleUnitBaseInfo::kTeamPosFieldNumber;
const int BattleUnitBaseInfo::kIsMasterFieldNumber;
const int BattleUnitBaseInfo::kRebornSumFieldNumber;
const int BattleUnitBaseInfo::kObjectTypeFieldNumber;
#endif  // !_MSC_VER

BattleUnitBaseInfo::BattleUnitBaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleUnitBaseInfo::InitAsDefaultInstance() {
}

BattleUnitBaseInfo::BattleUnitBaseInfo(const BattleUnitBaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleUnitBaseInfo::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  object_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  display_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  team_index_ = GOOGLE_LONGLONG(0);
  team_pos_ = 0;
  is_master_ = false;
  reborn_sum_ = 0;
  object_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleUnitBaseInfo::~BattleUnitBaseInfo() {
  SharedDtor();
}

void BattleUnitBaseInfo::SharedDtor() {
  if (object_name_ != &::google::protobuf::internal::kEmptyString) {
    delete object_name_;
  }
  if (display_name_ != &::google::protobuf::internal::kEmptyString) {
    delete display_name_;
  }
  if (this != default_instance_) {
  }
}

void BattleUnitBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleUnitBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleUnitBaseInfo_descriptor_;
}

const BattleUnitBaseInfo& BattleUnitBaseInfo::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Battle_2eproto();
  return *default_instance_;
}

BattleUnitBaseInfo* BattleUnitBaseInfo::default_instance_ = nullptr;

BattleUnitBaseInfo* BattleUnitBaseInfo::New() const {
  return new BattleUnitBaseInfo;
}

void BattleUnitBaseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    if (has_object_name()) {
      if (object_name_ != &::google::protobuf::internal::kEmptyString) {
        object_name_->clear();
      }
    }
    if (has_display_name()) {
      if (display_name_ != &::google::protobuf::internal::kEmptyString) {
        display_name_->clear();
      }
    }
    team_index_ = GOOGLE_LONGLONG(0);
    team_pos_ = 0;
    is_master_ = false;
    reborn_sum_ = 0;
    object_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleUnitBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_object_name;
        break;
      }

      // required bytes object_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_object_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_object_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_display_name;
        break;
      }

      // required bytes display_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_display_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_display_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_team_index;
        break;
      }

      // required sint64 team_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &team_index_)));
          set_has_team_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_team_pos;
        break;
      }

      // required sint32 team_pos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &team_pos_)));
          set_has_team_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_master;
        break;
      }

      // required bool is_master = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_master:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_master_)));
          set_has_is_master();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_reborn_sum;
        break;
      }

      // required sint32 reborn_sum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reborn_sum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &reborn_sum_)));
          set_has_reborn_sum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_object_type;
        break;
      }

      // required .E_OBJECT_TYPE object_type = 8 [default = EOT_INVALID];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_object_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::E_OBJECT_TYPE_IsValid(value)) {
            set_object_type(static_cast< ::E_OBJECT_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleUnitBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->role_index(), output);
  }

  // required bytes object_name = 2;
  if (has_object_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->object_name(), output);
  }

  // required bytes display_name = 3;
  if (has_display_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->display_name(), output);
  }

  // required sint64 team_index = 4;
  if (has_team_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->team_index(), output);
  }

  // required sint32 team_pos = 5;
  if (has_team_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->team_pos(), output);
  }

  // required bool is_master = 6;
  if (has_is_master()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_master(), output);
  }

  // required sint32 reborn_sum = 7;
  if (has_reborn_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->reborn_sum(), output);
  }

  // required .E_OBJECT_TYPE object_type = 8 [default = EOT_INVALID];
  if (has_object_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->object_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleUnitBaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->role_index(), target);
  }

  // required bytes object_name = 2;
  if (has_object_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->object_name(), target);
  }

  // required bytes display_name = 3;
  if (has_display_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->display_name(), target);
  }

  // required sint64 team_index = 4;
  if (has_team_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(4, this->team_index(), target);
  }

  // required sint32 team_pos = 5;
  if (has_team_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->team_pos(), target);
  }

  // required bool is_master = 6;
  if (has_is_master()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_master(), target);
  }

  // required sint32 reborn_sum = 7;
  if (has_reborn_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->reborn_sum(), target);
  }

  // required .E_OBJECT_TYPE object_type = 8 [default = EOT_INVALID];
  if (has_object_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->object_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleUnitBaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->role_index());
    }

    // required bytes object_name = 2;
    if (has_object_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->object_name());
    }

    // required bytes display_name = 3;
    if (has_display_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->display_name());
    }

    // required sint64 team_index = 4;
    if (has_team_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->team_index());
    }

    // required sint32 team_pos = 5;
    if (has_team_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->team_pos());
    }

    // required bool is_master = 6;
    if (has_is_master()) {
      total_size += 1 + 1;
    }

    // required sint32 reborn_sum = 7;
    if (has_reborn_sum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->reborn_sum());
    }

    // required .E_OBJECT_TYPE object_type = 8 [default = EOT_INVALID];
    if (has_object_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->object_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleUnitBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleUnitBaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleUnitBaseInfo*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleUnitBaseInfo::MergeFrom(const BattleUnitBaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_object_name()) {
      set_object_name(from.object_name());
    }
    if (from.has_display_name()) {
      set_display_name(from.display_name());
    }
    if (from.has_team_index()) {
      set_team_index(from.team_index());
    }
    if (from.has_team_pos()) {
      set_team_pos(from.team_pos());
    }
    if (from.has_is_master()) {
      set_is_master(from.is_master());
    }
    if (from.has_reborn_sum()) {
      set_reborn_sum(from.reborn_sum());
    }
    if (from.has_object_type()) {
      set_object_type(from.object_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleUnitBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleUnitBaseInfo::CopyFrom(const BattleUnitBaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleUnitBaseInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void BattleUnitBaseInfo::Swap(BattleUnitBaseInfo* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(object_name_, other->object_name_);
    std::swap(display_name_, other->display_name_);
    std::swap(team_index_, other->team_index_);
    std::swap(team_pos_, other->team_pos_);
    std::swap(is_master_, other->is_master_);
    std::swap(reborn_sum_, other->reborn_sum_);
    std::swap(object_type_, other->object_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleUnitBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleUnitBaseInfo_descriptor_;
  metadata.reflection = BattleUnitBaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleUnitInfo::kBaseInfoFieldNumber;
const int BattleUnitInfo::kAttrFieldNumber;
#endif  // !_MSC_VER

BattleUnitInfo::BattleUnitInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleUnitInfo::InitAsDefaultInstance() {
  base_info_ = const_cast< ::BattleUnitBaseInfo*>(&::BattleUnitBaseInfo::default_instance());
  attr_ = const_cast< ::universal_data*>(&::universal_data::default_instance());
}

BattleUnitInfo::BattleUnitInfo(const BattleUnitInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleUnitInfo::SharedCtor() {
  _cached_size_ = 0;
  base_info_ = nullptr;
  attr_ = nullptr;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleUnitInfo::~BattleUnitInfo() {
  SharedDtor();
}

void BattleUnitInfo::SharedDtor() {
  if (this != default_instance_) {
    delete base_info_;
    delete attr_;
  }
}

void BattleUnitInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleUnitInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleUnitInfo_descriptor_;
}

const BattleUnitInfo& BattleUnitInfo::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Battle_2eproto();
  return *default_instance_;
}

BattleUnitInfo* BattleUnitInfo::default_instance_ = nullptr;

BattleUnitInfo* BattleUnitInfo::New() const {
  return new BattleUnitInfo;
}

void BattleUnitInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_info()) {
      if (base_info_ != nullptr) base_info_->::BattleUnitBaseInfo::Clear();
    }
    if (has_attr()) {
      if (attr_ != nullptr) attr_->::universal_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleUnitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .BattleUnitBaseInfo base_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attr;
        break;
      }

      // required .universal_data attr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleUnitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .BattleUnitBaseInfo base_info = 1;
  if (has_base_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_info(), output);
  }

  // required .universal_data attr = 2;
  if (has_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleUnitInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .BattleUnitBaseInfo base_info = 1;
  if (has_base_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_info(), target);
  }

  // required .universal_data attr = 2;
  if (has_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleUnitInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .BattleUnitBaseInfo base_info = 1;
    if (has_base_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_info());
    }

    // required .universal_data attr = 2;
    if (has_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleUnitInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleUnitInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleUnitInfo*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleUnitInfo::MergeFrom(const BattleUnitInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_info()) {
      mutable_base_info()->::BattleUnitBaseInfo::MergeFrom(from.base_info());
    }
    if (from.has_attr()) {
      mutable_attr()->::universal_data::MergeFrom(from.attr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleUnitInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleUnitInfo::CopyFrom(const BattleUnitInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleUnitInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_base_info()) {
    if (!this->base_info().IsInitialized()) return false;
  }
  return true;
}

void BattleUnitInfo::Swap(BattleUnitInfo* other) {
  if (other != this) {
    std::swap(base_info_, other->base_info_);
    std::swap(attr_, other->attr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleUnitInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleUnitInfo_descriptor_;
  metadata.reflection = BattleUnitInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerBattleUnitInfo::kBaseInfoFieldNumber;
const int ServerBattleUnitInfo::kAttrFieldNumber;
const int ServerBattleUnitInfo::kDefauleSkillTypeFieldNumber;
const int ServerBattleUnitInfo::kSkillInfoFieldNumber;
#endif  // !_MSC_VER

ServerBattleUnitInfo::ServerBattleUnitInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerBattleUnitInfo::InitAsDefaultInstance() {
  base_info_ = const_cast< ::BattleUnitBaseInfo*>(&::BattleUnitBaseInfo::default_instance());
  attr_ = const_cast< ::universal_data*>(&::universal_data::default_instance());
  skill_info_ = const_cast< ::universal_data*>(&::universal_data::default_instance());
}

ServerBattleUnitInfo::ServerBattleUnitInfo(const ServerBattleUnitInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerBattleUnitInfo::SharedCtor() {
  _cached_size_ = 0;
  base_info_ = nullptr;
  attr_ = nullptr;
  defaule_skill_type_ = 0;
  skill_info_ = nullptr;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerBattleUnitInfo::~ServerBattleUnitInfo() {
  SharedDtor();
}

void ServerBattleUnitInfo::SharedDtor() {
  if (this != default_instance_) {
    delete base_info_;
    delete attr_;
    delete skill_info_;
  }
}

void ServerBattleUnitInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerBattleUnitInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerBattleUnitInfo_descriptor_;
}

const ServerBattleUnitInfo& ServerBattleUnitInfo::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Battle_2eproto();
  return *default_instance_;
}

ServerBattleUnitInfo* ServerBattleUnitInfo::default_instance_ = nullptr;

ServerBattleUnitInfo* ServerBattleUnitInfo::New() const {
  return new ServerBattleUnitInfo;
}

void ServerBattleUnitInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_info()) {
      if (base_info_ != nullptr) base_info_->::BattleUnitBaseInfo::Clear();
    }
    if (has_attr()) {
      if (attr_ != nullptr) attr_->::universal_data::Clear();
    }
    defaule_skill_type_ = 0;
    if (has_skill_info()) {
      if (skill_info_ != nullptr) skill_info_->::universal_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerBattleUnitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .BattleUnitBaseInfo base_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attr;
        break;
      }

      // required .universal_data attr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_defaule_skill_type;
        break;
      }

      // required sint32 defaule_skill_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defaule_skill_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &defaule_skill_type_)));
          set_has_defaule_skill_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_skill_info;
        break;
      }

      // required .universal_data skill_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerBattleUnitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .BattleUnitBaseInfo base_info = 1;
  if (has_base_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_info(), output);
  }

  // required .universal_data attr = 2;
  if (has_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attr(), output);
  }

  // required sint32 defaule_skill_type = 3;
  if (has_defaule_skill_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->defaule_skill_type(), output);
  }

  // required .universal_data skill_info = 4;
  if (has_skill_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->skill_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerBattleUnitInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .BattleUnitBaseInfo base_info = 1;
  if (has_base_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_info(), target);
  }

  // required .universal_data attr = 2;
  if (has_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attr(), target);
  }

  // required sint32 defaule_skill_type = 3;
  if (has_defaule_skill_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->defaule_skill_type(), target);
  }

  // required .universal_data skill_info = 4;
  if (has_skill_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->skill_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerBattleUnitInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .BattleUnitBaseInfo base_info = 1;
    if (has_base_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_info());
    }

    // required .universal_data attr = 2;
    if (has_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attr());
    }

    // required sint32 defaule_skill_type = 3;
    if (has_defaule_skill_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->defaule_skill_type());
    }

    // required .universal_data skill_info = 4;
    if (has_skill_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerBattleUnitInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerBattleUnitInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerBattleUnitInfo*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerBattleUnitInfo::MergeFrom(const ServerBattleUnitInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_info()) {
      mutable_base_info()->::BattleUnitBaseInfo::MergeFrom(from.base_info());
    }
    if (from.has_attr()) {
      mutable_attr()->::universal_data::MergeFrom(from.attr());
    }
    if (from.has_defaule_skill_type()) {
      set_defaule_skill_type(from.defaule_skill_type());
    }
    if (from.has_skill_info()) {
      mutable_skill_info()->::universal_data::MergeFrom(from.skill_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerBattleUnitInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerBattleUnitInfo::CopyFrom(const ServerBattleUnitInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerBattleUnitInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_base_info()) {
    if (!this->base_info().IsInitialized()) return false;
  }
  return true;
}

void ServerBattleUnitInfo::Swap(ServerBattleUnitInfo* other) {
  if (other != this) {
    std::swap(base_info_, other->base_info_);
    std::swap(attr_, other->attr_);
    std::swap(defaule_skill_type_, other->defaule_skill_type_);
    std::swap(skill_info_, other->skill_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerBattleUnitInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerBattleUnitInfo_descriptor_;
  metadata.reflection = ServerBattleUnitInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_EnterBattleScene::kSelfTeamIndexFieldNumber;
const int S2C_EnterBattleScene::kListPublicInfoFieldNumber;
const int S2C_EnterBattleScene::kListMemoryInfoFieldNumber;
const int S2C_EnterBattleScene::kListBattleUnitInfoFieldNumber;
#endif  // !_MSC_VER

S2C_EnterBattleScene::S2C_EnterBattleScene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_EnterBattleScene::InitAsDefaultInstance() {
}

S2C_EnterBattleScene::S2C_EnterBattleScene(const S2C_EnterBattleScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_EnterBattleScene::SharedCtor() {
  _cached_size_ = 0;
  self_team_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_EnterBattleScene::~S2C_EnterBattleScene() {
  SharedDtor();
}

void S2C_EnterBattleScene::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2C_EnterBattleScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_EnterBattleScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_EnterBattleScene_descriptor_;
}

const S2C_EnterBattleScene& S2C_EnterBattleScene::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Battle_2eproto();
  return *default_instance_;
}

S2C_EnterBattleScene* S2C_EnterBattleScene::default_instance_ = nullptr;

S2C_EnterBattleScene* S2C_EnterBattleScene::New() const {
  return new S2C_EnterBattleScene;
}

void S2C_EnterBattleScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    self_team_index_ = GOOGLE_LONGLONG(0);
  }
  list_public_info_.Clear();
  list_memory_info_.Clear();
  list_battle_unit_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_EnterBattleScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 self_team_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &self_team_index_)));
          set_has_self_team_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list_public_info;
        break;
      }

      // repeated .universal_data list_public_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_public_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_public_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list_public_info;
        if (input->ExpectTag(26)) goto parse_list_memory_info;
        break;
      }

      // repeated .universal_data list_memory_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_memory_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_memory_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_list_memory_info;
        if (input->ExpectTag(34)) goto parse_list_battle_unit_info;
        break;
      }

      // repeated .BattleUnitInfo list_battle_unit_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_battle_unit_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_battle_unit_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_list_battle_unit_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_EnterBattleScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 self_team_index = 1;
  if (has_self_team_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->self_team_index(), output);
  }

  // repeated .universal_data list_public_info = 2;
  for (int i = 0; i < this->list_public_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list_public_info(i), output);
  }

  // repeated .universal_data list_memory_info = 3;
  for (int i = 0; i < this->list_memory_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->list_memory_info(i), output);
  }

  // repeated .BattleUnitInfo list_battle_unit_info = 4;
  for (int i = 0; i < this->list_battle_unit_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->list_battle_unit_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_EnterBattleScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 self_team_index = 1;
  if (has_self_team_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->self_team_index(), target);
  }

  // repeated .universal_data list_public_info = 2;
  for (int i = 0; i < this->list_public_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->list_public_info(i), target);
  }

  // repeated .universal_data list_memory_info = 3;
  for (int i = 0; i < this->list_memory_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->list_memory_info(i), target);
  }

  // repeated .BattleUnitInfo list_battle_unit_info = 4;
  for (int i = 0; i < this->list_battle_unit_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->list_battle_unit_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_EnterBattleScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 self_team_index = 1;
    if (has_self_team_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->self_team_index());
    }

  }
  // repeated .universal_data list_public_info = 2;
  total_size += 1 * this->list_public_info_size();
  for (int i = 0; i < this->list_public_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_public_info(i));
  }

  // repeated .universal_data list_memory_info = 3;
  total_size += 1 * this->list_memory_info_size();
  for (int i = 0; i < this->list_memory_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_memory_info(i));
  }

  // repeated .BattleUnitInfo list_battle_unit_info = 4;
  total_size += 1 * this->list_battle_unit_info_size();
  for (int i = 0; i < this->list_battle_unit_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_battle_unit_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_EnterBattleScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_EnterBattleScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_EnterBattleScene*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_EnterBattleScene::MergeFrom(const S2C_EnterBattleScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_public_info_.MergeFrom(from.list_public_info_);
  list_memory_info_.MergeFrom(from.list_memory_info_);
  list_battle_unit_info_.MergeFrom(from.list_battle_unit_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_self_team_index()) {
      set_self_team_index(from.self_team_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_EnterBattleScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_EnterBattleScene::CopyFrom(const S2C_EnterBattleScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_EnterBattleScene::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < list_battle_unit_info_size(); i++) {
    if (!this->list_battle_unit_info(i).IsInitialized()) return false;
  }
  return true;
}

void S2C_EnterBattleScene::Swap(S2C_EnterBattleScene* other) {
  if (other != this) {
    std::swap(self_team_index_, other->self_team_index_);
    list_public_info_.Swap(&other->list_public_info_);
    list_memory_info_.Swap(&other->list_memory_info_);
    list_battle_unit_info_.Swap(&other->list_battle_unit_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_EnterBattleScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_EnterBattleScene_descriptor_;
  metadata.reflection = S2C_EnterBattleScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_BattleFrameTick::kNewTickNumFieldNumber;
const int S2C_BattleFrameTick::kSumTickNumFieldNumber;
#endif  // !_MSC_VER

S2C_BattleFrameTick::S2C_BattleFrameTick()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_BattleFrameTick::InitAsDefaultInstance() {
}

S2C_BattleFrameTick::S2C_BattleFrameTick(const S2C_BattleFrameTick& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_BattleFrameTick::SharedCtor() {
  _cached_size_ = 0;
  new_tick_num_ = GOOGLE_LONGLONG(0);
  sum_tick_num_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_BattleFrameTick::~S2C_BattleFrameTick() {
  SharedDtor();
}

void S2C_BattleFrameTick::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2C_BattleFrameTick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_BattleFrameTick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_BattleFrameTick_descriptor_;
}

const S2C_BattleFrameTick& S2C_BattleFrameTick::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Battle_2eproto();
  return *default_instance_;
}

S2C_BattleFrameTick* S2C_BattleFrameTick::default_instance_ = nullptr;

S2C_BattleFrameTick* S2C_BattleFrameTick::New() const {
  return new S2C_BattleFrameTick;
}

void S2C_BattleFrameTick::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    new_tick_num_ = GOOGLE_LONGLONG(0);
    sum_tick_num_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_BattleFrameTick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 new_tick_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &new_tick_num_)));
          set_has_new_tick_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sum_tick_num;
        break;
      }

      // required sint64 sum_tick_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sum_tick_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &sum_tick_num_)));
          set_has_sum_tick_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_BattleFrameTick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 new_tick_num = 1;
  if (has_new_tick_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->new_tick_num(), output);
  }

  // required sint64 sum_tick_num = 2;
  if (has_sum_tick_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->sum_tick_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_BattleFrameTick::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 new_tick_num = 1;
  if (has_new_tick_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->new_tick_num(), target);
  }

  // required sint64 sum_tick_num = 2;
  if (has_sum_tick_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->sum_tick_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_BattleFrameTick::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 new_tick_num = 1;
    if (has_new_tick_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->new_tick_num());
    }

    // required sint64 sum_tick_num = 2;
    if (has_sum_tick_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->sum_tick_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_BattleFrameTick::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_BattleFrameTick* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_BattleFrameTick*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_BattleFrameTick::MergeFrom(const S2C_BattleFrameTick& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_new_tick_num()) {
      set_new_tick_num(from.new_tick_num());
    }
    if (from.has_sum_tick_num()) {
      set_sum_tick_num(from.sum_tick_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_BattleFrameTick::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_BattleFrameTick::CopyFrom(const S2C_BattleFrameTick& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_BattleFrameTick::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2C_BattleFrameTick::Swap(S2C_BattleFrameTick* other) {
  if (other != this) {
    std::swap(new_tick_num_, other->new_tick_num_);
    std::swap(sum_tick_num_, other->sum_tick_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_BattleFrameTick::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_BattleFrameTick_descriptor_;
  metadata.reflection = S2C_BattleFrameTick_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_BattleActionForce::kSrcRoleIndexFieldNumber;
const int S2C_BattleActionForce::kActionForceFieldNumber;
#endif  // !_MSC_VER

S2C_BattleActionForce::S2C_BattleActionForce()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_BattleActionForce::InitAsDefaultInstance() {
}

S2C_BattleActionForce::S2C_BattleActionForce(const S2C_BattleActionForce& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_BattleActionForce::SharedCtor() {
  _cached_size_ = 0;
  src_role_index_ = GOOGLE_LONGLONG(0);
  action_force_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_BattleActionForce::~S2C_BattleActionForce() {
  SharedDtor();
}

void S2C_BattleActionForce::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2C_BattleActionForce::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_BattleActionForce::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_BattleActionForce_descriptor_;
}

const S2C_BattleActionForce& S2C_BattleActionForce::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Battle_2eproto();
  return *default_instance_;
}

S2C_BattleActionForce* S2C_BattleActionForce::default_instance_ = nullptr;

S2C_BattleActionForce* S2C_BattleActionForce::New() const {
  return new S2C_BattleActionForce;
}

void S2C_BattleActionForce::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    src_role_index_ = GOOGLE_LONGLONG(0);
    action_force_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_BattleActionForce::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 src_role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &src_role_index_)));
          set_has_src_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_action_force;
        break;
      }

      // required sint32 action_force = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &action_force_)));
          set_has_action_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_BattleActionForce::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 src_role_index = 1;
  if (has_src_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->src_role_index(), output);
  }

  // required sint32 action_force = 2;
  if (has_action_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->action_force(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_BattleActionForce::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 src_role_index = 1;
  if (has_src_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->src_role_index(), target);
  }

  // required sint32 action_force = 2;
  if (has_action_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->action_force(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_BattleActionForce::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 src_role_index = 1;
    if (has_src_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->src_role_index());
    }

    // required sint32 action_force = 2;
    if (has_action_force()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->action_force());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_BattleActionForce::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_BattleActionForce* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_BattleActionForce*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_BattleActionForce::MergeFrom(const S2C_BattleActionForce& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_role_index()) {
      set_src_role_index(from.src_role_index());
    }
    if (from.has_action_force()) {
      set_action_force(from.action_force());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_BattleActionForce::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_BattleActionForce::CopyFrom(const S2C_BattleActionForce& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_BattleActionForce::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2C_BattleActionForce::Swap(S2C_BattleActionForce* other) {
  if (other != this) {
    std::swap(src_role_index_, other->src_role_index_);
    std::swap(action_force_, other->action_force_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_BattleActionForce::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_BattleActionForce_descriptor_;
  metadata.reflection = S2C_BattleActionForce_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_BattleUpdateMP::kSrcRoleIndexFieldNumber;
const int S2C_BattleUpdateMP::kNewMpFieldNumber;
#endif  // !_MSC_VER

S2C_BattleUpdateMP::S2C_BattleUpdateMP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_BattleUpdateMP::InitAsDefaultInstance() {
}

S2C_BattleUpdateMP::S2C_BattleUpdateMP(const S2C_BattleUpdateMP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_BattleUpdateMP::SharedCtor() {
  _cached_size_ = 0;
  src_role_index_ = GOOGLE_LONGLONG(0);
  new_mp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_BattleUpdateMP::~S2C_BattleUpdateMP() {
  SharedDtor();
}

void S2C_BattleUpdateMP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2C_BattleUpdateMP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_BattleUpdateMP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_BattleUpdateMP_descriptor_;
}

const S2C_BattleUpdateMP& S2C_BattleUpdateMP::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Battle_2eproto();
  return *default_instance_;
}

S2C_BattleUpdateMP* S2C_BattleUpdateMP::default_instance_ = nullptr;

S2C_BattleUpdateMP* S2C_BattleUpdateMP::New() const {
  return new S2C_BattleUpdateMP;
}

void S2C_BattleUpdateMP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    src_role_index_ = GOOGLE_LONGLONG(0);
    new_mp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_BattleUpdateMP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 src_role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &src_role_index_)));
          set_has_src_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_new_mp;
        break;
      }

      // required sint32 new_mp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &new_mp_)));
          set_has_new_mp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_BattleUpdateMP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 src_role_index = 1;
  if (has_src_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->src_role_index(), output);
  }

  // required sint32 new_mp = 2;
  if (has_new_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->new_mp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_BattleUpdateMP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 src_role_index = 1;
  if (has_src_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->src_role_index(), target);
  }

  // required sint32 new_mp = 2;
  if (has_new_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->new_mp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_BattleUpdateMP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 src_role_index = 1;
    if (has_src_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->src_role_index());
    }

    // required sint32 new_mp = 2;
    if (has_new_mp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->new_mp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_BattleUpdateMP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_BattleUpdateMP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_BattleUpdateMP*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_BattleUpdateMP::MergeFrom(const S2C_BattleUpdateMP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_role_index()) {
      set_src_role_index(from.src_role_index());
    }
    if (from.has_new_mp()) {
      set_new_mp(from.new_mp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_BattleUpdateMP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_BattleUpdateMP::CopyFrom(const S2C_BattleUpdateMP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_BattleUpdateMP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2C_BattleUpdateMP::Swap(S2C_BattleUpdateMP* other) {
  if (other != this) {
    std::swap(src_role_index_, other->src_role_index_);
    std::swap(new_mp_, other->new_mp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_BattleUpdateMP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_BattleUpdateMP_descriptor_;
  metadata.reflection = S2C_BattleUpdateMP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_BattleWaitAction::kSrcRoleIndexFieldNumber;
const int S2C_BattleWaitAction::kSurplusOperationSecondFieldNumber;
const int S2C_BattleWaitAction::kCanActionFieldNumber;
#endif  // !_MSC_VER

S2C_BattleWaitAction::S2C_BattleWaitAction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_BattleWaitAction::InitAsDefaultInstance() {
}

S2C_BattleWaitAction::S2C_BattleWaitAction(const S2C_BattleWaitAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_BattleWaitAction::SharedCtor() {
  _cached_size_ = 0;
  src_role_index_ = GOOGLE_LONGLONG(0);
  surplus_operation_second_ = 0;
  can_action_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_BattleWaitAction::~S2C_BattleWaitAction() {
  SharedDtor();
}

void S2C_BattleWaitAction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2C_BattleWaitAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_BattleWaitAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_BattleWaitAction_descriptor_;
}

const S2C_BattleWaitAction& S2C_BattleWaitAction::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Battle_2eproto();
  return *default_instance_;
}

S2C_BattleWaitAction* S2C_BattleWaitAction::default_instance_ = nullptr;

S2C_BattleWaitAction* S2C_BattleWaitAction::New() const {
  return new S2C_BattleWaitAction;
}

void S2C_BattleWaitAction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    src_role_index_ = GOOGLE_LONGLONG(0);
    surplus_operation_second_ = 0;
    can_action_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_BattleWaitAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 src_role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &src_role_index_)));
          set_has_src_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_surplus_operation_second;
        break;
      }

      // required sint32 surplus_operation_second = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_surplus_operation_second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &surplus_operation_second_)));
          set_has_surplus_operation_second();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_can_action;
        break;
      }

      // required bool can_action = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_action:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_action_)));
          set_has_can_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_BattleWaitAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 src_role_index = 1;
  if (has_src_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->src_role_index(), output);
  }

  // required sint32 surplus_operation_second = 2;
  if (has_surplus_operation_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->surplus_operation_second(), output);
  }

  // required bool can_action = 3;
  if (has_can_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->can_action(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_BattleWaitAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 src_role_index = 1;
  if (has_src_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->src_role_index(), target);
  }

  // required sint32 surplus_operation_second = 2;
  if (has_surplus_operation_second()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->surplus_operation_second(), target);
  }

  // required bool can_action = 3;
  if (has_can_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->can_action(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_BattleWaitAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 src_role_index = 1;
    if (has_src_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->src_role_index());
    }

    // required sint32 surplus_operation_second = 2;
    if (has_surplus_operation_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->surplus_operation_second());
    }

    // required bool can_action = 3;
    if (has_can_action()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_BattleWaitAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_BattleWaitAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_BattleWaitAction*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_BattleWaitAction::MergeFrom(const S2C_BattleWaitAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_role_index()) {
      set_src_role_index(from.src_role_index());
    }
    if (from.has_surplus_operation_second()) {
      set_surplus_operation_second(from.surplus_operation_second());
    }
    if (from.has_can_action()) {
      set_can_action(from.can_action());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_BattleWaitAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_BattleWaitAction::CopyFrom(const S2C_BattleWaitAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_BattleWaitAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2C_BattleWaitAction::Swap(S2C_BattleWaitAction* other) {
  if (other != this) {
    std::swap(src_role_index_, other->src_role_index_);
    std::swap(surplus_operation_second_, other->surplus_operation_second_);
    std::swap(can_action_, other->can_action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_BattleWaitAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_BattleWaitAction_descriptor_;
  metadata.reflection = S2C_BattleWaitAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_BattleCommandDefend::kRoleIndexFieldNumber;
#endif  // !_MSC_VER

C2S_BattleCommandDefend::C2S_BattleCommandDefend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_BattleCommandDefend::InitAsDefaultInstance() {
}

C2S_BattleCommandDefend::C2S_BattleCommandDefend(const C2S_BattleCommandDefend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_BattleCommandDefend::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_BattleCommandDefend::~C2S_BattleCommandDefend() {
  SharedDtor();
}

void C2S_BattleCommandDefend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_BattleCommandDefend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_BattleCommandDefend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_BattleCommandDefend_descriptor_;
}

const C2S_BattleCommandDefend& C2S_BattleCommandDefend::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Battle_2eproto();
  return *default_instance_;
}

C2S_BattleCommandDefend* C2S_BattleCommandDefend::default_instance_ = nullptr;

C2S_BattleCommandDefend* C2S_BattleCommandDefend::New() const {
  return new C2S_BattleCommandDefend;
}

void C2S_BattleCommandDefend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_BattleCommandDefend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_BattleCommandDefend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->role_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_BattleCommandDefend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->role_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_BattleCommandDefend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->role_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_BattleCommandDefend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_BattleCommandDefend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_BattleCommandDefend*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_BattleCommandDefend::MergeFrom(const C2S_BattleCommandDefend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_BattleCommandDefend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_BattleCommandDefend::CopyFrom(const C2S_BattleCommandDefend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_BattleCommandDefend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2S_BattleCommandDefend::Swap(C2S_BattleCommandDefend* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_BattleCommandDefend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_BattleCommandDefend_descriptor_;
  metadata.reflection = C2S_BattleCommandDefend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_BattleCommandDefend::kRoleIndexFieldNumber;
const int S2C_BattleCommandDefend::kRecoveryHpFieldNumber;
const int S2C_BattleCommandDefend::kRecoveryMpFieldNumber;
const int S2C_BattleCommandDefend::kRecoveryActionFieldNumber;
#endif  // !_MSC_VER

S2C_BattleCommandDefend::S2C_BattleCommandDefend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_BattleCommandDefend::InitAsDefaultInstance() {
}

S2C_BattleCommandDefend::S2C_BattleCommandDefend(const S2C_BattleCommandDefend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_BattleCommandDefend::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  recovery_hp_ = 0;
  recovery_mp_ = 0;
  recovery_action_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_BattleCommandDefend::~S2C_BattleCommandDefend() {
  SharedDtor();
}

void S2C_BattleCommandDefend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2C_BattleCommandDefend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_BattleCommandDefend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_BattleCommandDefend_descriptor_;
}

const S2C_BattleCommandDefend& S2C_BattleCommandDefend::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Battle_2eproto();
  return *default_instance_;
}

S2C_BattleCommandDefend* S2C_BattleCommandDefend::default_instance_ = nullptr;

S2C_BattleCommandDefend* S2C_BattleCommandDefend::New() const {
  return new S2C_BattleCommandDefend;
}

void S2C_BattleCommandDefend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    recovery_hp_ = 0;
    recovery_mp_ = 0;
    recovery_action_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_BattleCommandDefend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_recovery_hp;
        break;
      }

      // required sint32 recovery_hp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recovery_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &recovery_hp_)));
          set_has_recovery_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_recovery_mp;
        break;
      }

      // required sint32 recovery_mp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recovery_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &recovery_mp_)));
          set_has_recovery_mp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_recovery_action;
        break;
      }

      // required sint32 recovery_action = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recovery_action:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &recovery_action_)));
          set_has_recovery_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_BattleCommandDefend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->role_index(), output);
  }

  // required sint32 recovery_hp = 2;
  if (has_recovery_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->recovery_hp(), output);
  }

  // required sint32 recovery_mp = 3;
  if (has_recovery_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->recovery_mp(), output);
  }

  // required sint32 recovery_action = 4;
  if (has_recovery_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->recovery_action(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_BattleCommandDefend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->role_index(), target);
  }

  // required sint32 recovery_hp = 2;
  if (has_recovery_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->recovery_hp(), target);
  }

  // required sint32 recovery_mp = 3;
  if (has_recovery_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->recovery_mp(), target);
  }

  // required sint32 recovery_action = 4;
  if (has_recovery_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->recovery_action(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_BattleCommandDefend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->role_index());
    }

    // required sint32 recovery_hp = 2;
    if (has_recovery_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->recovery_hp());
    }

    // required sint32 recovery_mp = 3;
    if (has_recovery_mp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->recovery_mp());
    }

    // required sint32 recovery_action = 4;
    if (has_recovery_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->recovery_action());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_BattleCommandDefend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_BattleCommandDefend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_BattleCommandDefend*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_BattleCommandDefend::MergeFrom(const S2C_BattleCommandDefend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_recovery_hp()) {
      set_recovery_hp(from.recovery_hp());
    }
    if (from.has_recovery_mp()) {
      set_recovery_mp(from.recovery_mp());
    }
    if (from.has_recovery_action()) {
      set_recovery_action(from.recovery_action());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_BattleCommandDefend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_BattleCommandDefend::CopyFrom(const S2C_BattleCommandDefend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_BattleCommandDefend::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void S2C_BattleCommandDefend::Swap(S2C_BattleCommandDefend* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(recovery_hp_, other->recovery_hp_);
    std::swap(recovery_mp_, other->recovery_mp_);
    std::swap(recovery_action_, other->recovery_action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_BattleCommandDefend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_BattleCommandDefend_descriptor_;
  metadata.reflection = S2C_BattleCommandDefend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_BattleCommandDamage::kRoleIndexFieldNumber;
const int S2C_BattleCommandDamage::kDamageHpFieldNumber;
const int S2C_BattleCommandDamage::kDamageMpFieldNumber;
#endif  // !_MSC_VER

S2C_BattleCommandDamage::S2C_BattleCommandDamage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_BattleCommandDamage::InitAsDefaultInstance() {
}

S2C_BattleCommandDamage::S2C_BattleCommandDamage(const S2C_BattleCommandDamage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_BattleCommandDamage::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  damage_hp_ = 0;
  damage_mp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_BattleCommandDamage::~S2C_BattleCommandDamage() {
  SharedDtor();
}

void S2C_BattleCommandDamage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2C_BattleCommandDamage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_BattleCommandDamage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_BattleCommandDamage_descriptor_;
}

const S2C_BattleCommandDamage& S2C_BattleCommandDamage::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Battle_2eproto();
  return *default_instance_;
}

S2C_BattleCommandDamage* S2C_BattleCommandDamage::default_instance_ = nullptr;

S2C_BattleCommandDamage* S2C_BattleCommandDamage::New() const {
  return new S2C_BattleCommandDamage;
}

void S2C_BattleCommandDamage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    damage_hp_ = 0;
    damage_mp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_BattleCommandDamage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_damage_hp;
        break;
      }

      // required sint32 damage_hp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &damage_hp_)));
          set_has_damage_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_damage_mp;
        break;
      }

      // required sint32 damage_mp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &damage_mp_)));
          set_has_damage_mp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_BattleCommandDamage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->role_index(), output);
  }

  // required sint32 damage_hp = 2;
  if (has_damage_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->damage_hp(), output);
  }

  // required sint32 damage_mp = 3;
  if (has_damage_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->damage_mp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_BattleCommandDamage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->role_index(), target);
  }

  // required sint32 damage_hp = 2;
  if (has_damage_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->damage_hp(), target);
  }

  // required sint32 damage_mp = 3;
  if (has_damage_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->damage_mp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_BattleCommandDamage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->role_index());
    }

    // required sint32 damage_hp = 2;
    if (has_damage_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->damage_hp());
    }

    // required sint32 damage_mp = 3;
    if (has_damage_mp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->damage_mp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_BattleCommandDamage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_BattleCommandDamage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_BattleCommandDamage*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_BattleCommandDamage::MergeFrom(const S2C_BattleCommandDamage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_damage_hp()) {
      set_damage_hp(from.damage_hp());
    }
    if (from.has_damage_mp()) {
      set_damage_mp(from.damage_mp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_BattleCommandDamage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_BattleCommandDamage::CopyFrom(const S2C_BattleCommandDamage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_BattleCommandDamage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2C_BattleCommandDamage::Swap(S2C_BattleCommandDamage* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(damage_hp_, other->damage_hp_);
    std::swap(damage_mp_, other->damage_mp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_BattleCommandDamage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_BattleCommandDamage_descriptor_;
  metadata.reflection = S2C_BattleCommandDamage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleSkillBuffInfo::kBuffIdFieldNumber;
const int BattleSkillBuffInfo::kSurplusFramesFieldNumber;
const int BattleSkillBuffInfo::kListParamInt32FieldNumber;
const int BattleSkillBuffInfo::kListParamFloatFieldNumber;
const int BattleSkillBuffInfo::kListParamStringFieldNumber;
#endif  // !_MSC_VER

BattleSkillBuffInfo::BattleSkillBuffInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleSkillBuffInfo::InitAsDefaultInstance() {
}

BattleSkillBuffInfo::BattleSkillBuffInfo(const BattleSkillBuffInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleSkillBuffInfo::SharedCtor() {
  _cached_size_ = 0;
  buff_id_ = 0;
  surplus_frames_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleSkillBuffInfo::~BattleSkillBuffInfo() {
  SharedDtor();
}

void BattleSkillBuffInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleSkillBuffInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleSkillBuffInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleSkillBuffInfo_descriptor_;
}

const BattleSkillBuffInfo& BattleSkillBuffInfo::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Battle_2eproto();
  return *default_instance_;
}

BattleSkillBuffInfo* BattleSkillBuffInfo::default_instance_ = nullptr;

BattleSkillBuffInfo* BattleSkillBuffInfo::New() const {
  return new BattleSkillBuffInfo;
}

void BattleSkillBuffInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buff_id_ = 0;
    surplus_frames_ = 0;
  }
  list_param_int32_.Clear();
  list_param_float_.Clear();
  list_param_string_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleSkillBuffInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 buff_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &buff_id_)));
          set_has_buff_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_surplus_frames;
        break;
      }

      // required sint32 surplus_frames = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_surplus_frames:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &surplus_frames_)));
          set_has_surplus_frames();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_list_param_int32;
        break;
      }

      // repeated sint32 list_param_int32 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_list_param_int32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 40, input, this->mutable_list_param_int32())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_list_param_int32())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_list_param_int32;
        if (input->ExpectTag(53)) goto parse_list_param_float;
        break;
      }

      // repeated float list_param_float = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_list_param_float:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 53, input, this->mutable_list_param_float())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_list_param_float())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_list_param_float;
        if (input->ExpectTag(58)) goto parse_list_param_string;
        break;
      }

      // repeated bytes list_param_string = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_param_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_list_param_string()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_list_param_string;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleSkillBuffInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 buff_id = 1;
  if (has_buff_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->buff_id(), output);
  }

  // required sint32 surplus_frames = 2;
  if (has_surplus_frames()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->surplus_frames(), output);
  }

  // repeated sint32 list_param_int32 = 5;
  for (int i = 0; i < this->list_param_int32_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      5, this->list_param_int32(i), output);
  }

  // repeated float list_param_float = 6;
  for (int i = 0; i < this->list_param_float_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      6, this->list_param_float(i), output);
  }

  // repeated bytes list_param_string = 7;
  for (int i = 0; i < this->list_param_string_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->list_param_string(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleSkillBuffInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 buff_id = 1;
  if (has_buff_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->buff_id(), target);
  }

  // required sint32 surplus_frames = 2;
  if (has_surplus_frames()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->surplus_frames(), target);
  }

  // repeated sint32 list_param_int32 = 5;
  for (int i = 0; i < this->list_param_int32_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32ToArray(5, this->list_param_int32(i), target);
  }

  // repeated float list_param_float = 6;
  for (int i = 0; i < this->list_param_float_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(6, this->list_param_float(i), target);
  }

  // repeated bytes list_param_string = 7;
  for (int i = 0; i < this->list_param_string_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(7, this->list_param_string(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleSkillBuffInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 buff_id = 1;
    if (has_buff_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->buff_id());
    }

    // required sint32 surplus_frames = 2;
    if (has_surplus_frames()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->surplus_frames());
    }

  }
  // repeated sint32 list_param_int32 = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->list_param_int32_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->list_param_int32(i));
    }
    total_size += 1 * this->list_param_int32_size() + data_size;
  }

  // repeated float list_param_float = 6;
  {
    int data_size = 0;
    data_size = 4 * this->list_param_float_size();
    total_size += 1 * this->list_param_float_size() + data_size;
  }

  // repeated bytes list_param_string = 7;
  total_size += 1 * this->list_param_string_size();
  for (int i = 0; i < this->list_param_string_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->list_param_string(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleSkillBuffInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleSkillBuffInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleSkillBuffInfo*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleSkillBuffInfo::MergeFrom(const BattleSkillBuffInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_param_int32_.MergeFrom(from.list_param_int32_);
  list_param_float_.MergeFrom(from.list_param_float_);
  list_param_string_.MergeFrom(from.list_param_string_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buff_id()) {
      set_buff_id(from.buff_id());
    }
    if (from.has_surplus_frames()) {
      set_surplus_frames(from.surplus_frames());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleSkillBuffInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleSkillBuffInfo::CopyFrom(const BattleSkillBuffInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleSkillBuffInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BattleSkillBuffInfo::Swap(BattleSkillBuffInfo* other) {
  if (other != this) {
    std::swap(buff_id_, other->buff_id_);
    std::swap(surplus_frames_, other->surplus_frames_);
    list_param_int32_.Swap(&other->list_param_int32_);
    list_param_float_.Swap(&other->list_param_float_);
    list_param_string_.Swap(&other->list_param_string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleSkillBuffInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleSkillBuffInfo_descriptor_;
  metadata.reflection = BattleSkillBuffInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Ask_SetDefaultSkillType::kRoleIndexFieldNumber;
const int C2S_Ask_SetDefaultSkillType::kTarRoleIndexFieldNumber;
const int C2S_Ask_SetDefaultSkillType::kDefaultSkillNameFieldNumber;
#endif  // !_MSC_VER

C2S_Ask_SetDefaultSkillType::C2S_Ask_SetDefaultSkillType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Ask_SetDefaultSkillType::InitAsDefaultInstance() {
}

C2S_Ask_SetDefaultSkillType::C2S_Ask_SetDefaultSkillType(const C2S_Ask_SetDefaultSkillType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Ask_SetDefaultSkillType::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  tar_role_index_ = GOOGLE_LONGLONG(0);
  default_skill_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Ask_SetDefaultSkillType::~C2S_Ask_SetDefaultSkillType() {
  SharedDtor();
}

void C2S_Ask_SetDefaultSkillType::SharedDtor() {
  if (default_skill_name_ != &::google::protobuf::internal::kEmptyString) {
    delete default_skill_name_;
  }
  if (this != default_instance_) {
  }
}

void C2S_Ask_SetDefaultSkillType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Ask_SetDefaultSkillType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Ask_SetDefaultSkillType_descriptor_;
}

const C2S_Ask_SetDefaultSkillType& C2S_Ask_SetDefaultSkillType::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Battle_2eproto();
  return *default_instance_;
}

C2S_Ask_SetDefaultSkillType* C2S_Ask_SetDefaultSkillType::default_instance_ = nullptr;

C2S_Ask_SetDefaultSkillType* C2S_Ask_SetDefaultSkillType::New() const {
  return new C2S_Ask_SetDefaultSkillType;
}

void C2S_Ask_SetDefaultSkillType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    tar_role_index_ = GOOGLE_LONGLONG(0);
    if (has_default_skill_name()) {
      if (default_skill_name_ != &::google::protobuf::internal::kEmptyString) {
        default_skill_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Ask_SetDefaultSkillType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tar_role_index;
        break;
      }

      // required sint64 tar_role_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tar_role_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &tar_role_index_)));
          set_has_tar_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_default_skill_name;
        break;
      }

      // required bytes default_skill_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_default_skill_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_default_skill_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Ask_SetDefaultSkillType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->role_index(), output);
  }

  // required sint64 tar_role_index = 2;
  if (has_tar_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->tar_role_index(), output);
  }

  // required bytes default_skill_name = 3;
  if (has_default_skill_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->default_skill_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Ask_SetDefaultSkillType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->role_index(), target);
  }

  // required sint64 tar_role_index = 2;
  if (has_tar_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->tar_role_index(), target);
  }

  // required bytes default_skill_name = 3;
  if (has_default_skill_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->default_skill_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Ask_SetDefaultSkillType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->role_index());
    }

    // required sint64 tar_role_index = 2;
    if (has_tar_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->tar_role_index());
    }

    // required bytes default_skill_name = 3;
    if (has_default_skill_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->default_skill_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Ask_SetDefaultSkillType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Ask_SetDefaultSkillType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Ask_SetDefaultSkillType*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Ask_SetDefaultSkillType::MergeFrom(const C2S_Ask_SetDefaultSkillType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_tar_role_index()) {
      set_tar_role_index(from.tar_role_index());
    }
    if (from.has_default_skill_name()) {
      set_default_skill_name(from.default_skill_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Ask_SetDefaultSkillType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Ask_SetDefaultSkillType::CopyFrom(const C2S_Ask_SetDefaultSkillType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Ask_SetDefaultSkillType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void C2S_Ask_SetDefaultSkillType::Swap(C2S_Ask_SetDefaultSkillType* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(tar_role_index_, other->tar_role_index_);
    std::swap(default_skill_name_, other->default_skill_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Ask_SetDefaultSkillType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Ask_SetDefaultSkillType_descriptor_;
  metadata.reflection = C2S_Ask_SetDefaultSkillType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_BattleCommandAttack::kRoleIndexFieldNumber;
const int C2S_BattleCommandAttack::kTarRoleIndexFieldNumber;
#endif  // !_MSC_VER

C2S_BattleCommandAttack::C2S_BattleCommandAttack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_BattleCommandAttack::InitAsDefaultInstance() {
}

C2S_BattleCommandAttack::C2S_BattleCommandAttack(const C2S_BattleCommandAttack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_BattleCommandAttack::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  tar_role_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_BattleCommandAttack::~C2S_BattleCommandAttack() {
  SharedDtor();
}

void C2S_BattleCommandAttack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_BattleCommandAttack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_BattleCommandAttack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_BattleCommandAttack_descriptor_;
}

const C2S_BattleCommandAttack& C2S_BattleCommandAttack::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Battle_2eproto();
  return *default_instance_;
}

C2S_BattleCommandAttack* C2S_BattleCommandAttack::default_instance_ = nullptr;

C2S_BattleCommandAttack* C2S_BattleCommandAttack::New() const {
  return new C2S_BattleCommandAttack;
}

void C2S_BattleCommandAttack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    tar_role_index_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_BattleCommandAttack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tar_role_index;
        break;
      }

      // required sint64 tar_role_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tar_role_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &tar_role_index_)));
          set_has_tar_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_BattleCommandAttack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->role_index(), output);
  }

  // required sint64 tar_role_index = 2;
  if (has_tar_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->tar_role_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_BattleCommandAttack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->role_index(), target);
  }

  // required sint64 tar_role_index = 2;
  if (has_tar_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->tar_role_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_BattleCommandAttack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->role_index());
    }

    // required sint64 tar_role_index = 2;
    if (has_tar_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->tar_role_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_BattleCommandAttack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_BattleCommandAttack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_BattleCommandAttack*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_BattleCommandAttack::MergeFrom(const C2S_BattleCommandAttack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_tar_role_index()) {
      set_tar_role_index(from.tar_role_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_BattleCommandAttack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_BattleCommandAttack::CopyFrom(const C2S_BattleCommandAttack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_BattleCommandAttack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C2S_BattleCommandAttack::Swap(C2S_BattleCommandAttack* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(tar_role_index_, other->tar_role_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_BattleCommandAttack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_BattleCommandAttack_descriptor_;
  metadata.reflection = C2S_BattleCommandAttack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleCommandAttackInfo::kTarRoleIndexFieldNumber;
const int BattleCommandAttackInfo::kDamageFieldNumber;
const int BattleCommandAttackInfo::kCritFieldNumber;
const int BattleCommandAttackInfo::kDeadlyFieldNumber;
const int BattleCommandAttackInfo::kMissFieldNumber;
const int BattleCommandAttackInfo::kListBuffFieldNumber;
#endif  // !_MSC_VER

BattleCommandAttackInfo::BattleCommandAttackInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleCommandAttackInfo::InitAsDefaultInstance() {
}

BattleCommandAttackInfo::BattleCommandAttackInfo(const BattleCommandAttackInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleCommandAttackInfo::SharedCtor() {
  _cached_size_ = 0;
  tar_role_index_ = GOOGLE_LONGLONG(0);
  damage_ = 0;
  crit_ = false;
  deadly_ = false;
  miss_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleCommandAttackInfo::~BattleCommandAttackInfo() {
  SharedDtor();
}

void BattleCommandAttackInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleCommandAttackInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleCommandAttackInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleCommandAttackInfo_descriptor_;
}

const BattleCommandAttackInfo& BattleCommandAttackInfo::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Battle_2eproto();
  return *default_instance_;
}

BattleCommandAttackInfo* BattleCommandAttackInfo::default_instance_ = nullptr;

BattleCommandAttackInfo* BattleCommandAttackInfo::New() const {
  return new BattleCommandAttackInfo;
}

void BattleCommandAttackInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tar_role_index_ = GOOGLE_LONGLONG(0);
    damage_ = 0;
    crit_ = false;
    deadly_ = false;
    miss_ = false;
  }
  list_buff_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleCommandAttackInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 tar_role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &tar_role_index_)));
          set_has_tar_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_damage;
        break;
      }

      // required sint32 damage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_crit;
        break;
      }

      // required bool crit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &crit_)));
          set_has_crit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_deadly;
        break;
      }

      // required bool deadly = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deadly:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deadly_)));
          set_has_deadly();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_miss;
        break;
      }

      // required bool miss = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_miss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &miss_)));
          set_has_miss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_list_buff;
        break;
      }

      // repeated .BattleSkillBuffInfo list_buff = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_buff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_buff()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_list_buff;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleCommandAttackInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 tar_role_index = 1;
  if (has_tar_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->tar_role_index(), output);
  }

  // required sint32 damage = 2;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->damage(), output);
  }

  // required bool crit = 3;
  if (has_crit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->crit(), output);
  }

  // required bool deadly = 4;
  if (has_deadly()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->deadly(), output);
  }

  // required bool miss = 5;
  if (has_miss()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->miss(), output);
  }

  // repeated .BattleSkillBuffInfo list_buff = 6;
  for (int i = 0; i < this->list_buff_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->list_buff(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleCommandAttackInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 tar_role_index = 1;
  if (has_tar_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->tar_role_index(), target);
  }

  // required sint32 damage = 2;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->damage(), target);
  }

  // required bool crit = 3;
  if (has_crit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->crit(), target);
  }

  // required bool deadly = 4;
  if (has_deadly()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->deadly(), target);
  }

  // required bool miss = 5;
  if (has_miss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->miss(), target);
  }

  // repeated .BattleSkillBuffInfo list_buff = 6;
  for (int i = 0; i < this->list_buff_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->list_buff(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleCommandAttackInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 tar_role_index = 1;
    if (has_tar_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->tar_role_index());
    }

    // required sint32 damage = 2;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->damage());
    }

    // required bool crit = 3;
    if (has_crit()) {
      total_size += 1 + 1;
    }

    // required bool deadly = 4;
    if (has_deadly()) {
      total_size += 1 + 1;
    }

    // required bool miss = 5;
    if (has_miss()) {
      total_size += 1 + 1;
    }

  }
  // repeated .BattleSkillBuffInfo list_buff = 6;
  total_size += 1 * this->list_buff_size();
  for (int i = 0; i < this->list_buff_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_buff(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleCommandAttackInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleCommandAttackInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleCommandAttackInfo*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleCommandAttackInfo::MergeFrom(const BattleCommandAttackInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_buff_.MergeFrom(from.list_buff_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tar_role_index()) {
      set_tar_role_index(from.tar_role_index());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_crit()) {
      set_crit(from.crit());
    }
    if (from.has_deadly()) {
      set_deadly(from.deadly());
    }
    if (from.has_miss()) {
      set_miss(from.miss());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleCommandAttackInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleCommandAttackInfo::CopyFrom(const BattleCommandAttackInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleCommandAttackInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  for (int i = 0; i < list_buff_size(); i++) {
    if (!this->list_buff(i).IsInitialized()) return false;
  }
  return true;
}

void BattleCommandAttackInfo::Swap(BattleCommandAttackInfo* other) {
  if (other != this) {
    std::swap(tar_role_index_, other->tar_role_index_);
    std::swap(damage_, other->damage_);
    std::swap(crit_, other->crit_);
    std::swap(deadly_, other->deadly_);
    std::swap(miss_, other->miss_);
    list_buff_.Swap(&other->list_buff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleCommandAttackInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleCommandAttackInfo_descriptor_;
  metadata.reflection = BattleCommandAttackInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_BattleCommandAttack::kSrcRoleIndexFieldNumber;
const int S2C_BattleCommandAttack::kListTarFieldNumber;
#endif  // !_MSC_VER

S2C_BattleCommandAttack::S2C_BattleCommandAttack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_BattleCommandAttack::InitAsDefaultInstance() {
}

S2C_BattleCommandAttack::S2C_BattleCommandAttack(const S2C_BattleCommandAttack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_BattleCommandAttack::SharedCtor() {
  _cached_size_ = 0;
  src_role_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_BattleCommandAttack::~S2C_BattleCommandAttack() {
  SharedDtor();
}

void S2C_BattleCommandAttack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2C_BattleCommandAttack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_BattleCommandAttack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_BattleCommandAttack_descriptor_;
}

const S2C_BattleCommandAttack& S2C_BattleCommandAttack::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Battle_2eproto();
  return *default_instance_;
}

S2C_BattleCommandAttack* S2C_BattleCommandAttack::default_instance_ = nullptr;

S2C_BattleCommandAttack* S2C_BattleCommandAttack::New() const {
  return new S2C_BattleCommandAttack;
}

void S2C_BattleCommandAttack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    src_role_index_ = GOOGLE_LONGLONG(0);
  }
  list_tar_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_BattleCommandAttack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 src_role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &src_role_index_)));
          set_has_src_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list_tar;
        break;
      }

      // repeated .BattleCommandAttackInfo list_tar = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_tar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_tar()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list_tar;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_BattleCommandAttack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 src_role_index = 1;
  if (has_src_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->src_role_index(), output);
  }

  // repeated .BattleCommandAttackInfo list_tar = 2;
  for (int i = 0; i < this->list_tar_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list_tar(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_BattleCommandAttack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 src_role_index = 1;
  if (has_src_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->src_role_index(), target);
  }

  // repeated .BattleCommandAttackInfo list_tar = 2;
  for (int i = 0; i < this->list_tar_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->list_tar(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_BattleCommandAttack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 src_role_index = 1;
    if (has_src_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->src_role_index());
    }

  }
  // repeated .BattleCommandAttackInfo list_tar = 2;
  total_size += 1 * this->list_tar_size();
  for (int i = 0; i < this->list_tar_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_tar(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_BattleCommandAttack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_BattleCommandAttack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_BattleCommandAttack*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_BattleCommandAttack::MergeFrom(const S2C_BattleCommandAttack& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_tar_.MergeFrom(from.list_tar_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_role_index()) {
      set_src_role_index(from.src_role_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_BattleCommandAttack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_BattleCommandAttack::CopyFrom(const S2C_BattleCommandAttack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_BattleCommandAttack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < list_tar_size(); i++) {
    if (!this->list_tar(i).IsInitialized()) return false;
  }
  return true;
}

void S2C_BattleCommandAttack::Swap(S2C_BattleCommandAttack* other) {
  if (other != this) {
    std::swap(src_role_index_, other->src_role_index_);
    list_tar_.Swap(&other->list_tar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_BattleCommandAttack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_BattleCommandAttack_descriptor_;
  metadata.reflection = S2C_BattleCommandAttack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_BattleCommandUseSkill::kRoleIndexFieldNumber;
const int C2S_BattleCommandUseSkill::kTarRoleIndexFieldNumber;
const int C2S_BattleCommandUseSkill::kSkillNameFieldNumber;
#endif  // !_MSC_VER

C2S_BattleCommandUseSkill::C2S_BattleCommandUseSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_BattleCommandUseSkill::InitAsDefaultInstance() {
}

C2S_BattleCommandUseSkill::C2S_BattleCommandUseSkill(const C2S_BattleCommandUseSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_BattleCommandUseSkill::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  tar_role_index_ = GOOGLE_LONGLONG(0);
  skill_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_BattleCommandUseSkill::~C2S_BattleCommandUseSkill() {
  SharedDtor();
}

void C2S_BattleCommandUseSkill::SharedDtor() {
  if (skill_name_ != &::google::protobuf::internal::kEmptyString) {
    delete skill_name_;
  }
  if (this != default_instance_) {
  }
}

void C2S_BattleCommandUseSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_BattleCommandUseSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_BattleCommandUseSkill_descriptor_;
}

const C2S_BattleCommandUseSkill& C2S_BattleCommandUseSkill::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Battle_2eproto();
  return *default_instance_;
}

C2S_BattleCommandUseSkill* C2S_BattleCommandUseSkill::default_instance_ = nullptr;

C2S_BattleCommandUseSkill* C2S_BattleCommandUseSkill::New() const {
  return new C2S_BattleCommandUseSkill;
}

void C2S_BattleCommandUseSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    tar_role_index_ = GOOGLE_LONGLONG(0);
    if (has_skill_name()) {
      if (skill_name_ != &::google::protobuf::internal::kEmptyString) {
        skill_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_BattleCommandUseSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tar_role_index;
        break;
      }

      // required sint64 tar_role_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tar_role_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &tar_role_index_)));
          set_has_tar_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_skill_name;
        break;
      }

      // required bytes skill_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_skill_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_BattleCommandUseSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->role_index(), output);
  }

  // required sint64 tar_role_index = 2;
  if (has_tar_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->tar_role_index(), output);
  }

  // required bytes skill_name = 3;
  if (has_skill_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->skill_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_BattleCommandUseSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->role_index(), target);
  }

  // required sint64 tar_role_index = 2;
  if (has_tar_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->tar_role_index(), target);
  }

  // required bytes skill_name = 3;
  if (has_skill_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->skill_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_BattleCommandUseSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->role_index());
    }

    // required sint64 tar_role_index = 2;
    if (has_tar_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->tar_role_index());
    }

    // required bytes skill_name = 3;
    if (has_skill_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->skill_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_BattleCommandUseSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_BattleCommandUseSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_BattleCommandUseSkill*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_BattleCommandUseSkill::MergeFrom(const C2S_BattleCommandUseSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_tar_role_index()) {
      set_tar_role_index(from.tar_role_index());
    }
    if (from.has_skill_name()) {
      set_skill_name(from.skill_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_BattleCommandUseSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_BattleCommandUseSkill::CopyFrom(const C2S_BattleCommandUseSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_BattleCommandUseSkill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void C2S_BattleCommandUseSkill::Swap(C2S_BattleCommandUseSkill* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(tar_role_index_, other->tar_role_index_);
    std::swap(skill_name_, other->skill_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_BattleCommandUseSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_BattleCommandUseSkill_descriptor_;
  metadata.reflection = C2S_BattleCommandUseSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleCommandSkillInfo::kTarRoleIndexFieldNumber;
const int BattleCommandSkillInfo::kCritFieldNumber;
const int BattleCommandSkillInfo::kListPowerFieldNumber;
const int BattleCommandSkillInfo::kListBuffFieldNumber;
#endif  // !_MSC_VER

BattleCommandSkillInfo::BattleCommandSkillInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleCommandSkillInfo::InitAsDefaultInstance() {
}

BattleCommandSkillInfo::BattleCommandSkillInfo(const BattleCommandSkillInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleCommandSkillInfo::SharedCtor() {
  _cached_size_ = 0;
  tar_role_index_ = GOOGLE_LONGLONG(0);
  crit_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleCommandSkillInfo::~BattleCommandSkillInfo() {
  SharedDtor();
}

void BattleCommandSkillInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleCommandSkillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleCommandSkillInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleCommandSkillInfo_descriptor_;
}

const BattleCommandSkillInfo& BattleCommandSkillInfo::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Battle_2eproto();
  return *default_instance_;
}

BattleCommandSkillInfo* BattleCommandSkillInfo::default_instance_ = nullptr;

BattleCommandSkillInfo* BattleCommandSkillInfo::New() const {
  return new BattleCommandSkillInfo;
}

void BattleCommandSkillInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tar_role_index_ = GOOGLE_LONGLONG(0);
    crit_ = false;
  }
  list_power_.Clear();
  list_buff_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleCommandSkillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 tar_role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &tar_role_index_)));
          set_has_tar_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_crit;
        break;
      }

      // required bool crit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &crit_)));
          set_has_crit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_list_power;
        break;
      }

      // repeated sint32 list_power = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_list_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 24, input, this->mutable_list_power())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_list_power())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_list_power;
        if (input->ExpectTag(34)) goto parse_list_buff;
        break;
      }

      // repeated .BattleSkillBuffInfo list_buff = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_buff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_buff()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_list_buff;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleCommandSkillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 tar_role_index = 1;
  if (has_tar_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->tar_role_index(), output);
  }

  // required bool crit = 2;
  if (has_crit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->crit(), output);
  }

  // repeated sint32 list_power = 3;
  for (int i = 0; i < this->list_power_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      3, this->list_power(i), output);
  }

  // repeated .BattleSkillBuffInfo list_buff = 4;
  for (int i = 0; i < this->list_buff_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->list_buff(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleCommandSkillInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 tar_role_index = 1;
  if (has_tar_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->tar_role_index(), target);
  }

  // required bool crit = 2;
  if (has_crit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->crit(), target);
  }

  // repeated sint32 list_power = 3;
  for (int i = 0; i < this->list_power_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32ToArray(3, this->list_power(i), target);
  }

  // repeated .BattleSkillBuffInfo list_buff = 4;
  for (int i = 0; i < this->list_buff_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->list_buff(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleCommandSkillInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 tar_role_index = 1;
    if (has_tar_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->tar_role_index());
    }

    // required bool crit = 2;
    if (has_crit()) {
      total_size += 1 + 1;
    }

  }
  // repeated sint32 list_power = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->list_power_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->list_power(i));
    }
    total_size += 1 * this->list_power_size() + data_size;
  }

  // repeated .BattleSkillBuffInfo list_buff = 4;
  total_size += 1 * this->list_buff_size();
  for (int i = 0; i < this->list_buff_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_buff(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleCommandSkillInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleCommandSkillInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleCommandSkillInfo*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleCommandSkillInfo::MergeFrom(const BattleCommandSkillInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_power_.MergeFrom(from.list_power_);
  list_buff_.MergeFrom(from.list_buff_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tar_role_index()) {
      set_tar_role_index(from.tar_role_index());
    }
    if (from.has_crit()) {
      set_crit(from.crit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleCommandSkillInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleCommandSkillInfo::CopyFrom(const BattleCommandSkillInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleCommandSkillInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < list_buff_size(); i++) {
    if (!this->list_buff(i).IsInitialized()) return false;
  }
  return true;
}

void BattleCommandSkillInfo::Swap(BattleCommandSkillInfo* other) {
  if (other != this) {
    std::swap(tar_role_index_, other->tar_role_index_);
    std::swap(crit_, other->crit_);
    list_power_.Swap(&other->list_power_);
    list_buff_.Swap(&other->list_buff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleCommandSkillInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleCommandSkillInfo_descriptor_;
  metadata.reflection = BattleCommandSkillInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_BattleCommandUseSkill::kSrcRoleIndexFieldNumber;
const int S2C_BattleCommandUseSkill::kSrcRoleNewHpFieldNumber;
const int S2C_BattleCommandUseSkill::kSrcRoleNewMpFieldNumber;
const int S2C_BattleCommandUseSkill::kSkillNameFieldNumber;
const int S2C_BattleCommandUseSkill::kSkillInfoFieldNumber;
const int S2C_BattleCommandUseSkill::kListTarFieldNumber;
const int S2C_BattleCommandUseSkill::kListTarSplashFieldNumber;
#endif  // !_MSC_VER

S2C_BattleCommandUseSkill::S2C_BattleCommandUseSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_BattleCommandUseSkill::InitAsDefaultInstance() {
  skill_info_ = const_cast< ::universal_data*>(&::universal_data::default_instance());
}

S2C_BattleCommandUseSkill::S2C_BattleCommandUseSkill(const S2C_BattleCommandUseSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_BattleCommandUseSkill::SharedCtor() {
  _cached_size_ = 0;
  src_role_index_ = GOOGLE_LONGLONG(0);
  src_role_new_hp_ = 0;
  src_role_new_mp_ = 0;
  skill_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  skill_info_ = nullptr;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_BattleCommandUseSkill::~S2C_BattleCommandUseSkill() {
  SharedDtor();
}

void S2C_BattleCommandUseSkill::SharedDtor() {
  if (skill_name_ != &::google::protobuf::internal::kEmptyString) {
    delete skill_name_;
  }
  if (this != default_instance_) {
    delete skill_info_;
  }
}

void S2C_BattleCommandUseSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_BattleCommandUseSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_BattleCommandUseSkill_descriptor_;
}

const S2C_BattleCommandUseSkill& S2C_BattleCommandUseSkill::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Battle_2eproto();
  return *default_instance_;
}

S2C_BattleCommandUseSkill* S2C_BattleCommandUseSkill::default_instance_ = nullptr;

S2C_BattleCommandUseSkill* S2C_BattleCommandUseSkill::New() const {
  return new S2C_BattleCommandUseSkill;
}

void S2C_BattleCommandUseSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    src_role_index_ = GOOGLE_LONGLONG(0);
    src_role_new_hp_ = 0;
    src_role_new_mp_ = 0;
    if (has_skill_name()) {
      if (skill_name_ != &::google::protobuf::internal::kEmptyString) {
        skill_name_->clear();
      }
    }
    if (has_skill_info()) {
      if (skill_info_ != nullptr) skill_info_->::universal_data::Clear();
    }
  }
  list_tar_.Clear();
  list_tar_splash_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_BattleCommandUseSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 src_role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &src_role_index_)));
          set_has_src_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_src_role_new_hp;
        break;
      }

      // required sint32 src_role_new_hp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_role_new_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &src_role_new_hp_)));
          set_has_src_role_new_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_src_role_new_mp;
        break;
      }

      // required sint32 src_role_new_mp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_role_new_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &src_role_new_mp_)));
          set_has_src_role_new_mp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_skill_name;
        break;
      }

      // required bytes skill_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_skill_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_skill_info;
        break;
      }

      // required .universal_data skill_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_list_tar;
        break;
      }

      // repeated .BattleCommandSkillInfo list_tar = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_tar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_tar()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_list_tar;
        if (input->ExpectTag(58)) goto parse_list_tar_splash;
        break;
      }

      // repeated .BattleCommandSkillInfo list_tar_splash = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_tar_splash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_tar_splash()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_list_tar_splash;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_BattleCommandUseSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 src_role_index = 1;
  if (has_src_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->src_role_index(), output);
  }

  // required sint32 src_role_new_hp = 2;
  if (has_src_role_new_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->src_role_new_hp(), output);
  }

  // required sint32 src_role_new_mp = 3;
  if (has_src_role_new_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->src_role_new_mp(), output);
  }

  // required bytes skill_name = 4;
  if (has_skill_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->skill_name(), output);
  }

  // required .universal_data skill_info = 5;
  if (has_skill_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->skill_info(), output);
  }

  // repeated .BattleCommandSkillInfo list_tar = 6;
  for (int i = 0; i < this->list_tar_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->list_tar(i), output);
  }

  // repeated .BattleCommandSkillInfo list_tar_splash = 7;
  for (int i = 0; i < this->list_tar_splash_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->list_tar_splash(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_BattleCommandUseSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 src_role_index = 1;
  if (has_src_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->src_role_index(), target);
  }

  // required sint32 src_role_new_hp = 2;
  if (has_src_role_new_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->src_role_new_hp(), target);
  }

  // required sint32 src_role_new_mp = 3;
  if (has_src_role_new_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->src_role_new_mp(), target);
  }

  // required bytes skill_name = 4;
  if (has_skill_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->skill_name(), target);
  }

  // required .universal_data skill_info = 5;
  if (has_skill_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->skill_info(), target);
  }

  // repeated .BattleCommandSkillInfo list_tar = 6;
  for (int i = 0; i < this->list_tar_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->list_tar(i), target);
  }

  // repeated .BattleCommandSkillInfo list_tar_splash = 7;
  for (int i = 0; i < this->list_tar_splash_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->list_tar_splash(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_BattleCommandUseSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 src_role_index = 1;
    if (has_src_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->src_role_index());
    }

    // required sint32 src_role_new_hp = 2;
    if (has_src_role_new_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->src_role_new_hp());
    }

    // required sint32 src_role_new_mp = 3;
    if (has_src_role_new_mp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->src_role_new_mp());
    }

    // required bytes skill_name = 4;
    if (has_skill_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->skill_name());
    }

    // required .universal_data skill_info = 5;
    if (has_skill_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill_info());
    }

  }
  // repeated .BattleCommandSkillInfo list_tar = 6;
  total_size += 1 * this->list_tar_size();
  for (int i = 0; i < this->list_tar_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_tar(i));
  }

  // repeated .BattleCommandSkillInfo list_tar_splash = 7;
  total_size += 1 * this->list_tar_splash_size();
  for (int i = 0; i < this->list_tar_splash_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_tar_splash(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_BattleCommandUseSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_BattleCommandUseSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_BattleCommandUseSkill*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_BattleCommandUseSkill::MergeFrom(const S2C_BattleCommandUseSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_tar_.MergeFrom(from.list_tar_);
  list_tar_splash_.MergeFrom(from.list_tar_splash_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_role_index()) {
      set_src_role_index(from.src_role_index());
    }
    if (from.has_src_role_new_hp()) {
      set_src_role_new_hp(from.src_role_new_hp());
    }
    if (from.has_src_role_new_mp()) {
      set_src_role_new_mp(from.src_role_new_mp());
    }
    if (from.has_skill_name()) {
      set_skill_name(from.skill_name());
    }
    if (from.has_skill_info()) {
      mutable_skill_info()->::universal_data::MergeFrom(from.skill_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_BattleCommandUseSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_BattleCommandUseSkill::CopyFrom(const S2C_BattleCommandUseSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_BattleCommandUseSkill::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  for (int i = 0; i < list_tar_size(); i++) {
    if (!this->list_tar(i).IsInitialized()) return false;
  }
  for (int i = 0; i < list_tar_splash_size(); i++) {
    if (!this->list_tar_splash(i).IsInitialized()) return false;
  }
  return true;
}

void S2C_BattleCommandUseSkill::Swap(S2C_BattleCommandUseSkill* other) {
  if (other != this) {
    std::swap(src_role_index_, other->src_role_index_);
    std::swap(src_role_new_hp_, other->src_role_new_hp_);
    std::swap(src_role_new_mp_, other->src_role_new_mp_);
    std::swap(skill_name_, other->skill_name_);
    std::swap(skill_info_, other->skill_info_);
    list_tar_.Swap(&other->list_tar_);
    list_tar_splash_.Swap(&other->list_tar_splash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_BattleCommandUseSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_BattleCommandUseSkill_descriptor_;
  metadata.reflection = S2C_BattleCommandUseSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_BattleCommandTriggerBuff::kTarRoleIndexFieldNumber;
const int S2C_BattleCommandTriggerBuff::kBuffFieldNumber;
#endif  // !_MSC_VER

S2C_BattleCommandTriggerBuff::S2C_BattleCommandTriggerBuff()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_BattleCommandTriggerBuff::InitAsDefaultInstance() {
  buff_ = const_cast< ::BattleSkillBuffInfo*>(&::BattleSkillBuffInfo::default_instance());
}

S2C_BattleCommandTriggerBuff::S2C_BattleCommandTriggerBuff(const S2C_BattleCommandTriggerBuff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_BattleCommandTriggerBuff::SharedCtor() {
  _cached_size_ = 0;
  tar_role_index_ = GOOGLE_LONGLONG(0);
  buff_ = nullptr;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_BattleCommandTriggerBuff::~S2C_BattleCommandTriggerBuff() {
  SharedDtor();
}

void S2C_BattleCommandTriggerBuff::SharedDtor() {
  if (this != default_instance_) {
    delete buff_;
  }
}

void S2C_BattleCommandTriggerBuff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_BattleCommandTriggerBuff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_BattleCommandTriggerBuff_descriptor_;
}

const S2C_BattleCommandTriggerBuff& S2C_BattleCommandTriggerBuff::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Battle_2eproto();
  return *default_instance_;
}

S2C_BattleCommandTriggerBuff* S2C_BattleCommandTriggerBuff::default_instance_ = nullptr;

S2C_BattleCommandTriggerBuff* S2C_BattleCommandTriggerBuff::New() const {
  return new S2C_BattleCommandTriggerBuff;
}

void S2C_BattleCommandTriggerBuff::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tar_role_index_ = GOOGLE_LONGLONG(0);
    if (has_buff()) {
      if (buff_ != nullptr) buff_->::BattleSkillBuffInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_BattleCommandTriggerBuff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 tar_role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &tar_role_index_)));
          set_has_tar_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_buff;
        break;
      }

      // required .BattleSkillBuffInfo buff = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buff()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_BattleCommandTriggerBuff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 tar_role_index = 1;
  if (has_tar_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->tar_role_index(), output);
  }

  // required .BattleSkillBuffInfo buff = 2;
  if (has_buff()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->buff(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_BattleCommandTriggerBuff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 tar_role_index = 1;
  if (has_tar_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->tar_role_index(), target);
  }

  // required .BattleSkillBuffInfo buff = 2;
  if (has_buff()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->buff(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_BattleCommandTriggerBuff::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 tar_role_index = 1;
    if (has_tar_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->tar_role_index());
    }

    // required .BattleSkillBuffInfo buff = 2;
    if (has_buff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buff());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_BattleCommandTriggerBuff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_BattleCommandTriggerBuff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_BattleCommandTriggerBuff*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_BattleCommandTriggerBuff::MergeFrom(const S2C_BattleCommandTriggerBuff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tar_role_index()) {
      set_tar_role_index(from.tar_role_index());
    }
    if (from.has_buff()) {
      mutable_buff()->::BattleSkillBuffInfo::MergeFrom(from.buff());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_BattleCommandTriggerBuff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_BattleCommandTriggerBuff::CopyFrom(const S2C_BattleCommandTriggerBuff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_BattleCommandTriggerBuff::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_buff()) {
    if (!this->buff().IsInitialized()) return false;
  }
  return true;
}

void S2C_BattleCommandTriggerBuff::Swap(S2C_BattleCommandTriggerBuff* other) {
  if (other != this) {
    std::swap(tar_role_index_, other->tar_role_index_);
    std::swap(buff_, other->buff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_BattleCommandTriggerBuff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_BattleCommandTriggerBuff_descriptor_;
  metadata.reflection = S2C_BattleCommandTriggerBuff_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_BattleCommandRemoveBuff::kTarRoleIndexFieldNumber;
const int S2C_BattleCommandRemoveBuff::kBuffIdFieldNumber;
#endif  // !_MSC_VER

S2C_BattleCommandRemoveBuff::S2C_BattleCommandRemoveBuff()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_BattleCommandRemoveBuff::InitAsDefaultInstance() {
}

S2C_BattleCommandRemoveBuff::S2C_BattleCommandRemoveBuff(const S2C_BattleCommandRemoveBuff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_BattleCommandRemoveBuff::SharedCtor() {
  _cached_size_ = 0;
  tar_role_index_ = GOOGLE_LONGLONG(0);
  buff_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_BattleCommandRemoveBuff::~S2C_BattleCommandRemoveBuff() {
  SharedDtor();
}

void S2C_BattleCommandRemoveBuff::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2C_BattleCommandRemoveBuff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_BattleCommandRemoveBuff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_BattleCommandRemoveBuff_descriptor_;
}

const S2C_BattleCommandRemoveBuff& S2C_BattleCommandRemoveBuff::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Battle_2eproto();
  return *default_instance_;
}

S2C_BattleCommandRemoveBuff* S2C_BattleCommandRemoveBuff::default_instance_ = nullptr;

S2C_BattleCommandRemoveBuff* S2C_BattleCommandRemoveBuff::New() const {
  return new S2C_BattleCommandRemoveBuff;
}

void S2C_BattleCommandRemoveBuff::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tar_role_index_ = GOOGLE_LONGLONG(0);
    buff_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_BattleCommandRemoveBuff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 tar_role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &tar_role_index_)));
          set_has_tar_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buff_id;
        break;
      }

      // required sint32 buff_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buff_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &buff_id_)));
          set_has_buff_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_BattleCommandRemoveBuff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 tar_role_index = 1;
  if (has_tar_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->tar_role_index(), output);
  }

  // required sint32 buff_id = 2;
  if (has_buff_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->buff_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_BattleCommandRemoveBuff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 tar_role_index = 1;
  if (has_tar_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->tar_role_index(), target);
  }

  // required sint32 buff_id = 2;
  if (has_buff_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->buff_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_BattleCommandRemoveBuff::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 tar_role_index = 1;
    if (has_tar_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->tar_role_index());
    }

    // required sint32 buff_id = 2;
    if (has_buff_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->buff_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_BattleCommandRemoveBuff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_BattleCommandRemoveBuff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_BattleCommandRemoveBuff*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_BattleCommandRemoveBuff::MergeFrom(const S2C_BattleCommandRemoveBuff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tar_role_index()) {
      set_tar_role_index(from.tar_role_index());
    }
    if (from.has_buff_id()) {
      set_buff_id(from.buff_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_BattleCommandRemoveBuff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_BattleCommandRemoveBuff::CopyFrom(const S2C_BattleCommandRemoveBuff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_BattleCommandRemoveBuff::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2C_BattleCommandRemoveBuff::Swap(S2C_BattleCommandRemoveBuff* other) {
  if (other != this) {
    std::swap(tar_role_index_, other->tar_role_index_);
    std::swap(buff_id_, other->buff_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_BattleCommandRemoveBuff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_BattleCommandRemoveBuff_descriptor_;
  metadata.reflection = S2C_BattleCommandRemoveBuff_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_BattleCommandCallSummon::kRoleIndexFieldNumber;
const int C2S_BattleCommandCallSummon::kSummonRoleIndexFieldNumber;
#endif  // !_MSC_VER

C2S_BattleCommandCallSummon::C2S_BattleCommandCallSummon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_BattleCommandCallSummon::InitAsDefaultInstance() {
}

C2S_BattleCommandCallSummon::C2S_BattleCommandCallSummon(const C2S_BattleCommandCallSummon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_BattleCommandCallSummon::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  summon_role_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_BattleCommandCallSummon::~C2S_BattleCommandCallSummon() {
  SharedDtor();
}

void C2S_BattleCommandCallSummon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_BattleCommandCallSummon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_BattleCommandCallSummon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_BattleCommandCallSummon_descriptor_;
}

const C2S_BattleCommandCallSummon& C2S_BattleCommandCallSummon::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Battle_2eproto();
  return *default_instance_;
}

C2S_BattleCommandCallSummon* C2S_BattleCommandCallSummon::default_instance_ = nullptr;

C2S_BattleCommandCallSummon* C2S_BattleCommandCallSummon::New() const {
  return new C2S_BattleCommandCallSummon;
}

void C2S_BattleCommandCallSummon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    summon_role_index_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_BattleCommandCallSummon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_summon_role_index;
        break;
      }

      // required sint64 summon_role_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_summon_role_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &summon_role_index_)));
          set_has_summon_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_BattleCommandCallSummon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->role_index(), output);
  }

  // required sint64 summon_role_index = 2;
  if (has_summon_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->summon_role_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_BattleCommandCallSummon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->role_index(), target);
  }

  // required sint64 summon_role_index = 2;
  if (has_summon_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->summon_role_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_BattleCommandCallSummon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->role_index());
    }

    // required sint64 summon_role_index = 2;
    if (has_summon_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->summon_role_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_BattleCommandCallSummon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_BattleCommandCallSummon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_BattleCommandCallSummon*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_BattleCommandCallSummon::MergeFrom(const C2S_BattleCommandCallSummon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_summon_role_index()) {
      set_summon_role_index(from.summon_role_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_BattleCommandCallSummon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_BattleCommandCallSummon::CopyFrom(const C2S_BattleCommandCallSummon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_BattleCommandCallSummon::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C2S_BattleCommandCallSummon::Swap(C2S_BattleCommandCallSummon* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(summon_role_index_, other->summon_role_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_BattleCommandCallSummon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_BattleCommandCallSummon_descriptor_;
  metadata.reflection = C2S_BattleCommandCallSummon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_BattleCommandActionDone::kRoleIndexFieldNumber;
#endif  // !_MSC_VER

C2S_BattleCommandActionDone::C2S_BattleCommandActionDone()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_BattleCommandActionDone::InitAsDefaultInstance() {
}

C2S_BattleCommandActionDone::C2S_BattleCommandActionDone(const C2S_BattleCommandActionDone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_BattleCommandActionDone::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_BattleCommandActionDone::~C2S_BattleCommandActionDone() {
  SharedDtor();
}

void C2S_BattleCommandActionDone::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_BattleCommandActionDone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_BattleCommandActionDone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_BattleCommandActionDone_descriptor_;
}

const C2S_BattleCommandActionDone& C2S_BattleCommandActionDone::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Battle_2eproto();
  return *default_instance_;
}

C2S_BattleCommandActionDone* C2S_BattleCommandActionDone::default_instance_ = nullptr;

C2S_BattleCommandActionDone* C2S_BattleCommandActionDone::New() const {
  return new C2S_BattleCommandActionDone;
}

void C2S_BattleCommandActionDone::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_BattleCommandActionDone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_BattleCommandActionDone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->role_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_BattleCommandActionDone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->role_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_BattleCommandActionDone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->role_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_BattleCommandActionDone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_BattleCommandActionDone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_BattleCommandActionDone*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_BattleCommandActionDone::MergeFrom(const C2S_BattleCommandActionDone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_BattleCommandActionDone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_BattleCommandActionDone::CopyFrom(const C2S_BattleCommandActionDone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_BattleCommandActionDone::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2S_BattleCommandActionDone::Swap(C2S_BattleCommandActionDone* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_BattleCommandActionDone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_BattleCommandActionDone_descriptor_;
  metadata.reflection = C2S_BattleCommandActionDone_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
