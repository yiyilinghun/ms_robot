// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Task.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Task.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* task_info_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  task_info_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_SyncCanAcceptTaskInfo_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_SyncCanAcceptTaskInfo_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_SyncAcceptedTaskInfo_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_SyncAcceptedTaskInfo_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_AcceptTask_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_AcceptTask_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_AcceptTask_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_AcceptTask_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_CompleteTask_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_CompleteTask_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_CompleteTask_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_CompleteTask_reflection_ = nullptr;

}  // namespace


void protobuf_AssignDesc_Task_2eproto() {
  protobuf_AddDesc_Task_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Task.proto");
  GOOGLE_CHECK(file != nullptr);
  task_info_descriptor_ = file->message_type(0);
  static const int task_info_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_info, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_info, task_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_info, task_name_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_info, task_des_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_info, task_npc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_info, list_task_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_info, list_task_progress_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_info, task_can_complete_),
  };
  task_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      task_info_descriptor_,
      task_info::default_instance_,
      task_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(task_info));
  S2C_SyncCanAcceptTaskInfo_descriptor_ = file->message_type(1);
  static const int S2C_SyncCanAcceptTaskInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_SyncCanAcceptTaskInfo, list_task_),
  };
  S2C_SyncCanAcceptTaskInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_SyncCanAcceptTaskInfo_descriptor_,
      S2C_SyncCanAcceptTaskInfo::default_instance_,
      S2C_SyncCanAcceptTaskInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_SyncCanAcceptTaskInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_SyncCanAcceptTaskInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_SyncCanAcceptTaskInfo));
  S2C_SyncAcceptedTaskInfo_descriptor_ = file->message_type(2);
  static const int S2C_SyncAcceptedTaskInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_SyncAcceptedTaskInfo, list_task_),
  };
  S2C_SyncAcceptedTaskInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_SyncAcceptedTaskInfo_descriptor_,
      S2C_SyncAcceptedTaskInfo::default_instance_,
      S2C_SyncAcceptedTaskInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_SyncAcceptedTaskInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_SyncAcceptedTaskInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_SyncAcceptedTaskInfo));
  C2S_AcceptTask_descriptor_ = file->message_type(3);
  static const int C2S_AcceptTask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_AcceptTask, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_AcceptTask, task_id_),
  };
  C2S_AcceptTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_AcceptTask_descriptor_,
      C2S_AcceptTask::default_instance_,
      C2S_AcceptTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_AcceptTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_AcceptTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_AcceptTask));
  S2C_AcceptTask_descriptor_ = file->message_type(4);
  static const int S2C_AcceptTask_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_AcceptTask, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_AcceptTask, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_AcceptTask, ret_code_),
  };
  S2C_AcceptTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_AcceptTask_descriptor_,
      S2C_AcceptTask::default_instance_,
      S2C_AcceptTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_AcceptTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_AcceptTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_AcceptTask));
  C2S_CompleteTask_descriptor_ = file->message_type(5);
  static const int C2S_CompleteTask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_CompleteTask, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_CompleteTask, task_id_),
  };
  C2S_CompleteTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_CompleteTask_descriptor_,
      C2S_CompleteTask::default_instance_,
      C2S_CompleteTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_CompleteTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_CompleteTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_CompleteTask));
  S2C_CompleteTask_descriptor_ = file->message_type(6);
  static const int S2C_CompleteTask_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_CompleteTask, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_CompleteTask, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_CompleteTask, ret_code_),
  };
  S2C_CompleteTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_CompleteTask_descriptor_,
      S2C_CompleteTask::default_instance_,
      S2C_CompleteTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_CompleteTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_CompleteTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_CompleteTask));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Task_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    task_info_descriptor_, &task_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_SyncCanAcceptTaskInfo_descriptor_, &S2C_SyncCanAcceptTaskInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_SyncAcceptedTaskInfo_descriptor_, &S2C_SyncAcceptedTaskInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_AcceptTask_descriptor_, &C2S_AcceptTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_AcceptTask_descriptor_, &S2C_AcceptTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_CompleteTask_descriptor_, &C2S_CompleteTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_CompleteTask_descriptor_, &S2C_CompleteTask::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Task_2eproto() {
  delete task_info::default_instance_;
  delete task_info_reflection_;
  delete S2C_SyncCanAcceptTaskInfo::default_instance_;
  delete S2C_SyncCanAcceptTaskInfo_reflection_;
  delete S2C_SyncAcceptedTaskInfo::default_instance_;
  delete S2C_SyncAcceptedTaskInfo_reflection_;
  delete C2S_AcceptTask::default_instance_;
  delete C2S_AcceptTask_reflection_;
  delete S2C_AcceptTask::default_instance_;
  delete S2C_AcceptTask_reflection_;
  delete C2S_CompleteTask::default_instance_;
  delete C2S_CompleteTask_reflection_;
  delete S2C_CompleteTask::default_instance_;
  delete S2C_CompleteTask_reflection_;
}

void protobuf_AddDesc_Task_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_EnumDef_2eproto();
  ::protobuf_AddDesc_Common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nTask.proto\032\rEnumDef.proto\032\014Common.prot"
    "o\"\316\001\n\ttask_info\022\017\n\007task_id\030\001 \002(\021\022\021\n\ttask"
    "_type\030\002 \002(\021\022\024\n\014task_name_id\030\003 \002(\014\022\020\n\010tas"
    "k_des\030\004 \002(\014\022\020\n\010task_npc\030\005 \002(\021\022&\n\020list_ta"
    "sk_reward\030\006 \003(\0132\014.item_config\022 \n\030list_ta"
    "sk_progress_param\030\007 \003(\022\022\031\n\021task_can_comp"
    "lete\030\010 \002(\010\":\n\031S2C_SyncCanAcceptTaskInfo\022"
    "\035\n\tlist_task\030\001 \003(\0132\n.task_info\"9\n\030S2C_Sy"
    "ncAcceptedTaskInfo\022\035\n\tlist_task\030\001 \003(\0132\n."
    "task_info\"5\n\016C2S_AcceptTask\022\022\n\nrole_inde"
    "x\030\001 \002(\022\022\017\n\007task_id\030\002 \002(\021\"G\n\016S2C_AcceptTa"
    "sk\022\022\n\nrole_index\030\001 \002(\022\022\017\n\007task_id\030\002 \002(\021\022"
    "\020\n\010ret_code\030\003 \002(\010\"7\n\020C2S_CompleteTask\022\022\n"
    "\nrole_index\030\001 \002(\022\022\017\n\007task_id\030\002 \002(\021\"I\n\020S2"
    "C_CompleteTask\022\022\n\nrole_index\030\001 \002(\022\022\017\n\007ta"
    "sk_id\030\002 \002(\021\022\020\n\010ret_code\030\003 \002(\010", 629);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Task.proto", &protobuf_RegisterTypes);
  task_info::default_instance_ = new task_info();
  S2C_SyncCanAcceptTaskInfo::default_instance_ = new S2C_SyncCanAcceptTaskInfo();
  S2C_SyncAcceptedTaskInfo::default_instance_ = new S2C_SyncAcceptedTaskInfo();
  C2S_AcceptTask::default_instance_ = new C2S_AcceptTask();
  S2C_AcceptTask::default_instance_ = new S2C_AcceptTask();
  C2S_CompleteTask::default_instance_ = new C2S_CompleteTask();
  S2C_CompleteTask::default_instance_ = new S2C_CompleteTask();
  task_info::default_instance_->InitAsDefaultInstance();
  S2C_SyncCanAcceptTaskInfo::default_instance_->InitAsDefaultInstance();
  S2C_SyncAcceptedTaskInfo::default_instance_->InitAsDefaultInstance();
  C2S_AcceptTask::default_instance_->InitAsDefaultInstance();
  S2C_AcceptTask::default_instance_->InitAsDefaultInstance();
  C2S_CompleteTask::default_instance_->InitAsDefaultInstance();
  S2C_CompleteTask::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Task_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Task_2eproto {
  StaticDescriptorInitializer_Task_2eproto() {
    protobuf_AddDesc_Task_2eproto();
  }
} static_descriptor_initializer_Task_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int task_info::kTaskIdFieldNumber;
const int task_info::kTaskTypeFieldNumber;
const int task_info::kTaskNameIdFieldNumber;
const int task_info::kTaskDesFieldNumber;
const int task_info::kTaskNpcFieldNumber;
const int task_info::kListTaskRewardFieldNumber;
const int task_info::kListTaskProgressParamFieldNumber;
const int task_info::kTaskCanCompleteFieldNumber;
#endif  // !_MSC_VER

task_info::task_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void task_info::InitAsDefaultInstance() {
}

task_info::task_info(const task_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void task_info::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0;
  task_type_ = 0;
  task_name_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  task_des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  task_npc_ = 0;
  task_can_complete_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

task_info::~task_info() {
  SharedDtor();
}

void task_info::SharedDtor() {
  if (task_name_id_ != &::google::protobuf::internal::kEmptyString) {
    delete task_name_id_;
  }
  if (task_des_ != &::google::protobuf::internal::kEmptyString) {
    delete task_des_;
  }
  if (this != default_instance_) {
  }
}

void task_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* task_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return task_info_descriptor_;
}

const task_info& task_info::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Task_2eproto();
  return *default_instance_;
}

task_info* task_info::default_instance_ = nullptr;

task_info* task_info::New() const {
  return new task_info;
}

void task_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0;
    task_type_ = 0;
    if (has_task_name_id()) {
      if (task_name_id_ != &::google::protobuf::internal::kEmptyString) {
        task_name_id_->clear();
      }
    }
    if (has_task_des()) {
      if (task_des_ != &::google::protobuf::internal::kEmptyString) {
        task_des_->clear();
      }
    }
    task_npc_ = 0;
    task_can_complete_ = false;
  }
  list_task_reward_.Clear();
  list_task_progress_param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool task_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_task_type;
        break;
      }

      // required sint32 task_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &task_type_)));
          set_has_task_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_task_name_id;
        break;
      }

      // required bytes task_name_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_name_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_name_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_task_des;
        break;
      }

      // required bytes task_des = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_des:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_des()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_task_npc;
        break;
      }

      // required sint32 task_npc = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_npc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &task_npc_)));
          set_has_task_npc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_list_task_reward;
        break;
      }

      // repeated .item_config list_task_reward = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_task_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_task_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_list_task_reward;
        if (input->ExpectTag(56)) goto parse_list_task_progress_param;
        break;
      }

      // repeated sint64 list_task_progress_param = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_list_task_progress_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 56, input, this->mutable_list_task_progress_param())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_list_task_progress_param())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_list_task_progress_param;
        if (input->ExpectTag(64)) goto parse_task_can_complete;
        break;
      }

      // required bool task_can_complete = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_can_complete:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &task_can_complete_)));
          set_has_task_can_complete();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void task_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->task_id(), output);
  }

  // required sint32 task_type = 2;
  if (has_task_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->task_type(), output);
  }

  // required bytes task_name_id = 3;
  if (has_task_name_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->task_name_id(), output);
  }

  // required bytes task_des = 4;
  if (has_task_des()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->task_des(), output);
  }

  // required sint32 task_npc = 5;
  if (has_task_npc()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->task_npc(), output);
  }

  // repeated .item_config list_task_reward = 6;
  for (int i = 0; i < this->list_task_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->list_task_reward(i), output);
  }

  // repeated sint64 list_task_progress_param = 7;
  for (int i = 0; i < this->list_task_progress_param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(
      7, this->list_task_progress_param(i), output);
  }

  // required bool task_can_complete = 8;
  if (has_task_can_complete()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->task_can_complete(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* task_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->task_id(), target);
  }

  // required sint32 task_type = 2;
  if (has_task_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->task_type(), target);
  }

  // required bytes task_name_id = 3;
  if (has_task_name_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->task_name_id(), target);
  }

  // required bytes task_des = 4;
  if (has_task_des()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->task_des(), target);
  }

  // required sint32 task_npc = 5;
  if (has_task_npc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->task_npc(), target);
  }

  // repeated .item_config list_task_reward = 6;
  for (int i = 0; i < this->list_task_reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->list_task_reward(i), target);
  }

  // repeated sint64 list_task_progress_param = 7;
  for (int i = 0; i < this->list_task_progress_param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64ToArray(7, this->list_task_progress_param(i), target);
  }

  // required bool task_can_complete = 8;
  if (has_task_can_complete()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->task_can_complete(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int task_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->task_id());
    }

    // required sint32 task_type = 2;
    if (has_task_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->task_type());
    }

    // required bytes task_name_id = 3;
    if (has_task_name_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->task_name_id());
    }

    // required bytes task_des = 4;
    if (has_task_des()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->task_des());
    }

    // required sint32 task_npc = 5;
    if (has_task_npc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->task_npc());
    }

    // required bool task_can_complete = 8;
    if (has_task_can_complete()) {
      total_size += 1 + 1;
    }

  }
  // repeated .item_config list_task_reward = 6;
  total_size += 1 * this->list_task_reward_size();
  for (int i = 0; i < this->list_task_reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_task_reward(i));
  }

  // repeated sint64 list_task_progress_param = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->list_task_progress_param_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->list_task_progress_param(i));
    }
    total_size += 1 * this->list_task_progress_param_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void task_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const task_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const task_info*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void task_info::MergeFrom(const task_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_task_reward_.MergeFrom(from.list_task_reward_);
  list_task_progress_param_.MergeFrom(from.list_task_progress_param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_task_type()) {
      set_task_type(from.task_type());
    }
    if (from.has_task_name_id()) {
      set_task_name_id(from.task_name_id());
    }
    if (from.has_task_des()) {
      set_task_des(from.task_des());
    }
    if (from.has_task_npc()) {
      set_task_npc(from.task_npc());
    }
    if (from.has_task_can_complete()) {
      set_task_can_complete(from.task_can_complete());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void task_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void task_info::CopyFrom(const task_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool task_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000009f) != 0x0000009f) return false;

  for (int i = 0; i < list_task_reward_size(); i++) {
    if (!this->list_task_reward(i).IsInitialized()) return false;
  }
  return true;
}

void task_info::Swap(task_info* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(task_type_, other->task_type_);
    std::swap(task_name_id_, other->task_name_id_);
    std::swap(task_des_, other->task_des_);
    std::swap(task_npc_, other->task_npc_);
    list_task_reward_.Swap(&other->list_task_reward_);
    list_task_progress_param_.Swap(&other->list_task_progress_param_);
    std::swap(task_can_complete_, other->task_can_complete_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata task_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = task_info_descriptor_;
  metadata.reflection = task_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_SyncCanAcceptTaskInfo::kListTaskFieldNumber;
#endif  // !_MSC_VER

S2C_SyncCanAcceptTaskInfo::S2C_SyncCanAcceptTaskInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_SyncCanAcceptTaskInfo::InitAsDefaultInstance() {
}

S2C_SyncCanAcceptTaskInfo::S2C_SyncCanAcceptTaskInfo(const S2C_SyncCanAcceptTaskInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_SyncCanAcceptTaskInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_SyncCanAcceptTaskInfo::~S2C_SyncCanAcceptTaskInfo() {
  SharedDtor();
}

void S2C_SyncCanAcceptTaskInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2C_SyncCanAcceptTaskInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_SyncCanAcceptTaskInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_SyncCanAcceptTaskInfo_descriptor_;
}

const S2C_SyncCanAcceptTaskInfo& S2C_SyncCanAcceptTaskInfo::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Task_2eproto();
  return *default_instance_;
}

S2C_SyncCanAcceptTaskInfo* S2C_SyncCanAcceptTaskInfo::default_instance_ = nullptr;

S2C_SyncCanAcceptTaskInfo* S2C_SyncCanAcceptTaskInfo::New() const {
  return new S2C_SyncCanAcceptTaskInfo;
}

void S2C_SyncCanAcceptTaskInfo::Clear() {
  list_task_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_SyncCanAcceptTaskInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .task_info list_task = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list_task;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_SyncCanAcceptTaskInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .task_info list_task = 1;
  for (int i = 0; i < this->list_task_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list_task(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_SyncCanAcceptTaskInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .task_info list_task = 1;
  for (int i = 0; i < this->list_task_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list_task(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_SyncCanAcceptTaskInfo::ByteSize() const {
  int total_size = 0;

  // repeated .task_info list_task = 1;
  total_size += 1 * this->list_task_size();
  for (int i = 0; i < this->list_task_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_task(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_SyncCanAcceptTaskInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_SyncCanAcceptTaskInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_SyncCanAcceptTaskInfo*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_SyncCanAcceptTaskInfo::MergeFrom(const S2C_SyncCanAcceptTaskInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_task_.MergeFrom(from.list_task_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_SyncCanAcceptTaskInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_SyncCanAcceptTaskInfo::CopyFrom(const S2C_SyncCanAcceptTaskInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_SyncCanAcceptTaskInfo::IsInitialized() const {

  for (int i = 0; i < list_task_size(); i++) {
    if (!this->list_task(i).IsInitialized()) return false;
  }
  return true;
}

void S2C_SyncCanAcceptTaskInfo::Swap(S2C_SyncCanAcceptTaskInfo* other) {
  if (other != this) {
    list_task_.Swap(&other->list_task_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_SyncCanAcceptTaskInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_SyncCanAcceptTaskInfo_descriptor_;
  metadata.reflection = S2C_SyncCanAcceptTaskInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_SyncAcceptedTaskInfo::kListTaskFieldNumber;
#endif  // !_MSC_VER

S2C_SyncAcceptedTaskInfo::S2C_SyncAcceptedTaskInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_SyncAcceptedTaskInfo::InitAsDefaultInstance() {
}

S2C_SyncAcceptedTaskInfo::S2C_SyncAcceptedTaskInfo(const S2C_SyncAcceptedTaskInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_SyncAcceptedTaskInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_SyncAcceptedTaskInfo::~S2C_SyncAcceptedTaskInfo() {
  SharedDtor();
}

void S2C_SyncAcceptedTaskInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2C_SyncAcceptedTaskInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_SyncAcceptedTaskInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_SyncAcceptedTaskInfo_descriptor_;
}

const S2C_SyncAcceptedTaskInfo& S2C_SyncAcceptedTaskInfo::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Task_2eproto();
  return *default_instance_;
}

S2C_SyncAcceptedTaskInfo* S2C_SyncAcceptedTaskInfo::default_instance_ = nullptr;

S2C_SyncAcceptedTaskInfo* S2C_SyncAcceptedTaskInfo::New() const {
  return new S2C_SyncAcceptedTaskInfo;
}

void S2C_SyncAcceptedTaskInfo::Clear() {
  list_task_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_SyncAcceptedTaskInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .task_info list_task = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list_task;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_SyncAcceptedTaskInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .task_info list_task = 1;
  for (int i = 0; i < this->list_task_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list_task(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_SyncAcceptedTaskInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .task_info list_task = 1;
  for (int i = 0; i < this->list_task_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list_task(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_SyncAcceptedTaskInfo::ByteSize() const {
  int total_size = 0;

  // repeated .task_info list_task = 1;
  total_size += 1 * this->list_task_size();
  for (int i = 0; i < this->list_task_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_task(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_SyncAcceptedTaskInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_SyncAcceptedTaskInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_SyncAcceptedTaskInfo*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_SyncAcceptedTaskInfo::MergeFrom(const S2C_SyncAcceptedTaskInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_task_.MergeFrom(from.list_task_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_SyncAcceptedTaskInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_SyncAcceptedTaskInfo::CopyFrom(const S2C_SyncAcceptedTaskInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_SyncAcceptedTaskInfo::IsInitialized() const {

  for (int i = 0; i < list_task_size(); i++) {
    if (!this->list_task(i).IsInitialized()) return false;
  }
  return true;
}

void S2C_SyncAcceptedTaskInfo::Swap(S2C_SyncAcceptedTaskInfo* other) {
  if (other != this) {
    list_task_.Swap(&other->list_task_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_SyncAcceptedTaskInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_SyncAcceptedTaskInfo_descriptor_;
  metadata.reflection = S2C_SyncAcceptedTaskInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_AcceptTask::kRoleIndexFieldNumber;
const int C2S_AcceptTask::kTaskIdFieldNumber;
#endif  // !_MSC_VER

C2S_AcceptTask::C2S_AcceptTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_AcceptTask::InitAsDefaultInstance() {
}

C2S_AcceptTask::C2S_AcceptTask(const C2S_AcceptTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_AcceptTask::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  task_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_AcceptTask::~C2S_AcceptTask() {
  SharedDtor();
}

void C2S_AcceptTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_AcceptTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_AcceptTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_AcceptTask_descriptor_;
}

const C2S_AcceptTask& C2S_AcceptTask::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Task_2eproto();
  return *default_instance_;
}

C2S_AcceptTask* C2S_AcceptTask::default_instance_ = nullptr;

C2S_AcceptTask* C2S_AcceptTask::New() const {
  return new C2S_AcceptTask;
}

void C2S_AcceptTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    task_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_AcceptTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_task_id;
        break;
      }

      // required sint32 task_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_AcceptTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->role_index(), output);
  }

  // required sint32 task_id = 2;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->task_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_AcceptTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->role_index(), target);
  }

  // required sint32 task_id = 2;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->task_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_AcceptTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->role_index());
    }

    // required sint32 task_id = 2;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->task_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_AcceptTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_AcceptTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_AcceptTask*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_AcceptTask::MergeFrom(const C2S_AcceptTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_AcceptTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_AcceptTask::CopyFrom(const C2S_AcceptTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_AcceptTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C2S_AcceptTask::Swap(C2S_AcceptTask* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(task_id_, other->task_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_AcceptTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_AcceptTask_descriptor_;
  metadata.reflection = C2S_AcceptTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_AcceptTask::kRoleIndexFieldNumber;
const int S2C_AcceptTask::kTaskIdFieldNumber;
const int S2C_AcceptTask::kRetCodeFieldNumber;
#endif  // !_MSC_VER

S2C_AcceptTask::S2C_AcceptTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_AcceptTask::InitAsDefaultInstance() {
}

S2C_AcceptTask::S2C_AcceptTask(const S2C_AcceptTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_AcceptTask::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  task_id_ = 0;
  ret_code_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_AcceptTask::~S2C_AcceptTask() {
  SharedDtor();
}

void S2C_AcceptTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2C_AcceptTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_AcceptTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_AcceptTask_descriptor_;
}

const S2C_AcceptTask& S2C_AcceptTask::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Task_2eproto();
  return *default_instance_;
}

S2C_AcceptTask* S2C_AcceptTask::default_instance_ = nullptr;

S2C_AcceptTask* S2C_AcceptTask::New() const {
  return new S2C_AcceptTask;
}

void S2C_AcceptTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    task_id_ = 0;
    ret_code_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_AcceptTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_task_id;
        break;
      }

      // required sint32 task_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret_code;
        break;
      }

      // required bool ret_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_AcceptTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->role_index(), output);
  }

  // required sint32 task_id = 2;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->task_id(), output);
  }

  // required bool ret_code = 3;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ret_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_AcceptTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->role_index(), target);
  }

  // required sint32 task_id = 2;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->task_id(), target);
  }

  // required bool ret_code = 3;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ret_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_AcceptTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->role_index());
    }

    // required sint32 task_id = 2;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->task_id());
    }

    // required bool ret_code = 3;
    if (has_ret_code()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_AcceptTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_AcceptTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_AcceptTask*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_AcceptTask::MergeFrom(const S2C_AcceptTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_AcceptTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_AcceptTask::CopyFrom(const S2C_AcceptTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_AcceptTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2C_AcceptTask::Swap(S2C_AcceptTask* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(task_id_, other->task_id_);
    std::swap(ret_code_, other->ret_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_AcceptTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_AcceptTask_descriptor_;
  metadata.reflection = S2C_AcceptTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_CompleteTask::kRoleIndexFieldNumber;
const int C2S_CompleteTask::kTaskIdFieldNumber;
#endif  // !_MSC_VER

C2S_CompleteTask::C2S_CompleteTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_CompleteTask::InitAsDefaultInstance() {
}

C2S_CompleteTask::C2S_CompleteTask(const C2S_CompleteTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_CompleteTask::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  task_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_CompleteTask::~C2S_CompleteTask() {
  SharedDtor();
}

void C2S_CompleteTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_CompleteTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_CompleteTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_CompleteTask_descriptor_;
}

const C2S_CompleteTask& C2S_CompleteTask::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Task_2eproto();
  return *default_instance_;
}

C2S_CompleteTask* C2S_CompleteTask::default_instance_ = nullptr;

C2S_CompleteTask* C2S_CompleteTask::New() const {
  return new C2S_CompleteTask;
}

void C2S_CompleteTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    task_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_CompleteTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_task_id;
        break;
      }

      // required sint32 task_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_CompleteTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->role_index(), output);
  }

  // required sint32 task_id = 2;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->task_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_CompleteTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->role_index(), target);
  }

  // required sint32 task_id = 2;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->task_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_CompleteTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->role_index());
    }

    // required sint32 task_id = 2;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->task_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_CompleteTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_CompleteTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_CompleteTask*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_CompleteTask::MergeFrom(const C2S_CompleteTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_CompleteTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_CompleteTask::CopyFrom(const C2S_CompleteTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_CompleteTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C2S_CompleteTask::Swap(C2S_CompleteTask* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(task_id_, other->task_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_CompleteTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_CompleteTask_descriptor_;
  metadata.reflection = C2S_CompleteTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_CompleteTask::kRoleIndexFieldNumber;
const int S2C_CompleteTask::kTaskIdFieldNumber;
const int S2C_CompleteTask::kRetCodeFieldNumber;
#endif  // !_MSC_VER

S2C_CompleteTask::S2C_CompleteTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_CompleteTask::InitAsDefaultInstance() {
}

S2C_CompleteTask::S2C_CompleteTask(const S2C_CompleteTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_CompleteTask::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  task_id_ = 0;
  ret_code_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_CompleteTask::~S2C_CompleteTask() {
  SharedDtor();
}

void S2C_CompleteTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2C_CompleteTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_CompleteTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_CompleteTask_descriptor_;
}

const S2C_CompleteTask& S2C_CompleteTask::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Task_2eproto();
  return *default_instance_;
}

S2C_CompleteTask* S2C_CompleteTask::default_instance_ = nullptr;

S2C_CompleteTask* S2C_CompleteTask::New() const {
  return new S2C_CompleteTask;
}

void S2C_CompleteTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    task_id_ = 0;
    ret_code_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_CompleteTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_task_id;
        break;
      }

      // required sint32 task_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret_code;
        break;
      }

      // required bool ret_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_CompleteTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->role_index(), output);
  }

  // required sint32 task_id = 2;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->task_id(), output);
  }

  // required bool ret_code = 3;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ret_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_CompleteTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->role_index(), target);
  }

  // required sint32 task_id = 2;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->task_id(), target);
  }

  // required bool ret_code = 3;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ret_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_CompleteTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->role_index());
    }

    // required sint32 task_id = 2;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->task_id());
    }

    // required bool ret_code = 3;
    if (has_ret_code()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_CompleteTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_CompleteTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_CompleteTask*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_CompleteTask::MergeFrom(const S2C_CompleteTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_CompleteTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_CompleteTask::CopyFrom(const S2C_CompleteTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_CompleteTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2C_CompleteTask::Swap(S2C_CompleteTask* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(task_id_, other->task_id_);
    std::swap(ret_code_, other->ret_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_CompleteTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_CompleteTask_descriptor_;
  metadata.reflection = S2C_CompleteTask_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
