// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Server.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Server.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ReadyRunSceneInfo_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadyRunSceneInfo_reflection_ = nullptr;
const ::google::protobuf::Descriptor* RunningSceneInfo_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RunningSceneInfo_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2S_Ask_CreateNewScene_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2S_Ask_CreateNewScene_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2S_Ret_CreateNewScene_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2S_Ret_CreateNewScene_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2S_Sync_NewSceneInfo_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2S_Sync_NewSceneInfo_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2S_Currency_Packet_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2S_Currency_Packet_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2S_Player_Displacement_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2S_Player_Displacement_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2S_Player_Offline_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2S_Player_Offline_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2S_Ask_Role_Save_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2S_Ask_Role_Save_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2S_Ask_Role_Leave_Login_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2S_Ask_Role_Leave_Login_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2S_Ask_Role_Enter_Scene_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2S_Ask_Role_Enter_Scene_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2S_Ask_Role_Leave_Scene_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2S_Ask_Role_Leave_Scene_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2S_Ret_Register_ClusterNode_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2S_Ret_Register_ClusterNode_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2S_Ret_Select_ClusterNode_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2S_Ret_Select_ClusterNode_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2S_Ret_Update_ClusterNode_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2S_Ret_Update_ClusterNode_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2S_Ask_ClusterInfo_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2S_Ask_ClusterInfo_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2S_Ret_ClusterInfo_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2S_Ret_ClusterInfo_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2S_Ret_Update_OnlineUnit_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2S_Ret_Update_OnlineUnit_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2S_Delete_OnlineUnitInfo_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2S_Delete_OnlineUnitInfo_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2S_Suspend_OnlineUnitInfo_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2S_Suspend_OnlineUnitInfo_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2S_Resume_OnlineUnitInfo_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2S_Resume_OnlineUnitInfo_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2S_Select_OnlineUnitInfo_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2S_Select_OnlineUnitInfo_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2S_Ret_Select_OnlineUnitInfo_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2S_Ret_Select_OnlineUnitInfo_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2S_RetReadyChangeScene_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2S_RetReadyChangeScene_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2S_Request_Add_Friend_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2S_Request_Add_Friend_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2S_Friends_List_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2S_Friends_List_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2S_AskCheckPlayerInLogin_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2S_AskCheckPlayerInLogin_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2S_RetCheckPlayerInLogin_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2S_RetCheckPlayerInLogin_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2S_AskEnterScene_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2S_AskEnterScene_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2S_RetEnterScene_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2S_RetEnterScene_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2S_ReadyEnterScene_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2S_ReadyEnterScene_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2S_TeamReadyEnterScene_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2S_TeamReadyEnterScene_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2S_BroadcastHaveNewScene_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2S_BroadcastHaveNewScene_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2S_AskLoadNewScene_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2S_AskLoadNewScene_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2S_RetLoadNewScene_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2S_RetLoadNewScene_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2S_AskRegRunningSceneInfo_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2S_AskRegRunningSceneInfo_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2S_AskUnRegRunningSceneInfo_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2S_AskUnRegRunningSceneInfo_reflection_ = nullptr;
const ::google::protobuf::Descriptor* GM2S_AskLogin_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM2S_AskLogin_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2GM_RetLogin_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2GM_RetLogin_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2S_RegNodeInfo_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2S_RegNodeInfo_reflection_ = nullptr;
const ::google::protobuf::Descriptor* GM2S_AskNodeInfo_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM2S_AskNodeInfo_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2GM_RetNodeInfo_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2GM_RetNodeInfo_reflection_ = nullptr;
const ::google::protobuf::Descriptor* GM2S_AskPlayerInfo_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM2S_AskPlayerInfo_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2GM_RetPlayerInfo_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2GM_RetPlayerInfo_reflection_ = nullptr;
const ::google::protobuf::Descriptor* GM2S_AskSceneInfo_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM2S_AskSceneInfo_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2GM_RetSceneInfo_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2GM_RetSceneInfo_reflection_ = nullptr;
const ::google::protobuf::Descriptor* GM2S_KickPlayer_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM2S_KickPlayer_reflection_ = nullptr;
const ::google::protobuf::Descriptor* GM2S_Close_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GM2S_Close_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2S_Ask_CheckAccount_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2S_Ask_CheckAccount_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2S_Ret_CheckAccount_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2S_Ret_CheckAccount_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2S_Ask_Login_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2S_Ask_Login_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2S_Ret_Login_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2S_Ret_Login_reflection_ = nullptr;

}  // namespace


void protobuf_AssignDesc_Server_2eproto() {
  protobuf_AddDesc_Server_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Server.proto");
  GOOGLE_CHECK(file != nullptr);
  ReadyRunSceneInfo_descriptor_ = file->message_type(0);
  static const int ReadyRunSceneInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyRunSceneInfo, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyRunSceneInfo, scene_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyRunSceneInfo, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyRunSceneInfo, scene_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyRunSceneInfo, list_role_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyRunSceneInfo, list_team_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyRunSceneInfo, list_monster_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyRunSceneInfo, list_login_intaddr_),
  };
  ReadyRunSceneInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadyRunSceneInfo_descriptor_,
      ReadyRunSceneInfo::default_instance_,
      ReadyRunSceneInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyRunSceneInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyRunSceneInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadyRunSceneInfo));
  RunningSceneInfo_descriptor_ = file->message_type(1);
  static const int RunningSceneInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunningSceneInfo, scene_instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunningSceneInfo, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunningSceneInfo, scene_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunningSceneInfo, intaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunningSceneInfo, loads_),
  };
  RunningSceneInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RunningSceneInfo_descriptor_,
      RunningSceneInfo::default_instance_,
      RunningSceneInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunningSceneInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunningSceneInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RunningSceneInfo));
  S2S_Ask_CreateNewScene_descriptor_ = file->message_type(2);
  static const int S2S_Ask_CreateNewScene_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ask_CreateNewScene, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ask_CreateNewScene, scene_instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ask_CreateNewScene, server_instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ask_CreateNewScene, scene_type_),
  };
  S2S_Ask_CreateNewScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2S_Ask_CreateNewScene_descriptor_,
      S2S_Ask_CreateNewScene::default_instance_,
      S2S_Ask_CreateNewScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ask_CreateNewScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ask_CreateNewScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2S_Ask_CreateNewScene));
  S2S_Ret_CreateNewScene_descriptor_ = file->message_type(3);
  static const int S2S_Ret_CreateNewScene_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ret_CreateNewScene, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ret_CreateNewScene, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ret_CreateNewScene, scene_instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ret_CreateNewScene, server_instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ret_CreateNewScene, scene_type_),
  };
  S2S_Ret_CreateNewScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2S_Ret_CreateNewScene_descriptor_,
      S2S_Ret_CreateNewScene::default_instance_,
      S2S_Ret_CreateNewScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ret_CreateNewScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ret_CreateNewScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2S_Ret_CreateNewScene));
  S2S_Sync_NewSceneInfo_descriptor_ = file->message_type(4);
  static const int S2S_Sync_NewSceneInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Sync_NewSceneInfo, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Sync_NewSceneInfo, scene_instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Sync_NewSceneInfo, server_instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Sync_NewSceneInfo, scene_type_),
  };
  S2S_Sync_NewSceneInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2S_Sync_NewSceneInfo_descriptor_,
      S2S_Sync_NewSceneInfo::default_instance_,
      S2S_Sync_NewSceneInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Sync_NewSceneInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Sync_NewSceneInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2S_Sync_NewSceneInfo));
  S2S_Currency_Packet_descriptor_ = file->message_type(5);
  static const int S2S_Currency_Packet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Currency_Packet, datas_),
  };
  S2S_Currency_Packet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2S_Currency_Packet_descriptor_,
      S2S_Currency_Packet::default_instance_,
      S2S_Currency_Packet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Currency_Packet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Currency_Packet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2S_Currency_Packet));
  S2S_Player_Displacement_descriptor_ = file->message_type(6);
  static const int S2S_Player_Displacement_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Player_Displacement, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Player_Displacement, gate_intaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Player_Displacement, scene_intaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Player_Displacement, scene_instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Player_Displacement, save_intaddr_),
  };
  S2S_Player_Displacement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2S_Player_Displacement_descriptor_,
      S2S_Player_Displacement::default_instance_,
      S2S_Player_Displacement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Player_Displacement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Player_Displacement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2S_Player_Displacement));
  S2S_Player_Offline_descriptor_ = file->message_type(7);
  static const int S2S_Player_Offline_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Player_Offline, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Player_Offline, kick_reason_),
  };
  S2S_Player_Offline_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2S_Player_Offline_descriptor_,
      S2S_Player_Offline::default_instance_,
      S2S_Player_Offline_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Player_Offline, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Player_Offline, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2S_Player_Offline));
  S2S_Ask_Role_Save_descriptor_ = file->message_type(8);
  static const int S2S_Ask_Role_Save_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ask_Role_Save, role_info_),
  };
  S2S_Ask_Role_Save_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2S_Ask_Role_Save_descriptor_,
      S2S_Ask_Role_Save::default_instance_,
      S2S_Ask_Role_Save_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ask_Role_Save, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ask_Role_Save, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2S_Ask_Role_Save));
  S2S_Ask_Role_Leave_Login_descriptor_ = file->message_type(9);
  static const int S2S_Ask_Role_Leave_Login_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ask_Role_Leave_Login, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ask_Role_Leave_Login, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ask_Role_Leave_Login, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ask_Role_Leave_Login, ip_),
  };
  S2S_Ask_Role_Leave_Login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2S_Ask_Role_Leave_Login_descriptor_,
      S2S_Ask_Role_Leave_Login::default_instance_,
      S2S_Ask_Role_Leave_Login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ask_Role_Leave_Login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ask_Role_Leave_Login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2S_Ask_Role_Leave_Login));
  S2S_Ask_Role_Enter_Scene_descriptor_ = file->message_type(10);
  static const int S2S_Ask_Role_Enter_Scene_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ask_Role_Enter_Scene, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ask_Role_Enter_Scene, role_intaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ask_Role_Enter_Scene, scene_instance_id_),
  };
  S2S_Ask_Role_Enter_Scene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2S_Ask_Role_Enter_Scene_descriptor_,
      S2S_Ask_Role_Enter_Scene::default_instance_,
      S2S_Ask_Role_Enter_Scene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ask_Role_Enter_Scene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ask_Role_Enter_Scene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2S_Ask_Role_Enter_Scene));
  S2S_Ask_Role_Leave_Scene_descriptor_ = file->message_type(11);
  static const int S2S_Ask_Role_Leave_Scene_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ask_Role_Leave_Scene, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ask_Role_Leave_Scene, role_intaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ask_Role_Leave_Scene, scene_instance_id_),
  };
  S2S_Ask_Role_Leave_Scene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2S_Ask_Role_Leave_Scene_descriptor_,
      S2S_Ask_Role_Leave_Scene::default_instance_,
      S2S_Ask_Role_Leave_Scene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ask_Role_Leave_Scene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ask_Role_Leave_Scene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2S_Ask_Role_Leave_Scene));
  S2S_Ret_Register_ClusterNode_descriptor_ = file->message_type(12);
  static const int S2S_Ret_Register_ClusterNode_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ret_Register_ClusterNode, node_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ret_Register_ClusterNode, unit_next_index_),
  };
  S2S_Ret_Register_ClusterNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2S_Ret_Register_ClusterNode_descriptor_,
      S2S_Ret_Register_ClusterNode::default_instance_,
      S2S_Ret_Register_ClusterNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ret_Register_ClusterNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ret_Register_ClusterNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2S_Ret_Register_ClusterNode));
  S2S_Ret_Select_ClusterNode_descriptor_ = file->message_type(13);
  static const int S2S_Ret_Select_ClusterNode_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ret_Select_ClusterNode, list_intaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ret_Select_ClusterNode, list_node_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ret_Select_ClusterNode, list_pressure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ret_Select_ClusterNode, list_last_time_),
  };
  S2S_Ret_Select_ClusterNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2S_Ret_Select_ClusterNode_descriptor_,
      S2S_Ret_Select_ClusterNode::default_instance_,
      S2S_Ret_Select_ClusterNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ret_Select_ClusterNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ret_Select_ClusterNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2S_Ret_Select_ClusterNode));
  S2S_Ret_Update_ClusterNode_descriptor_ = file->message_type(14);
  static const int S2S_Ret_Update_ClusterNode_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ret_Update_ClusterNode, intaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ret_Update_ClusterNode, node_index_),
  };
  S2S_Ret_Update_ClusterNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2S_Ret_Update_ClusterNode_descriptor_,
      S2S_Ret_Update_ClusterNode::default_instance_,
      S2S_Ret_Update_ClusterNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ret_Update_ClusterNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ret_Update_ClusterNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2S_Ret_Update_ClusterNode));
  S2S_Ask_ClusterInfo_descriptor_ = file->message_type(15);
  static const int S2S_Ask_ClusterInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ask_ClusterInfo, node_index_),
  };
  S2S_Ask_ClusterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2S_Ask_ClusterInfo_descriptor_,
      S2S_Ask_ClusterInfo::default_instance_,
      S2S_Ask_ClusterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ask_ClusterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ask_ClusterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2S_Ask_ClusterInfo));
  S2S_Ret_ClusterInfo_descriptor_ = file->message_type(16);
  static const int S2S_Ret_ClusterInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ret_ClusterInfo, list_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ret_ClusterInfo, list_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ret_ClusterInfo, list_pressure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ret_ClusterInfo, list_node_index_),
  };
  S2S_Ret_ClusterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2S_Ret_ClusterInfo_descriptor_,
      S2S_Ret_ClusterInfo::default_instance_,
      S2S_Ret_ClusterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ret_ClusterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ret_ClusterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2S_Ret_ClusterInfo));
  S2S_Ret_Update_OnlineUnit_descriptor_ = file->message_type(17);
  static const int S2S_Ret_Update_OnlineUnit_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ret_Update_OnlineUnit, ret_),
  };
  S2S_Ret_Update_OnlineUnit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2S_Ret_Update_OnlineUnit_descriptor_,
      S2S_Ret_Update_OnlineUnit::default_instance_,
      S2S_Ret_Update_OnlineUnit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ret_Update_OnlineUnit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ret_Update_OnlineUnit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2S_Ret_Update_OnlineUnit));
  S2S_Delete_OnlineUnitInfo_descriptor_ = file->message_type(18);
  static const int S2S_Delete_OnlineUnitInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Delete_OnlineUnitInfo, unit_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Delete_OnlineUnitInfo, unit_index_),
  };
  S2S_Delete_OnlineUnitInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2S_Delete_OnlineUnitInfo_descriptor_,
      S2S_Delete_OnlineUnitInfo::default_instance_,
      S2S_Delete_OnlineUnitInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Delete_OnlineUnitInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Delete_OnlineUnitInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2S_Delete_OnlineUnitInfo));
  S2S_Suspend_OnlineUnitInfo_descriptor_ = file->message_type(19);
  static const int S2S_Suspend_OnlineUnitInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Suspend_OnlineUnitInfo, unit_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Suspend_OnlineUnitInfo, unit_index_),
  };
  S2S_Suspend_OnlineUnitInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2S_Suspend_OnlineUnitInfo_descriptor_,
      S2S_Suspend_OnlineUnitInfo::default_instance_,
      S2S_Suspend_OnlineUnitInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Suspend_OnlineUnitInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Suspend_OnlineUnitInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2S_Suspend_OnlineUnitInfo));
  S2S_Resume_OnlineUnitInfo_descriptor_ = file->message_type(20);
  static const int S2S_Resume_OnlineUnitInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Resume_OnlineUnitInfo, unit_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Resume_OnlineUnitInfo, unit_index_),
  };
  S2S_Resume_OnlineUnitInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2S_Resume_OnlineUnitInfo_descriptor_,
      S2S_Resume_OnlineUnitInfo::default_instance_,
      S2S_Resume_OnlineUnitInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Resume_OnlineUnitInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Resume_OnlineUnitInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2S_Resume_OnlineUnitInfo));
  S2S_Select_OnlineUnitInfo_descriptor_ = file->message_type(21);
  static const int S2S_Select_OnlineUnitInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Select_OnlineUnitInfo, unit_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Select_OnlineUnitInfo, unit_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Select_OnlineUnitInfo, addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Select_OnlineUnitInfo, port_),
  };
  S2S_Select_OnlineUnitInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2S_Select_OnlineUnitInfo_descriptor_,
      S2S_Select_OnlineUnitInfo::default_instance_,
      S2S_Select_OnlineUnitInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Select_OnlineUnitInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Select_OnlineUnitInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2S_Select_OnlineUnitInfo));
  S2S_Ret_Select_OnlineUnitInfo_descriptor_ = file->message_type(22);
  static const int S2S_Ret_Select_OnlineUnitInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ret_Select_OnlineUnitInfo, unit_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ret_Select_OnlineUnitInfo, unit_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ret_Select_OnlineUnitInfo, addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ret_Select_OnlineUnitInfo, port_),
  };
  S2S_Ret_Select_OnlineUnitInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2S_Ret_Select_OnlineUnitInfo_descriptor_,
      S2S_Ret_Select_OnlineUnitInfo::default_instance_,
      S2S_Ret_Select_OnlineUnitInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ret_Select_OnlineUnitInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ret_Select_OnlineUnitInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2S_Ret_Select_OnlineUnitInfo));
  S2S_RetReadyChangeScene_descriptor_ = file->message_type(23);
  static const int S2S_RetReadyChangeScene_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_RetReadyChangeScene, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_RetReadyChangeScene, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_RetReadyChangeScene, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_RetReadyChangeScene, scene_instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_RetReadyChangeScene, login_intaddr_),
  };
  S2S_RetReadyChangeScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2S_RetReadyChangeScene_descriptor_,
      S2S_RetReadyChangeScene::default_instance_,
      S2S_RetReadyChangeScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_RetReadyChangeScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_RetReadyChangeScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2S_RetReadyChangeScene));
  S2S_Request_Add_Friend_descriptor_ = file->message_type(24);
  static const int S2S_Request_Add_Friend_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Request_Add_Friend, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Request_Add_Friend, src_role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Request_Add_Friend, is_refuse_),
  };
  S2S_Request_Add_Friend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2S_Request_Add_Friend_descriptor_,
      S2S_Request_Add_Friend::default_instance_,
      S2S_Request_Add_Friend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Request_Add_Friend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Request_Add_Friend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2S_Request_Add_Friend));
  S2S_Friends_List_descriptor_ = file->message_type(25);
  static const int S2S_Friends_List_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Friends_List, list_friend_role_index_),
  };
  S2S_Friends_List_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2S_Friends_List_descriptor_,
      S2S_Friends_List::default_instance_,
      S2S_Friends_List_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Friends_List, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Friends_List, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2S_Friends_List));
  S2S_AskCheckPlayerInLogin_descriptor_ = file->message_type(26);
  static const int S2S_AskCheckPlayerInLogin_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_AskCheckPlayerInLogin, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_AskCheckPlayerInLogin, src_temp_unit_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_AskCheckPlayerInLogin, src_intaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_AskCheckPlayerInLogin, intaddr_),
  };
  S2S_AskCheckPlayerInLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2S_AskCheckPlayerInLogin_descriptor_,
      S2S_AskCheckPlayerInLogin::default_instance_,
      S2S_AskCheckPlayerInLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_AskCheckPlayerInLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_AskCheckPlayerInLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2S_AskCheckPlayerInLogin));
  S2S_RetCheckPlayerInLogin_descriptor_ = file->message_type(27);
  static const int S2S_RetCheckPlayerInLogin_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_RetCheckPlayerInLogin, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_RetCheckPlayerInLogin, in_login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_RetCheckPlayerInLogin, intaddr_),
  };
  S2S_RetCheckPlayerInLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2S_RetCheckPlayerInLogin_descriptor_,
      S2S_RetCheckPlayerInLogin::default_instance_,
      S2S_RetCheckPlayerInLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_RetCheckPlayerInLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_RetCheckPlayerInLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2S_RetCheckPlayerInLogin));
  S2S_AskEnterScene_descriptor_ = file->message_type(28);
  static const int S2S_AskEnterScene_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_AskEnterScene, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_AskEnterScene, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_AskEnterScene, team_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_AskEnterScene, list_role_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_AskEnterScene, list_monster_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_AskEnterScene, list_login_intaddr_),
  };
  S2S_AskEnterScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2S_AskEnterScene_descriptor_,
      S2S_AskEnterScene::default_instance_,
      S2S_AskEnterScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_AskEnterScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_AskEnterScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2S_AskEnterScene));
  S2S_RetEnterScene_descriptor_ = file->message_type(29);
  static const int S2S_RetEnterScene_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_RetEnterScene, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_RetEnterScene, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_RetEnterScene, login_intaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_RetEnterScene, is_ok_),
  };
  S2S_RetEnterScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2S_RetEnterScene_descriptor_,
      S2S_RetEnterScene::default_instance_,
      S2S_RetEnterScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_RetEnterScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_RetEnterScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2S_RetEnterScene));
  S2S_ReadyEnterScene_descriptor_ = file->message_type(30);
  static const int S2S_ReadyEnterScene_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_ReadyEnterScene, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_ReadyEnterScene, scene_instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_ReadyEnterScene, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_ReadyEnterScene, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_ReadyEnterScene, nick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_ReadyEnterScene, role_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_ReadyEnterScene, login_intaddr_),
  };
  S2S_ReadyEnterScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2S_ReadyEnterScene_descriptor_,
      S2S_ReadyEnterScene::default_instance_,
      S2S_ReadyEnterScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_ReadyEnterScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_ReadyEnterScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2S_ReadyEnterScene));
  S2S_TeamReadyEnterScene_descriptor_ = file->message_type(31);
  static const int S2S_TeamReadyEnterScene_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_TeamReadyEnterScene, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_TeamReadyEnterScene, scene_instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_TeamReadyEnterScene, team_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_TeamReadyEnterScene, list_role_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_TeamReadyEnterScene, list_monster_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_TeamReadyEnterScene, list_login_intaddr_),
  };
  S2S_TeamReadyEnterScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2S_TeamReadyEnterScene_descriptor_,
      S2S_TeamReadyEnterScene::default_instance_,
      S2S_TeamReadyEnterScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_TeamReadyEnterScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_TeamReadyEnterScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2S_TeamReadyEnterScene));
  S2S_BroadcastHaveNewScene_descriptor_ = file->message_type(32);
  static const int S2S_BroadcastHaveNewScene_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_BroadcastHaveNewScene, center_scene_manager_intaddr_),
  };
  S2S_BroadcastHaveNewScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2S_BroadcastHaveNewScene_descriptor_,
      S2S_BroadcastHaveNewScene::default_instance_,
      S2S_BroadcastHaveNewScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_BroadcastHaveNewScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_BroadcastHaveNewScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2S_BroadcastHaveNewScene));
  S2S_AskLoadNewScene_descriptor_ = file->message_type(33);
  static const int S2S_AskLoadNewScene_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_AskLoadNewScene, scene_manager_intaddr_),
  };
  S2S_AskLoadNewScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2S_AskLoadNewScene_descriptor_,
      S2S_AskLoadNewScene::default_instance_,
      S2S_AskLoadNewScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_AskLoadNewScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_AskLoadNewScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2S_AskLoadNewScene));
  S2S_RetLoadNewScene_descriptor_ = file->message_type(34);
  static const int S2S_RetLoadNewScene_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_RetLoadNewScene, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_RetLoadNewScene, scene_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_RetLoadNewScene, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_RetLoadNewScene, scene_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_RetLoadNewScene, list_role_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_RetLoadNewScene, list_team_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_RetLoadNewScene, list_monster_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_RetLoadNewScene, list_login_intaddr_),
  };
  S2S_RetLoadNewScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2S_RetLoadNewScene_descriptor_,
      S2S_RetLoadNewScene::default_instance_,
      S2S_RetLoadNewScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_RetLoadNewScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_RetLoadNewScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2S_RetLoadNewScene));
  S2S_AskRegRunningSceneInfo_descriptor_ = file->message_type(35);
  static const int S2S_AskRegRunningSceneInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_AskRegRunningSceneInfo, scene_info_),
  };
  S2S_AskRegRunningSceneInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2S_AskRegRunningSceneInfo_descriptor_,
      S2S_AskRegRunningSceneInfo::default_instance_,
      S2S_AskRegRunningSceneInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_AskRegRunningSceneInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_AskRegRunningSceneInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2S_AskRegRunningSceneInfo));
  S2S_AskUnRegRunningSceneInfo_descriptor_ = file->message_type(36);
  static const int S2S_AskUnRegRunningSceneInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_AskUnRegRunningSceneInfo, scene_info_),
  };
  S2S_AskUnRegRunningSceneInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2S_AskUnRegRunningSceneInfo_descriptor_,
      S2S_AskUnRegRunningSceneInfo::default_instance_,
      S2S_AskUnRegRunningSceneInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_AskUnRegRunningSceneInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_AskUnRegRunningSceneInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2S_AskUnRegRunningSceneInfo));
  GM2S_AskLogin_descriptor_ = file->message_type(37);
  static const int GM2S_AskLogin_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM2S_AskLogin, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM2S_AskLogin, password_),
  };
  GM2S_AskLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM2S_AskLogin_descriptor_,
      GM2S_AskLogin::default_instance_,
      GM2S_AskLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM2S_AskLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM2S_AskLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM2S_AskLogin));
  S2GM_RetLogin_descriptor_ = file->message_type(38);
  static const int S2GM_RetLogin_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2GM_RetLogin, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2GM_RetLogin, account_),
  };
  S2GM_RetLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2GM_RetLogin_descriptor_,
      S2GM_RetLogin::default_instance_,
      S2GM_RetLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2GM_RetLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2GM_RetLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2GM_RetLogin));
  S2S_RegNodeInfo_descriptor_ = file->message_type(39);
  static const int S2S_RegNodeInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_RegNodeInfo, cluster_node_info_),
  };
  S2S_RegNodeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2S_RegNodeInfo_descriptor_,
      S2S_RegNodeInfo::default_instance_,
      S2S_RegNodeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_RegNodeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_RegNodeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2S_RegNodeInfo));
  GM2S_AskNodeInfo_descriptor_ = file->message_type(40);
  static const int GM2S_AskNodeInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM2S_AskNodeInfo, request_node_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM2S_AskNodeInfo, is_online_),
  };
  GM2S_AskNodeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM2S_AskNodeInfo_descriptor_,
      GM2S_AskNodeInfo::default_instance_,
      GM2S_AskNodeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM2S_AskNodeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM2S_AskNodeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM2S_AskNodeInfo));
  S2GM_RetNodeInfo_descriptor_ = file->message_type(41);
  static const int S2GM_RetNodeInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2GM_RetNodeInfo, request_node_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2GM_RetNodeInfo, list_cluster_node_info_),
  };
  S2GM_RetNodeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2GM_RetNodeInfo_descriptor_,
      S2GM_RetNodeInfo::default_instance_,
      S2GM_RetNodeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2GM_RetNodeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2GM_RetNodeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2GM_RetNodeInfo));
  GM2S_AskPlayerInfo_descriptor_ = file->message_type(42);
  static const int GM2S_AskPlayerInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM2S_AskPlayerInfo, request_node_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM2S_AskPlayerInfo, is_online_),
  };
  GM2S_AskPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM2S_AskPlayerInfo_descriptor_,
      GM2S_AskPlayerInfo::default_instance_,
      GM2S_AskPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM2S_AskPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM2S_AskPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM2S_AskPlayerInfo));
  S2GM_RetPlayerInfo_descriptor_ = file->message_type(43);
  static const int S2GM_RetPlayerInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2GM_RetPlayerInfo, request_node_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2GM_RetPlayerInfo, list_roleinfo_),
  };
  S2GM_RetPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2GM_RetPlayerInfo_descriptor_,
      S2GM_RetPlayerInfo::default_instance_,
      S2GM_RetPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2GM_RetPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2GM_RetPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2GM_RetPlayerInfo));
  GM2S_AskSceneInfo_descriptor_ = file->message_type(44);
  static const int GM2S_AskSceneInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM2S_AskSceneInfo, is_online_),
  };
  GM2S_AskSceneInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM2S_AskSceneInfo_descriptor_,
      GM2S_AskSceneInfo::default_instance_,
      GM2S_AskSceneInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM2S_AskSceneInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM2S_AskSceneInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM2S_AskSceneInfo));
  S2GM_RetSceneInfo_descriptor_ = file->message_type(45);
  static const int S2GM_RetSceneInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2GM_RetSceneInfo, list_cluster_node_info_),
  };
  S2GM_RetSceneInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2GM_RetSceneInfo_descriptor_,
      S2GM_RetSceneInfo::default_instance_,
      S2GM_RetSceneInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2GM_RetSceneInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2GM_RetSceneInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2GM_RetSceneInfo));
  GM2S_KickPlayer_descriptor_ = file->message_type(46);
  static const int GM2S_KickPlayer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM2S_KickPlayer, role_index_),
  };
  GM2S_KickPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM2S_KickPlayer_descriptor_,
      GM2S_KickPlayer::default_instance_,
      GM2S_KickPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM2S_KickPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM2S_KickPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM2S_KickPlayer));
  GM2S_Close_descriptor_ = file->message_type(47);
  static const int GM2S_Close_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM2S_Close, role_index_),
  };
  GM2S_Close_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GM2S_Close_descriptor_,
      GM2S_Close::default_instance_,
      GM2S_Close_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM2S_Close, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GM2S_Close, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GM2S_Close));
  S2S_Ask_CheckAccount_descriptor_ = file->message_type(48);
  static const int S2S_Ask_CheckAccount_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ask_CheckAccount, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ask_CheckAccount, ret_unitindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ask_CheckAccount, ret_intaddr_),
  };
  S2S_Ask_CheckAccount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2S_Ask_CheckAccount_descriptor_,
      S2S_Ask_CheckAccount::default_instance_,
      S2S_Ask_CheckAccount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ask_CheckAccount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ask_CheckAccount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2S_Ask_CheckAccount));
  S2S_Ret_CheckAccount_descriptor_ = file->message_type(49);
  static const int S2S_Ret_CheckAccount_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ret_CheckAccount, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ret_CheckAccount, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ret_CheckAccount, account_key_),
  };
  S2S_Ret_CheckAccount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2S_Ret_CheckAccount_descriptor_,
      S2S_Ret_CheckAccount::default_instance_,
      S2S_Ret_CheckAccount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ret_CheckAccount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ret_CheckAccount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2S_Ret_CheckAccount));
  S2S_Ask_Login_descriptor_ = file->message_type(50);
  static const int S2S_Ask_Login_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ask_Login, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ask_Login, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ask_Login, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ask_Login, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ask_Login, ret_unitindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ask_Login, ret_intaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ask_Login, account_key_),
  };
  S2S_Ask_Login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2S_Ask_Login_descriptor_,
      S2S_Ask_Login::default_instance_,
      S2S_Ask_Login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ask_Login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ask_Login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2S_Ask_Login));
  S2S_Ret_Login_descriptor_ = file->message_type(51);
  static const int S2S_Ret_Login_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ret_Login, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ret_Login, re_login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ret_Login, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ret_Login, account_key_),
  };
  S2S_Ret_Login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2S_Ret_Login_descriptor_,
      S2S_Ret_Login::default_instance_,
      S2S_Ret_Login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ret_Login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Ret_Login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2S_Ret_Login));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Server_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadyRunSceneInfo_descriptor_, &ReadyRunSceneInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RunningSceneInfo_descriptor_, &RunningSceneInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2S_Ask_CreateNewScene_descriptor_, &S2S_Ask_CreateNewScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2S_Ret_CreateNewScene_descriptor_, &S2S_Ret_CreateNewScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2S_Sync_NewSceneInfo_descriptor_, &S2S_Sync_NewSceneInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2S_Currency_Packet_descriptor_, &S2S_Currency_Packet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2S_Player_Displacement_descriptor_, &S2S_Player_Displacement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2S_Player_Offline_descriptor_, &S2S_Player_Offline::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2S_Ask_Role_Save_descriptor_, &S2S_Ask_Role_Save::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2S_Ask_Role_Leave_Login_descriptor_, &S2S_Ask_Role_Leave_Login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2S_Ask_Role_Enter_Scene_descriptor_, &S2S_Ask_Role_Enter_Scene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2S_Ask_Role_Leave_Scene_descriptor_, &S2S_Ask_Role_Leave_Scene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2S_Ret_Register_ClusterNode_descriptor_, &S2S_Ret_Register_ClusterNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2S_Ret_Select_ClusterNode_descriptor_, &S2S_Ret_Select_ClusterNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2S_Ret_Update_ClusterNode_descriptor_, &S2S_Ret_Update_ClusterNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2S_Ask_ClusterInfo_descriptor_, &S2S_Ask_ClusterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2S_Ret_ClusterInfo_descriptor_, &S2S_Ret_ClusterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2S_Ret_Update_OnlineUnit_descriptor_, &S2S_Ret_Update_OnlineUnit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2S_Delete_OnlineUnitInfo_descriptor_, &S2S_Delete_OnlineUnitInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2S_Suspend_OnlineUnitInfo_descriptor_, &S2S_Suspend_OnlineUnitInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2S_Resume_OnlineUnitInfo_descriptor_, &S2S_Resume_OnlineUnitInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2S_Select_OnlineUnitInfo_descriptor_, &S2S_Select_OnlineUnitInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2S_Ret_Select_OnlineUnitInfo_descriptor_, &S2S_Ret_Select_OnlineUnitInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2S_RetReadyChangeScene_descriptor_, &S2S_RetReadyChangeScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2S_Request_Add_Friend_descriptor_, &S2S_Request_Add_Friend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2S_Friends_List_descriptor_, &S2S_Friends_List::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2S_AskCheckPlayerInLogin_descriptor_, &S2S_AskCheckPlayerInLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2S_RetCheckPlayerInLogin_descriptor_, &S2S_RetCheckPlayerInLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2S_AskEnterScene_descriptor_, &S2S_AskEnterScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2S_RetEnterScene_descriptor_, &S2S_RetEnterScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2S_ReadyEnterScene_descriptor_, &S2S_ReadyEnterScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2S_TeamReadyEnterScene_descriptor_, &S2S_TeamReadyEnterScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2S_BroadcastHaveNewScene_descriptor_, &S2S_BroadcastHaveNewScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2S_AskLoadNewScene_descriptor_, &S2S_AskLoadNewScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2S_RetLoadNewScene_descriptor_, &S2S_RetLoadNewScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2S_AskRegRunningSceneInfo_descriptor_, &S2S_AskRegRunningSceneInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2S_AskUnRegRunningSceneInfo_descriptor_, &S2S_AskUnRegRunningSceneInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM2S_AskLogin_descriptor_, &GM2S_AskLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2GM_RetLogin_descriptor_, &S2GM_RetLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2S_RegNodeInfo_descriptor_, &S2S_RegNodeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM2S_AskNodeInfo_descriptor_, &GM2S_AskNodeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2GM_RetNodeInfo_descriptor_, &S2GM_RetNodeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM2S_AskPlayerInfo_descriptor_, &GM2S_AskPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2GM_RetPlayerInfo_descriptor_, &S2GM_RetPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM2S_AskSceneInfo_descriptor_, &GM2S_AskSceneInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2GM_RetSceneInfo_descriptor_, &S2GM_RetSceneInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM2S_KickPlayer_descriptor_, &GM2S_KickPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GM2S_Close_descriptor_, &GM2S_Close::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2S_Ask_CheckAccount_descriptor_, &S2S_Ask_CheckAccount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2S_Ret_CheckAccount_descriptor_, &S2S_Ret_CheckAccount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2S_Ask_Login_descriptor_, &S2S_Ask_Login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2S_Ret_Login_descriptor_, &S2S_Ret_Login::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Server_2eproto() {
  delete ReadyRunSceneInfo::default_instance_;
  delete ReadyRunSceneInfo_reflection_;
  delete RunningSceneInfo::default_instance_;
  delete RunningSceneInfo_reflection_;
  delete S2S_Ask_CreateNewScene::default_instance_;
  delete S2S_Ask_CreateNewScene_reflection_;
  delete S2S_Ret_CreateNewScene::default_instance_;
  delete S2S_Ret_CreateNewScene_reflection_;
  delete S2S_Sync_NewSceneInfo::default_instance_;
  delete S2S_Sync_NewSceneInfo_reflection_;
  delete S2S_Currency_Packet::default_instance_;
  delete S2S_Currency_Packet_reflection_;
  delete S2S_Player_Displacement::default_instance_;
  delete S2S_Player_Displacement_reflection_;
  delete S2S_Player_Offline::default_instance_;
  delete S2S_Player_Offline_reflection_;
  delete S2S_Ask_Role_Save::default_instance_;
  delete S2S_Ask_Role_Save_reflection_;
  delete S2S_Ask_Role_Leave_Login::default_instance_;
  delete S2S_Ask_Role_Leave_Login_reflection_;
  delete S2S_Ask_Role_Enter_Scene::default_instance_;
  delete S2S_Ask_Role_Enter_Scene_reflection_;
  delete S2S_Ask_Role_Leave_Scene::default_instance_;
  delete S2S_Ask_Role_Leave_Scene_reflection_;
  delete S2S_Ret_Register_ClusterNode::default_instance_;
  delete S2S_Ret_Register_ClusterNode_reflection_;
  delete S2S_Ret_Select_ClusterNode::default_instance_;
  delete S2S_Ret_Select_ClusterNode_reflection_;
  delete S2S_Ret_Update_ClusterNode::default_instance_;
  delete S2S_Ret_Update_ClusterNode_reflection_;
  delete S2S_Ask_ClusterInfo::default_instance_;
  delete S2S_Ask_ClusterInfo_reflection_;
  delete S2S_Ret_ClusterInfo::default_instance_;
  delete S2S_Ret_ClusterInfo_reflection_;
  delete S2S_Ret_Update_OnlineUnit::default_instance_;
  delete S2S_Ret_Update_OnlineUnit_reflection_;
  delete S2S_Delete_OnlineUnitInfo::default_instance_;
  delete S2S_Delete_OnlineUnitInfo_reflection_;
  delete S2S_Suspend_OnlineUnitInfo::default_instance_;
  delete S2S_Suspend_OnlineUnitInfo_reflection_;
  delete S2S_Resume_OnlineUnitInfo::default_instance_;
  delete S2S_Resume_OnlineUnitInfo_reflection_;
  delete S2S_Select_OnlineUnitInfo::default_instance_;
  delete S2S_Select_OnlineUnitInfo_reflection_;
  delete S2S_Ret_Select_OnlineUnitInfo::default_instance_;
  delete S2S_Ret_Select_OnlineUnitInfo_reflection_;
  delete S2S_RetReadyChangeScene::default_instance_;
  delete S2S_RetReadyChangeScene_reflection_;
  delete S2S_Request_Add_Friend::default_instance_;
  delete S2S_Request_Add_Friend_reflection_;
  delete S2S_Friends_List::default_instance_;
  delete S2S_Friends_List_reflection_;
  delete S2S_AskCheckPlayerInLogin::default_instance_;
  delete S2S_AskCheckPlayerInLogin_reflection_;
  delete S2S_RetCheckPlayerInLogin::default_instance_;
  delete S2S_RetCheckPlayerInLogin_reflection_;
  delete S2S_AskEnterScene::default_instance_;
  delete S2S_AskEnterScene_reflection_;
  delete S2S_RetEnterScene::default_instance_;
  delete S2S_RetEnterScene_reflection_;
  delete S2S_ReadyEnterScene::default_instance_;
  delete S2S_ReadyEnterScene_reflection_;
  delete S2S_TeamReadyEnterScene::default_instance_;
  delete S2S_TeamReadyEnterScene_reflection_;
  delete S2S_BroadcastHaveNewScene::default_instance_;
  delete S2S_BroadcastHaveNewScene_reflection_;
  delete S2S_AskLoadNewScene::default_instance_;
  delete S2S_AskLoadNewScene_reflection_;
  delete S2S_RetLoadNewScene::default_instance_;
  delete S2S_RetLoadNewScene_reflection_;
  delete S2S_AskRegRunningSceneInfo::default_instance_;
  delete S2S_AskRegRunningSceneInfo_reflection_;
  delete S2S_AskUnRegRunningSceneInfo::default_instance_;
  delete S2S_AskUnRegRunningSceneInfo_reflection_;
  delete GM2S_AskLogin::default_instance_;
  delete GM2S_AskLogin_reflection_;
  delete S2GM_RetLogin::default_instance_;
  delete S2GM_RetLogin_reflection_;
  delete S2S_RegNodeInfo::default_instance_;
  delete S2S_RegNodeInfo_reflection_;
  delete GM2S_AskNodeInfo::default_instance_;
  delete GM2S_AskNodeInfo_reflection_;
  delete S2GM_RetNodeInfo::default_instance_;
  delete S2GM_RetNodeInfo_reflection_;
  delete GM2S_AskPlayerInfo::default_instance_;
  delete GM2S_AskPlayerInfo_reflection_;
  delete S2GM_RetPlayerInfo::default_instance_;
  delete S2GM_RetPlayerInfo_reflection_;
  delete GM2S_AskSceneInfo::default_instance_;
  delete GM2S_AskSceneInfo_reflection_;
  delete S2GM_RetSceneInfo::default_instance_;
  delete S2GM_RetSceneInfo_reflection_;
  delete GM2S_KickPlayer::default_instance_;
  delete GM2S_KickPlayer_reflection_;
  delete GM2S_Close::default_instance_;
  delete GM2S_Close_reflection_;
  delete S2S_Ask_CheckAccount::default_instance_;
  delete S2S_Ask_CheckAccount_reflection_;
  delete S2S_Ret_CheckAccount::default_instance_;
  delete S2S_Ret_CheckAccount_reflection_;
  delete S2S_Ask_Login::default_instance_;
  delete S2S_Ask_Login_reflection_;
  delete S2S_Ret_Login::default_instance_;
  delete S2S_Ret_Login_reflection_;
}

void protobuf_AddDesc_Server_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_EnumDef_2eproto();
  ::protobuf_AddDesc_Common_2eproto();
  ::protobuf_AddDesc_Battle_2eproto();
  ::protobuf_AddDesc_Database_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Server.proto\032\rEnumDef.proto\032\014Common.pr"
    "oto\032\014Battle.proto\032\016Database.proto\"\232\002\n\021Re"
    "adyRunSceneInfo\022\020\n\010scene_id\030\001 \002(\021\022\023\n\013sce"
    "ne_index\030\002 \002(\021\022\016\n\006map_id\030\003 \002(\021\022.\n\nscene_"
    "type\030\004 \002(\0162\r.E_SCENE_TYPE:\013EST_INVALID\022\'"
    "\n\016list_role_info\030\005 \003(\0132\017.universal_data\022"
    "\'\n\016list_team_info\030\006 \003(\0132\017.universal_data"
    "\0220\n\021list_monster_info\030\007 \003(\0132\025.ServerBatt"
    "leUnitInfo\022\032\n\022list_login_intaddr\030\010 \003(\022\"t"
    "\n\020RunningSceneInfo\022\031\n\021scene_instance_id\030"
    "\001 \002(\022\022\020\n\010scene_id\030\002 \002(\021\022\023\n\013scene_index\030\003"
    " \002(\021\022\017\n\007intaddr\030\004 \002(\022\022\r\n\005loads\030\005 \002(\021\"\221\001\n"
    "\026S2S_Ask_CreateNewScene\022\020\n\010scene_id\030\001 \002("
    "\021\022\031\n\021scene_instance_id\030\002 \002(\022\022\032\n\022server_i"
    "nstance_id\030\003 \002(\022\022.\n\nscene_type\030\004 \002(\0162\r.E"
    "_SCENE_TYPE:\013EST_INVALID\"\243\001\n\026S2S_Ret_Cre"
    "ateNewScene\022\020\n\010ret_code\030\001 \002(\014\022\020\n\010scene_i"
    "d\030\002 \002(\021\022\031\n\021scene_instance_id\030\003 \002(\022\022\032\n\022se"
    "rver_instance_id\030\004 \002(\022\022.\n\nscene_type\030\005 \002"
    "(\0162\r.E_SCENE_TYPE:\013EST_INVALID\"\220\001\n\025S2S_S"
    "ync_NewSceneInfo\022\020\n\010scene_id\030\001 \002(\021\022\031\n\021sc"
    "ene_instance_id\030\002 \002(\022\022\032\n\022server_instance"
    "_id\030\003 \002(\022\022.\n\nscene_type\030\004 \002(\0162\r.E_SCENE_"
    "TYPE:\013EST_INVALID\"$\n\023S2S_Currency_Packet"
    "\022\r\n\005datas\030\001 \003(\014\"\213\001\n\027S2S_Player_Displacem"
    "ent\022\022\n\nrole_index\030\001 \002(\022\022\024\n\014gate_intaddr\030"
    "\002 \002(\022\022\025\n\rscene_intaddr\030\003 \002(\022\022\031\n\021scene_in"
    "stance_id\030\004 \002(\022\022\024\n\014save_intaddr\030\005 \002(\022\"=\n"
    "\022S2S_Player_Offline\022\022\n\nrole_index\030\001 \002(\022\022"
    "\023\n\013kick_reason\030\002 \002(\014\"7\n\021S2S_Ask_Role_Sav"
    "e\022\"\n\trole_info\030\001 \002(\0132\017.universal_data\"X\n"
    "\030S2S_Ask_Role_Leave_Login\022\022\n\nrole_index\030"
    "\001 \002(\022\022\017\n\007account\030\002 \002(\014\022\013\n\003sid\030\003 \002(\014\022\n\n\002i"
    "p\030\004 \002(\014\"_\n\030S2S_Ask_Role_Enter_Scene\022\022\n\nr"
    "ole_index\030\001 \002(\022\022\024\n\014role_intaddr\030\002 \002(\022\022\031\n"
    "\021scene_instance_id\030\003 \002(\022\"_\n\030S2S_Ask_Role"
    "_Leave_Scene\022\022\n\nrole_index\030\001 \002(\022\022\024\n\014role"
    "_intaddr\030\002 \002(\022\022\031\n\021scene_instance_id\030\003 \002("
    "\022\"K\n\034S2S_Ret_Register_ClusterNode\022\022\n\nnod"
    "e_index\030\001 \002(\021\022\027\n\017unit_next_index\030\002 \002(\022\"z"
    "\n\032S2S_Ret_Select_ClusterNode\022\024\n\014list_int"
    "addr\030\001 \003(\022\022\027\n\017list_node_index\030\002 \003(\021\022\025\n\rl"
    "ist_pressure\030\003 \003(\022\022\026\n\016list_last_time\030\004 \003"
    "(\022\"A\n\032S2S_Ret_Update_ClusterNode\022\017\n\007inta"
    "ddr\030\001 \002(\022\022\022\n\nnode_index\030\002 \002(\021\")\n\023S2S_Ask"
    "_ClusterInfo\022\022\n\nnode_index\030\001 \002(\022\"k\n\023S2S_"
    "Ret_ClusterInfo\022\021\n\tlist_addr\030\001 \003(\014\022\021\n\tli"
    "st_port\030\002 \003(\021\022\025\n\rlist_pressure\030\003 \003(\022\022\027\n\017"
    "list_node_index\030\004 \003(\021\"E\n\031S2S_Ret_Update_"
    "OnlineUnit\022(\n\003ret\030\001 \002(\0162\022.E_ONLINE_UNIT_"
    "RET:\007EOUR_OK\"B\n\031S2S_Delete_OnlineUnitInf"
    "o\022\021\n\tunit_type\030\001 \002(\021\022\022\n\nunit_index\030\002 \002(\022"
    "\"C\n\032S2S_Suspend_OnlineUnitInfo\022\021\n\tunit_t"
    "ype\030\001 \002(\021\022\022\n\nunit_index\030\002 \002(\022\"B\n\031S2S_Res"
    "ume_OnlineUnitInfo\022\021\n\tunit_type\030\001 \002(\021\022\022\n"
    "\nunit_index\030\002 \002(\022\"^\n\031S2S_Select_OnlineUn"
    "itInfo\022\021\n\tunit_type\030\001 \002(\021\022\022\n\nunit_index\030"
    "\002 \002(\022\022\014\n\004addr\030\003 \002(\014\022\014\n\004port\030\004 \002(\021\"b\n\035S2S"
    "_Ret_Select_OnlineUnitInfo\022\021\n\tunit_type\030"
    "\001 \002(\021\022\022\n\nunit_index\030\002 \002(\022\022\014\n\004addr\030\003 \002(\014\022"
    "\014\n\004port\030\004 \002(\021\"\203\001\n\027S2S_RetReadyChangeScen"
    "e\022\020\n\010ret_code\030\001 \002(\014\022\022\n\nrole_index\030\002 \002(\022\022"
    "\020\n\010scene_id\030\005 \002(\021\022\031\n\021scene_instance_id\030\006"
    " \002(\022\022\025\n\rlogin_intaddr\030\007 \002(\022\"W\n\026S2S_Reque"
    "st_Add_Friend\022\022\n\nrole_index\030\001 \002(\022\022\026\n\016src"
    "_role_index\030\002 \002(\022\022\021\n\tis_refuse\030\003 \002(\010\"2\n\020"
    "S2S_Friends_List\022\036\n\026list_friend_role_ind"
    "ex\030\001 \003(\022\"r\n\031S2S_AskCheckPlayerInLogin\022\022\n"
    "\nrole_index\030\001 \002(\022\022\033\n\023src_temp_unit_index"
    "\030\002 \002(\022\022\023\n\013src_intaddr\030\003 \002(\022\022\017\n\007intaddr\030\004"
    " \002(\022\"R\n\031S2S_RetCheckPlayerInLogin\022\022\n\nrol"
    "e_index\030\001 \002(\022\022\020\n\010in_login\030\002 \002(\010\022\017\n\007intad"
    "dr\030\003 \002(\022\"\320\001\n\021S2S_AskEnterScene\022\020\n\010scene_"
    "id\030\001 \002(\021\022\016\n\006map_id\030\002 \002(\021\022\"\n\tteam_info\030\003 "
    "\001(\0132\017.universal_data\022\'\n\016list_role_info\030\004"
    " \003(\0132\017.universal_data\0220\n\021list_monster_in"
    "fo\030\005 \003(\0132\025.ServerBattleUnitInfo\022\032\n\022list_"
    "login_intaddr\030\006 \003(\022\"_\n\021S2S_RetEnterScene"
    "\022\020\n\010scene_id\030\001 \002(\021\022\022\n\nrole_index\030\002 \002(\022\022\025"
    "\n\rlogin_intaddr\030\003 \002(\022\022\r\n\005is_ok\030\004 \002(\010\"\265\001\n"
    "\023S2S_ReadyEnterScene\022\020\n\010scene_id\030\001 \002(\021\022\031"
    "\n\021scene_instance_id\030\002 \002(\022\022\022\n\nrole_index\030"
    "\003 \002(\022\022\017\n\007account\030\004 \002(\014\022\021\n\tnick_name\030\005 \002("
    "\014\022\"\n\trole_info\030\006 \002(\0132\017.universal_data\022\025\n"
    "\rlogin_intaddr\030\007 \002(\022\"\341\001\n\027S2S_TeamReadyEn"
    "terScene\022\020\n\010scene_id\030\001 \002(\021\022\031\n\021scene_inst"
    "ance_id\030\002 \002(\022\022\"\n\tteam_info\030\003 \002(\0132\017.unive"
    "rsal_data\022\'\n\016list_role_info\030\004 \003(\0132\017.univ"
    "ersal_data\0220\n\021list_monster_info\030\005 \003(\0132\025."
    "ServerBattleUnitInfo\022\032\n\022list_login_intad"
    "dr\030\006 \003(\022\"A\n\031S2S_BroadcastHaveNewScene\022$\n"
    "\034center_scene_manager_intaddr\030\001 \002(\022\"4\n\023S"
    "2S_AskLoadNewScene\022\035\n\025scene_manager_inta"
    "ddr\030\001 \002(\022\"\234\002\n\023S2S_RetLoadNewScene\022\020\n\010sce"
    "ne_id\030\001 \002(\021\022\023\n\013scene_index\030\002 \002(\021\022\016\n\006map_"
    "id\030\003 \002(\021\022.\n\nscene_type\030\004 \002(\0162\r.E_SCENE_T"
    "YPE:\013EST_INVALID\022\'\n\016list_role_info\030\005 \003(\013"
    "2\017.universal_data\022\'\n\016list_team_info\030\006 \003("
    "\0132\017.universal_data\0220\n\021list_monster_info\030"
    "\007 \003(\0132\025.ServerBattleUnitInfo\022\032\n\022list_log"
    "in_intaddr\030\010 \003(\022\"C\n\032S2S_AskRegRunningSce"
    "neInfo\022%\n\nscene_info\030\001 \002(\0132\021.RunningScen"
    "eInfo\"E\n\034S2S_AskUnRegRunningSceneInfo\022%\n"
    "\nscene_info\030\001 \002(\0132\021.RunningSceneInfo\"2\n\r"
    "GM2S_AskLogin\022\017\n\007account\030\001 \002(\014\022\020\n\010passwo"
    "rd\030\002 \002(\014\"2\n\rS2GM_RetLogin\022\020\n\010ret_code\030\001 "
    "\002(\014\022\017\n\007account\030\002 \002(\014\"H\n\017S2S_RegNodeInfo\022"
    "5\n\021cluster_node_info\030\001 \002(\0132\032.sql_ret_clu"
    "ster_node_info\"@\n\020GM2S_AskNodeInfo\022\031\n\021re"
    "quest_node_name\030\001 \002(\014\022\021\n\tis_online\030\002 \002(\010"
    "\"i\n\020S2GM_RetNodeInfo\022\031\n\021request_node_nam"
    "e\030\001 \002(\014\022:\n\026list_cluster_node_info\030\002 \003(\0132"
    "\032.sql_ret_cluster_node_info\"B\n\022GM2S_AskP"
    "layerInfo\022\031\n\021request_node_name\030\001 \002(\014\022\021\n\t"
    "is_online\030\002 \002(\010\"W\n\022S2GM_RetPlayerInfo\022\031\n"
    "\021request_node_name\030\001 \002(\014\022&\n\rlist_roleinf"
    "o\030\002 \003(\0132\017.universal_data\"&\n\021GM2S_AskScen"
    "eInfo\022\021\n\tis_online\030\001 \002(\010\"O\n\021S2GM_RetScen"
    "eInfo\022:\n\026list_cluster_node_info\030\001 \003(\0132\032."
    "sql_ret_cluster_node_info\"%\n\017GM2S_KickPl"
    "ayer\022\022\n\nrole_index\030\001 \002(\022\" \n\nGM2S_Close\022\022"
    "\n\nrole_index\030\001 \002(\022\"S\n\024S2S_Ask_CheckAccou"
    "nt\022\017\n\007account\030\001 \002(\014\022\025\n\rret_unitindex\030\002 \001"
    "(\003\022\023\n\013ret_intaddr\030\003 \001(\003\"N\n\024S2S_Ret_Check"
    "Account\022\020\n\010ret_code\030\001 \002(\014\022\017\n\007account\030\002 \002"
    "(\014\022\023\n\013account_key\030\003 \002(\003\"\214\001\n\rS2S_Ask_Logi"
    "n\022\017\n\007account\030\001 \002(\014\022\020\n\010password\030\002 \002(\014\022\013\n\003"
    "sid\030\003 \002(\014\022\n\n\002ip\030\004 \001(\014\022\025\n\rret_unitindex\030\005"
    " \001(\003\022\023\n\013ret_intaddr\030\006 \001(\003\022\023\n\013account_key"
    "\030\007 \001(\003\"Y\n\rS2S_Ret_Login\022\020\n\010ret_code\030\001 \002("
    "\014\022\020\n\010re_login\030\002 \002(\010\022\017\n\007account\030\003 \002(\014\022\023\n\013"
    "account_key\030\004 \001(\003", 5257);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Server.proto", &protobuf_RegisterTypes);
  ReadyRunSceneInfo::default_instance_ = new ReadyRunSceneInfo();
  RunningSceneInfo::default_instance_ = new RunningSceneInfo();
  S2S_Ask_CreateNewScene::default_instance_ = new S2S_Ask_CreateNewScene();
  S2S_Ret_CreateNewScene::default_instance_ = new S2S_Ret_CreateNewScene();
  S2S_Sync_NewSceneInfo::default_instance_ = new S2S_Sync_NewSceneInfo();
  S2S_Currency_Packet::default_instance_ = new S2S_Currency_Packet();
  S2S_Player_Displacement::default_instance_ = new S2S_Player_Displacement();
  S2S_Player_Offline::default_instance_ = new S2S_Player_Offline();
  S2S_Ask_Role_Save::default_instance_ = new S2S_Ask_Role_Save();
  S2S_Ask_Role_Leave_Login::default_instance_ = new S2S_Ask_Role_Leave_Login();
  S2S_Ask_Role_Enter_Scene::default_instance_ = new S2S_Ask_Role_Enter_Scene();
  S2S_Ask_Role_Leave_Scene::default_instance_ = new S2S_Ask_Role_Leave_Scene();
  S2S_Ret_Register_ClusterNode::default_instance_ = new S2S_Ret_Register_ClusterNode();
  S2S_Ret_Select_ClusterNode::default_instance_ = new S2S_Ret_Select_ClusterNode();
  S2S_Ret_Update_ClusterNode::default_instance_ = new S2S_Ret_Update_ClusterNode();
  S2S_Ask_ClusterInfo::default_instance_ = new S2S_Ask_ClusterInfo();
  S2S_Ret_ClusterInfo::default_instance_ = new S2S_Ret_ClusterInfo();
  S2S_Ret_Update_OnlineUnit::default_instance_ = new S2S_Ret_Update_OnlineUnit();
  S2S_Delete_OnlineUnitInfo::default_instance_ = new S2S_Delete_OnlineUnitInfo();
  S2S_Suspend_OnlineUnitInfo::default_instance_ = new S2S_Suspend_OnlineUnitInfo();
  S2S_Resume_OnlineUnitInfo::default_instance_ = new S2S_Resume_OnlineUnitInfo();
  S2S_Select_OnlineUnitInfo::default_instance_ = new S2S_Select_OnlineUnitInfo();
  S2S_Ret_Select_OnlineUnitInfo::default_instance_ = new S2S_Ret_Select_OnlineUnitInfo();
  S2S_RetReadyChangeScene::default_instance_ = new S2S_RetReadyChangeScene();
  S2S_Request_Add_Friend::default_instance_ = new S2S_Request_Add_Friend();
  S2S_Friends_List::default_instance_ = new S2S_Friends_List();
  S2S_AskCheckPlayerInLogin::default_instance_ = new S2S_AskCheckPlayerInLogin();
  S2S_RetCheckPlayerInLogin::default_instance_ = new S2S_RetCheckPlayerInLogin();
  S2S_AskEnterScene::default_instance_ = new S2S_AskEnterScene();
  S2S_RetEnterScene::default_instance_ = new S2S_RetEnterScene();
  S2S_ReadyEnterScene::default_instance_ = new S2S_ReadyEnterScene();
  S2S_TeamReadyEnterScene::default_instance_ = new S2S_TeamReadyEnterScene();
  S2S_BroadcastHaveNewScene::default_instance_ = new S2S_BroadcastHaveNewScene();
  S2S_AskLoadNewScene::default_instance_ = new S2S_AskLoadNewScene();
  S2S_RetLoadNewScene::default_instance_ = new S2S_RetLoadNewScene();
  S2S_AskRegRunningSceneInfo::default_instance_ = new S2S_AskRegRunningSceneInfo();
  S2S_AskUnRegRunningSceneInfo::default_instance_ = new S2S_AskUnRegRunningSceneInfo();
  GM2S_AskLogin::default_instance_ = new GM2S_AskLogin();
  S2GM_RetLogin::default_instance_ = new S2GM_RetLogin();
  S2S_RegNodeInfo::default_instance_ = new S2S_RegNodeInfo();
  GM2S_AskNodeInfo::default_instance_ = new GM2S_AskNodeInfo();
  S2GM_RetNodeInfo::default_instance_ = new S2GM_RetNodeInfo();
  GM2S_AskPlayerInfo::default_instance_ = new GM2S_AskPlayerInfo();
  S2GM_RetPlayerInfo::default_instance_ = new S2GM_RetPlayerInfo();
  GM2S_AskSceneInfo::default_instance_ = new GM2S_AskSceneInfo();
  S2GM_RetSceneInfo::default_instance_ = new S2GM_RetSceneInfo();
  GM2S_KickPlayer::default_instance_ = new GM2S_KickPlayer();
  GM2S_Close::default_instance_ = new GM2S_Close();
  S2S_Ask_CheckAccount::default_instance_ = new S2S_Ask_CheckAccount();
  S2S_Ret_CheckAccount::default_instance_ = new S2S_Ret_CheckAccount();
  S2S_Ask_Login::default_instance_ = new S2S_Ask_Login();
  S2S_Ret_Login::default_instance_ = new S2S_Ret_Login();
  ReadyRunSceneInfo::default_instance_->InitAsDefaultInstance();
  RunningSceneInfo::default_instance_->InitAsDefaultInstance();
  S2S_Ask_CreateNewScene::default_instance_->InitAsDefaultInstance();
  S2S_Ret_CreateNewScene::default_instance_->InitAsDefaultInstance();
  S2S_Sync_NewSceneInfo::default_instance_->InitAsDefaultInstance();
  S2S_Currency_Packet::default_instance_->InitAsDefaultInstance();
  S2S_Player_Displacement::default_instance_->InitAsDefaultInstance();
  S2S_Player_Offline::default_instance_->InitAsDefaultInstance();
  S2S_Ask_Role_Save::default_instance_->InitAsDefaultInstance();
  S2S_Ask_Role_Leave_Login::default_instance_->InitAsDefaultInstance();
  S2S_Ask_Role_Enter_Scene::default_instance_->InitAsDefaultInstance();
  S2S_Ask_Role_Leave_Scene::default_instance_->InitAsDefaultInstance();
  S2S_Ret_Register_ClusterNode::default_instance_->InitAsDefaultInstance();
  S2S_Ret_Select_ClusterNode::default_instance_->InitAsDefaultInstance();
  S2S_Ret_Update_ClusterNode::default_instance_->InitAsDefaultInstance();
  S2S_Ask_ClusterInfo::default_instance_->InitAsDefaultInstance();
  S2S_Ret_ClusterInfo::default_instance_->InitAsDefaultInstance();
  S2S_Ret_Update_OnlineUnit::default_instance_->InitAsDefaultInstance();
  S2S_Delete_OnlineUnitInfo::default_instance_->InitAsDefaultInstance();
  S2S_Suspend_OnlineUnitInfo::default_instance_->InitAsDefaultInstance();
  S2S_Resume_OnlineUnitInfo::default_instance_->InitAsDefaultInstance();
  S2S_Select_OnlineUnitInfo::default_instance_->InitAsDefaultInstance();
  S2S_Ret_Select_OnlineUnitInfo::default_instance_->InitAsDefaultInstance();
  S2S_RetReadyChangeScene::default_instance_->InitAsDefaultInstance();
  S2S_Request_Add_Friend::default_instance_->InitAsDefaultInstance();
  S2S_Friends_List::default_instance_->InitAsDefaultInstance();
  S2S_AskCheckPlayerInLogin::default_instance_->InitAsDefaultInstance();
  S2S_RetCheckPlayerInLogin::default_instance_->InitAsDefaultInstance();
  S2S_AskEnterScene::default_instance_->InitAsDefaultInstance();
  S2S_RetEnterScene::default_instance_->InitAsDefaultInstance();
  S2S_ReadyEnterScene::default_instance_->InitAsDefaultInstance();
  S2S_TeamReadyEnterScene::default_instance_->InitAsDefaultInstance();
  S2S_BroadcastHaveNewScene::default_instance_->InitAsDefaultInstance();
  S2S_AskLoadNewScene::default_instance_->InitAsDefaultInstance();
  S2S_RetLoadNewScene::default_instance_->InitAsDefaultInstance();
  S2S_AskRegRunningSceneInfo::default_instance_->InitAsDefaultInstance();
  S2S_AskUnRegRunningSceneInfo::default_instance_->InitAsDefaultInstance();
  GM2S_AskLogin::default_instance_->InitAsDefaultInstance();
  S2GM_RetLogin::default_instance_->InitAsDefaultInstance();
  S2S_RegNodeInfo::default_instance_->InitAsDefaultInstance();
  GM2S_AskNodeInfo::default_instance_->InitAsDefaultInstance();
  S2GM_RetNodeInfo::default_instance_->InitAsDefaultInstance();
  GM2S_AskPlayerInfo::default_instance_->InitAsDefaultInstance();
  S2GM_RetPlayerInfo::default_instance_->InitAsDefaultInstance();
  GM2S_AskSceneInfo::default_instance_->InitAsDefaultInstance();
  S2GM_RetSceneInfo::default_instance_->InitAsDefaultInstance();
  GM2S_KickPlayer::default_instance_->InitAsDefaultInstance();
  GM2S_Close::default_instance_->InitAsDefaultInstance();
  S2S_Ask_CheckAccount::default_instance_->InitAsDefaultInstance();
  S2S_Ret_CheckAccount::default_instance_->InitAsDefaultInstance();
  S2S_Ask_Login::default_instance_->InitAsDefaultInstance();
  S2S_Ret_Login::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Server_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Server_2eproto {
  StaticDescriptorInitializer_Server_2eproto() {
    protobuf_AddDesc_Server_2eproto();
  }
} static_descriptor_initializer_Server_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ReadyRunSceneInfo::kSceneIdFieldNumber;
const int ReadyRunSceneInfo::kSceneIndexFieldNumber;
const int ReadyRunSceneInfo::kMapIdFieldNumber;
const int ReadyRunSceneInfo::kSceneTypeFieldNumber;
const int ReadyRunSceneInfo::kListRoleInfoFieldNumber;
const int ReadyRunSceneInfo::kListTeamInfoFieldNumber;
const int ReadyRunSceneInfo::kListMonsterInfoFieldNumber;
const int ReadyRunSceneInfo::kListLoginIntaddrFieldNumber;
#endif  // !_MSC_VER

ReadyRunSceneInfo::ReadyRunSceneInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReadyRunSceneInfo::InitAsDefaultInstance() {
}

ReadyRunSceneInfo::ReadyRunSceneInfo(const ReadyRunSceneInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReadyRunSceneInfo::SharedCtor() {
  _cached_size_ = 0;
  scene_id_ = 0;
  scene_index_ = 0;
  map_id_ = 0;
  scene_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadyRunSceneInfo::~ReadyRunSceneInfo() {
  SharedDtor();
}

void ReadyRunSceneInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReadyRunSceneInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadyRunSceneInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadyRunSceneInfo_descriptor_;
}

const ReadyRunSceneInfo& ReadyRunSceneInfo::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Server_2eproto();
  return *default_instance_;
}

ReadyRunSceneInfo* ReadyRunSceneInfo::default_instance_ = nullptr;

ReadyRunSceneInfo* ReadyRunSceneInfo::New() const {
  return new ReadyRunSceneInfo;
}

void ReadyRunSceneInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    scene_id_ = 0;
    scene_index_ = 0;
    map_id_ = 0;
    scene_type_ = 0;
  }
  list_role_info_.Clear();
  list_team_info_.Clear();
  list_monster_info_.Clear();
  list_login_intaddr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadyRunSceneInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 scene_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scene_index;
        break;
      }

      // required sint32 scene_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &scene_index_)));
          set_has_scene_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_map_id;
        break;
      }

      // required sint32 map_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_scene_type;
        break;
      }

      // required .E_SCENE_TYPE scene_type = 4 [default = EST_INVALID];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::E_SCENE_TYPE_IsValid(value)) {
            set_scene_type(static_cast< ::E_SCENE_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_list_role_info;
        break;
      }

      // repeated .universal_data list_role_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_role_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_role_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_list_role_info;
        if (input->ExpectTag(50)) goto parse_list_team_info;
        break;
      }

      // repeated .universal_data list_team_info = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_team_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_team_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_list_team_info;
        if (input->ExpectTag(58)) goto parse_list_monster_info;
        break;
      }

      // repeated .ServerBattleUnitInfo list_monster_info = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_monster_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_monster_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_list_monster_info;
        if (input->ExpectTag(64)) goto parse_list_login_intaddr;
        break;
      }

      // repeated sint64 list_login_intaddr = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_list_login_intaddr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 64, input, this->mutable_list_login_intaddr())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_list_login_intaddr())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_list_login_intaddr;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReadyRunSceneInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 scene_id = 1;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->scene_id(), output);
  }

  // required sint32 scene_index = 2;
  if (has_scene_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->scene_index(), output);
  }

  // required sint32 map_id = 3;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->map_id(), output);
  }

  // required .E_SCENE_TYPE scene_type = 4 [default = EST_INVALID];
  if (has_scene_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->scene_type(), output);
  }

  // repeated .universal_data list_role_info = 5;
  for (int i = 0; i < this->list_role_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->list_role_info(i), output);
  }

  // repeated .universal_data list_team_info = 6;
  for (int i = 0; i < this->list_team_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->list_team_info(i), output);
  }

  // repeated .ServerBattleUnitInfo list_monster_info = 7;
  for (int i = 0; i < this->list_monster_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->list_monster_info(i), output);
  }

  // repeated sint64 list_login_intaddr = 8;
  for (int i = 0; i < this->list_login_intaddr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(
      8, this->list_login_intaddr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReadyRunSceneInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 scene_id = 1;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->scene_id(), target);
  }

  // required sint32 scene_index = 2;
  if (has_scene_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->scene_index(), target);
  }

  // required sint32 map_id = 3;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->map_id(), target);
  }

  // required .E_SCENE_TYPE scene_type = 4 [default = EST_INVALID];
  if (has_scene_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->scene_type(), target);
  }

  // repeated .universal_data list_role_info = 5;
  for (int i = 0; i < this->list_role_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->list_role_info(i), target);
  }

  // repeated .universal_data list_team_info = 6;
  for (int i = 0; i < this->list_team_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->list_team_info(i), target);
  }

  // repeated .ServerBattleUnitInfo list_monster_info = 7;
  for (int i = 0; i < this->list_monster_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->list_monster_info(i), target);
  }

  // repeated sint64 list_login_intaddr = 8;
  for (int i = 0; i < this->list_login_intaddr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64ToArray(8, this->list_login_intaddr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReadyRunSceneInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 scene_id = 1;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->scene_id());
    }

    // required sint32 scene_index = 2;
    if (has_scene_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->scene_index());
    }

    // required sint32 map_id = 3;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->map_id());
    }

    // required .E_SCENE_TYPE scene_type = 4 [default = EST_INVALID];
    if (has_scene_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->scene_type());
    }

  }
  // repeated .universal_data list_role_info = 5;
  total_size += 1 * this->list_role_info_size();
  for (int i = 0; i < this->list_role_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_role_info(i));
  }

  // repeated .universal_data list_team_info = 6;
  total_size += 1 * this->list_team_info_size();
  for (int i = 0; i < this->list_team_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_team_info(i));
  }

  // repeated .ServerBattleUnitInfo list_monster_info = 7;
  total_size += 1 * this->list_monster_info_size();
  for (int i = 0; i < this->list_monster_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_monster_info(i));
  }

  // repeated sint64 list_login_intaddr = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->list_login_intaddr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->list_login_intaddr(i));
    }
    total_size += 1 * this->list_login_intaddr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadyRunSceneInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadyRunSceneInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadyRunSceneInfo*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadyRunSceneInfo::MergeFrom(const ReadyRunSceneInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_role_info_.MergeFrom(from.list_role_info_);
  list_team_info_.MergeFrom(from.list_team_info_);
  list_monster_info_.MergeFrom(from.list_monster_info_);
  list_login_intaddr_.MergeFrom(from.list_login_intaddr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_scene_index()) {
      set_scene_index(from.scene_index());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_scene_type()) {
      set_scene_type(from.scene_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadyRunSceneInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadyRunSceneInfo::CopyFrom(const ReadyRunSceneInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadyRunSceneInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  for (int i = 0; i < list_monster_info_size(); i++) {
    if (!this->list_monster_info(i).IsInitialized()) return false;
  }
  return true;
}

void ReadyRunSceneInfo::Swap(ReadyRunSceneInfo* other) {
  if (other != this) {
    std::swap(scene_id_, other->scene_id_);
    std::swap(scene_index_, other->scene_index_);
    std::swap(map_id_, other->map_id_);
    std::swap(scene_type_, other->scene_type_);
    list_role_info_.Swap(&other->list_role_info_);
    list_team_info_.Swap(&other->list_team_info_);
    list_monster_info_.Swap(&other->list_monster_info_);
    list_login_intaddr_.Swap(&other->list_login_intaddr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadyRunSceneInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadyRunSceneInfo_descriptor_;
  metadata.reflection = ReadyRunSceneInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RunningSceneInfo::kSceneInstanceIdFieldNumber;
const int RunningSceneInfo::kSceneIdFieldNumber;
const int RunningSceneInfo::kSceneIndexFieldNumber;
const int RunningSceneInfo::kIntaddrFieldNumber;
const int RunningSceneInfo::kLoadsFieldNumber;
#endif  // !_MSC_VER

RunningSceneInfo::RunningSceneInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RunningSceneInfo::InitAsDefaultInstance() {
}

RunningSceneInfo::RunningSceneInfo(const RunningSceneInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RunningSceneInfo::SharedCtor() {
  _cached_size_ = 0;
  scene_instance_id_ = GOOGLE_LONGLONG(0);
  scene_id_ = 0;
  scene_index_ = 0;
  intaddr_ = GOOGLE_LONGLONG(0);
  loads_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RunningSceneInfo::~RunningSceneInfo() {
  SharedDtor();
}

void RunningSceneInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RunningSceneInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunningSceneInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RunningSceneInfo_descriptor_;
}

const RunningSceneInfo& RunningSceneInfo::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Server_2eproto();
  return *default_instance_;
}

RunningSceneInfo* RunningSceneInfo::default_instance_ = nullptr;

RunningSceneInfo* RunningSceneInfo::New() const {
  return new RunningSceneInfo;
}

void RunningSceneInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    scene_instance_id_ = GOOGLE_LONGLONG(0);
    scene_id_ = 0;
    scene_index_ = 0;
    intaddr_ = GOOGLE_LONGLONG(0);
    loads_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RunningSceneInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 scene_instance_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &scene_instance_id_)));
          set_has_scene_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scene_id;
        break;
      }

      // required sint32 scene_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_scene_index;
        break;
      }

      // required sint32 scene_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &scene_index_)));
          set_has_scene_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_intaddr;
        break;
      }

      // required sint64 intaddr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intaddr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &intaddr_)));
          set_has_intaddr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_loads;
        break;
      }

      // required sint32 loads = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loads:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &loads_)));
          set_has_loads();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RunningSceneInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 scene_instance_id = 1;
  if (has_scene_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->scene_instance_id(), output);
  }

  // required sint32 scene_id = 2;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->scene_id(), output);
  }

  // required sint32 scene_index = 3;
  if (has_scene_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->scene_index(), output);
  }

  // required sint64 intaddr = 4;
  if (has_intaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->intaddr(), output);
  }

  // required sint32 loads = 5;
  if (has_loads()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->loads(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RunningSceneInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 scene_instance_id = 1;
  if (has_scene_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->scene_instance_id(), target);
  }

  // required sint32 scene_id = 2;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->scene_id(), target);
  }

  // required sint32 scene_index = 3;
  if (has_scene_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->scene_index(), target);
  }

  // required sint64 intaddr = 4;
  if (has_intaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(4, this->intaddr(), target);
  }

  // required sint32 loads = 5;
  if (has_loads()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->loads(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RunningSceneInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 scene_instance_id = 1;
    if (has_scene_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->scene_instance_id());
    }

    // required sint32 scene_id = 2;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->scene_id());
    }

    // required sint32 scene_index = 3;
    if (has_scene_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->scene_index());
    }

    // required sint64 intaddr = 4;
    if (has_intaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->intaddr());
    }

    // required sint32 loads = 5;
    if (has_loads()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->loads());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunningSceneInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RunningSceneInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RunningSceneInfo*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RunningSceneInfo::MergeFrom(const RunningSceneInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scene_instance_id()) {
      set_scene_instance_id(from.scene_instance_id());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_scene_index()) {
      set_scene_index(from.scene_index());
    }
    if (from.has_intaddr()) {
      set_intaddr(from.intaddr());
    }
    if (from.has_loads()) {
      set_loads(from.loads());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RunningSceneInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunningSceneInfo::CopyFrom(const RunningSceneInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunningSceneInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void RunningSceneInfo::Swap(RunningSceneInfo* other) {
  if (other != this) {
    std::swap(scene_instance_id_, other->scene_instance_id_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(scene_index_, other->scene_index_);
    std::swap(intaddr_, other->intaddr_);
    std::swap(loads_, other->loads_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RunningSceneInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RunningSceneInfo_descriptor_;
  metadata.reflection = RunningSceneInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2S_Ask_CreateNewScene::kSceneIdFieldNumber;
const int S2S_Ask_CreateNewScene::kSceneInstanceIdFieldNumber;
const int S2S_Ask_CreateNewScene::kServerInstanceIdFieldNumber;
const int S2S_Ask_CreateNewScene::kSceneTypeFieldNumber;
#endif  // !_MSC_VER

S2S_Ask_CreateNewScene::S2S_Ask_CreateNewScene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2S_Ask_CreateNewScene::InitAsDefaultInstance() {
}

S2S_Ask_CreateNewScene::S2S_Ask_CreateNewScene(const S2S_Ask_CreateNewScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2S_Ask_CreateNewScene::SharedCtor() {
  _cached_size_ = 0;
  scene_id_ = 0;
  scene_instance_id_ = GOOGLE_LONGLONG(0);
  server_instance_id_ = GOOGLE_LONGLONG(0);
  scene_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2S_Ask_CreateNewScene::~S2S_Ask_CreateNewScene() {
  SharedDtor();
}

void S2S_Ask_CreateNewScene::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2S_Ask_CreateNewScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2S_Ask_CreateNewScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2S_Ask_CreateNewScene_descriptor_;
}

const S2S_Ask_CreateNewScene& S2S_Ask_CreateNewScene::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Server_2eproto();
  return *default_instance_;
}

S2S_Ask_CreateNewScene* S2S_Ask_CreateNewScene::default_instance_ = nullptr;

S2S_Ask_CreateNewScene* S2S_Ask_CreateNewScene::New() const {
  return new S2S_Ask_CreateNewScene;
}

void S2S_Ask_CreateNewScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    scene_id_ = 0;
    scene_instance_id_ = GOOGLE_LONGLONG(0);
    server_instance_id_ = GOOGLE_LONGLONG(0);
    scene_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2S_Ask_CreateNewScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 scene_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scene_instance_id;
        break;
      }

      // required sint64 scene_instance_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &scene_instance_id_)));
          set_has_scene_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_server_instance_id;
        break;
      }

      // required sint64 server_instance_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &server_instance_id_)));
          set_has_server_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_scene_type;
        break;
      }

      // required .E_SCENE_TYPE scene_type = 4 [default = EST_INVALID];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::E_SCENE_TYPE_IsValid(value)) {
            set_scene_type(static_cast< ::E_SCENE_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2S_Ask_CreateNewScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 scene_id = 1;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->scene_id(), output);
  }

  // required sint64 scene_instance_id = 2;
  if (has_scene_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->scene_instance_id(), output);
  }

  // required sint64 server_instance_id = 3;
  if (has_server_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->server_instance_id(), output);
  }

  // required .E_SCENE_TYPE scene_type = 4 [default = EST_INVALID];
  if (has_scene_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->scene_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2S_Ask_CreateNewScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 scene_id = 1;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->scene_id(), target);
  }

  // required sint64 scene_instance_id = 2;
  if (has_scene_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->scene_instance_id(), target);
  }

  // required sint64 server_instance_id = 3;
  if (has_server_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->server_instance_id(), target);
  }

  // required .E_SCENE_TYPE scene_type = 4 [default = EST_INVALID];
  if (has_scene_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->scene_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2S_Ask_CreateNewScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 scene_id = 1;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->scene_id());
    }

    // required sint64 scene_instance_id = 2;
    if (has_scene_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->scene_instance_id());
    }

    // required sint64 server_instance_id = 3;
    if (has_server_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->server_instance_id());
    }

    // required .E_SCENE_TYPE scene_type = 4 [default = EST_INVALID];
    if (has_scene_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->scene_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2S_Ask_CreateNewScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2S_Ask_CreateNewScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2S_Ask_CreateNewScene*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2S_Ask_CreateNewScene::MergeFrom(const S2S_Ask_CreateNewScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_scene_instance_id()) {
      set_scene_instance_id(from.scene_instance_id());
    }
    if (from.has_server_instance_id()) {
      set_server_instance_id(from.server_instance_id());
    }
    if (from.has_scene_type()) {
      set_scene_type(from.scene_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2S_Ask_CreateNewScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2S_Ask_CreateNewScene::CopyFrom(const S2S_Ask_CreateNewScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2S_Ask_CreateNewScene::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void S2S_Ask_CreateNewScene::Swap(S2S_Ask_CreateNewScene* other) {
  if (other != this) {
    std::swap(scene_id_, other->scene_id_);
    std::swap(scene_instance_id_, other->scene_instance_id_);
    std::swap(server_instance_id_, other->server_instance_id_);
    std::swap(scene_type_, other->scene_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2S_Ask_CreateNewScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2S_Ask_CreateNewScene_descriptor_;
  metadata.reflection = S2S_Ask_CreateNewScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2S_Ret_CreateNewScene::kRetCodeFieldNumber;
const int S2S_Ret_CreateNewScene::kSceneIdFieldNumber;
const int S2S_Ret_CreateNewScene::kSceneInstanceIdFieldNumber;
const int S2S_Ret_CreateNewScene::kServerInstanceIdFieldNumber;
const int S2S_Ret_CreateNewScene::kSceneTypeFieldNumber;
#endif  // !_MSC_VER

S2S_Ret_CreateNewScene::S2S_Ret_CreateNewScene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2S_Ret_CreateNewScene::InitAsDefaultInstance() {
}

S2S_Ret_CreateNewScene::S2S_Ret_CreateNewScene(const S2S_Ret_CreateNewScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2S_Ret_CreateNewScene::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  scene_id_ = 0;
  scene_instance_id_ = GOOGLE_LONGLONG(0);
  server_instance_id_ = GOOGLE_LONGLONG(0);
  scene_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2S_Ret_CreateNewScene::~S2S_Ret_CreateNewScene() {
  SharedDtor();
}

void S2S_Ret_CreateNewScene::SharedDtor() {
  if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
    delete ret_code_;
  }
  if (this != default_instance_) {
  }
}

void S2S_Ret_CreateNewScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2S_Ret_CreateNewScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2S_Ret_CreateNewScene_descriptor_;
}

const S2S_Ret_CreateNewScene& S2S_Ret_CreateNewScene::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Server_2eproto();
  return *default_instance_;
}

S2S_Ret_CreateNewScene* S2S_Ret_CreateNewScene::default_instance_ = nullptr;

S2S_Ret_CreateNewScene* S2S_Ret_CreateNewScene::New() const {
  return new S2S_Ret_CreateNewScene;
}

void S2S_Ret_CreateNewScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret_code()) {
      if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
        ret_code_->clear();
      }
    }
    scene_id_ = 0;
    scene_instance_id_ = GOOGLE_LONGLONG(0);
    server_instance_id_ = GOOGLE_LONGLONG(0);
    scene_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2S_Ret_CreateNewScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ret_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scene_id;
        break;
      }

      // required sint32 scene_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_scene_instance_id;
        break;
      }

      // required sint64 scene_instance_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &scene_instance_id_)));
          set_has_scene_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_server_instance_id;
        break;
      }

      // required sint64 server_instance_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &server_instance_id_)));
          set_has_server_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_scene_type;
        break;
      }

      // required .E_SCENE_TYPE scene_type = 5 [default = EST_INVALID];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::E_SCENE_TYPE_IsValid(value)) {
            set_scene_type(static_cast< ::E_SCENE_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2S_Ret_CreateNewScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->ret_code(), output);
  }

  // required sint32 scene_id = 2;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->scene_id(), output);
  }

  // required sint64 scene_instance_id = 3;
  if (has_scene_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->scene_instance_id(), output);
  }

  // required sint64 server_instance_id = 4;
  if (has_server_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->server_instance_id(), output);
  }

  // required .E_SCENE_TYPE scene_type = 5 [default = EST_INVALID];
  if (has_scene_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->scene_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2S_Ret_CreateNewScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes ret_code = 1;
  if (has_ret_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ret_code(), target);
  }

  // required sint32 scene_id = 2;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->scene_id(), target);
  }

  // required sint64 scene_instance_id = 3;
  if (has_scene_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->scene_instance_id(), target);
  }

  // required sint64 server_instance_id = 4;
  if (has_server_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(4, this->server_instance_id(), target);
  }

  // required .E_SCENE_TYPE scene_type = 5 [default = EST_INVALID];
  if (has_scene_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->scene_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2S_Ret_CreateNewScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ret_code());
    }

    // required sint32 scene_id = 2;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->scene_id());
    }

    // required sint64 scene_instance_id = 3;
    if (has_scene_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->scene_instance_id());
    }

    // required sint64 server_instance_id = 4;
    if (has_server_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->server_instance_id());
    }

    // required .E_SCENE_TYPE scene_type = 5 [default = EST_INVALID];
    if (has_scene_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->scene_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2S_Ret_CreateNewScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2S_Ret_CreateNewScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2S_Ret_CreateNewScene*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2S_Ret_CreateNewScene::MergeFrom(const S2S_Ret_CreateNewScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_scene_instance_id()) {
      set_scene_instance_id(from.scene_instance_id());
    }
    if (from.has_server_instance_id()) {
      set_server_instance_id(from.server_instance_id());
    }
    if (from.has_scene_type()) {
      set_scene_type(from.scene_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2S_Ret_CreateNewScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2S_Ret_CreateNewScene::CopyFrom(const S2S_Ret_CreateNewScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2S_Ret_CreateNewScene::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void S2S_Ret_CreateNewScene::Swap(S2S_Ret_CreateNewScene* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(scene_instance_id_, other->scene_instance_id_);
    std::swap(server_instance_id_, other->server_instance_id_);
    std::swap(scene_type_, other->scene_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2S_Ret_CreateNewScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2S_Ret_CreateNewScene_descriptor_;
  metadata.reflection = S2S_Ret_CreateNewScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2S_Sync_NewSceneInfo::kSceneIdFieldNumber;
const int S2S_Sync_NewSceneInfo::kSceneInstanceIdFieldNumber;
const int S2S_Sync_NewSceneInfo::kServerInstanceIdFieldNumber;
const int S2S_Sync_NewSceneInfo::kSceneTypeFieldNumber;
#endif  // !_MSC_VER

S2S_Sync_NewSceneInfo::S2S_Sync_NewSceneInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2S_Sync_NewSceneInfo::InitAsDefaultInstance() {
}

S2S_Sync_NewSceneInfo::S2S_Sync_NewSceneInfo(const S2S_Sync_NewSceneInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2S_Sync_NewSceneInfo::SharedCtor() {
  _cached_size_ = 0;
  scene_id_ = 0;
  scene_instance_id_ = GOOGLE_LONGLONG(0);
  server_instance_id_ = GOOGLE_LONGLONG(0);
  scene_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2S_Sync_NewSceneInfo::~S2S_Sync_NewSceneInfo() {
  SharedDtor();
}

void S2S_Sync_NewSceneInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2S_Sync_NewSceneInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2S_Sync_NewSceneInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2S_Sync_NewSceneInfo_descriptor_;
}

const S2S_Sync_NewSceneInfo& S2S_Sync_NewSceneInfo::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Server_2eproto();
  return *default_instance_;
}

S2S_Sync_NewSceneInfo* S2S_Sync_NewSceneInfo::default_instance_ = nullptr;

S2S_Sync_NewSceneInfo* S2S_Sync_NewSceneInfo::New() const {
  return new S2S_Sync_NewSceneInfo;
}

void S2S_Sync_NewSceneInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    scene_id_ = 0;
    scene_instance_id_ = GOOGLE_LONGLONG(0);
    server_instance_id_ = GOOGLE_LONGLONG(0);
    scene_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2S_Sync_NewSceneInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 scene_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scene_instance_id;
        break;
      }

      // required sint64 scene_instance_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &scene_instance_id_)));
          set_has_scene_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_server_instance_id;
        break;
      }

      // required sint64 server_instance_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &server_instance_id_)));
          set_has_server_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_scene_type;
        break;
      }

      // required .E_SCENE_TYPE scene_type = 4 [default = EST_INVALID];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::E_SCENE_TYPE_IsValid(value)) {
            set_scene_type(static_cast< ::E_SCENE_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2S_Sync_NewSceneInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 scene_id = 1;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->scene_id(), output);
  }

  // required sint64 scene_instance_id = 2;
  if (has_scene_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->scene_instance_id(), output);
  }

  // required sint64 server_instance_id = 3;
  if (has_server_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->server_instance_id(), output);
  }

  // required .E_SCENE_TYPE scene_type = 4 [default = EST_INVALID];
  if (has_scene_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->scene_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2S_Sync_NewSceneInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 scene_id = 1;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->scene_id(), target);
  }

  // required sint64 scene_instance_id = 2;
  if (has_scene_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->scene_instance_id(), target);
  }

  // required sint64 server_instance_id = 3;
  if (has_server_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->server_instance_id(), target);
  }

  // required .E_SCENE_TYPE scene_type = 4 [default = EST_INVALID];
  if (has_scene_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->scene_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2S_Sync_NewSceneInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 scene_id = 1;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->scene_id());
    }

    // required sint64 scene_instance_id = 2;
    if (has_scene_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->scene_instance_id());
    }

    // required sint64 server_instance_id = 3;
    if (has_server_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->server_instance_id());
    }

    // required .E_SCENE_TYPE scene_type = 4 [default = EST_INVALID];
    if (has_scene_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->scene_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2S_Sync_NewSceneInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2S_Sync_NewSceneInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2S_Sync_NewSceneInfo*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2S_Sync_NewSceneInfo::MergeFrom(const S2S_Sync_NewSceneInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_scene_instance_id()) {
      set_scene_instance_id(from.scene_instance_id());
    }
    if (from.has_server_instance_id()) {
      set_server_instance_id(from.server_instance_id());
    }
    if (from.has_scene_type()) {
      set_scene_type(from.scene_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2S_Sync_NewSceneInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2S_Sync_NewSceneInfo::CopyFrom(const S2S_Sync_NewSceneInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2S_Sync_NewSceneInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void S2S_Sync_NewSceneInfo::Swap(S2S_Sync_NewSceneInfo* other) {
  if (other != this) {
    std::swap(scene_id_, other->scene_id_);
    std::swap(scene_instance_id_, other->scene_instance_id_);
    std::swap(server_instance_id_, other->server_instance_id_);
    std::swap(scene_type_, other->scene_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2S_Sync_NewSceneInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2S_Sync_NewSceneInfo_descriptor_;
  metadata.reflection = S2S_Sync_NewSceneInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2S_Currency_Packet::kDatasFieldNumber;
#endif  // !_MSC_VER

S2S_Currency_Packet::S2S_Currency_Packet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2S_Currency_Packet::InitAsDefaultInstance() {
}

S2S_Currency_Packet::S2S_Currency_Packet(const S2S_Currency_Packet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2S_Currency_Packet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2S_Currency_Packet::~S2S_Currency_Packet() {
  SharedDtor();
}

void S2S_Currency_Packet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2S_Currency_Packet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2S_Currency_Packet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2S_Currency_Packet_descriptor_;
}

const S2S_Currency_Packet& S2S_Currency_Packet::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Server_2eproto();
  return *default_instance_;
}

S2S_Currency_Packet* S2S_Currency_Packet::default_instance_ = nullptr;

S2S_Currency_Packet* S2S_Currency_Packet::New() const {
  return new S2S_Currency_Packet;
}

void S2S_Currency_Packet::Clear() {
  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2S_Currency_Packet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes datas = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_datas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_datas;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2S_Currency_Packet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated bytes datas = 1;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->datas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2S_Currency_Packet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated bytes datas = 1;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->datas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2S_Currency_Packet::ByteSize() const {
  int total_size = 0;

  // repeated bytes datas = 1;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2S_Currency_Packet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2S_Currency_Packet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2S_Currency_Packet*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2S_Currency_Packet::MergeFrom(const S2S_Currency_Packet& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2S_Currency_Packet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2S_Currency_Packet::CopyFrom(const S2S_Currency_Packet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2S_Currency_Packet::IsInitialized() const {

  return true;
}

void S2S_Currency_Packet::Swap(S2S_Currency_Packet* other) {
  if (other != this) {
    datas_.Swap(&other->datas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2S_Currency_Packet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2S_Currency_Packet_descriptor_;
  metadata.reflection = S2S_Currency_Packet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2S_Player_Displacement::kRoleIndexFieldNumber;
const int S2S_Player_Displacement::kGateIntaddrFieldNumber;
const int S2S_Player_Displacement::kSceneIntaddrFieldNumber;
const int S2S_Player_Displacement::kSceneInstanceIdFieldNumber;
const int S2S_Player_Displacement::kSaveIntaddrFieldNumber;
#endif  // !_MSC_VER

S2S_Player_Displacement::S2S_Player_Displacement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2S_Player_Displacement::InitAsDefaultInstance() {
}

S2S_Player_Displacement::S2S_Player_Displacement(const S2S_Player_Displacement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2S_Player_Displacement::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  gate_intaddr_ = GOOGLE_LONGLONG(0);
  scene_intaddr_ = GOOGLE_LONGLONG(0);
  scene_instance_id_ = GOOGLE_LONGLONG(0);
  save_intaddr_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2S_Player_Displacement::~S2S_Player_Displacement() {
  SharedDtor();
}

void S2S_Player_Displacement::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2S_Player_Displacement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2S_Player_Displacement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2S_Player_Displacement_descriptor_;
}

const S2S_Player_Displacement& S2S_Player_Displacement::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Server_2eproto();
  return *default_instance_;
}

S2S_Player_Displacement* S2S_Player_Displacement::default_instance_ = nullptr;

S2S_Player_Displacement* S2S_Player_Displacement::New() const {
  return new S2S_Player_Displacement;
}

void S2S_Player_Displacement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    gate_intaddr_ = GOOGLE_LONGLONG(0);
    scene_intaddr_ = GOOGLE_LONGLONG(0);
    scene_instance_id_ = GOOGLE_LONGLONG(0);
    save_intaddr_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2S_Player_Displacement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gate_intaddr;
        break;
      }

      // required sint64 gate_intaddr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gate_intaddr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &gate_intaddr_)));
          set_has_gate_intaddr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_scene_intaddr;
        break;
      }

      // required sint64 scene_intaddr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_intaddr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &scene_intaddr_)));
          set_has_scene_intaddr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_scene_instance_id;
        break;
      }

      // required sint64 scene_instance_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &scene_instance_id_)));
          set_has_scene_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_save_intaddr;
        break;
      }

      // required sint64 save_intaddr = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_save_intaddr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &save_intaddr_)));
          set_has_save_intaddr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2S_Player_Displacement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->role_index(), output);
  }

  // required sint64 gate_intaddr = 2;
  if (has_gate_intaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->gate_intaddr(), output);
  }

  // required sint64 scene_intaddr = 3;
  if (has_scene_intaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->scene_intaddr(), output);
  }

  // required sint64 scene_instance_id = 4;
  if (has_scene_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->scene_instance_id(), output);
  }

  // required sint64 save_intaddr = 5;
  if (has_save_intaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(5, this->save_intaddr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2S_Player_Displacement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->role_index(), target);
  }

  // required sint64 gate_intaddr = 2;
  if (has_gate_intaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->gate_intaddr(), target);
  }

  // required sint64 scene_intaddr = 3;
  if (has_scene_intaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->scene_intaddr(), target);
  }

  // required sint64 scene_instance_id = 4;
  if (has_scene_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(4, this->scene_instance_id(), target);
  }

  // required sint64 save_intaddr = 5;
  if (has_save_intaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(5, this->save_intaddr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2S_Player_Displacement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->role_index());
    }

    // required sint64 gate_intaddr = 2;
    if (has_gate_intaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->gate_intaddr());
    }

    // required sint64 scene_intaddr = 3;
    if (has_scene_intaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->scene_intaddr());
    }

    // required sint64 scene_instance_id = 4;
    if (has_scene_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->scene_instance_id());
    }

    // required sint64 save_intaddr = 5;
    if (has_save_intaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->save_intaddr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2S_Player_Displacement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2S_Player_Displacement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2S_Player_Displacement*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2S_Player_Displacement::MergeFrom(const S2S_Player_Displacement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_gate_intaddr()) {
      set_gate_intaddr(from.gate_intaddr());
    }
    if (from.has_scene_intaddr()) {
      set_scene_intaddr(from.scene_intaddr());
    }
    if (from.has_scene_instance_id()) {
      set_scene_instance_id(from.scene_instance_id());
    }
    if (from.has_save_intaddr()) {
      set_save_intaddr(from.save_intaddr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2S_Player_Displacement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2S_Player_Displacement::CopyFrom(const S2S_Player_Displacement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2S_Player_Displacement::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void S2S_Player_Displacement::Swap(S2S_Player_Displacement* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(gate_intaddr_, other->gate_intaddr_);
    std::swap(scene_intaddr_, other->scene_intaddr_);
    std::swap(scene_instance_id_, other->scene_instance_id_);
    std::swap(save_intaddr_, other->save_intaddr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2S_Player_Displacement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2S_Player_Displacement_descriptor_;
  metadata.reflection = S2S_Player_Displacement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2S_Player_Offline::kRoleIndexFieldNumber;
const int S2S_Player_Offline::kKickReasonFieldNumber;
#endif  // !_MSC_VER

S2S_Player_Offline::S2S_Player_Offline()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2S_Player_Offline::InitAsDefaultInstance() {
}

S2S_Player_Offline::S2S_Player_Offline(const S2S_Player_Offline& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2S_Player_Offline::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  kick_reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2S_Player_Offline::~S2S_Player_Offline() {
  SharedDtor();
}

void S2S_Player_Offline::SharedDtor() {
  if (kick_reason_ != &::google::protobuf::internal::kEmptyString) {
    delete kick_reason_;
  }
  if (this != default_instance_) {
  }
}

void S2S_Player_Offline::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2S_Player_Offline::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2S_Player_Offline_descriptor_;
}

const S2S_Player_Offline& S2S_Player_Offline::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Server_2eproto();
  return *default_instance_;
}

S2S_Player_Offline* S2S_Player_Offline::default_instance_ = nullptr;

S2S_Player_Offline* S2S_Player_Offline::New() const {
  return new S2S_Player_Offline;
}

void S2S_Player_Offline::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    if (has_kick_reason()) {
      if (kick_reason_ != &::google::protobuf::internal::kEmptyString) {
        kick_reason_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2S_Player_Offline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_kick_reason;
        break;
      }

      // required bytes kick_reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kick_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_kick_reason()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2S_Player_Offline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->role_index(), output);
  }

  // required bytes kick_reason = 2;
  if (has_kick_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->kick_reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2S_Player_Offline::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->role_index(), target);
  }

  // required bytes kick_reason = 2;
  if (has_kick_reason()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->kick_reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2S_Player_Offline::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->role_index());
    }

    // required bytes kick_reason = 2;
    if (has_kick_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->kick_reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2S_Player_Offline::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2S_Player_Offline* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2S_Player_Offline*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2S_Player_Offline::MergeFrom(const S2S_Player_Offline& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_kick_reason()) {
      set_kick_reason(from.kick_reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2S_Player_Offline::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2S_Player_Offline::CopyFrom(const S2S_Player_Offline& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2S_Player_Offline::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2S_Player_Offline::Swap(S2S_Player_Offline* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(kick_reason_, other->kick_reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2S_Player_Offline::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2S_Player_Offline_descriptor_;
  metadata.reflection = S2S_Player_Offline_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2S_Ask_Role_Save::kRoleInfoFieldNumber;
#endif  // !_MSC_VER

S2S_Ask_Role_Save::S2S_Ask_Role_Save()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2S_Ask_Role_Save::InitAsDefaultInstance() {
  role_info_ = const_cast< ::universal_data*>(&::universal_data::default_instance());
}

S2S_Ask_Role_Save::S2S_Ask_Role_Save(const S2S_Ask_Role_Save& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2S_Ask_Role_Save::SharedCtor() {
  _cached_size_ = 0;
  role_info_ = nullptr;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2S_Ask_Role_Save::~S2S_Ask_Role_Save() {
  SharedDtor();
}

void S2S_Ask_Role_Save::SharedDtor() {
  if (this != default_instance_) {
    delete role_info_;
  }
}

void S2S_Ask_Role_Save::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2S_Ask_Role_Save::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2S_Ask_Role_Save_descriptor_;
}

const S2S_Ask_Role_Save& S2S_Ask_Role_Save::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Server_2eproto();
  return *default_instance_;
}

S2S_Ask_Role_Save* S2S_Ask_Role_Save::default_instance_ = nullptr;

S2S_Ask_Role_Save* S2S_Ask_Role_Save::New() const {
  return new S2S_Ask_Role_Save;
}

void S2S_Ask_Role_Save::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_role_info()) {
      if (role_info_ != nullptr) role_info_->::universal_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2S_Ask_Role_Save::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .universal_data role_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2S_Ask_Role_Save::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .universal_data role_info = 1;
  if (has_role_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->role_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2S_Ask_Role_Save::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .universal_data role_info = 1;
  if (has_role_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->role_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2S_Ask_Role_Save::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .universal_data role_info = 1;
    if (has_role_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2S_Ask_Role_Save::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2S_Ask_Role_Save* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2S_Ask_Role_Save*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2S_Ask_Role_Save::MergeFrom(const S2S_Ask_Role_Save& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_info()) {
      mutable_role_info()->::universal_data::MergeFrom(from.role_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2S_Ask_Role_Save::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2S_Ask_Role_Save::CopyFrom(const S2S_Ask_Role_Save& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2S_Ask_Role_Save::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void S2S_Ask_Role_Save::Swap(S2S_Ask_Role_Save* other) {
  if (other != this) {
    std::swap(role_info_, other->role_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2S_Ask_Role_Save::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2S_Ask_Role_Save_descriptor_;
  metadata.reflection = S2S_Ask_Role_Save_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2S_Ask_Role_Leave_Login::kRoleIndexFieldNumber;
const int S2S_Ask_Role_Leave_Login::kAccountFieldNumber;
const int S2S_Ask_Role_Leave_Login::kSidFieldNumber;
const int S2S_Ask_Role_Leave_Login::kIpFieldNumber;
#endif  // !_MSC_VER

S2S_Ask_Role_Leave_Login::S2S_Ask_Role_Leave_Login()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2S_Ask_Role_Leave_Login::InitAsDefaultInstance() {
}

S2S_Ask_Role_Leave_Login::S2S_Ask_Role_Leave_Login(const S2S_Ask_Role_Leave_Login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2S_Ask_Role_Leave_Login::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2S_Ask_Role_Leave_Login::~S2S_Ask_Role_Leave_Login() {
  SharedDtor();
}

void S2S_Ask_Role_Leave_Login::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (sid_ != &::google::protobuf::internal::kEmptyString) {
    delete sid_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void S2S_Ask_Role_Leave_Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2S_Ask_Role_Leave_Login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2S_Ask_Role_Leave_Login_descriptor_;
}

const S2S_Ask_Role_Leave_Login& S2S_Ask_Role_Leave_Login::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Server_2eproto();
  return *default_instance_;
}

S2S_Ask_Role_Leave_Login* S2S_Ask_Role_Leave_Login::default_instance_ = nullptr;

S2S_Ask_Role_Leave_Login* S2S_Ask_Role_Leave_Login::New() const {
  return new S2S_Ask_Role_Leave_Login;
}

void S2S_Ask_Role_Leave_Login::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_sid()) {
      if (sid_ != &::google::protobuf::internal::kEmptyString) {
        sid_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2S_Ask_Role_Leave_Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // required bytes account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sid;
        break;
      }

      // required bytes sid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ip;
        break;
      }

      // required bytes ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2S_Ask_Role_Leave_Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->role_index(), output);
  }

  // required bytes account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->account(), output);
  }

  // required bytes sid = 3;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->sid(), output);
  }

  // required bytes ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->ip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2S_Ask_Role_Leave_Login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->role_index(), target);
  }

  // required bytes account = 2;
  if (has_account()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->account(), target);
  }

  // required bytes sid = 3;
  if (has_sid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->sid(), target);
  }

  // required bytes ip = 4;
  if (has_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->ip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2S_Ask_Role_Leave_Login::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->role_index());
    }

    // required bytes account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

    // required bytes sid = 3;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sid());
    }

    // required bytes ip = 4;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2S_Ask_Role_Leave_Login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2S_Ask_Role_Leave_Login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2S_Ask_Role_Leave_Login*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2S_Ask_Role_Leave_Login::MergeFrom(const S2S_Ask_Role_Leave_Login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2S_Ask_Role_Leave_Login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2S_Ask_Role_Leave_Login::CopyFrom(const S2S_Ask_Role_Leave_Login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2S_Ask_Role_Leave_Login::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void S2S_Ask_Role_Leave_Login::Swap(S2S_Ask_Role_Leave_Login* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(account_, other->account_);
    std::swap(sid_, other->sid_);
    std::swap(ip_, other->ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2S_Ask_Role_Leave_Login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2S_Ask_Role_Leave_Login_descriptor_;
  metadata.reflection = S2S_Ask_Role_Leave_Login_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2S_Ask_Role_Enter_Scene::kRoleIndexFieldNumber;
const int S2S_Ask_Role_Enter_Scene::kRoleIntaddrFieldNumber;
const int S2S_Ask_Role_Enter_Scene::kSceneInstanceIdFieldNumber;
#endif  // !_MSC_VER

S2S_Ask_Role_Enter_Scene::S2S_Ask_Role_Enter_Scene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2S_Ask_Role_Enter_Scene::InitAsDefaultInstance() {
}

S2S_Ask_Role_Enter_Scene::S2S_Ask_Role_Enter_Scene(const S2S_Ask_Role_Enter_Scene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2S_Ask_Role_Enter_Scene::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  role_intaddr_ = GOOGLE_LONGLONG(0);
  scene_instance_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2S_Ask_Role_Enter_Scene::~S2S_Ask_Role_Enter_Scene() {
  SharedDtor();
}

void S2S_Ask_Role_Enter_Scene::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2S_Ask_Role_Enter_Scene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2S_Ask_Role_Enter_Scene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2S_Ask_Role_Enter_Scene_descriptor_;
}

const S2S_Ask_Role_Enter_Scene& S2S_Ask_Role_Enter_Scene::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Server_2eproto();
  return *default_instance_;
}

S2S_Ask_Role_Enter_Scene* S2S_Ask_Role_Enter_Scene::default_instance_ = nullptr;

S2S_Ask_Role_Enter_Scene* S2S_Ask_Role_Enter_Scene::New() const {
  return new S2S_Ask_Role_Enter_Scene;
}

void S2S_Ask_Role_Enter_Scene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    role_intaddr_ = GOOGLE_LONGLONG(0);
    scene_instance_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2S_Ask_Role_Enter_Scene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_intaddr;
        break;
      }

      // required sint64 role_intaddr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_intaddr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &role_intaddr_)));
          set_has_role_intaddr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_scene_instance_id;
        break;
      }

      // required sint64 scene_instance_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &scene_instance_id_)));
          set_has_scene_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2S_Ask_Role_Enter_Scene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->role_index(), output);
  }

  // required sint64 role_intaddr = 2;
  if (has_role_intaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->role_intaddr(), output);
  }

  // required sint64 scene_instance_id = 3;
  if (has_scene_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->scene_instance_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2S_Ask_Role_Enter_Scene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->role_index(), target);
  }

  // required sint64 role_intaddr = 2;
  if (has_role_intaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->role_intaddr(), target);
  }

  // required sint64 scene_instance_id = 3;
  if (has_scene_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->scene_instance_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2S_Ask_Role_Enter_Scene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->role_index());
    }

    // required sint64 role_intaddr = 2;
    if (has_role_intaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->role_intaddr());
    }

    // required sint64 scene_instance_id = 3;
    if (has_scene_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->scene_instance_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2S_Ask_Role_Enter_Scene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2S_Ask_Role_Enter_Scene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2S_Ask_Role_Enter_Scene*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2S_Ask_Role_Enter_Scene::MergeFrom(const S2S_Ask_Role_Enter_Scene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_role_intaddr()) {
      set_role_intaddr(from.role_intaddr());
    }
    if (from.has_scene_instance_id()) {
      set_scene_instance_id(from.scene_instance_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2S_Ask_Role_Enter_Scene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2S_Ask_Role_Enter_Scene::CopyFrom(const S2S_Ask_Role_Enter_Scene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2S_Ask_Role_Enter_Scene::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2S_Ask_Role_Enter_Scene::Swap(S2S_Ask_Role_Enter_Scene* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(role_intaddr_, other->role_intaddr_);
    std::swap(scene_instance_id_, other->scene_instance_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2S_Ask_Role_Enter_Scene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2S_Ask_Role_Enter_Scene_descriptor_;
  metadata.reflection = S2S_Ask_Role_Enter_Scene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2S_Ask_Role_Leave_Scene::kRoleIndexFieldNumber;
const int S2S_Ask_Role_Leave_Scene::kRoleIntaddrFieldNumber;
const int S2S_Ask_Role_Leave_Scene::kSceneInstanceIdFieldNumber;
#endif  // !_MSC_VER

S2S_Ask_Role_Leave_Scene::S2S_Ask_Role_Leave_Scene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2S_Ask_Role_Leave_Scene::InitAsDefaultInstance() {
}

S2S_Ask_Role_Leave_Scene::S2S_Ask_Role_Leave_Scene(const S2S_Ask_Role_Leave_Scene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2S_Ask_Role_Leave_Scene::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  role_intaddr_ = GOOGLE_LONGLONG(0);
  scene_instance_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2S_Ask_Role_Leave_Scene::~S2S_Ask_Role_Leave_Scene() {
  SharedDtor();
}

void S2S_Ask_Role_Leave_Scene::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2S_Ask_Role_Leave_Scene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2S_Ask_Role_Leave_Scene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2S_Ask_Role_Leave_Scene_descriptor_;
}

const S2S_Ask_Role_Leave_Scene& S2S_Ask_Role_Leave_Scene::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Server_2eproto();
  return *default_instance_;
}

S2S_Ask_Role_Leave_Scene* S2S_Ask_Role_Leave_Scene::default_instance_ = nullptr;

S2S_Ask_Role_Leave_Scene* S2S_Ask_Role_Leave_Scene::New() const {
  return new S2S_Ask_Role_Leave_Scene;
}

void S2S_Ask_Role_Leave_Scene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    role_intaddr_ = GOOGLE_LONGLONG(0);
    scene_instance_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2S_Ask_Role_Leave_Scene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_intaddr;
        break;
      }

      // required sint64 role_intaddr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_intaddr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &role_intaddr_)));
          set_has_role_intaddr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_scene_instance_id;
        break;
      }

      // required sint64 scene_instance_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &scene_instance_id_)));
          set_has_scene_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2S_Ask_Role_Leave_Scene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->role_index(), output);
  }

  // required sint64 role_intaddr = 2;
  if (has_role_intaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->role_intaddr(), output);
  }

  // required sint64 scene_instance_id = 3;
  if (has_scene_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->scene_instance_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2S_Ask_Role_Leave_Scene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->role_index(), target);
  }

  // required sint64 role_intaddr = 2;
  if (has_role_intaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->role_intaddr(), target);
  }

  // required sint64 scene_instance_id = 3;
  if (has_scene_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->scene_instance_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2S_Ask_Role_Leave_Scene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->role_index());
    }

    // required sint64 role_intaddr = 2;
    if (has_role_intaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->role_intaddr());
    }

    // required sint64 scene_instance_id = 3;
    if (has_scene_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->scene_instance_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2S_Ask_Role_Leave_Scene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2S_Ask_Role_Leave_Scene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2S_Ask_Role_Leave_Scene*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2S_Ask_Role_Leave_Scene::MergeFrom(const S2S_Ask_Role_Leave_Scene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_role_intaddr()) {
      set_role_intaddr(from.role_intaddr());
    }
    if (from.has_scene_instance_id()) {
      set_scene_instance_id(from.scene_instance_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2S_Ask_Role_Leave_Scene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2S_Ask_Role_Leave_Scene::CopyFrom(const S2S_Ask_Role_Leave_Scene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2S_Ask_Role_Leave_Scene::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2S_Ask_Role_Leave_Scene::Swap(S2S_Ask_Role_Leave_Scene* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(role_intaddr_, other->role_intaddr_);
    std::swap(scene_instance_id_, other->scene_instance_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2S_Ask_Role_Leave_Scene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2S_Ask_Role_Leave_Scene_descriptor_;
  metadata.reflection = S2S_Ask_Role_Leave_Scene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2S_Ret_Register_ClusterNode::kNodeIndexFieldNumber;
const int S2S_Ret_Register_ClusterNode::kUnitNextIndexFieldNumber;
#endif  // !_MSC_VER

S2S_Ret_Register_ClusterNode::S2S_Ret_Register_ClusterNode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2S_Ret_Register_ClusterNode::InitAsDefaultInstance() {
}

S2S_Ret_Register_ClusterNode::S2S_Ret_Register_ClusterNode(const S2S_Ret_Register_ClusterNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2S_Ret_Register_ClusterNode::SharedCtor() {
  _cached_size_ = 0;
  node_index_ = 0;
  unit_next_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2S_Ret_Register_ClusterNode::~S2S_Ret_Register_ClusterNode() {
  SharedDtor();
}

void S2S_Ret_Register_ClusterNode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2S_Ret_Register_ClusterNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2S_Ret_Register_ClusterNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2S_Ret_Register_ClusterNode_descriptor_;
}

const S2S_Ret_Register_ClusterNode& S2S_Ret_Register_ClusterNode::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Server_2eproto();
  return *default_instance_;
}

S2S_Ret_Register_ClusterNode* S2S_Ret_Register_ClusterNode::default_instance_ = nullptr;

S2S_Ret_Register_ClusterNode* S2S_Ret_Register_ClusterNode::New() const {
  return new S2S_Ret_Register_ClusterNode;
}

void S2S_Ret_Register_ClusterNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    node_index_ = 0;
    unit_next_index_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2S_Ret_Register_ClusterNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 node_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &node_index_)));
          set_has_node_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_unit_next_index;
        break;
      }

      // required sint64 unit_next_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unit_next_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &unit_next_index_)));
          set_has_unit_next_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2S_Ret_Register_ClusterNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 node_index = 1;
  if (has_node_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->node_index(), output);
  }

  // required sint64 unit_next_index = 2;
  if (has_unit_next_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->unit_next_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2S_Ret_Register_ClusterNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 node_index = 1;
  if (has_node_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->node_index(), target);
  }

  // required sint64 unit_next_index = 2;
  if (has_unit_next_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->unit_next_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2S_Ret_Register_ClusterNode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 node_index = 1;
    if (has_node_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->node_index());
    }

    // required sint64 unit_next_index = 2;
    if (has_unit_next_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->unit_next_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2S_Ret_Register_ClusterNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2S_Ret_Register_ClusterNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2S_Ret_Register_ClusterNode*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2S_Ret_Register_ClusterNode::MergeFrom(const S2S_Ret_Register_ClusterNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_index()) {
      set_node_index(from.node_index());
    }
    if (from.has_unit_next_index()) {
      set_unit_next_index(from.unit_next_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2S_Ret_Register_ClusterNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2S_Ret_Register_ClusterNode::CopyFrom(const S2S_Ret_Register_ClusterNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2S_Ret_Register_ClusterNode::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2S_Ret_Register_ClusterNode::Swap(S2S_Ret_Register_ClusterNode* other) {
  if (other != this) {
    std::swap(node_index_, other->node_index_);
    std::swap(unit_next_index_, other->unit_next_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2S_Ret_Register_ClusterNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2S_Ret_Register_ClusterNode_descriptor_;
  metadata.reflection = S2S_Ret_Register_ClusterNode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2S_Ret_Select_ClusterNode::kListIntaddrFieldNumber;
const int S2S_Ret_Select_ClusterNode::kListNodeIndexFieldNumber;
const int S2S_Ret_Select_ClusterNode::kListPressureFieldNumber;
const int S2S_Ret_Select_ClusterNode::kListLastTimeFieldNumber;
#endif  // !_MSC_VER

S2S_Ret_Select_ClusterNode::S2S_Ret_Select_ClusterNode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2S_Ret_Select_ClusterNode::InitAsDefaultInstance() {
}

S2S_Ret_Select_ClusterNode::S2S_Ret_Select_ClusterNode(const S2S_Ret_Select_ClusterNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2S_Ret_Select_ClusterNode::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2S_Ret_Select_ClusterNode::~S2S_Ret_Select_ClusterNode() {
  SharedDtor();
}

void S2S_Ret_Select_ClusterNode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2S_Ret_Select_ClusterNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2S_Ret_Select_ClusterNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2S_Ret_Select_ClusterNode_descriptor_;
}

const S2S_Ret_Select_ClusterNode& S2S_Ret_Select_ClusterNode::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Server_2eproto();
  return *default_instance_;
}

S2S_Ret_Select_ClusterNode* S2S_Ret_Select_ClusterNode::default_instance_ = nullptr;

S2S_Ret_Select_ClusterNode* S2S_Ret_Select_ClusterNode::New() const {
  return new S2S_Ret_Select_ClusterNode;
}

void S2S_Ret_Select_ClusterNode::Clear() {
  list_intaddr_.Clear();
  list_node_index_.Clear();
  list_pressure_.Clear();
  list_last_time_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2S_Ret_Select_ClusterNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated sint64 list_intaddr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_list_intaddr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 8, input, this->mutable_list_intaddr())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_list_intaddr())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_list_intaddr;
        if (input->ExpectTag(16)) goto parse_list_node_index;
        break;
      }

      // repeated sint32 list_node_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_list_node_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 16, input, this->mutable_list_node_index())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_list_node_index())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_list_node_index;
        if (input->ExpectTag(24)) goto parse_list_pressure;
        break;
      }

      // repeated sint64 list_pressure = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_list_pressure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 24, input, this->mutable_list_pressure())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_list_pressure())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_list_pressure;
        if (input->ExpectTag(32)) goto parse_list_last_time;
        break;
      }

      // repeated sint64 list_last_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_list_last_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 32, input, this->mutable_list_last_time())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_list_last_time())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_list_last_time;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2S_Ret_Select_ClusterNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated sint64 list_intaddr = 1;
  for (int i = 0; i < this->list_intaddr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(
      1, this->list_intaddr(i), output);
  }

  // repeated sint32 list_node_index = 2;
  for (int i = 0; i < this->list_node_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      2, this->list_node_index(i), output);
  }

  // repeated sint64 list_pressure = 3;
  for (int i = 0; i < this->list_pressure_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(
      3, this->list_pressure(i), output);
  }

  // repeated sint64 list_last_time = 4;
  for (int i = 0; i < this->list_last_time_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(
      4, this->list_last_time(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2S_Ret_Select_ClusterNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated sint64 list_intaddr = 1;
  for (int i = 0; i < this->list_intaddr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64ToArray(1, this->list_intaddr(i), target);
  }

  // repeated sint32 list_node_index = 2;
  for (int i = 0; i < this->list_node_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32ToArray(2, this->list_node_index(i), target);
  }

  // repeated sint64 list_pressure = 3;
  for (int i = 0; i < this->list_pressure_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64ToArray(3, this->list_pressure(i), target);
  }

  // repeated sint64 list_last_time = 4;
  for (int i = 0; i < this->list_last_time_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64ToArray(4, this->list_last_time(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2S_Ret_Select_ClusterNode::ByteSize() const {
  int total_size = 0;

  // repeated sint64 list_intaddr = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->list_intaddr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->list_intaddr(i));
    }
    total_size += 1 * this->list_intaddr_size() + data_size;
  }

  // repeated sint32 list_node_index = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->list_node_index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->list_node_index(i));
    }
    total_size += 1 * this->list_node_index_size() + data_size;
  }

  // repeated sint64 list_pressure = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->list_pressure_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->list_pressure(i));
    }
    total_size += 1 * this->list_pressure_size() + data_size;
  }

  // repeated sint64 list_last_time = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->list_last_time_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->list_last_time(i));
    }
    total_size += 1 * this->list_last_time_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2S_Ret_Select_ClusterNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2S_Ret_Select_ClusterNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2S_Ret_Select_ClusterNode*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2S_Ret_Select_ClusterNode::MergeFrom(const S2S_Ret_Select_ClusterNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_intaddr_.MergeFrom(from.list_intaddr_);
  list_node_index_.MergeFrom(from.list_node_index_);
  list_pressure_.MergeFrom(from.list_pressure_);
  list_last_time_.MergeFrom(from.list_last_time_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2S_Ret_Select_ClusterNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2S_Ret_Select_ClusterNode::CopyFrom(const S2S_Ret_Select_ClusterNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2S_Ret_Select_ClusterNode::IsInitialized() const {

  return true;
}

void S2S_Ret_Select_ClusterNode::Swap(S2S_Ret_Select_ClusterNode* other) {
  if (other != this) {
    list_intaddr_.Swap(&other->list_intaddr_);
    list_node_index_.Swap(&other->list_node_index_);
    list_pressure_.Swap(&other->list_pressure_);
    list_last_time_.Swap(&other->list_last_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2S_Ret_Select_ClusterNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2S_Ret_Select_ClusterNode_descriptor_;
  metadata.reflection = S2S_Ret_Select_ClusterNode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2S_Ret_Update_ClusterNode::kIntaddrFieldNumber;
const int S2S_Ret_Update_ClusterNode::kNodeIndexFieldNumber;
#endif  // !_MSC_VER

S2S_Ret_Update_ClusterNode::S2S_Ret_Update_ClusterNode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2S_Ret_Update_ClusterNode::InitAsDefaultInstance() {
}

S2S_Ret_Update_ClusterNode::S2S_Ret_Update_ClusterNode(const S2S_Ret_Update_ClusterNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2S_Ret_Update_ClusterNode::SharedCtor() {
  _cached_size_ = 0;
  intaddr_ = GOOGLE_LONGLONG(0);
  node_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2S_Ret_Update_ClusterNode::~S2S_Ret_Update_ClusterNode() {
  SharedDtor();
}

void S2S_Ret_Update_ClusterNode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2S_Ret_Update_ClusterNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2S_Ret_Update_ClusterNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2S_Ret_Update_ClusterNode_descriptor_;
}

const S2S_Ret_Update_ClusterNode& S2S_Ret_Update_ClusterNode::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Server_2eproto();
  return *default_instance_;
}

S2S_Ret_Update_ClusterNode* S2S_Ret_Update_ClusterNode::default_instance_ = nullptr;

S2S_Ret_Update_ClusterNode* S2S_Ret_Update_ClusterNode::New() const {
  return new S2S_Ret_Update_ClusterNode;
}

void S2S_Ret_Update_ClusterNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    intaddr_ = GOOGLE_LONGLONG(0);
    node_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2S_Ret_Update_ClusterNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 intaddr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &intaddr_)));
          set_has_intaddr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_node_index;
        break;
      }

      // required sint32 node_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_node_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &node_index_)));
          set_has_node_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2S_Ret_Update_ClusterNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 intaddr = 1;
  if (has_intaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->intaddr(), output);
  }

  // required sint32 node_index = 2;
  if (has_node_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->node_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2S_Ret_Update_ClusterNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 intaddr = 1;
  if (has_intaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->intaddr(), target);
  }

  // required sint32 node_index = 2;
  if (has_node_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->node_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2S_Ret_Update_ClusterNode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 intaddr = 1;
    if (has_intaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->intaddr());
    }

    // required sint32 node_index = 2;
    if (has_node_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->node_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2S_Ret_Update_ClusterNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2S_Ret_Update_ClusterNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2S_Ret_Update_ClusterNode*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2S_Ret_Update_ClusterNode::MergeFrom(const S2S_Ret_Update_ClusterNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_intaddr()) {
      set_intaddr(from.intaddr());
    }
    if (from.has_node_index()) {
      set_node_index(from.node_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2S_Ret_Update_ClusterNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2S_Ret_Update_ClusterNode::CopyFrom(const S2S_Ret_Update_ClusterNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2S_Ret_Update_ClusterNode::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2S_Ret_Update_ClusterNode::Swap(S2S_Ret_Update_ClusterNode* other) {
  if (other != this) {
    std::swap(intaddr_, other->intaddr_);
    std::swap(node_index_, other->node_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2S_Ret_Update_ClusterNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2S_Ret_Update_ClusterNode_descriptor_;
  metadata.reflection = S2S_Ret_Update_ClusterNode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2S_Ask_ClusterInfo::kNodeIndexFieldNumber;
#endif  // !_MSC_VER

S2S_Ask_ClusterInfo::S2S_Ask_ClusterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2S_Ask_ClusterInfo::InitAsDefaultInstance() {
}

S2S_Ask_ClusterInfo::S2S_Ask_ClusterInfo(const S2S_Ask_ClusterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2S_Ask_ClusterInfo::SharedCtor() {
  _cached_size_ = 0;
  node_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2S_Ask_ClusterInfo::~S2S_Ask_ClusterInfo() {
  SharedDtor();
}

void S2S_Ask_ClusterInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2S_Ask_ClusterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2S_Ask_ClusterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2S_Ask_ClusterInfo_descriptor_;
}

const S2S_Ask_ClusterInfo& S2S_Ask_ClusterInfo::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Server_2eproto();
  return *default_instance_;
}

S2S_Ask_ClusterInfo* S2S_Ask_ClusterInfo::default_instance_ = nullptr;

S2S_Ask_ClusterInfo* S2S_Ask_ClusterInfo::New() const {
  return new S2S_Ask_ClusterInfo;
}

void S2S_Ask_ClusterInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    node_index_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2S_Ask_ClusterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 node_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &node_index_)));
          set_has_node_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2S_Ask_ClusterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 node_index = 1;
  if (has_node_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->node_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2S_Ask_ClusterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 node_index = 1;
  if (has_node_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->node_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2S_Ask_ClusterInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 node_index = 1;
    if (has_node_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->node_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2S_Ask_ClusterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2S_Ask_ClusterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2S_Ask_ClusterInfo*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2S_Ask_ClusterInfo::MergeFrom(const S2S_Ask_ClusterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_index()) {
      set_node_index(from.node_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2S_Ask_ClusterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2S_Ask_ClusterInfo::CopyFrom(const S2S_Ask_ClusterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2S_Ask_ClusterInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void S2S_Ask_ClusterInfo::Swap(S2S_Ask_ClusterInfo* other) {
  if (other != this) {
    std::swap(node_index_, other->node_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2S_Ask_ClusterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2S_Ask_ClusterInfo_descriptor_;
  metadata.reflection = S2S_Ask_ClusterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2S_Ret_ClusterInfo::kListAddrFieldNumber;
const int S2S_Ret_ClusterInfo::kListPortFieldNumber;
const int S2S_Ret_ClusterInfo::kListPressureFieldNumber;
const int S2S_Ret_ClusterInfo::kListNodeIndexFieldNumber;
#endif  // !_MSC_VER

S2S_Ret_ClusterInfo::S2S_Ret_ClusterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2S_Ret_ClusterInfo::InitAsDefaultInstance() {
}

S2S_Ret_ClusterInfo::S2S_Ret_ClusterInfo(const S2S_Ret_ClusterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2S_Ret_ClusterInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2S_Ret_ClusterInfo::~S2S_Ret_ClusterInfo() {
  SharedDtor();
}

void S2S_Ret_ClusterInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2S_Ret_ClusterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2S_Ret_ClusterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2S_Ret_ClusterInfo_descriptor_;
}

const S2S_Ret_ClusterInfo& S2S_Ret_ClusterInfo::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Server_2eproto();
  return *default_instance_;
}

S2S_Ret_ClusterInfo* S2S_Ret_ClusterInfo::default_instance_ = nullptr;

S2S_Ret_ClusterInfo* S2S_Ret_ClusterInfo::New() const {
  return new S2S_Ret_ClusterInfo;
}

void S2S_Ret_ClusterInfo::Clear() {
  list_addr_.Clear();
  list_port_.Clear();
  list_pressure_.Clear();
  list_node_index_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2S_Ret_ClusterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes list_addr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_list_addr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list_addr;
        if (input->ExpectTag(16)) goto parse_list_port;
        break;
      }

      // repeated sint32 list_port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_list_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 16, input, this->mutable_list_port())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_list_port())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_list_port;
        if (input->ExpectTag(24)) goto parse_list_pressure;
        break;
      }

      // repeated sint64 list_pressure = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_list_pressure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 24, input, this->mutable_list_pressure())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_list_pressure())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_list_pressure;
        if (input->ExpectTag(32)) goto parse_list_node_index;
        break;
      }

      // repeated sint32 list_node_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_list_node_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 32, input, this->mutable_list_node_index())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_list_node_index())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_list_node_index;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2S_Ret_ClusterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated bytes list_addr = 1;
  for (int i = 0; i < this->list_addr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->list_addr(i), output);
  }

  // repeated sint32 list_port = 2;
  for (int i = 0; i < this->list_port_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      2, this->list_port(i), output);
  }

  // repeated sint64 list_pressure = 3;
  for (int i = 0; i < this->list_pressure_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(
      3, this->list_pressure(i), output);
  }

  // repeated sint32 list_node_index = 4;
  for (int i = 0; i < this->list_node_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      4, this->list_node_index(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2S_Ret_ClusterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated bytes list_addr = 1;
  for (int i = 0; i < this->list_addr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->list_addr(i), target);
  }

  // repeated sint32 list_port = 2;
  for (int i = 0; i < this->list_port_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32ToArray(2, this->list_port(i), target);
  }

  // repeated sint64 list_pressure = 3;
  for (int i = 0; i < this->list_pressure_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64ToArray(3, this->list_pressure(i), target);
  }

  // repeated sint32 list_node_index = 4;
  for (int i = 0; i < this->list_node_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32ToArray(4, this->list_node_index(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2S_Ret_ClusterInfo::ByteSize() const {
  int total_size = 0;

  // repeated bytes list_addr = 1;
  total_size += 1 * this->list_addr_size();
  for (int i = 0; i < this->list_addr_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->list_addr(i));
  }

  // repeated sint32 list_port = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->list_port_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->list_port(i));
    }
    total_size += 1 * this->list_port_size() + data_size;
  }

  // repeated sint64 list_pressure = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->list_pressure_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->list_pressure(i));
    }
    total_size += 1 * this->list_pressure_size() + data_size;
  }

  // repeated sint32 list_node_index = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->list_node_index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->list_node_index(i));
    }
    total_size += 1 * this->list_node_index_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2S_Ret_ClusterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2S_Ret_ClusterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2S_Ret_ClusterInfo*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2S_Ret_ClusterInfo::MergeFrom(const S2S_Ret_ClusterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_addr_.MergeFrom(from.list_addr_);
  list_port_.MergeFrom(from.list_port_);
  list_pressure_.MergeFrom(from.list_pressure_);
  list_node_index_.MergeFrom(from.list_node_index_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2S_Ret_ClusterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2S_Ret_ClusterInfo::CopyFrom(const S2S_Ret_ClusterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2S_Ret_ClusterInfo::IsInitialized() const {

  return true;
}

void S2S_Ret_ClusterInfo::Swap(S2S_Ret_ClusterInfo* other) {
  if (other != this) {
    list_addr_.Swap(&other->list_addr_);
    list_port_.Swap(&other->list_port_);
    list_pressure_.Swap(&other->list_pressure_);
    list_node_index_.Swap(&other->list_node_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2S_Ret_ClusterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2S_Ret_ClusterInfo_descriptor_;
  metadata.reflection = S2S_Ret_ClusterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2S_Ret_Update_OnlineUnit::kRetFieldNumber;
#endif  // !_MSC_VER

S2S_Ret_Update_OnlineUnit::S2S_Ret_Update_OnlineUnit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2S_Ret_Update_OnlineUnit::InitAsDefaultInstance() {
}

S2S_Ret_Update_OnlineUnit::S2S_Ret_Update_OnlineUnit(const S2S_Ret_Update_OnlineUnit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2S_Ret_Update_OnlineUnit::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2S_Ret_Update_OnlineUnit::~S2S_Ret_Update_OnlineUnit() {
  SharedDtor();
}

void S2S_Ret_Update_OnlineUnit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2S_Ret_Update_OnlineUnit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2S_Ret_Update_OnlineUnit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2S_Ret_Update_OnlineUnit_descriptor_;
}

const S2S_Ret_Update_OnlineUnit& S2S_Ret_Update_OnlineUnit::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Server_2eproto();
  return *default_instance_;
}

S2S_Ret_Update_OnlineUnit* S2S_Ret_Update_OnlineUnit::default_instance_ = nullptr;

S2S_Ret_Update_OnlineUnit* S2S_Ret_Update_OnlineUnit::New() const {
  return new S2S_Ret_Update_OnlineUnit;
}

void S2S_Ret_Update_OnlineUnit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2S_Ret_Update_OnlineUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .E_ONLINE_UNIT_RET ret = 1 [default = EOUR_OK];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::E_ONLINE_UNIT_RET_IsValid(value)) {
            set_ret(static_cast< ::E_ONLINE_UNIT_RET >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2S_Ret_Update_OnlineUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .E_ONLINE_UNIT_RET ret = 1 [default = EOUR_OK];
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2S_Ret_Update_OnlineUnit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .E_ONLINE_UNIT_RET ret = 1 [default = EOUR_OK];
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2S_Ret_Update_OnlineUnit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .E_ONLINE_UNIT_RET ret = 1 [default = EOUR_OK];
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2S_Ret_Update_OnlineUnit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2S_Ret_Update_OnlineUnit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2S_Ret_Update_OnlineUnit*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2S_Ret_Update_OnlineUnit::MergeFrom(const S2S_Ret_Update_OnlineUnit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2S_Ret_Update_OnlineUnit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2S_Ret_Update_OnlineUnit::CopyFrom(const S2S_Ret_Update_OnlineUnit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2S_Ret_Update_OnlineUnit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void S2S_Ret_Update_OnlineUnit::Swap(S2S_Ret_Update_OnlineUnit* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2S_Ret_Update_OnlineUnit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2S_Ret_Update_OnlineUnit_descriptor_;
  metadata.reflection = S2S_Ret_Update_OnlineUnit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2S_Delete_OnlineUnitInfo::kUnitTypeFieldNumber;
const int S2S_Delete_OnlineUnitInfo::kUnitIndexFieldNumber;
#endif  // !_MSC_VER

S2S_Delete_OnlineUnitInfo::S2S_Delete_OnlineUnitInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2S_Delete_OnlineUnitInfo::InitAsDefaultInstance() {
}

S2S_Delete_OnlineUnitInfo::S2S_Delete_OnlineUnitInfo(const S2S_Delete_OnlineUnitInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2S_Delete_OnlineUnitInfo::SharedCtor() {
  _cached_size_ = 0;
  unit_type_ = 0;
  unit_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2S_Delete_OnlineUnitInfo::~S2S_Delete_OnlineUnitInfo() {
  SharedDtor();
}

void S2S_Delete_OnlineUnitInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2S_Delete_OnlineUnitInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2S_Delete_OnlineUnitInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2S_Delete_OnlineUnitInfo_descriptor_;
}

const S2S_Delete_OnlineUnitInfo& S2S_Delete_OnlineUnitInfo::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Server_2eproto();
  return *default_instance_;
}

S2S_Delete_OnlineUnitInfo* S2S_Delete_OnlineUnitInfo::default_instance_ = nullptr;

S2S_Delete_OnlineUnitInfo* S2S_Delete_OnlineUnitInfo::New() const {
  return new S2S_Delete_OnlineUnitInfo;
}

void S2S_Delete_OnlineUnitInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unit_type_ = 0;
    unit_index_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2S_Delete_OnlineUnitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 unit_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &unit_type_)));
          set_has_unit_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_unit_index;
        break;
      }

      // required sint64 unit_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unit_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &unit_index_)));
          set_has_unit_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2S_Delete_OnlineUnitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 unit_type = 1;
  if (has_unit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->unit_type(), output);
  }

  // required sint64 unit_index = 2;
  if (has_unit_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->unit_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2S_Delete_OnlineUnitInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 unit_type = 1;
  if (has_unit_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->unit_type(), target);
  }

  // required sint64 unit_index = 2;
  if (has_unit_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->unit_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2S_Delete_OnlineUnitInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 unit_type = 1;
    if (has_unit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->unit_type());
    }

    // required sint64 unit_index = 2;
    if (has_unit_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->unit_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2S_Delete_OnlineUnitInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2S_Delete_OnlineUnitInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2S_Delete_OnlineUnitInfo*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2S_Delete_OnlineUnitInfo::MergeFrom(const S2S_Delete_OnlineUnitInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unit_type()) {
      set_unit_type(from.unit_type());
    }
    if (from.has_unit_index()) {
      set_unit_index(from.unit_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2S_Delete_OnlineUnitInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2S_Delete_OnlineUnitInfo::CopyFrom(const S2S_Delete_OnlineUnitInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2S_Delete_OnlineUnitInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2S_Delete_OnlineUnitInfo::Swap(S2S_Delete_OnlineUnitInfo* other) {
  if (other != this) {
    std::swap(unit_type_, other->unit_type_);
    std::swap(unit_index_, other->unit_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2S_Delete_OnlineUnitInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2S_Delete_OnlineUnitInfo_descriptor_;
  metadata.reflection = S2S_Delete_OnlineUnitInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2S_Suspend_OnlineUnitInfo::kUnitTypeFieldNumber;
const int S2S_Suspend_OnlineUnitInfo::kUnitIndexFieldNumber;
#endif  // !_MSC_VER

S2S_Suspend_OnlineUnitInfo::S2S_Suspend_OnlineUnitInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2S_Suspend_OnlineUnitInfo::InitAsDefaultInstance() {
}

S2S_Suspend_OnlineUnitInfo::S2S_Suspend_OnlineUnitInfo(const S2S_Suspend_OnlineUnitInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2S_Suspend_OnlineUnitInfo::SharedCtor() {
  _cached_size_ = 0;
  unit_type_ = 0;
  unit_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2S_Suspend_OnlineUnitInfo::~S2S_Suspend_OnlineUnitInfo() {
  SharedDtor();
}

void S2S_Suspend_OnlineUnitInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2S_Suspend_OnlineUnitInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2S_Suspend_OnlineUnitInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2S_Suspend_OnlineUnitInfo_descriptor_;
}

const S2S_Suspend_OnlineUnitInfo& S2S_Suspend_OnlineUnitInfo::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Server_2eproto();
  return *default_instance_;
}

S2S_Suspend_OnlineUnitInfo* S2S_Suspend_OnlineUnitInfo::default_instance_ = nullptr;

S2S_Suspend_OnlineUnitInfo* S2S_Suspend_OnlineUnitInfo::New() const {
  return new S2S_Suspend_OnlineUnitInfo;
}

void S2S_Suspend_OnlineUnitInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unit_type_ = 0;
    unit_index_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2S_Suspend_OnlineUnitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 unit_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &unit_type_)));
          set_has_unit_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_unit_index;
        break;
      }

      // required sint64 unit_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unit_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &unit_index_)));
          set_has_unit_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2S_Suspend_OnlineUnitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 unit_type = 1;
  if (has_unit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->unit_type(), output);
  }

  // required sint64 unit_index = 2;
  if (has_unit_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->unit_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2S_Suspend_OnlineUnitInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 unit_type = 1;
  if (has_unit_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->unit_type(), target);
  }

  // required sint64 unit_index = 2;
  if (has_unit_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->unit_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2S_Suspend_OnlineUnitInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 unit_type = 1;
    if (has_unit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->unit_type());
    }

    // required sint64 unit_index = 2;
    if (has_unit_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->unit_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2S_Suspend_OnlineUnitInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2S_Suspend_OnlineUnitInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2S_Suspend_OnlineUnitInfo*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2S_Suspend_OnlineUnitInfo::MergeFrom(const S2S_Suspend_OnlineUnitInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unit_type()) {
      set_unit_type(from.unit_type());
    }
    if (from.has_unit_index()) {
      set_unit_index(from.unit_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2S_Suspend_OnlineUnitInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2S_Suspend_OnlineUnitInfo::CopyFrom(const S2S_Suspend_OnlineUnitInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2S_Suspend_OnlineUnitInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2S_Suspend_OnlineUnitInfo::Swap(S2S_Suspend_OnlineUnitInfo* other) {
  if (other != this) {
    std::swap(unit_type_, other->unit_type_);
    std::swap(unit_index_, other->unit_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2S_Suspend_OnlineUnitInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2S_Suspend_OnlineUnitInfo_descriptor_;
  metadata.reflection = S2S_Suspend_OnlineUnitInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2S_Resume_OnlineUnitInfo::kUnitTypeFieldNumber;
const int S2S_Resume_OnlineUnitInfo::kUnitIndexFieldNumber;
#endif  // !_MSC_VER

S2S_Resume_OnlineUnitInfo::S2S_Resume_OnlineUnitInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2S_Resume_OnlineUnitInfo::InitAsDefaultInstance() {
}

S2S_Resume_OnlineUnitInfo::S2S_Resume_OnlineUnitInfo(const S2S_Resume_OnlineUnitInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2S_Resume_OnlineUnitInfo::SharedCtor() {
  _cached_size_ = 0;
  unit_type_ = 0;
  unit_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2S_Resume_OnlineUnitInfo::~S2S_Resume_OnlineUnitInfo() {
  SharedDtor();
}

void S2S_Resume_OnlineUnitInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2S_Resume_OnlineUnitInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2S_Resume_OnlineUnitInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2S_Resume_OnlineUnitInfo_descriptor_;
}

const S2S_Resume_OnlineUnitInfo& S2S_Resume_OnlineUnitInfo::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Server_2eproto();
  return *default_instance_;
}

S2S_Resume_OnlineUnitInfo* S2S_Resume_OnlineUnitInfo::default_instance_ = nullptr;

S2S_Resume_OnlineUnitInfo* S2S_Resume_OnlineUnitInfo::New() const {
  return new S2S_Resume_OnlineUnitInfo;
}

void S2S_Resume_OnlineUnitInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unit_type_ = 0;
    unit_index_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2S_Resume_OnlineUnitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 unit_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &unit_type_)));
          set_has_unit_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_unit_index;
        break;
      }

      // required sint64 unit_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unit_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &unit_index_)));
          set_has_unit_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2S_Resume_OnlineUnitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 unit_type = 1;
  if (has_unit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->unit_type(), output);
  }

  // required sint64 unit_index = 2;
  if (has_unit_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->unit_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2S_Resume_OnlineUnitInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 unit_type = 1;
  if (has_unit_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->unit_type(), target);
  }

  // required sint64 unit_index = 2;
  if (has_unit_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->unit_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2S_Resume_OnlineUnitInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 unit_type = 1;
    if (has_unit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->unit_type());
    }

    // required sint64 unit_index = 2;
    if (has_unit_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->unit_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2S_Resume_OnlineUnitInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2S_Resume_OnlineUnitInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2S_Resume_OnlineUnitInfo*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2S_Resume_OnlineUnitInfo::MergeFrom(const S2S_Resume_OnlineUnitInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unit_type()) {
      set_unit_type(from.unit_type());
    }
    if (from.has_unit_index()) {
      set_unit_index(from.unit_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2S_Resume_OnlineUnitInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2S_Resume_OnlineUnitInfo::CopyFrom(const S2S_Resume_OnlineUnitInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2S_Resume_OnlineUnitInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2S_Resume_OnlineUnitInfo::Swap(S2S_Resume_OnlineUnitInfo* other) {
  if (other != this) {
    std::swap(unit_type_, other->unit_type_);
    std::swap(unit_index_, other->unit_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2S_Resume_OnlineUnitInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2S_Resume_OnlineUnitInfo_descriptor_;
  metadata.reflection = S2S_Resume_OnlineUnitInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2S_Select_OnlineUnitInfo::kUnitTypeFieldNumber;
const int S2S_Select_OnlineUnitInfo::kUnitIndexFieldNumber;
const int S2S_Select_OnlineUnitInfo::kAddrFieldNumber;
const int S2S_Select_OnlineUnitInfo::kPortFieldNumber;
#endif  // !_MSC_VER

S2S_Select_OnlineUnitInfo::S2S_Select_OnlineUnitInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2S_Select_OnlineUnitInfo::InitAsDefaultInstance() {
}

S2S_Select_OnlineUnitInfo::S2S_Select_OnlineUnitInfo(const S2S_Select_OnlineUnitInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2S_Select_OnlineUnitInfo::SharedCtor() {
  _cached_size_ = 0;
  unit_type_ = 0;
  unit_index_ = GOOGLE_LONGLONG(0);
  addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2S_Select_OnlineUnitInfo::~S2S_Select_OnlineUnitInfo() {
  SharedDtor();
}

void S2S_Select_OnlineUnitInfo::SharedDtor() {
  if (addr_ != &::google::protobuf::internal::kEmptyString) {
    delete addr_;
  }
  if (this != default_instance_) {
  }
}

void S2S_Select_OnlineUnitInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2S_Select_OnlineUnitInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2S_Select_OnlineUnitInfo_descriptor_;
}

const S2S_Select_OnlineUnitInfo& S2S_Select_OnlineUnitInfo::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Server_2eproto();
  return *default_instance_;
}

S2S_Select_OnlineUnitInfo* S2S_Select_OnlineUnitInfo::default_instance_ = nullptr;

S2S_Select_OnlineUnitInfo* S2S_Select_OnlineUnitInfo::New() const {
  return new S2S_Select_OnlineUnitInfo;
}

void S2S_Select_OnlineUnitInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unit_type_ = 0;
    unit_index_ = GOOGLE_LONGLONG(0);
    if (has_addr()) {
      if (addr_ != &::google::protobuf::internal::kEmptyString) {
        addr_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2S_Select_OnlineUnitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 unit_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &unit_type_)));
          set_has_unit_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_unit_index;
        break;
      }

      // required sint64 unit_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unit_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &unit_index_)));
          set_has_unit_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_addr;
        break;
      }

      // required bytes addr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_addr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }

      // required sint32 port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2S_Select_OnlineUnitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 unit_type = 1;
  if (has_unit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->unit_type(), output);
  }

  // required sint64 unit_index = 2;
  if (has_unit_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->unit_index(), output);
  }

  // required bytes addr = 3;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->addr(), output);
  }

  // required sint32 port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2S_Select_OnlineUnitInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 unit_type = 1;
  if (has_unit_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->unit_type(), target);
  }

  // required sint64 unit_index = 2;
  if (has_unit_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->unit_index(), target);
  }

  // required bytes addr = 3;
  if (has_addr()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->addr(), target);
  }

  // required sint32 port = 4;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2S_Select_OnlineUnitInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 unit_type = 1;
    if (has_unit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->unit_type());
    }

    // required sint64 unit_index = 2;
    if (has_unit_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->unit_index());
    }

    // required bytes addr = 3;
    if (has_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->addr());
    }

    // required sint32 port = 4;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2S_Select_OnlineUnitInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2S_Select_OnlineUnitInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2S_Select_OnlineUnitInfo*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2S_Select_OnlineUnitInfo::MergeFrom(const S2S_Select_OnlineUnitInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unit_type()) {
      set_unit_type(from.unit_type());
    }
    if (from.has_unit_index()) {
      set_unit_index(from.unit_index());
    }
    if (from.has_addr()) {
      set_addr(from.addr());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2S_Select_OnlineUnitInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2S_Select_OnlineUnitInfo::CopyFrom(const S2S_Select_OnlineUnitInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2S_Select_OnlineUnitInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void S2S_Select_OnlineUnitInfo::Swap(S2S_Select_OnlineUnitInfo* other) {
  if (other != this) {
    std::swap(unit_type_, other->unit_type_);
    std::swap(unit_index_, other->unit_index_);
    std::swap(addr_, other->addr_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2S_Select_OnlineUnitInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2S_Select_OnlineUnitInfo_descriptor_;
  metadata.reflection = S2S_Select_OnlineUnitInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2S_Ret_Select_OnlineUnitInfo::kUnitTypeFieldNumber;
const int S2S_Ret_Select_OnlineUnitInfo::kUnitIndexFieldNumber;
const int S2S_Ret_Select_OnlineUnitInfo::kAddrFieldNumber;
const int S2S_Ret_Select_OnlineUnitInfo::kPortFieldNumber;
#endif  // !_MSC_VER

S2S_Ret_Select_OnlineUnitInfo::S2S_Ret_Select_OnlineUnitInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2S_Ret_Select_OnlineUnitInfo::InitAsDefaultInstance() {
}

S2S_Ret_Select_OnlineUnitInfo::S2S_Ret_Select_OnlineUnitInfo(const S2S_Ret_Select_OnlineUnitInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2S_Ret_Select_OnlineUnitInfo::SharedCtor() {
  _cached_size_ = 0;
  unit_type_ = 0;
  unit_index_ = GOOGLE_LONGLONG(0);
  addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2S_Ret_Select_OnlineUnitInfo::~S2S_Ret_Select_OnlineUnitInfo() {
  SharedDtor();
}

void S2S_Ret_Select_OnlineUnitInfo::SharedDtor() {
  if (addr_ != &::google::protobuf::internal::kEmptyString) {
    delete addr_;
  }
  if (this != default_instance_) {
  }
}

void S2S_Ret_Select_OnlineUnitInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2S_Ret_Select_OnlineUnitInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2S_Ret_Select_OnlineUnitInfo_descriptor_;
}

const S2S_Ret_Select_OnlineUnitInfo& S2S_Ret_Select_OnlineUnitInfo::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Server_2eproto();
  return *default_instance_;
}

S2S_Ret_Select_OnlineUnitInfo* S2S_Ret_Select_OnlineUnitInfo::default_instance_ = nullptr;

S2S_Ret_Select_OnlineUnitInfo* S2S_Ret_Select_OnlineUnitInfo::New() const {
  return new S2S_Ret_Select_OnlineUnitInfo;
}

void S2S_Ret_Select_OnlineUnitInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unit_type_ = 0;
    unit_index_ = GOOGLE_LONGLONG(0);
    if (has_addr()) {
      if (addr_ != &::google::protobuf::internal::kEmptyString) {
        addr_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2S_Ret_Select_OnlineUnitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 unit_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &unit_type_)));
          set_has_unit_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_unit_index;
        break;
      }

      // required sint64 unit_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unit_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &unit_index_)));
          set_has_unit_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_addr;
        break;
      }

      // required bytes addr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_addr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }

      // required sint32 port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2S_Ret_Select_OnlineUnitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 unit_type = 1;
  if (has_unit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->unit_type(), output);
  }

  // required sint64 unit_index = 2;
  if (has_unit_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->unit_index(), output);
  }

  // required bytes addr = 3;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->addr(), output);
  }

  // required sint32 port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2S_Ret_Select_OnlineUnitInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 unit_type = 1;
  if (has_unit_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->unit_type(), target);
  }

  // required sint64 unit_index = 2;
  if (has_unit_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->unit_index(), target);
  }

  // required bytes addr = 3;
  if (has_addr()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->addr(), target);
  }

  // required sint32 port = 4;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2S_Ret_Select_OnlineUnitInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 unit_type = 1;
    if (has_unit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->unit_type());
    }

    // required sint64 unit_index = 2;
    if (has_unit_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->unit_index());
    }

    // required bytes addr = 3;
    if (has_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->addr());
    }

    // required sint32 port = 4;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2S_Ret_Select_OnlineUnitInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2S_Ret_Select_OnlineUnitInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2S_Ret_Select_OnlineUnitInfo*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2S_Ret_Select_OnlineUnitInfo::MergeFrom(const S2S_Ret_Select_OnlineUnitInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unit_type()) {
      set_unit_type(from.unit_type());
    }
    if (from.has_unit_index()) {
      set_unit_index(from.unit_index());
    }
    if (from.has_addr()) {
      set_addr(from.addr());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2S_Ret_Select_OnlineUnitInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2S_Ret_Select_OnlineUnitInfo::CopyFrom(const S2S_Ret_Select_OnlineUnitInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2S_Ret_Select_OnlineUnitInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void S2S_Ret_Select_OnlineUnitInfo::Swap(S2S_Ret_Select_OnlineUnitInfo* other) {
  if (other != this) {
    std::swap(unit_type_, other->unit_type_);
    std::swap(unit_index_, other->unit_index_);
    std::swap(addr_, other->addr_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2S_Ret_Select_OnlineUnitInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2S_Ret_Select_OnlineUnitInfo_descriptor_;
  metadata.reflection = S2S_Ret_Select_OnlineUnitInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2S_RetReadyChangeScene::kRetCodeFieldNumber;
const int S2S_RetReadyChangeScene::kRoleIndexFieldNumber;
const int S2S_RetReadyChangeScene::kSceneIdFieldNumber;
const int S2S_RetReadyChangeScene::kSceneInstanceIdFieldNumber;
const int S2S_RetReadyChangeScene::kLoginIntaddrFieldNumber;
#endif  // !_MSC_VER

S2S_RetReadyChangeScene::S2S_RetReadyChangeScene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2S_RetReadyChangeScene::InitAsDefaultInstance() {
}

S2S_RetReadyChangeScene::S2S_RetReadyChangeScene(const S2S_RetReadyChangeScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2S_RetReadyChangeScene::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_index_ = GOOGLE_LONGLONG(0);
  scene_id_ = 0;
  scene_instance_id_ = GOOGLE_LONGLONG(0);
  login_intaddr_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2S_RetReadyChangeScene::~S2S_RetReadyChangeScene() {
  SharedDtor();
}

void S2S_RetReadyChangeScene::SharedDtor() {
  if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
    delete ret_code_;
  }
  if (this != default_instance_) {
  }
}

void S2S_RetReadyChangeScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2S_RetReadyChangeScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2S_RetReadyChangeScene_descriptor_;
}

const S2S_RetReadyChangeScene& S2S_RetReadyChangeScene::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Server_2eproto();
  return *default_instance_;
}

S2S_RetReadyChangeScene* S2S_RetReadyChangeScene::default_instance_ = nullptr;

S2S_RetReadyChangeScene* S2S_RetReadyChangeScene::New() const {
  return new S2S_RetReadyChangeScene;
}

void S2S_RetReadyChangeScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret_code()) {
      if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
        ret_code_->clear();
      }
    }
    role_index_ = GOOGLE_LONGLONG(0);
    scene_id_ = 0;
    scene_instance_id_ = GOOGLE_LONGLONG(0);
    login_intaddr_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2S_RetReadyChangeScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ret_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_index;
        break;
      }

      // required sint64 role_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_scene_id;
        break;
      }

      // required sint32 scene_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_scene_instance_id;
        break;
      }

      // required sint64 scene_instance_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &scene_instance_id_)));
          set_has_scene_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_login_intaddr;
        break;
      }

      // required sint64 login_intaddr = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_intaddr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &login_intaddr_)));
          set_has_login_intaddr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2S_RetReadyChangeScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->ret_code(), output);
  }

  // required sint64 role_index = 2;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->role_index(), output);
  }

  // required sint32 scene_id = 5;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->scene_id(), output);
  }

  // required sint64 scene_instance_id = 6;
  if (has_scene_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(6, this->scene_instance_id(), output);
  }

  // required sint64 login_intaddr = 7;
  if (has_login_intaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(7, this->login_intaddr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2S_RetReadyChangeScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes ret_code = 1;
  if (has_ret_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ret_code(), target);
  }

  // required sint64 role_index = 2;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->role_index(), target);
  }

  // required sint32 scene_id = 5;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->scene_id(), target);
  }

  // required sint64 scene_instance_id = 6;
  if (has_scene_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(6, this->scene_instance_id(), target);
  }

  // required sint64 login_intaddr = 7;
  if (has_login_intaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(7, this->login_intaddr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2S_RetReadyChangeScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ret_code());
    }

    // required sint64 role_index = 2;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->role_index());
    }

    // required sint32 scene_id = 5;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->scene_id());
    }

    // required sint64 scene_instance_id = 6;
    if (has_scene_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->scene_instance_id());
    }

    // required sint64 login_intaddr = 7;
    if (has_login_intaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->login_intaddr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2S_RetReadyChangeScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2S_RetReadyChangeScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2S_RetReadyChangeScene*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2S_RetReadyChangeScene::MergeFrom(const S2S_RetReadyChangeScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_scene_instance_id()) {
      set_scene_instance_id(from.scene_instance_id());
    }
    if (from.has_login_intaddr()) {
      set_login_intaddr(from.login_intaddr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2S_RetReadyChangeScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2S_RetReadyChangeScene::CopyFrom(const S2S_RetReadyChangeScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2S_RetReadyChangeScene::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void S2S_RetReadyChangeScene::Swap(S2S_RetReadyChangeScene* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(role_index_, other->role_index_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(scene_instance_id_, other->scene_instance_id_);
    std::swap(login_intaddr_, other->login_intaddr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2S_RetReadyChangeScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2S_RetReadyChangeScene_descriptor_;
  metadata.reflection = S2S_RetReadyChangeScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2S_Request_Add_Friend::kRoleIndexFieldNumber;
const int S2S_Request_Add_Friend::kSrcRoleIndexFieldNumber;
const int S2S_Request_Add_Friend::kIsRefuseFieldNumber;
#endif  // !_MSC_VER

S2S_Request_Add_Friend::S2S_Request_Add_Friend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2S_Request_Add_Friend::InitAsDefaultInstance() {
}

S2S_Request_Add_Friend::S2S_Request_Add_Friend(const S2S_Request_Add_Friend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2S_Request_Add_Friend::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  src_role_index_ = GOOGLE_LONGLONG(0);
  is_refuse_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2S_Request_Add_Friend::~S2S_Request_Add_Friend() {
  SharedDtor();
}

void S2S_Request_Add_Friend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2S_Request_Add_Friend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2S_Request_Add_Friend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2S_Request_Add_Friend_descriptor_;
}

const S2S_Request_Add_Friend& S2S_Request_Add_Friend::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Server_2eproto();
  return *default_instance_;
}

S2S_Request_Add_Friend* S2S_Request_Add_Friend::default_instance_ = nullptr;

S2S_Request_Add_Friend* S2S_Request_Add_Friend::New() const {
  return new S2S_Request_Add_Friend;
}

void S2S_Request_Add_Friend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    src_role_index_ = GOOGLE_LONGLONG(0);
    is_refuse_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2S_Request_Add_Friend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_src_role_index;
        break;
      }

      // required sint64 src_role_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_role_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &src_role_index_)));
          set_has_src_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_refuse;
        break;
      }

      // required bool is_refuse = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_refuse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_refuse_)));
          set_has_is_refuse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2S_Request_Add_Friend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->role_index(), output);
  }

  // required sint64 src_role_index = 2;
  if (has_src_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->src_role_index(), output);
  }

  // required bool is_refuse = 3;
  if (has_is_refuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_refuse(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2S_Request_Add_Friend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->role_index(), target);
  }

  // required sint64 src_role_index = 2;
  if (has_src_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->src_role_index(), target);
  }

  // required bool is_refuse = 3;
  if (has_is_refuse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_refuse(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2S_Request_Add_Friend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->role_index());
    }

    // required sint64 src_role_index = 2;
    if (has_src_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->src_role_index());
    }

    // required bool is_refuse = 3;
    if (has_is_refuse()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2S_Request_Add_Friend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2S_Request_Add_Friend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2S_Request_Add_Friend*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2S_Request_Add_Friend::MergeFrom(const S2S_Request_Add_Friend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_src_role_index()) {
      set_src_role_index(from.src_role_index());
    }
    if (from.has_is_refuse()) {
      set_is_refuse(from.is_refuse());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2S_Request_Add_Friend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2S_Request_Add_Friend::CopyFrom(const S2S_Request_Add_Friend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2S_Request_Add_Friend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2S_Request_Add_Friend::Swap(S2S_Request_Add_Friend* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(src_role_index_, other->src_role_index_);
    std::swap(is_refuse_, other->is_refuse_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2S_Request_Add_Friend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2S_Request_Add_Friend_descriptor_;
  metadata.reflection = S2S_Request_Add_Friend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2S_Friends_List::kListFriendRoleIndexFieldNumber;
#endif  // !_MSC_VER

S2S_Friends_List::S2S_Friends_List()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2S_Friends_List::InitAsDefaultInstance() {
}

S2S_Friends_List::S2S_Friends_List(const S2S_Friends_List& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2S_Friends_List::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2S_Friends_List::~S2S_Friends_List() {
  SharedDtor();
}

void S2S_Friends_List::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2S_Friends_List::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2S_Friends_List::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2S_Friends_List_descriptor_;
}

const S2S_Friends_List& S2S_Friends_List::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Server_2eproto();
  return *default_instance_;
}

S2S_Friends_List* S2S_Friends_List::default_instance_ = nullptr;

S2S_Friends_List* S2S_Friends_List::New() const {
  return new S2S_Friends_List;
}

void S2S_Friends_List::Clear() {
  list_friend_role_index_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2S_Friends_List::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated sint64 list_friend_role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_list_friend_role_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 8, input, this->mutable_list_friend_role_index())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_list_friend_role_index())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_list_friend_role_index;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2S_Friends_List::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated sint64 list_friend_role_index = 1;
  for (int i = 0; i < this->list_friend_role_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(
      1, this->list_friend_role_index(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2S_Friends_List::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated sint64 list_friend_role_index = 1;
  for (int i = 0; i < this->list_friend_role_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64ToArray(1, this->list_friend_role_index(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2S_Friends_List::ByteSize() const {
  int total_size = 0;

  // repeated sint64 list_friend_role_index = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->list_friend_role_index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->list_friend_role_index(i));
    }
    total_size += 1 * this->list_friend_role_index_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2S_Friends_List::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2S_Friends_List* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2S_Friends_List*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2S_Friends_List::MergeFrom(const S2S_Friends_List& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_friend_role_index_.MergeFrom(from.list_friend_role_index_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2S_Friends_List::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2S_Friends_List::CopyFrom(const S2S_Friends_List& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2S_Friends_List::IsInitialized() const {

  return true;
}

void S2S_Friends_List::Swap(S2S_Friends_List* other) {
  if (other != this) {
    list_friend_role_index_.Swap(&other->list_friend_role_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2S_Friends_List::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2S_Friends_List_descriptor_;
  metadata.reflection = S2S_Friends_List_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2S_AskCheckPlayerInLogin::kRoleIndexFieldNumber;
const int S2S_AskCheckPlayerInLogin::kSrcTempUnitIndexFieldNumber;
const int S2S_AskCheckPlayerInLogin::kSrcIntaddrFieldNumber;
const int S2S_AskCheckPlayerInLogin::kIntaddrFieldNumber;
#endif  // !_MSC_VER

S2S_AskCheckPlayerInLogin::S2S_AskCheckPlayerInLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2S_AskCheckPlayerInLogin::InitAsDefaultInstance() {
}

S2S_AskCheckPlayerInLogin::S2S_AskCheckPlayerInLogin(const S2S_AskCheckPlayerInLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2S_AskCheckPlayerInLogin::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  src_temp_unit_index_ = GOOGLE_LONGLONG(0);
  src_intaddr_ = GOOGLE_LONGLONG(0);
  intaddr_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2S_AskCheckPlayerInLogin::~S2S_AskCheckPlayerInLogin() {
  SharedDtor();
}

void S2S_AskCheckPlayerInLogin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2S_AskCheckPlayerInLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2S_AskCheckPlayerInLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2S_AskCheckPlayerInLogin_descriptor_;
}

const S2S_AskCheckPlayerInLogin& S2S_AskCheckPlayerInLogin::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Server_2eproto();
  return *default_instance_;
}

S2S_AskCheckPlayerInLogin* S2S_AskCheckPlayerInLogin::default_instance_ = nullptr;

S2S_AskCheckPlayerInLogin* S2S_AskCheckPlayerInLogin::New() const {
  return new S2S_AskCheckPlayerInLogin;
}

void S2S_AskCheckPlayerInLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    src_temp_unit_index_ = GOOGLE_LONGLONG(0);
    src_intaddr_ = GOOGLE_LONGLONG(0);
    intaddr_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2S_AskCheckPlayerInLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_src_temp_unit_index;
        break;
      }

      // required sint64 src_temp_unit_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_temp_unit_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &src_temp_unit_index_)));
          set_has_src_temp_unit_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_src_intaddr;
        break;
      }

      // required sint64 src_intaddr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_intaddr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &src_intaddr_)));
          set_has_src_intaddr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_intaddr;
        break;
      }

      // required sint64 intaddr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intaddr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &intaddr_)));
          set_has_intaddr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2S_AskCheckPlayerInLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->role_index(), output);
  }

  // required sint64 src_temp_unit_index = 2;
  if (has_src_temp_unit_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->src_temp_unit_index(), output);
  }

  // required sint64 src_intaddr = 3;
  if (has_src_intaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->src_intaddr(), output);
  }

  // required sint64 intaddr = 4;
  if (has_intaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->intaddr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2S_AskCheckPlayerInLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->role_index(), target);
  }

  // required sint64 src_temp_unit_index = 2;
  if (has_src_temp_unit_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->src_temp_unit_index(), target);
  }

  // required sint64 src_intaddr = 3;
  if (has_src_intaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->src_intaddr(), target);
  }

  // required sint64 intaddr = 4;
  if (has_intaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(4, this->intaddr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2S_AskCheckPlayerInLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->role_index());
    }

    // required sint64 src_temp_unit_index = 2;
    if (has_src_temp_unit_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->src_temp_unit_index());
    }

    // required sint64 src_intaddr = 3;
    if (has_src_intaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->src_intaddr());
    }

    // required sint64 intaddr = 4;
    if (has_intaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->intaddr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2S_AskCheckPlayerInLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2S_AskCheckPlayerInLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2S_AskCheckPlayerInLogin*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2S_AskCheckPlayerInLogin::MergeFrom(const S2S_AskCheckPlayerInLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_src_temp_unit_index()) {
      set_src_temp_unit_index(from.src_temp_unit_index());
    }
    if (from.has_src_intaddr()) {
      set_src_intaddr(from.src_intaddr());
    }
    if (from.has_intaddr()) {
      set_intaddr(from.intaddr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2S_AskCheckPlayerInLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2S_AskCheckPlayerInLogin::CopyFrom(const S2S_AskCheckPlayerInLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2S_AskCheckPlayerInLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void S2S_AskCheckPlayerInLogin::Swap(S2S_AskCheckPlayerInLogin* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(src_temp_unit_index_, other->src_temp_unit_index_);
    std::swap(src_intaddr_, other->src_intaddr_);
    std::swap(intaddr_, other->intaddr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2S_AskCheckPlayerInLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2S_AskCheckPlayerInLogin_descriptor_;
  metadata.reflection = S2S_AskCheckPlayerInLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2S_RetCheckPlayerInLogin::kRoleIndexFieldNumber;
const int S2S_RetCheckPlayerInLogin::kInLoginFieldNumber;
const int S2S_RetCheckPlayerInLogin::kIntaddrFieldNumber;
#endif  // !_MSC_VER

S2S_RetCheckPlayerInLogin::S2S_RetCheckPlayerInLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2S_RetCheckPlayerInLogin::InitAsDefaultInstance() {
}

S2S_RetCheckPlayerInLogin::S2S_RetCheckPlayerInLogin(const S2S_RetCheckPlayerInLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2S_RetCheckPlayerInLogin::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  in_login_ = false;
  intaddr_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2S_RetCheckPlayerInLogin::~S2S_RetCheckPlayerInLogin() {
  SharedDtor();
}

void S2S_RetCheckPlayerInLogin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2S_RetCheckPlayerInLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2S_RetCheckPlayerInLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2S_RetCheckPlayerInLogin_descriptor_;
}

const S2S_RetCheckPlayerInLogin& S2S_RetCheckPlayerInLogin::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Server_2eproto();
  return *default_instance_;
}

S2S_RetCheckPlayerInLogin* S2S_RetCheckPlayerInLogin::default_instance_ = nullptr;

S2S_RetCheckPlayerInLogin* S2S_RetCheckPlayerInLogin::New() const {
  return new S2S_RetCheckPlayerInLogin;
}

void S2S_RetCheckPlayerInLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    in_login_ = false;
    intaddr_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2S_RetCheckPlayerInLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_in_login;
        break;
      }

      // required bool in_login = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_in_login:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_login_)));
          set_has_in_login();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_intaddr;
        break;
      }

      // required sint64 intaddr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intaddr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &intaddr_)));
          set_has_intaddr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2S_RetCheckPlayerInLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->role_index(), output);
  }

  // required bool in_login = 2;
  if (has_in_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->in_login(), output);
  }

  // required sint64 intaddr = 3;
  if (has_intaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->intaddr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2S_RetCheckPlayerInLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->role_index(), target);
  }

  // required bool in_login = 2;
  if (has_in_login()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->in_login(), target);
  }

  // required sint64 intaddr = 3;
  if (has_intaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->intaddr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2S_RetCheckPlayerInLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->role_index());
    }

    // required bool in_login = 2;
    if (has_in_login()) {
      total_size += 1 + 1;
    }

    // required sint64 intaddr = 3;
    if (has_intaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->intaddr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2S_RetCheckPlayerInLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2S_RetCheckPlayerInLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2S_RetCheckPlayerInLogin*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2S_RetCheckPlayerInLogin::MergeFrom(const S2S_RetCheckPlayerInLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_in_login()) {
      set_in_login(from.in_login());
    }
    if (from.has_intaddr()) {
      set_intaddr(from.intaddr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2S_RetCheckPlayerInLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2S_RetCheckPlayerInLogin::CopyFrom(const S2S_RetCheckPlayerInLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2S_RetCheckPlayerInLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2S_RetCheckPlayerInLogin::Swap(S2S_RetCheckPlayerInLogin* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(in_login_, other->in_login_);
    std::swap(intaddr_, other->intaddr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2S_RetCheckPlayerInLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2S_RetCheckPlayerInLogin_descriptor_;
  metadata.reflection = S2S_RetCheckPlayerInLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2S_AskEnterScene::kSceneIdFieldNumber;
const int S2S_AskEnterScene::kMapIdFieldNumber;
const int S2S_AskEnterScene::kTeamInfoFieldNumber;
const int S2S_AskEnterScene::kListRoleInfoFieldNumber;
const int S2S_AskEnterScene::kListMonsterInfoFieldNumber;
const int S2S_AskEnterScene::kListLoginIntaddrFieldNumber;
#endif  // !_MSC_VER

S2S_AskEnterScene::S2S_AskEnterScene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2S_AskEnterScene::InitAsDefaultInstance() {
  team_info_ = const_cast< ::universal_data*>(&::universal_data::default_instance());
}

S2S_AskEnterScene::S2S_AskEnterScene(const S2S_AskEnterScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2S_AskEnterScene::SharedCtor() {
  _cached_size_ = 0;
  scene_id_ = 0;
  map_id_ = 0;
  team_info_ = nullptr;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2S_AskEnterScene::~S2S_AskEnterScene() {
  SharedDtor();
}

void S2S_AskEnterScene::SharedDtor() {
  if (this != default_instance_) {
    delete team_info_;
  }
}

void S2S_AskEnterScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2S_AskEnterScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2S_AskEnterScene_descriptor_;
}

const S2S_AskEnterScene& S2S_AskEnterScene::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Server_2eproto();
  return *default_instance_;
}

S2S_AskEnterScene* S2S_AskEnterScene::default_instance_ = nullptr;

S2S_AskEnterScene* S2S_AskEnterScene::New() const {
  return new S2S_AskEnterScene;
}

void S2S_AskEnterScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    scene_id_ = 0;
    map_id_ = 0;
    if (has_team_info()) {
      if (team_info_ != nullptr) team_info_->::universal_data::Clear();
    }
  }
  list_role_info_.Clear();
  list_monster_info_.Clear();
  list_login_intaddr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2S_AskEnterScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 scene_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_map_id;
        break;
      }

      // required sint32 map_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_team_info;
        break;
      }

      // optional .universal_data team_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_list_role_info;
        break;
      }

      // repeated .universal_data list_role_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_role_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_role_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_list_role_info;
        if (input->ExpectTag(42)) goto parse_list_monster_info;
        break;
      }

      // repeated .ServerBattleUnitInfo list_monster_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_monster_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_monster_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_list_monster_info;
        if (input->ExpectTag(48)) goto parse_list_login_intaddr;
        break;
      }

      // repeated sint64 list_login_intaddr = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_list_login_intaddr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 48, input, this->mutable_list_login_intaddr())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_list_login_intaddr())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_list_login_intaddr;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2S_AskEnterScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 scene_id = 1;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->scene_id(), output);
  }

  // required sint32 map_id = 2;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->map_id(), output);
  }

  // optional .universal_data team_info = 3;
  if (has_team_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->team_info(), output);
  }

  // repeated .universal_data list_role_info = 4;
  for (int i = 0; i < this->list_role_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->list_role_info(i), output);
  }

  // repeated .ServerBattleUnitInfo list_monster_info = 5;
  for (int i = 0; i < this->list_monster_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->list_monster_info(i), output);
  }

  // repeated sint64 list_login_intaddr = 6;
  for (int i = 0; i < this->list_login_intaddr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(
      6, this->list_login_intaddr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2S_AskEnterScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 scene_id = 1;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->scene_id(), target);
  }

  // required sint32 map_id = 2;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->map_id(), target);
  }

  // optional .universal_data team_info = 3;
  if (has_team_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->team_info(), target);
  }

  // repeated .universal_data list_role_info = 4;
  for (int i = 0; i < this->list_role_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->list_role_info(i), target);
  }

  // repeated .ServerBattleUnitInfo list_monster_info = 5;
  for (int i = 0; i < this->list_monster_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->list_monster_info(i), target);
  }

  // repeated sint64 list_login_intaddr = 6;
  for (int i = 0; i < this->list_login_intaddr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64ToArray(6, this->list_login_intaddr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2S_AskEnterScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 scene_id = 1;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->scene_id());
    }

    // required sint32 map_id = 2;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->map_id());
    }

    // optional .universal_data team_info = 3;
    if (has_team_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team_info());
    }

  }
  // repeated .universal_data list_role_info = 4;
  total_size += 1 * this->list_role_info_size();
  for (int i = 0; i < this->list_role_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_role_info(i));
  }

  // repeated .ServerBattleUnitInfo list_monster_info = 5;
  total_size += 1 * this->list_monster_info_size();
  for (int i = 0; i < this->list_monster_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_monster_info(i));
  }

  // repeated sint64 list_login_intaddr = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->list_login_intaddr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->list_login_intaddr(i));
    }
    total_size += 1 * this->list_login_intaddr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2S_AskEnterScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2S_AskEnterScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2S_AskEnterScene*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2S_AskEnterScene::MergeFrom(const S2S_AskEnterScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_role_info_.MergeFrom(from.list_role_info_);
  list_monster_info_.MergeFrom(from.list_monster_info_);
  list_login_intaddr_.MergeFrom(from.list_login_intaddr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_team_info()) {
      mutable_team_info()->::universal_data::MergeFrom(from.team_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2S_AskEnterScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2S_AskEnterScene::CopyFrom(const S2S_AskEnterScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2S_AskEnterScene::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < list_monster_info_size(); i++) {
    if (!this->list_monster_info(i).IsInitialized()) return false;
  }
  return true;
}

void S2S_AskEnterScene::Swap(S2S_AskEnterScene* other) {
  if (other != this) {
    std::swap(scene_id_, other->scene_id_);
    std::swap(map_id_, other->map_id_);
    std::swap(team_info_, other->team_info_);
    list_role_info_.Swap(&other->list_role_info_);
    list_monster_info_.Swap(&other->list_monster_info_);
    list_login_intaddr_.Swap(&other->list_login_intaddr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2S_AskEnterScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2S_AskEnterScene_descriptor_;
  metadata.reflection = S2S_AskEnterScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2S_RetEnterScene::kSceneIdFieldNumber;
const int S2S_RetEnterScene::kRoleIndexFieldNumber;
const int S2S_RetEnterScene::kLoginIntaddrFieldNumber;
const int S2S_RetEnterScene::kIsOkFieldNumber;
#endif  // !_MSC_VER

S2S_RetEnterScene::S2S_RetEnterScene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2S_RetEnterScene::InitAsDefaultInstance() {
}

S2S_RetEnterScene::S2S_RetEnterScene(const S2S_RetEnterScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2S_RetEnterScene::SharedCtor() {
  _cached_size_ = 0;
  scene_id_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  login_intaddr_ = GOOGLE_LONGLONG(0);
  is_ok_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2S_RetEnterScene::~S2S_RetEnterScene() {
  SharedDtor();
}

void S2S_RetEnterScene::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2S_RetEnterScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2S_RetEnterScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2S_RetEnterScene_descriptor_;
}

const S2S_RetEnterScene& S2S_RetEnterScene::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Server_2eproto();
  return *default_instance_;
}

S2S_RetEnterScene* S2S_RetEnterScene::default_instance_ = nullptr;

S2S_RetEnterScene* S2S_RetEnterScene::New() const {
  return new S2S_RetEnterScene;
}

void S2S_RetEnterScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    scene_id_ = 0;
    role_index_ = GOOGLE_LONGLONG(0);
    login_intaddr_ = GOOGLE_LONGLONG(0);
    is_ok_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2S_RetEnterScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 scene_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_index;
        break;
      }

      // required sint64 role_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_login_intaddr;
        break;
      }

      // required sint64 login_intaddr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_intaddr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &login_intaddr_)));
          set_has_login_intaddr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_ok;
        break;
      }

      // required bool is_ok = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_ok:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ok_)));
          set_has_is_ok();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2S_RetEnterScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 scene_id = 1;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->scene_id(), output);
  }

  // required sint64 role_index = 2;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->role_index(), output);
  }

  // required sint64 login_intaddr = 3;
  if (has_login_intaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->login_intaddr(), output);
  }

  // required bool is_ok = 4;
  if (has_is_ok()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_ok(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2S_RetEnterScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 scene_id = 1;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->scene_id(), target);
  }

  // required sint64 role_index = 2;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->role_index(), target);
  }

  // required sint64 login_intaddr = 3;
  if (has_login_intaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->login_intaddr(), target);
  }

  // required bool is_ok = 4;
  if (has_is_ok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_ok(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2S_RetEnterScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 scene_id = 1;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->scene_id());
    }

    // required sint64 role_index = 2;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->role_index());
    }

    // required sint64 login_intaddr = 3;
    if (has_login_intaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->login_intaddr());
    }

    // required bool is_ok = 4;
    if (has_is_ok()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2S_RetEnterScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2S_RetEnterScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2S_RetEnterScene*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2S_RetEnterScene::MergeFrom(const S2S_RetEnterScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_login_intaddr()) {
      set_login_intaddr(from.login_intaddr());
    }
    if (from.has_is_ok()) {
      set_is_ok(from.is_ok());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2S_RetEnterScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2S_RetEnterScene::CopyFrom(const S2S_RetEnterScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2S_RetEnterScene::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void S2S_RetEnterScene::Swap(S2S_RetEnterScene* other) {
  if (other != this) {
    std::swap(scene_id_, other->scene_id_);
    std::swap(role_index_, other->role_index_);
    std::swap(login_intaddr_, other->login_intaddr_);
    std::swap(is_ok_, other->is_ok_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2S_RetEnterScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2S_RetEnterScene_descriptor_;
  metadata.reflection = S2S_RetEnterScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2S_ReadyEnterScene::kSceneIdFieldNumber;
const int S2S_ReadyEnterScene::kSceneInstanceIdFieldNumber;
const int S2S_ReadyEnterScene::kRoleIndexFieldNumber;
const int S2S_ReadyEnterScene::kAccountFieldNumber;
const int S2S_ReadyEnterScene::kNickNameFieldNumber;
const int S2S_ReadyEnterScene::kRoleInfoFieldNumber;
const int S2S_ReadyEnterScene::kLoginIntaddrFieldNumber;
#endif  // !_MSC_VER

S2S_ReadyEnterScene::S2S_ReadyEnterScene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2S_ReadyEnterScene::InitAsDefaultInstance() {
  role_info_ = const_cast< ::universal_data*>(&::universal_data::default_instance());
}

S2S_ReadyEnterScene::S2S_ReadyEnterScene(const S2S_ReadyEnterScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2S_ReadyEnterScene::SharedCtor() {
  _cached_size_ = 0;
  scene_id_ = 0;
  scene_instance_id_ = GOOGLE_LONGLONG(0);
  role_index_ = GOOGLE_LONGLONG(0);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_info_ = nullptr;
  login_intaddr_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2S_ReadyEnterScene::~S2S_ReadyEnterScene() {
  SharedDtor();
}

void S2S_ReadyEnterScene::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (this != default_instance_) {
    delete role_info_;
  }
}

void S2S_ReadyEnterScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2S_ReadyEnterScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2S_ReadyEnterScene_descriptor_;
}

const S2S_ReadyEnterScene& S2S_ReadyEnterScene::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Server_2eproto();
  return *default_instance_;
}

S2S_ReadyEnterScene* S2S_ReadyEnterScene::default_instance_ = nullptr;

S2S_ReadyEnterScene* S2S_ReadyEnterScene::New() const {
  return new S2S_ReadyEnterScene;
}

void S2S_ReadyEnterScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    scene_id_ = 0;
    scene_instance_id_ = GOOGLE_LONGLONG(0);
    role_index_ = GOOGLE_LONGLONG(0);
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
        nick_name_->clear();
      }
    }
    if (has_role_info()) {
      if (role_info_ != nullptr) role_info_->::universal_data::Clear();
    }
    login_intaddr_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2S_ReadyEnterScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 scene_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scene_instance_id;
        break;
      }

      // required sint64 scene_instance_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &scene_instance_id_)));
          set_has_scene_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_index;
        break;
      }

      // required sint64 role_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_account;
        break;
      }

      // required bytes account = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_nick_name;
        break;
      }

      // required bytes nick_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nick_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_role_info;
        break;
      }

      // required .universal_data role_info = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_login_intaddr;
        break;
      }

      // required sint64 login_intaddr = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_intaddr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &login_intaddr_)));
          set_has_login_intaddr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2S_ReadyEnterScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 scene_id = 1;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->scene_id(), output);
  }

  // required sint64 scene_instance_id = 2;
  if (has_scene_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->scene_instance_id(), output);
  }

  // required sint64 role_index = 3;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->role_index(), output);
  }

  // required bytes account = 4;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->account(), output);
  }

  // required bytes nick_name = 5;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->nick_name(), output);
  }

  // required .universal_data role_info = 6;
  if (has_role_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->role_info(), output);
  }

  // required sint64 login_intaddr = 7;
  if (has_login_intaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(7, this->login_intaddr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2S_ReadyEnterScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 scene_id = 1;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->scene_id(), target);
  }

  // required sint64 scene_instance_id = 2;
  if (has_scene_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->scene_instance_id(), target);
  }

  // required sint64 role_index = 3;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->role_index(), target);
  }

  // required bytes account = 4;
  if (has_account()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->account(), target);
  }

  // required bytes nick_name = 5;
  if (has_nick_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->nick_name(), target);
  }

  // required .universal_data role_info = 6;
  if (has_role_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->role_info(), target);
  }

  // required sint64 login_intaddr = 7;
  if (has_login_intaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(7, this->login_intaddr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2S_ReadyEnterScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 scene_id = 1;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->scene_id());
    }

    // required sint64 scene_instance_id = 2;
    if (has_scene_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->scene_instance_id());
    }

    // required sint64 role_index = 3;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->role_index());
    }

    // required bytes account = 4;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

    // required bytes nick_name = 5;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nick_name());
    }

    // required .universal_data role_info = 6;
    if (has_role_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_info());
    }

    // required sint64 login_intaddr = 7;
    if (has_login_intaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->login_intaddr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2S_ReadyEnterScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2S_ReadyEnterScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2S_ReadyEnterScene*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2S_ReadyEnterScene::MergeFrom(const S2S_ReadyEnterScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_scene_instance_id()) {
      set_scene_instance_id(from.scene_instance_id());
    }
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
    if (from.has_role_info()) {
      mutable_role_info()->::universal_data::MergeFrom(from.role_info());
    }
    if (from.has_login_intaddr()) {
      set_login_intaddr(from.login_intaddr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2S_ReadyEnterScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2S_ReadyEnterScene::CopyFrom(const S2S_ReadyEnterScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2S_ReadyEnterScene::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void S2S_ReadyEnterScene::Swap(S2S_ReadyEnterScene* other) {
  if (other != this) {
    std::swap(scene_id_, other->scene_id_);
    std::swap(scene_instance_id_, other->scene_instance_id_);
    std::swap(role_index_, other->role_index_);
    std::swap(account_, other->account_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(role_info_, other->role_info_);
    std::swap(login_intaddr_, other->login_intaddr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2S_ReadyEnterScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2S_ReadyEnterScene_descriptor_;
  metadata.reflection = S2S_ReadyEnterScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2S_TeamReadyEnterScene::kSceneIdFieldNumber;
const int S2S_TeamReadyEnterScene::kSceneInstanceIdFieldNumber;
const int S2S_TeamReadyEnterScene::kTeamInfoFieldNumber;
const int S2S_TeamReadyEnterScene::kListRoleInfoFieldNumber;
const int S2S_TeamReadyEnterScene::kListMonsterInfoFieldNumber;
const int S2S_TeamReadyEnterScene::kListLoginIntaddrFieldNumber;
#endif  // !_MSC_VER

S2S_TeamReadyEnterScene::S2S_TeamReadyEnterScene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2S_TeamReadyEnterScene::InitAsDefaultInstance() {
  team_info_ = const_cast< ::universal_data*>(&::universal_data::default_instance());
}

S2S_TeamReadyEnterScene::S2S_TeamReadyEnterScene(const S2S_TeamReadyEnterScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2S_TeamReadyEnterScene::SharedCtor() {
  _cached_size_ = 0;
  scene_id_ = 0;
  scene_instance_id_ = GOOGLE_LONGLONG(0);
  team_info_ = nullptr;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2S_TeamReadyEnterScene::~S2S_TeamReadyEnterScene() {
  SharedDtor();
}

void S2S_TeamReadyEnterScene::SharedDtor() {
  if (this != default_instance_) {
    delete team_info_;
  }
}

void S2S_TeamReadyEnterScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2S_TeamReadyEnterScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2S_TeamReadyEnterScene_descriptor_;
}

const S2S_TeamReadyEnterScene& S2S_TeamReadyEnterScene::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Server_2eproto();
  return *default_instance_;
}

S2S_TeamReadyEnterScene* S2S_TeamReadyEnterScene::default_instance_ = nullptr;

S2S_TeamReadyEnterScene* S2S_TeamReadyEnterScene::New() const {
  return new S2S_TeamReadyEnterScene;
}

void S2S_TeamReadyEnterScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    scene_id_ = 0;
    scene_instance_id_ = GOOGLE_LONGLONG(0);
    if (has_team_info()) {
      if (team_info_ != nullptr) team_info_->::universal_data::Clear();
    }
  }
  list_role_info_.Clear();
  list_monster_info_.Clear();
  list_login_intaddr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2S_TeamReadyEnterScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 scene_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scene_instance_id;
        break;
      }

      // required sint64 scene_instance_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &scene_instance_id_)));
          set_has_scene_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_team_info;
        break;
      }

      // required .universal_data team_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_list_role_info;
        break;
      }

      // repeated .universal_data list_role_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_role_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_role_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_list_role_info;
        if (input->ExpectTag(42)) goto parse_list_monster_info;
        break;
      }

      // repeated .ServerBattleUnitInfo list_monster_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_monster_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_monster_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_list_monster_info;
        if (input->ExpectTag(48)) goto parse_list_login_intaddr;
        break;
      }

      // repeated sint64 list_login_intaddr = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_list_login_intaddr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 48, input, this->mutable_list_login_intaddr())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_list_login_intaddr())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_list_login_intaddr;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2S_TeamReadyEnterScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 scene_id = 1;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->scene_id(), output);
  }

  // required sint64 scene_instance_id = 2;
  if (has_scene_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->scene_instance_id(), output);
  }

  // required .universal_data team_info = 3;
  if (has_team_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->team_info(), output);
  }

  // repeated .universal_data list_role_info = 4;
  for (int i = 0; i < this->list_role_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->list_role_info(i), output);
  }

  // repeated .ServerBattleUnitInfo list_monster_info = 5;
  for (int i = 0; i < this->list_monster_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->list_monster_info(i), output);
  }

  // repeated sint64 list_login_intaddr = 6;
  for (int i = 0; i < this->list_login_intaddr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(
      6, this->list_login_intaddr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2S_TeamReadyEnterScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 scene_id = 1;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->scene_id(), target);
  }

  // required sint64 scene_instance_id = 2;
  if (has_scene_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->scene_instance_id(), target);
  }

  // required .universal_data team_info = 3;
  if (has_team_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->team_info(), target);
  }

  // repeated .universal_data list_role_info = 4;
  for (int i = 0; i < this->list_role_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->list_role_info(i), target);
  }

  // repeated .ServerBattleUnitInfo list_monster_info = 5;
  for (int i = 0; i < this->list_monster_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->list_monster_info(i), target);
  }

  // repeated sint64 list_login_intaddr = 6;
  for (int i = 0; i < this->list_login_intaddr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64ToArray(6, this->list_login_intaddr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2S_TeamReadyEnterScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 scene_id = 1;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->scene_id());
    }

    // required sint64 scene_instance_id = 2;
    if (has_scene_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->scene_instance_id());
    }

    // required .universal_data team_info = 3;
    if (has_team_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team_info());
    }

  }
  // repeated .universal_data list_role_info = 4;
  total_size += 1 * this->list_role_info_size();
  for (int i = 0; i < this->list_role_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_role_info(i));
  }

  // repeated .ServerBattleUnitInfo list_monster_info = 5;
  total_size += 1 * this->list_monster_info_size();
  for (int i = 0; i < this->list_monster_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_monster_info(i));
  }

  // repeated sint64 list_login_intaddr = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->list_login_intaddr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->list_login_intaddr(i));
    }
    total_size += 1 * this->list_login_intaddr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2S_TeamReadyEnterScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2S_TeamReadyEnterScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2S_TeamReadyEnterScene*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2S_TeamReadyEnterScene::MergeFrom(const S2S_TeamReadyEnterScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_role_info_.MergeFrom(from.list_role_info_);
  list_monster_info_.MergeFrom(from.list_monster_info_);
  list_login_intaddr_.MergeFrom(from.list_login_intaddr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_scene_instance_id()) {
      set_scene_instance_id(from.scene_instance_id());
    }
    if (from.has_team_info()) {
      mutable_team_info()->::universal_data::MergeFrom(from.team_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2S_TeamReadyEnterScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2S_TeamReadyEnterScene::CopyFrom(const S2S_TeamReadyEnterScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2S_TeamReadyEnterScene::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < list_monster_info_size(); i++) {
    if (!this->list_monster_info(i).IsInitialized()) return false;
  }
  return true;
}

void S2S_TeamReadyEnterScene::Swap(S2S_TeamReadyEnterScene* other) {
  if (other != this) {
    std::swap(scene_id_, other->scene_id_);
    std::swap(scene_instance_id_, other->scene_instance_id_);
    std::swap(team_info_, other->team_info_);
    list_role_info_.Swap(&other->list_role_info_);
    list_monster_info_.Swap(&other->list_monster_info_);
    list_login_intaddr_.Swap(&other->list_login_intaddr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2S_TeamReadyEnterScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2S_TeamReadyEnterScene_descriptor_;
  metadata.reflection = S2S_TeamReadyEnterScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2S_BroadcastHaveNewScene::kCenterSceneManagerIntaddrFieldNumber;
#endif  // !_MSC_VER

S2S_BroadcastHaveNewScene::S2S_BroadcastHaveNewScene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2S_BroadcastHaveNewScene::InitAsDefaultInstance() {
}

S2S_BroadcastHaveNewScene::S2S_BroadcastHaveNewScene(const S2S_BroadcastHaveNewScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2S_BroadcastHaveNewScene::SharedCtor() {
  _cached_size_ = 0;
  center_scene_manager_intaddr_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2S_BroadcastHaveNewScene::~S2S_BroadcastHaveNewScene() {
  SharedDtor();
}

void S2S_BroadcastHaveNewScene::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2S_BroadcastHaveNewScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2S_BroadcastHaveNewScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2S_BroadcastHaveNewScene_descriptor_;
}

const S2S_BroadcastHaveNewScene& S2S_BroadcastHaveNewScene::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Server_2eproto();
  return *default_instance_;
}

S2S_BroadcastHaveNewScene* S2S_BroadcastHaveNewScene::default_instance_ = nullptr;

S2S_BroadcastHaveNewScene* S2S_BroadcastHaveNewScene::New() const {
  return new S2S_BroadcastHaveNewScene;
}

void S2S_BroadcastHaveNewScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    center_scene_manager_intaddr_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2S_BroadcastHaveNewScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 center_scene_manager_intaddr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &center_scene_manager_intaddr_)));
          set_has_center_scene_manager_intaddr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2S_BroadcastHaveNewScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 center_scene_manager_intaddr = 1;
  if (has_center_scene_manager_intaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->center_scene_manager_intaddr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2S_BroadcastHaveNewScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 center_scene_manager_intaddr = 1;
  if (has_center_scene_manager_intaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->center_scene_manager_intaddr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2S_BroadcastHaveNewScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 center_scene_manager_intaddr = 1;
    if (has_center_scene_manager_intaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->center_scene_manager_intaddr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2S_BroadcastHaveNewScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2S_BroadcastHaveNewScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2S_BroadcastHaveNewScene*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2S_BroadcastHaveNewScene::MergeFrom(const S2S_BroadcastHaveNewScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_center_scene_manager_intaddr()) {
      set_center_scene_manager_intaddr(from.center_scene_manager_intaddr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2S_BroadcastHaveNewScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2S_BroadcastHaveNewScene::CopyFrom(const S2S_BroadcastHaveNewScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2S_BroadcastHaveNewScene::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void S2S_BroadcastHaveNewScene::Swap(S2S_BroadcastHaveNewScene* other) {
  if (other != this) {
    std::swap(center_scene_manager_intaddr_, other->center_scene_manager_intaddr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2S_BroadcastHaveNewScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2S_BroadcastHaveNewScene_descriptor_;
  metadata.reflection = S2S_BroadcastHaveNewScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2S_AskLoadNewScene::kSceneManagerIntaddrFieldNumber;
#endif  // !_MSC_VER

S2S_AskLoadNewScene::S2S_AskLoadNewScene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2S_AskLoadNewScene::InitAsDefaultInstance() {
}

S2S_AskLoadNewScene::S2S_AskLoadNewScene(const S2S_AskLoadNewScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2S_AskLoadNewScene::SharedCtor() {
  _cached_size_ = 0;
  scene_manager_intaddr_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2S_AskLoadNewScene::~S2S_AskLoadNewScene() {
  SharedDtor();
}

void S2S_AskLoadNewScene::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2S_AskLoadNewScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2S_AskLoadNewScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2S_AskLoadNewScene_descriptor_;
}

const S2S_AskLoadNewScene& S2S_AskLoadNewScene::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Server_2eproto();
  return *default_instance_;
}

S2S_AskLoadNewScene* S2S_AskLoadNewScene::default_instance_ = nullptr;

S2S_AskLoadNewScene* S2S_AskLoadNewScene::New() const {
  return new S2S_AskLoadNewScene;
}

void S2S_AskLoadNewScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    scene_manager_intaddr_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2S_AskLoadNewScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 scene_manager_intaddr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &scene_manager_intaddr_)));
          set_has_scene_manager_intaddr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2S_AskLoadNewScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 scene_manager_intaddr = 1;
  if (has_scene_manager_intaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->scene_manager_intaddr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2S_AskLoadNewScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 scene_manager_intaddr = 1;
  if (has_scene_manager_intaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->scene_manager_intaddr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2S_AskLoadNewScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 scene_manager_intaddr = 1;
    if (has_scene_manager_intaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->scene_manager_intaddr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2S_AskLoadNewScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2S_AskLoadNewScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2S_AskLoadNewScene*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2S_AskLoadNewScene::MergeFrom(const S2S_AskLoadNewScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scene_manager_intaddr()) {
      set_scene_manager_intaddr(from.scene_manager_intaddr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2S_AskLoadNewScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2S_AskLoadNewScene::CopyFrom(const S2S_AskLoadNewScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2S_AskLoadNewScene::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void S2S_AskLoadNewScene::Swap(S2S_AskLoadNewScene* other) {
  if (other != this) {
    std::swap(scene_manager_intaddr_, other->scene_manager_intaddr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2S_AskLoadNewScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2S_AskLoadNewScene_descriptor_;
  metadata.reflection = S2S_AskLoadNewScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2S_RetLoadNewScene::kSceneIdFieldNumber;
const int S2S_RetLoadNewScene::kSceneIndexFieldNumber;
const int S2S_RetLoadNewScene::kMapIdFieldNumber;
const int S2S_RetLoadNewScene::kSceneTypeFieldNumber;
const int S2S_RetLoadNewScene::kListRoleInfoFieldNumber;
const int S2S_RetLoadNewScene::kListTeamInfoFieldNumber;
const int S2S_RetLoadNewScene::kListMonsterInfoFieldNumber;
const int S2S_RetLoadNewScene::kListLoginIntaddrFieldNumber;
#endif  // !_MSC_VER

S2S_RetLoadNewScene::S2S_RetLoadNewScene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2S_RetLoadNewScene::InitAsDefaultInstance() {
}

S2S_RetLoadNewScene::S2S_RetLoadNewScene(const S2S_RetLoadNewScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2S_RetLoadNewScene::SharedCtor() {
  _cached_size_ = 0;
  scene_id_ = 0;
  scene_index_ = 0;
  map_id_ = 0;
  scene_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2S_RetLoadNewScene::~S2S_RetLoadNewScene() {
  SharedDtor();
}

void S2S_RetLoadNewScene::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2S_RetLoadNewScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2S_RetLoadNewScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2S_RetLoadNewScene_descriptor_;
}

const S2S_RetLoadNewScene& S2S_RetLoadNewScene::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Server_2eproto();
  return *default_instance_;
}

S2S_RetLoadNewScene* S2S_RetLoadNewScene::default_instance_ = nullptr;

S2S_RetLoadNewScene* S2S_RetLoadNewScene::New() const {
  return new S2S_RetLoadNewScene;
}

void S2S_RetLoadNewScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    scene_id_ = 0;
    scene_index_ = 0;
    map_id_ = 0;
    scene_type_ = 0;
  }
  list_role_info_.Clear();
  list_team_info_.Clear();
  list_monster_info_.Clear();
  list_login_intaddr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2S_RetLoadNewScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 scene_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scene_index;
        break;
      }

      // required sint32 scene_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &scene_index_)));
          set_has_scene_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_map_id;
        break;
      }

      // required sint32 map_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_scene_type;
        break;
      }

      // required .E_SCENE_TYPE scene_type = 4 [default = EST_INVALID];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::E_SCENE_TYPE_IsValid(value)) {
            set_scene_type(static_cast< ::E_SCENE_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_list_role_info;
        break;
      }

      // repeated .universal_data list_role_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_role_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_role_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_list_role_info;
        if (input->ExpectTag(50)) goto parse_list_team_info;
        break;
      }

      // repeated .universal_data list_team_info = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_team_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_team_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_list_team_info;
        if (input->ExpectTag(58)) goto parse_list_monster_info;
        break;
      }

      // repeated .ServerBattleUnitInfo list_monster_info = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_monster_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_monster_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_list_monster_info;
        if (input->ExpectTag(64)) goto parse_list_login_intaddr;
        break;
      }

      // repeated sint64 list_login_intaddr = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_list_login_intaddr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 64, input, this->mutable_list_login_intaddr())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_list_login_intaddr())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_list_login_intaddr;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2S_RetLoadNewScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 scene_id = 1;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->scene_id(), output);
  }

  // required sint32 scene_index = 2;
  if (has_scene_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->scene_index(), output);
  }

  // required sint32 map_id = 3;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->map_id(), output);
  }

  // required .E_SCENE_TYPE scene_type = 4 [default = EST_INVALID];
  if (has_scene_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->scene_type(), output);
  }

  // repeated .universal_data list_role_info = 5;
  for (int i = 0; i < this->list_role_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->list_role_info(i), output);
  }

  // repeated .universal_data list_team_info = 6;
  for (int i = 0; i < this->list_team_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->list_team_info(i), output);
  }

  // repeated .ServerBattleUnitInfo list_monster_info = 7;
  for (int i = 0; i < this->list_monster_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->list_monster_info(i), output);
  }

  // repeated sint64 list_login_intaddr = 8;
  for (int i = 0; i < this->list_login_intaddr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(
      8, this->list_login_intaddr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2S_RetLoadNewScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 scene_id = 1;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->scene_id(), target);
  }

  // required sint32 scene_index = 2;
  if (has_scene_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->scene_index(), target);
  }

  // required sint32 map_id = 3;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->map_id(), target);
  }

  // required .E_SCENE_TYPE scene_type = 4 [default = EST_INVALID];
  if (has_scene_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->scene_type(), target);
  }

  // repeated .universal_data list_role_info = 5;
  for (int i = 0; i < this->list_role_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->list_role_info(i), target);
  }

  // repeated .universal_data list_team_info = 6;
  for (int i = 0; i < this->list_team_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->list_team_info(i), target);
  }

  // repeated .ServerBattleUnitInfo list_monster_info = 7;
  for (int i = 0; i < this->list_monster_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->list_monster_info(i), target);
  }

  // repeated sint64 list_login_intaddr = 8;
  for (int i = 0; i < this->list_login_intaddr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64ToArray(8, this->list_login_intaddr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2S_RetLoadNewScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 scene_id = 1;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->scene_id());
    }

    // required sint32 scene_index = 2;
    if (has_scene_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->scene_index());
    }

    // required sint32 map_id = 3;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->map_id());
    }

    // required .E_SCENE_TYPE scene_type = 4 [default = EST_INVALID];
    if (has_scene_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->scene_type());
    }

  }
  // repeated .universal_data list_role_info = 5;
  total_size += 1 * this->list_role_info_size();
  for (int i = 0; i < this->list_role_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_role_info(i));
  }

  // repeated .universal_data list_team_info = 6;
  total_size += 1 * this->list_team_info_size();
  for (int i = 0; i < this->list_team_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_team_info(i));
  }

  // repeated .ServerBattleUnitInfo list_monster_info = 7;
  total_size += 1 * this->list_monster_info_size();
  for (int i = 0; i < this->list_monster_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_monster_info(i));
  }

  // repeated sint64 list_login_intaddr = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->list_login_intaddr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->list_login_intaddr(i));
    }
    total_size += 1 * this->list_login_intaddr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2S_RetLoadNewScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2S_RetLoadNewScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2S_RetLoadNewScene*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2S_RetLoadNewScene::MergeFrom(const S2S_RetLoadNewScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_role_info_.MergeFrom(from.list_role_info_);
  list_team_info_.MergeFrom(from.list_team_info_);
  list_monster_info_.MergeFrom(from.list_monster_info_);
  list_login_intaddr_.MergeFrom(from.list_login_intaddr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_scene_index()) {
      set_scene_index(from.scene_index());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_scene_type()) {
      set_scene_type(from.scene_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2S_RetLoadNewScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2S_RetLoadNewScene::CopyFrom(const S2S_RetLoadNewScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2S_RetLoadNewScene::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  for (int i = 0; i < list_monster_info_size(); i++) {
    if (!this->list_monster_info(i).IsInitialized()) return false;
  }
  return true;
}

void S2S_RetLoadNewScene::Swap(S2S_RetLoadNewScene* other) {
  if (other != this) {
    std::swap(scene_id_, other->scene_id_);
    std::swap(scene_index_, other->scene_index_);
    std::swap(map_id_, other->map_id_);
    std::swap(scene_type_, other->scene_type_);
    list_role_info_.Swap(&other->list_role_info_);
    list_team_info_.Swap(&other->list_team_info_);
    list_monster_info_.Swap(&other->list_monster_info_);
    list_login_intaddr_.Swap(&other->list_login_intaddr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2S_RetLoadNewScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2S_RetLoadNewScene_descriptor_;
  metadata.reflection = S2S_RetLoadNewScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2S_AskRegRunningSceneInfo::kSceneInfoFieldNumber;
#endif  // !_MSC_VER

S2S_AskRegRunningSceneInfo::S2S_AskRegRunningSceneInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2S_AskRegRunningSceneInfo::InitAsDefaultInstance() {
  scene_info_ = const_cast< ::RunningSceneInfo*>(&::RunningSceneInfo::default_instance());
}

S2S_AskRegRunningSceneInfo::S2S_AskRegRunningSceneInfo(const S2S_AskRegRunningSceneInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2S_AskRegRunningSceneInfo::SharedCtor() {
  _cached_size_ = 0;
  scene_info_ = nullptr;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2S_AskRegRunningSceneInfo::~S2S_AskRegRunningSceneInfo() {
  SharedDtor();
}

void S2S_AskRegRunningSceneInfo::SharedDtor() {
  if (this != default_instance_) {
    delete scene_info_;
  }
}

void S2S_AskRegRunningSceneInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2S_AskRegRunningSceneInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2S_AskRegRunningSceneInfo_descriptor_;
}

const S2S_AskRegRunningSceneInfo& S2S_AskRegRunningSceneInfo::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Server_2eproto();
  return *default_instance_;
}

S2S_AskRegRunningSceneInfo* S2S_AskRegRunningSceneInfo::default_instance_ = nullptr;

S2S_AskRegRunningSceneInfo* S2S_AskRegRunningSceneInfo::New() const {
  return new S2S_AskRegRunningSceneInfo;
}

void S2S_AskRegRunningSceneInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_scene_info()) {
      if (scene_info_ != nullptr) scene_info_->::RunningSceneInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2S_AskRegRunningSceneInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .RunningSceneInfo scene_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scene_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2S_AskRegRunningSceneInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .RunningSceneInfo scene_info = 1;
  if (has_scene_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->scene_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2S_AskRegRunningSceneInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .RunningSceneInfo scene_info = 1;
  if (has_scene_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->scene_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2S_AskRegRunningSceneInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .RunningSceneInfo scene_info = 1;
    if (has_scene_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scene_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2S_AskRegRunningSceneInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2S_AskRegRunningSceneInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2S_AskRegRunningSceneInfo*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2S_AskRegRunningSceneInfo::MergeFrom(const S2S_AskRegRunningSceneInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scene_info()) {
      mutable_scene_info()->::RunningSceneInfo::MergeFrom(from.scene_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2S_AskRegRunningSceneInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2S_AskRegRunningSceneInfo::CopyFrom(const S2S_AskRegRunningSceneInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2S_AskRegRunningSceneInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_scene_info()) {
    if (!this->scene_info().IsInitialized()) return false;
  }
  return true;
}

void S2S_AskRegRunningSceneInfo::Swap(S2S_AskRegRunningSceneInfo* other) {
  if (other != this) {
    std::swap(scene_info_, other->scene_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2S_AskRegRunningSceneInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2S_AskRegRunningSceneInfo_descriptor_;
  metadata.reflection = S2S_AskRegRunningSceneInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2S_AskUnRegRunningSceneInfo::kSceneInfoFieldNumber;
#endif  // !_MSC_VER

S2S_AskUnRegRunningSceneInfo::S2S_AskUnRegRunningSceneInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2S_AskUnRegRunningSceneInfo::InitAsDefaultInstance() {
  scene_info_ = const_cast< ::RunningSceneInfo*>(&::RunningSceneInfo::default_instance());
}

S2S_AskUnRegRunningSceneInfo::S2S_AskUnRegRunningSceneInfo(const S2S_AskUnRegRunningSceneInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2S_AskUnRegRunningSceneInfo::SharedCtor() {
  _cached_size_ = 0;
  scene_info_ = nullptr;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2S_AskUnRegRunningSceneInfo::~S2S_AskUnRegRunningSceneInfo() {
  SharedDtor();
}

void S2S_AskUnRegRunningSceneInfo::SharedDtor() {
  if (this != default_instance_) {
    delete scene_info_;
  }
}

void S2S_AskUnRegRunningSceneInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2S_AskUnRegRunningSceneInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2S_AskUnRegRunningSceneInfo_descriptor_;
}

const S2S_AskUnRegRunningSceneInfo& S2S_AskUnRegRunningSceneInfo::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Server_2eproto();
  return *default_instance_;
}

S2S_AskUnRegRunningSceneInfo* S2S_AskUnRegRunningSceneInfo::default_instance_ = nullptr;

S2S_AskUnRegRunningSceneInfo* S2S_AskUnRegRunningSceneInfo::New() const {
  return new S2S_AskUnRegRunningSceneInfo;
}

void S2S_AskUnRegRunningSceneInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_scene_info()) {
      if (scene_info_ != nullptr) scene_info_->::RunningSceneInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2S_AskUnRegRunningSceneInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .RunningSceneInfo scene_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scene_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2S_AskUnRegRunningSceneInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .RunningSceneInfo scene_info = 1;
  if (has_scene_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->scene_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2S_AskUnRegRunningSceneInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .RunningSceneInfo scene_info = 1;
  if (has_scene_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->scene_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2S_AskUnRegRunningSceneInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .RunningSceneInfo scene_info = 1;
    if (has_scene_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scene_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2S_AskUnRegRunningSceneInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2S_AskUnRegRunningSceneInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2S_AskUnRegRunningSceneInfo*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2S_AskUnRegRunningSceneInfo::MergeFrom(const S2S_AskUnRegRunningSceneInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scene_info()) {
      mutable_scene_info()->::RunningSceneInfo::MergeFrom(from.scene_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2S_AskUnRegRunningSceneInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2S_AskUnRegRunningSceneInfo::CopyFrom(const S2S_AskUnRegRunningSceneInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2S_AskUnRegRunningSceneInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_scene_info()) {
    if (!this->scene_info().IsInitialized()) return false;
  }
  return true;
}

void S2S_AskUnRegRunningSceneInfo::Swap(S2S_AskUnRegRunningSceneInfo* other) {
  if (other != this) {
    std::swap(scene_info_, other->scene_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2S_AskUnRegRunningSceneInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2S_AskUnRegRunningSceneInfo_descriptor_;
  metadata.reflection = S2S_AskUnRegRunningSceneInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM2S_AskLogin::kAccountFieldNumber;
const int GM2S_AskLogin::kPasswordFieldNumber;
#endif  // !_MSC_VER

GM2S_AskLogin::GM2S_AskLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM2S_AskLogin::InitAsDefaultInstance() {
}

GM2S_AskLogin::GM2S_AskLogin(const GM2S_AskLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM2S_AskLogin::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM2S_AskLogin::~GM2S_AskLogin() {
  SharedDtor();
}

void GM2S_AskLogin::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void GM2S_AskLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM2S_AskLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM2S_AskLogin_descriptor_;
}

const GM2S_AskLogin& GM2S_AskLogin::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Server_2eproto();
  return *default_instance_;
}

GM2S_AskLogin* GM2S_AskLogin::default_instance_ = nullptr;

GM2S_AskLogin* GM2S_AskLogin::New() const {
  return new GM2S_AskLogin;
}

void GM2S_AskLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM2S_AskLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // required bytes password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_password()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM2S_AskLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->account(), output);
  }

  // required bytes password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM2S_AskLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes account = 1;
  if (has_account()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->account(), target);
  }

  // required bytes password = 2;
  if (has_password()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM2S_AskLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

    // required bytes password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM2S_AskLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM2S_AskLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM2S_AskLogin*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM2S_AskLogin::MergeFrom(const GM2S_AskLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM2S_AskLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM2S_AskLogin::CopyFrom(const GM2S_AskLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM2S_AskLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM2S_AskLogin::Swap(GM2S_AskLogin* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM2S_AskLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM2S_AskLogin_descriptor_;
  metadata.reflection = GM2S_AskLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2GM_RetLogin::kRetCodeFieldNumber;
const int S2GM_RetLogin::kAccountFieldNumber;
#endif  // !_MSC_VER

S2GM_RetLogin::S2GM_RetLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2GM_RetLogin::InitAsDefaultInstance() {
}

S2GM_RetLogin::S2GM_RetLogin(const S2GM_RetLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2GM_RetLogin::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2GM_RetLogin::~S2GM_RetLogin() {
  SharedDtor();
}

void S2GM_RetLogin::SharedDtor() {
  if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
    delete ret_code_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void S2GM_RetLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2GM_RetLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2GM_RetLogin_descriptor_;
}

const S2GM_RetLogin& S2GM_RetLogin::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Server_2eproto();
  return *default_instance_;
}

S2GM_RetLogin* S2GM_RetLogin::default_instance_ = nullptr;

S2GM_RetLogin* S2GM_RetLogin::New() const {
  return new S2GM_RetLogin;
}

void S2GM_RetLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret_code()) {
      if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
        ret_code_->clear();
      }
    }
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2GM_RetLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ret_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // required bytes account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2GM_RetLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->ret_code(), output);
  }

  // required bytes account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->account(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2GM_RetLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes ret_code = 1;
  if (has_ret_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ret_code(), target);
  }

  // required bytes account = 2;
  if (has_account()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->account(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2GM_RetLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ret_code());
    }

    // required bytes account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2GM_RetLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2GM_RetLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2GM_RetLogin*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2GM_RetLogin::MergeFrom(const S2GM_RetLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2GM_RetLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2GM_RetLogin::CopyFrom(const S2GM_RetLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2GM_RetLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2GM_RetLogin::Swap(S2GM_RetLogin* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(account_, other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2GM_RetLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2GM_RetLogin_descriptor_;
  metadata.reflection = S2GM_RetLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2S_RegNodeInfo::kClusterNodeInfoFieldNumber;
#endif  // !_MSC_VER

S2S_RegNodeInfo::S2S_RegNodeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2S_RegNodeInfo::InitAsDefaultInstance() {
  cluster_node_info_ = const_cast< ::sql_ret_cluster_node_info*>(&::sql_ret_cluster_node_info::default_instance());
}

S2S_RegNodeInfo::S2S_RegNodeInfo(const S2S_RegNodeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2S_RegNodeInfo::SharedCtor() {
  _cached_size_ = 0;
  cluster_node_info_ = nullptr;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2S_RegNodeInfo::~S2S_RegNodeInfo() {
  SharedDtor();
}

void S2S_RegNodeInfo::SharedDtor() {
  if (this != default_instance_) {
    delete cluster_node_info_;
  }
}

void S2S_RegNodeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2S_RegNodeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2S_RegNodeInfo_descriptor_;
}

const S2S_RegNodeInfo& S2S_RegNodeInfo::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Server_2eproto();
  return *default_instance_;
}

S2S_RegNodeInfo* S2S_RegNodeInfo::default_instance_ = nullptr;

S2S_RegNodeInfo* S2S_RegNodeInfo::New() const {
  return new S2S_RegNodeInfo;
}

void S2S_RegNodeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cluster_node_info()) {
      if (cluster_node_info_ != nullptr) cluster_node_info_->::sql_ret_cluster_node_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2S_RegNodeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sql_ret_cluster_node_info cluster_node_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cluster_node_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2S_RegNodeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sql_ret_cluster_node_info cluster_node_info = 1;
  if (has_cluster_node_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cluster_node_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2S_RegNodeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .sql_ret_cluster_node_info cluster_node_info = 1;
  if (has_cluster_node_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cluster_node_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2S_RegNodeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sql_ret_cluster_node_info cluster_node_info = 1;
    if (has_cluster_node_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cluster_node_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2S_RegNodeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2S_RegNodeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2S_RegNodeInfo*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2S_RegNodeInfo::MergeFrom(const S2S_RegNodeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cluster_node_info()) {
      mutable_cluster_node_info()->::sql_ret_cluster_node_info::MergeFrom(from.cluster_node_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2S_RegNodeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2S_RegNodeInfo::CopyFrom(const S2S_RegNodeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2S_RegNodeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_cluster_node_info()) {
    if (!this->cluster_node_info().IsInitialized()) return false;
  }
  return true;
}

void S2S_RegNodeInfo::Swap(S2S_RegNodeInfo* other) {
  if (other != this) {
    std::swap(cluster_node_info_, other->cluster_node_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2S_RegNodeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2S_RegNodeInfo_descriptor_;
  metadata.reflection = S2S_RegNodeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM2S_AskNodeInfo::kRequestNodeNameFieldNumber;
const int GM2S_AskNodeInfo::kIsOnlineFieldNumber;
#endif  // !_MSC_VER

GM2S_AskNodeInfo::GM2S_AskNodeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM2S_AskNodeInfo::InitAsDefaultInstance() {
}

GM2S_AskNodeInfo::GM2S_AskNodeInfo(const GM2S_AskNodeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM2S_AskNodeInfo::SharedCtor() {
  _cached_size_ = 0;
  request_node_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_online_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM2S_AskNodeInfo::~GM2S_AskNodeInfo() {
  SharedDtor();
}

void GM2S_AskNodeInfo::SharedDtor() {
  if (request_node_name_ != &::google::protobuf::internal::kEmptyString) {
    delete request_node_name_;
  }
  if (this != default_instance_) {
  }
}

void GM2S_AskNodeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM2S_AskNodeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM2S_AskNodeInfo_descriptor_;
}

const GM2S_AskNodeInfo& GM2S_AskNodeInfo::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Server_2eproto();
  return *default_instance_;
}

GM2S_AskNodeInfo* GM2S_AskNodeInfo::default_instance_ = nullptr;

GM2S_AskNodeInfo* GM2S_AskNodeInfo::New() const {
  return new GM2S_AskNodeInfo;
}

void GM2S_AskNodeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request_node_name()) {
      if (request_node_name_ != &::google::protobuf::internal::kEmptyString) {
        request_node_name_->clear();
      }
    }
    is_online_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM2S_AskNodeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes request_node_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_request_node_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_online;
        break;
      }

      // required bool is_online = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_online_)));
          set_has_is_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM2S_AskNodeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes request_node_name = 1;
  if (has_request_node_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->request_node_name(), output);
  }

  // required bool is_online = 2;
  if (has_is_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_online(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM2S_AskNodeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes request_node_name = 1;
  if (has_request_node_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->request_node_name(), target);
  }

  // required bool is_online = 2;
  if (has_is_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_online(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM2S_AskNodeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes request_node_name = 1;
    if (has_request_node_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->request_node_name());
    }

    // required bool is_online = 2;
    if (has_is_online()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM2S_AskNodeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM2S_AskNodeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM2S_AskNodeInfo*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM2S_AskNodeInfo::MergeFrom(const GM2S_AskNodeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_node_name()) {
      set_request_node_name(from.request_node_name());
    }
    if (from.has_is_online()) {
      set_is_online(from.is_online());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM2S_AskNodeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM2S_AskNodeInfo::CopyFrom(const GM2S_AskNodeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM2S_AskNodeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM2S_AskNodeInfo::Swap(GM2S_AskNodeInfo* other) {
  if (other != this) {
    std::swap(request_node_name_, other->request_node_name_);
    std::swap(is_online_, other->is_online_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM2S_AskNodeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM2S_AskNodeInfo_descriptor_;
  metadata.reflection = GM2S_AskNodeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2GM_RetNodeInfo::kRequestNodeNameFieldNumber;
const int S2GM_RetNodeInfo::kListClusterNodeInfoFieldNumber;
#endif  // !_MSC_VER

S2GM_RetNodeInfo::S2GM_RetNodeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2GM_RetNodeInfo::InitAsDefaultInstance() {
}

S2GM_RetNodeInfo::S2GM_RetNodeInfo(const S2GM_RetNodeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2GM_RetNodeInfo::SharedCtor() {
  _cached_size_ = 0;
  request_node_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2GM_RetNodeInfo::~S2GM_RetNodeInfo() {
  SharedDtor();
}

void S2GM_RetNodeInfo::SharedDtor() {
  if (request_node_name_ != &::google::protobuf::internal::kEmptyString) {
    delete request_node_name_;
  }
  if (this != default_instance_) {
  }
}

void S2GM_RetNodeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2GM_RetNodeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2GM_RetNodeInfo_descriptor_;
}

const S2GM_RetNodeInfo& S2GM_RetNodeInfo::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Server_2eproto();
  return *default_instance_;
}

S2GM_RetNodeInfo* S2GM_RetNodeInfo::default_instance_ = nullptr;

S2GM_RetNodeInfo* S2GM_RetNodeInfo::New() const {
  return new S2GM_RetNodeInfo;
}

void S2GM_RetNodeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request_node_name()) {
      if (request_node_name_ != &::google::protobuf::internal::kEmptyString) {
        request_node_name_->clear();
      }
    }
  }
  list_cluster_node_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2GM_RetNodeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes request_node_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_request_node_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list_cluster_node_info;
        break;
      }

      // repeated .sql_ret_cluster_node_info list_cluster_node_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_cluster_node_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_cluster_node_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list_cluster_node_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2GM_RetNodeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes request_node_name = 1;
  if (has_request_node_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->request_node_name(), output);
  }

  // repeated .sql_ret_cluster_node_info list_cluster_node_info = 2;
  for (int i = 0; i < this->list_cluster_node_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list_cluster_node_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2GM_RetNodeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes request_node_name = 1;
  if (has_request_node_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->request_node_name(), target);
  }

  // repeated .sql_ret_cluster_node_info list_cluster_node_info = 2;
  for (int i = 0; i < this->list_cluster_node_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->list_cluster_node_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2GM_RetNodeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes request_node_name = 1;
    if (has_request_node_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->request_node_name());
    }

  }
  // repeated .sql_ret_cluster_node_info list_cluster_node_info = 2;
  total_size += 1 * this->list_cluster_node_info_size();
  for (int i = 0; i < this->list_cluster_node_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_cluster_node_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2GM_RetNodeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2GM_RetNodeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2GM_RetNodeInfo*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2GM_RetNodeInfo::MergeFrom(const S2GM_RetNodeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_cluster_node_info_.MergeFrom(from.list_cluster_node_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_node_name()) {
      set_request_node_name(from.request_node_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2GM_RetNodeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2GM_RetNodeInfo::CopyFrom(const S2GM_RetNodeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2GM_RetNodeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < list_cluster_node_info_size(); i++) {
    if (!this->list_cluster_node_info(i).IsInitialized()) return false;
  }
  return true;
}

void S2GM_RetNodeInfo::Swap(S2GM_RetNodeInfo* other) {
  if (other != this) {
    std::swap(request_node_name_, other->request_node_name_);
    list_cluster_node_info_.Swap(&other->list_cluster_node_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2GM_RetNodeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2GM_RetNodeInfo_descriptor_;
  metadata.reflection = S2GM_RetNodeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM2S_AskPlayerInfo::kRequestNodeNameFieldNumber;
const int GM2S_AskPlayerInfo::kIsOnlineFieldNumber;
#endif  // !_MSC_VER

GM2S_AskPlayerInfo::GM2S_AskPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM2S_AskPlayerInfo::InitAsDefaultInstance() {
}

GM2S_AskPlayerInfo::GM2S_AskPlayerInfo(const GM2S_AskPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM2S_AskPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  request_node_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_online_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM2S_AskPlayerInfo::~GM2S_AskPlayerInfo() {
  SharedDtor();
}

void GM2S_AskPlayerInfo::SharedDtor() {
  if (request_node_name_ != &::google::protobuf::internal::kEmptyString) {
    delete request_node_name_;
  }
  if (this != default_instance_) {
  }
}

void GM2S_AskPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM2S_AskPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM2S_AskPlayerInfo_descriptor_;
}

const GM2S_AskPlayerInfo& GM2S_AskPlayerInfo::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Server_2eproto();
  return *default_instance_;
}

GM2S_AskPlayerInfo* GM2S_AskPlayerInfo::default_instance_ = nullptr;

GM2S_AskPlayerInfo* GM2S_AskPlayerInfo::New() const {
  return new GM2S_AskPlayerInfo;
}

void GM2S_AskPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request_node_name()) {
      if (request_node_name_ != &::google::protobuf::internal::kEmptyString) {
        request_node_name_->clear();
      }
    }
    is_online_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM2S_AskPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes request_node_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_request_node_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_online;
        break;
      }

      // required bool is_online = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_online_)));
          set_has_is_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM2S_AskPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes request_node_name = 1;
  if (has_request_node_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->request_node_name(), output);
  }

  // required bool is_online = 2;
  if (has_is_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_online(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM2S_AskPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes request_node_name = 1;
  if (has_request_node_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->request_node_name(), target);
  }

  // required bool is_online = 2;
  if (has_is_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_online(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM2S_AskPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes request_node_name = 1;
    if (has_request_node_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->request_node_name());
    }

    // required bool is_online = 2;
    if (has_is_online()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM2S_AskPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM2S_AskPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM2S_AskPlayerInfo*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM2S_AskPlayerInfo::MergeFrom(const GM2S_AskPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_node_name()) {
      set_request_node_name(from.request_node_name());
    }
    if (from.has_is_online()) {
      set_is_online(from.is_online());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM2S_AskPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM2S_AskPlayerInfo::CopyFrom(const GM2S_AskPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM2S_AskPlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GM2S_AskPlayerInfo::Swap(GM2S_AskPlayerInfo* other) {
  if (other != this) {
    std::swap(request_node_name_, other->request_node_name_);
    std::swap(is_online_, other->is_online_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM2S_AskPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM2S_AskPlayerInfo_descriptor_;
  metadata.reflection = GM2S_AskPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2GM_RetPlayerInfo::kRequestNodeNameFieldNumber;
const int S2GM_RetPlayerInfo::kListRoleinfoFieldNumber;
#endif  // !_MSC_VER

S2GM_RetPlayerInfo::S2GM_RetPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2GM_RetPlayerInfo::InitAsDefaultInstance() {
}

S2GM_RetPlayerInfo::S2GM_RetPlayerInfo(const S2GM_RetPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2GM_RetPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  request_node_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2GM_RetPlayerInfo::~S2GM_RetPlayerInfo() {
  SharedDtor();
}

void S2GM_RetPlayerInfo::SharedDtor() {
  if (request_node_name_ != &::google::protobuf::internal::kEmptyString) {
    delete request_node_name_;
  }
  if (this != default_instance_) {
  }
}

void S2GM_RetPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2GM_RetPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2GM_RetPlayerInfo_descriptor_;
}

const S2GM_RetPlayerInfo& S2GM_RetPlayerInfo::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Server_2eproto();
  return *default_instance_;
}

S2GM_RetPlayerInfo* S2GM_RetPlayerInfo::default_instance_ = nullptr;

S2GM_RetPlayerInfo* S2GM_RetPlayerInfo::New() const {
  return new S2GM_RetPlayerInfo;
}

void S2GM_RetPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request_node_name()) {
      if (request_node_name_ != &::google::protobuf::internal::kEmptyString) {
        request_node_name_->clear();
      }
    }
  }
  list_roleinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2GM_RetPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes request_node_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_request_node_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list_roleinfo;
        break;
      }

      // repeated .universal_data list_roleinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_roleinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_roleinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list_roleinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2GM_RetPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes request_node_name = 1;
  if (has_request_node_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->request_node_name(), output);
  }

  // repeated .universal_data list_roleinfo = 2;
  for (int i = 0; i < this->list_roleinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list_roleinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2GM_RetPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes request_node_name = 1;
  if (has_request_node_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->request_node_name(), target);
  }

  // repeated .universal_data list_roleinfo = 2;
  for (int i = 0; i < this->list_roleinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->list_roleinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2GM_RetPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes request_node_name = 1;
    if (has_request_node_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->request_node_name());
    }

  }
  // repeated .universal_data list_roleinfo = 2;
  total_size += 1 * this->list_roleinfo_size();
  for (int i = 0; i < this->list_roleinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_roleinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2GM_RetPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2GM_RetPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2GM_RetPlayerInfo*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2GM_RetPlayerInfo::MergeFrom(const S2GM_RetPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_roleinfo_.MergeFrom(from.list_roleinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_node_name()) {
      set_request_node_name(from.request_node_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2GM_RetPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2GM_RetPlayerInfo::CopyFrom(const S2GM_RetPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2GM_RetPlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void S2GM_RetPlayerInfo::Swap(S2GM_RetPlayerInfo* other) {
  if (other != this) {
    std::swap(request_node_name_, other->request_node_name_);
    list_roleinfo_.Swap(&other->list_roleinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2GM_RetPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2GM_RetPlayerInfo_descriptor_;
  metadata.reflection = S2GM_RetPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM2S_AskSceneInfo::kIsOnlineFieldNumber;
#endif  // !_MSC_VER

GM2S_AskSceneInfo::GM2S_AskSceneInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM2S_AskSceneInfo::InitAsDefaultInstance() {
}

GM2S_AskSceneInfo::GM2S_AskSceneInfo(const GM2S_AskSceneInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM2S_AskSceneInfo::SharedCtor() {
  _cached_size_ = 0;
  is_online_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM2S_AskSceneInfo::~GM2S_AskSceneInfo() {
  SharedDtor();
}

void GM2S_AskSceneInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM2S_AskSceneInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM2S_AskSceneInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM2S_AskSceneInfo_descriptor_;
}

const GM2S_AskSceneInfo& GM2S_AskSceneInfo::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Server_2eproto();
  return *default_instance_;
}

GM2S_AskSceneInfo* GM2S_AskSceneInfo::default_instance_ = nullptr;

GM2S_AskSceneInfo* GM2S_AskSceneInfo::New() const {
  return new GM2S_AskSceneInfo;
}

void GM2S_AskSceneInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_online_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM2S_AskSceneInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_online = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_online_)));
          set_has_is_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM2S_AskSceneInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_online = 1;
  if (has_is_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_online(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM2S_AskSceneInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_online = 1;
  if (has_is_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_online(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM2S_AskSceneInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_online = 1;
    if (has_is_online()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM2S_AskSceneInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM2S_AskSceneInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM2S_AskSceneInfo*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM2S_AskSceneInfo::MergeFrom(const GM2S_AskSceneInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_online()) {
      set_is_online(from.is_online());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM2S_AskSceneInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM2S_AskSceneInfo::CopyFrom(const GM2S_AskSceneInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM2S_AskSceneInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM2S_AskSceneInfo::Swap(GM2S_AskSceneInfo* other) {
  if (other != this) {
    std::swap(is_online_, other->is_online_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM2S_AskSceneInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM2S_AskSceneInfo_descriptor_;
  metadata.reflection = GM2S_AskSceneInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2GM_RetSceneInfo::kListClusterNodeInfoFieldNumber;
#endif  // !_MSC_VER

S2GM_RetSceneInfo::S2GM_RetSceneInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2GM_RetSceneInfo::InitAsDefaultInstance() {
}

S2GM_RetSceneInfo::S2GM_RetSceneInfo(const S2GM_RetSceneInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2GM_RetSceneInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2GM_RetSceneInfo::~S2GM_RetSceneInfo() {
  SharedDtor();
}

void S2GM_RetSceneInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2GM_RetSceneInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2GM_RetSceneInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2GM_RetSceneInfo_descriptor_;
}

const S2GM_RetSceneInfo& S2GM_RetSceneInfo::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Server_2eproto();
  return *default_instance_;
}

S2GM_RetSceneInfo* S2GM_RetSceneInfo::default_instance_ = nullptr;

S2GM_RetSceneInfo* S2GM_RetSceneInfo::New() const {
  return new S2GM_RetSceneInfo;
}

void S2GM_RetSceneInfo::Clear() {
  list_cluster_node_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2GM_RetSceneInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sql_ret_cluster_node_info list_cluster_node_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_cluster_node_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_cluster_node_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list_cluster_node_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2GM_RetSceneInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .sql_ret_cluster_node_info list_cluster_node_info = 1;
  for (int i = 0; i < this->list_cluster_node_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list_cluster_node_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2GM_RetSceneInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .sql_ret_cluster_node_info list_cluster_node_info = 1;
  for (int i = 0; i < this->list_cluster_node_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list_cluster_node_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2GM_RetSceneInfo::ByteSize() const {
  int total_size = 0;

  // repeated .sql_ret_cluster_node_info list_cluster_node_info = 1;
  total_size += 1 * this->list_cluster_node_info_size();
  for (int i = 0; i < this->list_cluster_node_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_cluster_node_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2GM_RetSceneInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2GM_RetSceneInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2GM_RetSceneInfo*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2GM_RetSceneInfo::MergeFrom(const S2GM_RetSceneInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_cluster_node_info_.MergeFrom(from.list_cluster_node_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2GM_RetSceneInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2GM_RetSceneInfo::CopyFrom(const S2GM_RetSceneInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2GM_RetSceneInfo::IsInitialized() const {

  for (int i = 0; i < list_cluster_node_info_size(); i++) {
    if (!this->list_cluster_node_info(i).IsInitialized()) return false;
  }
  return true;
}

void S2GM_RetSceneInfo::Swap(S2GM_RetSceneInfo* other) {
  if (other != this) {
    list_cluster_node_info_.Swap(&other->list_cluster_node_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2GM_RetSceneInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2GM_RetSceneInfo_descriptor_;
  metadata.reflection = S2GM_RetSceneInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM2S_KickPlayer::kRoleIndexFieldNumber;
#endif  // !_MSC_VER

GM2S_KickPlayer::GM2S_KickPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM2S_KickPlayer::InitAsDefaultInstance() {
}

GM2S_KickPlayer::GM2S_KickPlayer(const GM2S_KickPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM2S_KickPlayer::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM2S_KickPlayer::~GM2S_KickPlayer() {
  SharedDtor();
}

void GM2S_KickPlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM2S_KickPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM2S_KickPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM2S_KickPlayer_descriptor_;
}

const GM2S_KickPlayer& GM2S_KickPlayer::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Server_2eproto();
  return *default_instance_;
}

GM2S_KickPlayer* GM2S_KickPlayer::default_instance_ = nullptr;

GM2S_KickPlayer* GM2S_KickPlayer::New() const {
  return new GM2S_KickPlayer;
}

void GM2S_KickPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM2S_KickPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM2S_KickPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->role_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM2S_KickPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->role_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM2S_KickPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->role_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM2S_KickPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM2S_KickPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM2S_KickPlayer*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM2S_KickPlayer::MergeFrom(const GM2S_KickPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM2S_KickPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM2S_KickPlayer::CopyFrom(const GM2S_KickPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM2S_KickPlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM2S_KickPlayer::Swap(GM2S_KickPlayer* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM2S_KickPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM2S_KickPlayer_descriptor_;
  metadata.reflection = GM2S_KickPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GM2S_Close::kRoleIndexFieldNumber;
#endif  // !_MSC_VER

GM2S_Close::GM2S_Close()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GM2S_Close::InitAsDefaultInstance() {
}

GM2S_Close::GM2S_Close(const GM2S_Close& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GM2S_Close::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GM2S_Close::~GM2S_Close() {
  SharedDtor();
}

void GM2S_Close::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GM2S_Close::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GM2S_Close::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GM2S_Close_descriptor_;
}

const GM2S_Close& GM2S_Close::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Server_2eproto();
  return *default_instance_;
}

GM2S_Close* GM2S_Close::default_instance_ = nullptr;

GM2S_Close* GM2S_Close::New() const {
  return new GM2S_Close;
}

void GM2S_Close::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GM2S_Close::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GM2S_Close::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->role_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GM2S_Close::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->role_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GM2S_Close::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->role_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GM2S_Close::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GM2S_Close* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GM2S_Close*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GM2S_Close::MergeFrom(const GM2S_Close& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GM2S_Close::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GM2S_Close::CopyFrom(const GM2S_Close& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GM2S_Close::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GM2S_Close::Swap(GM2S_Close* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GM2S_Close::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GM2S_Close_descriptor_;
  metadata.reflection = GM2S_Close_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2S_Ask_CheckAccount::kAccountFieldNumber;
const int S2S_Ask_CheckAccount::kRetUnitindexFieldNumber;
const int S2S_Ask_CheckAccount::kRetIntaddrFieldNumber;
#endif  // !_MSC_VER

S2S_Ask_CheckAccount::S2S_Ask_CheckAccount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2S_Ask_CheckAccount::InitAsDefaultInstance() {
}

S2S_Ask_CheckAccount::S2S_Ask_CheckAccount(const S2S_Ask_CheckAccount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2S_Ask_CheckAccount::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ret_unitindex_ = GOOGLE_LONGLONG(0);
  ret_intaddr_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2S_Ask_CheckAccount::~S2S_Ask_CheckAccount() {
  SharedDtor();
}

void S2S_Ask_CheckAccount::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void S2S_Ask_CheckAccount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2S_Ask_CheckAccount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2S_Ask_CheckAccount_descriptor_;
}

const S2S_Ask_CheckAccount& S2S_Ask_CheckAccount::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Server_2eproto();
  return *default_instance_;
}

S2S_Ask_CheckAccount* S2S_Ask_CheckAccount::default_instance_ = nullptr;

S2S_Ask_CheckAccount* S2S_Ask_CheckAccount::New() const {
  return new S2S_Ask_CheckAccount;
}

void S2S_Ask_CheckAccount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    ret_unitindex_ = GOOGLE_LONGLONG(0);
    ret_intaddr_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2S_Ask_CheckAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret_unitindex;
        break;
      }

      // optional int64 ret_unitindex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret_unitindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ret_unitindex_)));
          set_has_ret_unitindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret_intaddr;
        break;
      }

      // optional int64 ret_intaddr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret_intaddr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ret_intaddr_)));
          set_has_ret_intaddr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2S_Ask_CheckAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->account(), output);
  }

  // optional int64 ret_unitindex = 2;
  if (has_ret_unitindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->ret_unitindex(), output);
  }

  // optional int64 ret_intaddr = 3;
  if (has_ret_intaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->ret_intaddr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2S_Ask_CheckAccount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes account = 1;
  if (has_account()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->account(), target);
  }

  // optional int64 ret_unitindex = 2;
  if (has_ret_unitindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->ret_unitindex(), target);
  }

  // optional int64 ret_intaddr = 3;
  if (has_ret_intaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->ret_intaddr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2S_Ask_CheckAccount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

    // optional int64 ret_unitindex = 2;
    if (has_ret_unitindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ret_unitindex());
    }

    // optional int64 ret_intaddr = 3;
    if (has_ret_intaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ret_intaddr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2S_Ask_CheckAccount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2S_Ask_CheckAccount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2S_Ask_CheckAccount*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2S_Ask_CheckAccount::MergeFrom(const S2S_Ask_CheckAccount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_ret_unitindex()) {
      set_ret_unitindex(from.ret_unitindex());
    }
    if (from.has_ret_intaddr()) {
      set_ret_intaddr(from.ret_intaddr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2S_Ask_CheckAccount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2S_Ask_CheckAccount::CopyFrom(const S2S_Ask_CheckAccount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2S_Ask_CheckAccount::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void S2S_Ask_CheckAccount::Swap(S2S_Ask_CheckAccount* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(ret_unitindex_, other->ret_unitindex_);
    std::swap(ret_intaddr_, other->ret_intaddr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2S_Ask_CheckAccount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2S_Ask_CheckAccount_descriptor_;
  metadata.reflection = S2S_Ask_CheckAccount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2S_Ret_CheckAccount::kRetCodeFieldNumber;
const int S2S_Ret_CheckAccount::kAccountFieldNumber;
const int S2S_Ret_CheckAccount::kAccountKeyFieldNumber;
#endif  // !_MSC_VER

S2S_Ret_CheckAccount::S2S_Ret_CheckAccount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2S_Ret_CheckAccount::InitAsDefaultInstance() {
}

S2S_Ret_CheckAccount::S2S_Ret_CheckAccount(const S2S_Ret_CheckAccount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2S_Ret_CheckAccount::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_key_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2S_Ret_CheckAccount::~S2S_Ret_CheckAccount() {
  SharedDtor();
}

void S2S_Ret_CheckAccount::SharedDtor() {
  if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
    delete ret_code_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void S2S_Ret_CheckAccount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2S_Ret_CheckAccount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2S_Ret_CheckAccount_descriptor_;
}

const S2S_Ret_CheckAccount& S2S_Ret_CheckAccount::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Server_2eproto();
  return *default_instance_;
}

S2S_Ret_CheckAccount* S2S_Ret_CheckAccount::default_instance_ = nullptr;

S2S_Ret_CheckAccount* S2S_Ret_CheckAccount::New() const {
  return new S2S_Ret_CheckAccount;
}

void S2S_Ret_CheckAccount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret_code()) {
      if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
        ret_code_->clear();
      }
    }
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    account_key_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2S_Ret_CheckAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ret_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // required bytes account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_account_key;
        break;
      }

      // required int64 account_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &account_key_)));
          set_has_account_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2S_Ret_CheckAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->ret_code(), output);
  }

  // required bytes account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->account(), output);
  }

  // required int64 account_key = 3;
  if (has_account_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->account_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2S_Ret_CheckAccount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes ret_code = 1;
  if (has_ret_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ret_code(), target);
  }

  // required bytes account = 2;
  if (has_account()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->account(), target);
  }

  // required int64 account_key = 3;
  if (has_account_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->account_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2S_Ret_CheckAccount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ret_code());
    }

    // required bytes account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

    // required int64 account_key = 3;
    if (has_account_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->account_key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2S_Ret_CheckAccount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2S_Ret_CheckAccount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2S_Ret_CheckAccount*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2S_Ret_CheckAccount::MergeFrom(const S2S_Ret_CheckAccount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_account_key()) {
      set_account_key(from.account_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2S_Ret_CheckAccount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2S_Ret_CheckAccount::CopyFrom(const S2S_Ret_CheckAccount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2S_Ret_CheckAccount::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2S_Ret_CheckAccount::Swap(S2S_Ret_CheckAccount* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(account_, other->account_);
    std::swap(account_key_, other->account_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2S_Ret_CheckAccount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2S_Ret_CheckAccount_descriptor_;
  metadata.reflection = S2S_Ret_CheckAccount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2S_Ask_Login::kAccountFieldNumber;
const int S2S_Ask_Login::kPasswordFieldNumber;
const int S2S_Ask_Login::kSidFieldNumber;
const int S2S_Ask_Login::kIpFieldNumber;
const int S2S_Ask_Login::kRetUnitindexFieldNumber;
const int S2S_Ask_Login::kRetIntaddrFieldNumber;
const int S2S_Ask_Login::kAccountKeyFieldNumber;
#endif  // !_MSC_VER

S2S_Ask_Login::S2S_Ask_Login()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2S_Ask_Login::InitAsDefaultInstance() {
}

S2S_Ask_Login::S2S_Ask_Login(const S2S_Ask_Login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2S_Ask_Login::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ret_unitindex_ = GOOGLE_LONGLONG(0);
  ret_intaddr_ = GOOGLE_LONGLONG(0);
  account_key_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2S_Ask_Login::~S2S_Ask_Login() {
  SharedDtor();
}

void S2S_Ask_Login::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (sid_ != &::google::protobuf::internal::kEmptyString) {
    delete sid_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void S2S_Ask_Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2S_Ask_Login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2S_Ask_Login_descriptor_;
}

const S2S_Ask_Login& S2S_Ask_Login::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Server_2eproto();
  return *default_instance_;
}

S2S_Ask_Login* S2S_Ask_Login::default_instance_ = nullptr;

S2S_Ask_Login* S2S_Ask_Login::New() const {
  return new S2S_Ask_Login;
}

void S2S_Ask_Login::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_sid()) {
      if (sid_ != &::google::protobuf::internal::kEmptyString) {
        sid_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    ret_unitindex_ = GOOGLE_LONGLONG(0);
    ret_intaddr_ = GOOGLE_LONGLONG(0);
    account_key_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2S_Ask_Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // required bytes password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_password()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sid;
        break;
      }

      // required bytes sid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ip;
        break;
      }

      // optional bytes ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ret_unitindex;
        break;
      }

      // optional int64 ret_unitindex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret_unitindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ret_unitindex_)));
          set_has_ret_unitindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ret_intaddr;
        break;
      }

      // optional int64 ret_intaddr = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret_intaddr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ret_intaddr_)));
          set_has_ret_intaddr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_account_key;
        break;
      }

      // optional int64 account_key = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &account_key_)));
          set_has_account_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2S_Ask_Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->account(), output);
  }

  // required bytes password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->password(), output);
  }

  // required bytes sid = 3;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->sid(), output);
  }

  // optional bytes ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->ip(), output);
  }

  // optional int64 ret_unitindex = 5;
  if (has_ret_unitindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->ret_unitindex(), output);
  }

  // optional int64 ret_intaddr = 6;
  if (has_ret_intaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->ret_intaddr(), output);
  }

  // optional int64 account_key = 7;
  if (has_account_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->account_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2S_Ask_Login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes account = 1;
  if (has_account()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->account(), target);
  }

  // required bytes password = 2;
  if (has_password()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->password(), target);
  }

  // required bytes sid = 3;
  if (has_sid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->sid(), target);
  }

  // optional bytes ip = 4;
  if (has_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->ip(), target);
  }

  // optional int64 ret_unitindex = 5;
  if (has_ret_unitindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->ret_unitindex(), target);
  }

  // optional int64 ret_intaddr = 6;
  if (has_ret_intaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->ret_intaddr(), target);
  }

  // optional int64 account_key = 7;
  if (has_account_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->account_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2S_Ask_Login::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

    // required bytes password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->password());
    }

    // required bytes sid = 3;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sid());
    }

    // optional bytes ip = 4;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }

    // optional int64 ret_unitindex = 5;
    if (has_ret_unitindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ret_unitindex());
    }

    // optional int64 ret_intaddr = 6;
    if (has_ret_intaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ret_intaddr());
    }

    // optional int64 account_key = 7;
    if (has_account_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->account_key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2S_Ask_Login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2S_Ask_Login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2S_Ask_Login*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2S_Ask_Login::MergeFrom(const S2S_Ask_Login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_ret_unitindex()) {
      set_ret_unitindex(from.ret_unitindex());
    }
    if (from.has_ret_intaddr()) {
      set_ret_intaddr(from.ret_intaddr());
    }
    if (from.has_account_key()) {
      set_account_key(from.account_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2S_Ask_Login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2S_Ask_Login::CopyFrom(const S2S_Ask_Login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2S_Ask_Login::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2S_Ask_Login::Swap(S2S_Ask_Login* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(password_, other->password_);
    std::swap(sid_, other->sid_);
    std::swap(ip_, other->ip_);
    std::swap(ret_unitindex_, other->ret_unitindex_);
    std::swap(ret_intaddr_, other->ret_intaddr_);
    std::swap(account_key_, other->account_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2S_Ask_Login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2S_Ask_Login_descriptor_;
  metadata.reflection = S2S_Ask_Login_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2S_Ret_Login::kRetCodeFieldNumber;
const int S2S_Ret_Login::kReLoginFieldNumber;
const int S2S_Ret_Login::kAccountFieldNumber;
const int S2S_Ret_Login::kAccountKeyFieldNumber;
#endif  // !_MSC_VER

S2S_Ret_Login::S2S_Ret_Login()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2S_Ret_Login::InitAsDefaultInstance() {
}

S2S_Ret_Login::S2S_Ret_Login(const S2S_Ret_Login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2S_Ret_Login::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  re_login_ = false;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_key_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2S_Ret_Login::~S2S_Ret_Login() {
  SharedDtor();
}

void S2S_Ret_Login::SharedDtor() {
  if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
    delete ret_code_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void S2S_Ret_Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2S_Ret_Login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2S_Ret_Login_descriptor_;
}

const S2S_Ret_Login& S2S_Ret_Login::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Server_2eproto();
  return *default_instance_;
}

S2S_Ret_Login* S2S_Ret_Login::default_instance_ = nullptr;

S2S_Ret_Login* S2S_Ret_Login::New() const {
  return new S2S_Ret_Login;
}

void S2S_Ret_Login::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret_code()) {
      if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
        ret_code_->clear();
      }
    }
    re_login_ = false;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    account_key_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2S_Ret_Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ret_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_re_login;
        break;
      }

      // required bool re_login = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_re_login:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &re_login_)));
          set_has_re_login();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_account;
        break;
      }

      // required bytes account = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_account_key;
        break;
      }

      // optional int64 account_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &account_key_)));
          set_has_account_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2S_Ret_Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->ret_code(), output);
  }

  // required bool re_login = 2;
  if (has_re_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->re_login(), output);
  }

  // required bytes account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->account(), output);
  }

  // optional int64 account_key = 4;
  if (has_account_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->account_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2S_Ret_Login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes ret_code = 1;
  if (has_ret_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ret_code(), target);
  }

  // required bool re_login = 2;
  if (has_re_login()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->re_login(), target);
  }

  // required bytes account = 3;
  if (has_account()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->account(), target);
  }

  // optional int64 account_key = 4;
  if (has_account_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->account_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2S_Ret_Login::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ret_code());
    }

    // required bool re_login = 2;
    if (has_re_login()) {
      total_size += 1 + 1;
    }

    // required bytes account = 3;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

    // optional int64 account_key = 4;
    if (has_account_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->account_key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2S_Ret_Login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2S_Ret_Login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2S_Ret_Login*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2S_Ret_Login::MergeFrom(const S2S_Ret_Login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_re_login()) {
      set_re_login(from.re_login());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_account_key()) {
      set_account_key(from.account_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2S_Ret_Login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2S_Ret_Login::CopyFrom(const S2S_Ret_Login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2S_Ret_Login::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2S_Ret_Login::Swap(S2S_Ret_Login* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(re_login_, other->re_login_);
    std::swap(account_, other->account_);
    std::swap(account_key_, other->account_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2S_Ret_Login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2S_Ret_Login_descriptor_;
  metadata.reflection = S2S_Ret_Login_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
