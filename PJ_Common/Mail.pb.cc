// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Mail.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Mail.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* mail_title_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_title_reflection_ = nullptr;
const ::google::protobuf::Descriptor* mail_full_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_full_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2S_Add_New_Mail_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2S_Add_New_Mail_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Mail_Have_New_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Mail_Have_New_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_Mail_Title_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Mail_Title_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Mail_Title_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Mail_Title_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_Mail_Full_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Mail_Full_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Mail_Full_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Mail_Full_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_Mail_Read_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Mail_Read_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Mail_Read_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Mail_Read_reflection_ = nullptr;

}  // namespace


void protobuf_AssignDesc_Mail_2eproto() {
  protobuf_AddDesc_Mail_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Mail.proto");
  GOOGLE_CHECK(file != nullptr);
  mail_title_descriptor_ = file->message_type(0);
  static const int mail_title_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_title, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_title, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_title, time_),
  };
  mail_title_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_title_descriptor_,
      mail_title::default_instance_,
      mail_title_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_title, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_title, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_title));
  mail_full_descriptor_ = file->message_type(1);
  static const int mail_full_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_full, src_role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_full, tar_role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_full, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_full, mail_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_full, list_mail_items_),
  };
  mail_full_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_full_descriptor_,
      mail_full::default_instance_,
      mail_full_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_full, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_full, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_full));
  S2S_Add_New_Mail_descriptor_ = file->message_type(2);
  static const int S2S_Add_New_Mail_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Add_New_Mail, src_role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Add_New_Mail, tar_role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Add_New_Mail, mail_),
  };
  S2S_Add_New_Mail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2S_Add_New_Mail_descriptor_,
      S2S_Add_New_Mail::default_instance_,
      S2S_Add_New_Mail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Add_New_Mail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2S_Add_New_Mail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2S_Add_New_Mail));
  S2C_Mail_Have_New_descriptor_ = file->message_type(3);
  static const int S2C_Mail_Have_New_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Mail_Have_New, role_index_),
  };
  S2C_Mail_Have_New_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Mail_Have_New_descriptor_,
      S2C_Mail_Have_New::default_instance_,
      S2C_Mail_Have_New_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Mail_Have_New, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Mail_Have_New, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Mail_Have_New));
  C2S_Mail_Title_descriptor_ = file->message_type(4);
  static const int C2S_Mail_Title_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Mail_Title, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Mail_Title, int_addr_),
  };
  C2S_Mail_Title_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Mail_Title_descriptor_,
      C2S_Mail_Title::default_instance_,
      C2S_Mail_Title_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Mail_Title, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Mail_Title, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Mail_Title));
  S2C_Mail_Title_descriptor_ = file->message_type(5);
  static const int S2C_Mail_Title_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Mail_Title, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Mail_Title, list_titles_),
  };
  S2C_Mail_Title_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Mail_Title_descriptor_,
      S2C_Mail_Title::default_instance_,
      S2C_Mail_Title_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Mail_Title, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Mail_Title, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Mail_Title));
  C2S_Mail_Full_descriptor_ = file->message_type(6);
  static const int C2S_Mail_Full_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Mail_Full, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Mail_Full, mail_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Mail_Full, int_addr_),
  };
  C2S_Mail_Full_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Mail_Full_descriptor_,
      C2S_Mail_Full::default_instance_,
      C2S_Mail_Full_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Mail_Full, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Mail_Full, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Mail_Full));
  S2C_Mail_Full_descriptor_ = file->message_type(7);
  static const int S2C_Mail_Full_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Mail_Full, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Mail_Full, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Mail_Full, mail_),
  };
  S2C_Mail_Full_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Mail_Full_descriptor_,
      S2C_Mail_Full::default_instance_,
      S2C_Mail_Full_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Mail_Full, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Mail_Full, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Mail_Full));
  C2S_Mail_Read_descriptor_ = file->message_type(8);
  static const int C2S_Mail_Read_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Mail_Read, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Mail_Read, mail_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Mail_Read, int_addr_),
  };
  C2S_Mail_Read_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Mail_Read_descriptor_,
      C2S_Mail_Read::default_instance_,
      C2S_Mail_Read_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Mail_Read, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Mail_Read, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Mail_Read));
  S2C_Mail_Read_descriptor_ = file->message_type(9);
  static const int S2C_Mail_Read_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Mail_Read, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Mail_Read, ret_code_),
  };
  S2C_Mail_Read_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Mail_Read_descriptor_,
      S2C_Mail_Read::default_instance_,
      S2C_Mail_Read_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Mail_Read, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Mail_Read, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Mail_Read));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Mail_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_title_descriptor_, &mail_title::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_full_descriptor_, &mail_full::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2S_Add_New_Mail_descriptor_, &S2S_Add_New_Mail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Mail_Have_New_descriptor_, &S2C_Mail_Have_New::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Mail_Title_descriptor_, &C2S_Mail_Title::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Mail_Title_descriptor_, &S2C_Mail_Title::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Mail_Full_descriptor_, &C2S_Mail_Full::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Mail_Full_descriptor_, &S2C_Mail_Full::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Mail_Read_descriptor_, &C2S_Mail_Read::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Mail_Read_descriptor_, &S2C_Mail_Read::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Mail_2eproto() {
  delete mail_title::default_instance_;
  delete mail_title_reflection_;
  delete mail_full::default_instance_;
  delete mail_full_reflection_;
  delete S2S_Add_New_Mail::default_instance_;
  delete S2S_Add_New_Mail_reflection_;
  delete S2C_Mail_Have_New::default_instance_;
  delete S2C_Mail_Have_New_reflection_;
  delete C2S_Mail_Title::default_instance_;
  delete C2S_Mail_Title_reflection_;
  delete S2C_Mail_Title::default_instance_;
  delete S2C_Mail_Title_reflection_;
  delete C2S_Mail_Full::default_instance_;
  delete C2S_Mail_Full_reflection_;
  delete S2C_Mail_Full::default_instance_;
  delete S2C_Mail_Full_reflection_;
  delete C2S_Mail_Read::default_instance_;
  delete C2S_Mail_Read_reflection_;
  delete S2C_Mail_Read::default_instance_;
  delete S2C_Mail_Read_reflection_;
}

void protobuf_AddDesc_Mail_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_EnumDef_2eproto();
  ::protobuf_AddDesc_Common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nMail.proto\032\rEnumDef.proto\032\014Common.prot"
    "o\"8\n\nmail_title\022\r\n\005index\030\001 \002(\022\022\r\n\005title\030"
    "\002 \002(\014\022\014\n\004time\030\003 \002(\022\"\221\001\n\tmail_full\022\026\n\016src"
    "_role_index\030\001 \002(\022\022\026\n\016tar_role_index\030\002 \002("
    "\022\022\032\n\005title\030\003 \002(\0132\013.mail_title\022\021\n\tmail_te"
    "xt\030\004 \002(\014\022%\n\017list_mail_items\030\005 \003(\0132\014.item"
    "_config\"\\\n\020S2S_Add_New_Mail\022\026\n\016src_role_"
    "index\030\001 \002(\022\022\026\n\016tar_role_index\030\002 \002(\022\022\030\n\004m"
    "ail\030\003 \002(\0132\n.mail_full\"\'\n\021S2C_Mail_Have_N"
    "ew\022\022\n\nrole_index\030\001 \002(\022\"6\n\016C2S_Mail_Title"
    "\022\022\n\nrole_index\030\001 \002(\022\022\020\n\010int_addr\030\002 \001(\022\"F"
    "\n\016S2C_Mail_Title\022\022\n\nrole_index\030\001 \002(\022\022 \n\013"
    "list_titles\030\002 \003(\0132\013.mail_title\"I\n\rC2S_Ma"
    "il_Full\022\022\n\nrole_index\030\001 \002(\022\022\022\n\nmail_inde"
    "x\030\002 \002(\022\022\020\n\010int_addr\030\003 \001(\022\"O\n\rS2C_Mail_Fu"
    "ll\022\022\n\nrole_index\030\001 \002(\022\022\020\n\010ret_code\030\002 \002(\014"
    "\022\030\n\004mail\030\003 \001(\0132\n.mail_full\"I\n\rC2S_Mail_R"
    "ead\022\022\n\nrole_index\030\001 \002(\022\022\022\n\nmail_index\030\002 "
    "\002(\022\022\020\n\010int_addr\030\003 \001(\022\"5\n\rS2C_Mail_Read\022\022"
    "\n\nrole_index\030\001 \002(\022\022\020\n\010ret_code\030\002 \002(\014", 796);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Mail.proto", &protobuf_RegisterTypes);
  mail_title::default_instance_ = new mail_title();
  mail_full::default_instance_ = new mail_full();
  S2S_Add_New_Mail::default_instance_ = new S2S_Add_New_Mail();
  S2C_Mail_Have_New::default_instance_ = new S2C_Mail_Have_New();
  C2S_Mail_Title::default_instance_ = new C2S_Mail_Title();
  S2C_Mail_Title::default_instance_ = new S2C_Mail_Title();
  C2S_Mail_Full::default_instance_ = new C2S_Mail_Full();
  S2C_Mail_Full::default_instance_ = new S2C_Mail_Full();
  C2S_Mail_Read::default_instance_ = new C2S_Mail_Read();
  S2C_Mail_Read::default_instance_ = new S2C_Mail_Read();
  mail_title::default_instance_->InitAsDefaultInstance();
  mail_full::default_instance_->InitAsDefaultInstance();
  S2S_Add_New_Mail::default_instance_->InitAsDefaultInstance();
  S2C_Mail_Have_New::default_instance_->InitAsDefaultInstance();
  C2S_Mail_Title::default_instance_->InitAsDefaultInstance();
  S2C_Mail_Title::default_instance_->InitAsDefaultInstance();
  C2S_Mail_Full::default_instance_->InitAsDefaultInstance();
  S2C_Mail_Full::default_instance_->InitAsDefaultInstance();
  C2S_Mail_Read::default_instance_->InitAsDefaultInstance();
  S2C_Mail_Read::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Mail_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Mail_2eproto {
  StaticDescriptorInitializer_Mail_2eproto() {
    protobuf_AddDesc_Mail_2eproto();
  }
} static_descriptor_initializer_Mail_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int mail_title::kIndexFieldNumber;
const int mail_title::kTitleFieldNumber;
const int mail_title::kTimeFieldNumber;
#endif  // !_MSC_VER

mail_title::mail_title()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_title::InitAsDefaultInstance() {
}

mail_title::mail_title(const mail_title& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_title::SharedCtor() {
  _cached_size_ = 0;
  index_ = GOOGLE_LONGLONG(0);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_title::~mail_title() {
  SharedDtor();
}

void mail_title::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (this != default_instance_) {
  }
}

void mail_title::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_title::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_title_descriptor_;
}

const mail_title& mail_title::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Mail_2eproto();
  return *default_instance_;
}

mail_title* mail_title::default_instance_ = nullptr;

mail_title* mail_title::New() const {
  return new mail_title;
}

void mail_title::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = GOOGLE_LONGLONG(0);
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_title::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // required bytes title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_title()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // required sint64 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_title::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->index(), output);
  }

  // required bytes title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->title(), output);
  }

  // required sint64 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_title::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->index(), target);
  }

  // required bytes title = 2;
  if (has_title()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->title(), target);
  }

  // required sint64 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_title::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->index());
    }

    // required bytes title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->title());
    }

    // required sint64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_title::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_title* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_title*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_title::MergeFrom(const mail_title& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_title::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_title::CopyFrom(const mail_title& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_title::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void mail_title::Swap(mail_title* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(title_, other->title_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_title::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_title_descriptor_;
  metadata.reflection = mail_title_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_full::kSrcRoleIndexFieldNumber;
const int mail_full::kTarRoleIndexFieldNumber;
const int mail_full::kTitleFieldNumber;
const int mail_full::kMailTextFieldNumber;
const int mail_full::kListMailItemsFieldNumber;
#endif  // !_MSC_VER

mail_full::mail_full()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_full::InitAsDefaultInstance() {
  title_ = const_cast< ::mail_title*>(&::mail_title::default_instance());
}

mail_full::mail_full(const mail_full& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_full::SharedCtor() {
  _cached_size_ = 0;
  src_role_index_ = GOOGLE_LONGLONG(0);
  tar_role_index_ = GOOGLE_LONGLONG(0);
  title_ = nullptr;
  mail_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_full::~mail_full() {
  SharedDtor();
}

void mail_full::SharedDtor() {
  if (mail_text_ != &::google::protobuf::internal::kEmptyString) {
    delete mail_text_;
  }
  if (this != default_instance_) {
    delete title_;
  }
}

void mail_full::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_full::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_full_descriptor_;
}

const mail_full& mail_full::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Mail_2eproto();
  return *default_instance_;
}

mail_full* mail_full::default_instance_ = nullptr;

mail_full* mail_full::New() const {
  return new mail_full;
}

void mail_full::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    src_role_index_ = GOOGLE_LONGLONG(0);
    tar_role_index_ = GOOGLE_LONGLONG(0);
    if (has_title()) {
      if (title_ != nullptr) title_->::mail_title::Clear();
    }
    if (has_mail_text()) {
      if (mail_text_ != &::google::protobuf::internal::kEmptyString) {
        mail_text_->clear();
      }
    }
  }
  list_mail_items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_full::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 src_role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &src_role_index_)));
          set_has_src_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tar_role_index;
        break;
      }

      // required sint64 tar_role_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tar_role_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &tar_role_index_)));
          set_has_tar_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_title;
        break;
      }

      // required .mail_title title = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_title()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_mail_text;
        break;
      }

      // required bytes mail_text = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mail_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_list_mail_items;
        break;
      }

      // repeated .item_config list_mail_items = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_mail_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_mail_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_list_mail_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_full::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 src_role_index = 1;
  if (has_src_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->src_role_index(), output);
  }

  // required sint64 tar_role_index = 2;
  if (has_tar_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->tar_role_index(), output);
  }

  // required .mail_title title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->title(), output);
  }

  // required bytes mail_text = 4;
  if (has_mail_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->mail_text(), output);
  }

  // repeated .item_config list_mail_items = 5;
  for (int i = 0; i < this->list_mail_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->list_mail_items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_full::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 src_role_index = 1;
  if (has_src_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->src_role_index(), target);
  }

  // required sint64 tar_role_index = 2;
  if (has_tar_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->tar_role_index(), target);
  }

  // required .mail_title title = 3;
  if (has_title()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->title(), target);
  }

  // required bytes mail_text = 4;
  if (has_mail_text()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->mail_text(), target);
  }

  // repeated .item_config list_mail_items = 5;
  for (int i = 0; i < this->list_mail_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->list_mail_items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_full::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 src_role_index = 1;
    if (has_src_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->src_role_index());
    }

    // required sint64 tar_role_index = 2;
    if (has_tar_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->tar_role_index());
    }

    // required .mail_title title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->title());
    }

    // required bytes mail_text = 4;
    if (has_mail_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mail_text());
    }

  }
  // repeated .item_config list_mail_items = 5;
  total_size += 1 * this->list_mail_items_size();
  for (int i = 0; i < this->list_mail_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_mail_items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_full::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_full* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_full*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_full::MergeFrom(const mail_full& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_mail_items_.MergeFrom(from.list_mail_items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_role_index()) {
      set_src_role_index(from.src_role_index());
    }
    if (from.has_tar_role_index()) {
      set_tar_role_index(from.tar_role_index());
    }
    if (from.has_title()) {
      mutable_title()->::mail_title::MergeFrom(from.title());
    }
    if (from.has_mail_text()) {
      set_mail_text(from.mail_text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_full::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_full::CopyFrom(const mail_full& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_full::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_title()) {
    if (!this->title().IsInitialized()) return false;
  }
  for (int i = 0; i < list_mail_items_size(); i++) {
    if (!this->list_mail_items(i).IsInitialized()) return false;
  }
  return true;
}

void mail_full::Swap(mail_full* other) {
  if (other != this) {
    std::swap(src_role_index_, other->src_role_index_);
    std::swap(tar_role_index_, other->tar_role_index_);
    std::swap(title_, other->title_);
    std::swap(mail_text_, other->mail_text_);
    list_mail_items_.Swap(&other->list_mail_items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_full::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_full_descriptor_;
  metadata.reflection = mail_full_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2S_Add_New_Mail::kSrcRoleIndexFieldNumber;
const int S2S_Add_New_Mail::kTarRoleIndexFieldNumber;
const int S2S_Add_New_Mail::kMailFieldNumber;
#endif  // !_MSC_VER

S2S_Add_New_Mail::S2S_Add_New_Mail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2S_Add_New_Mail::InitAsDefaultInstance() {
  mail_ = const_cast< ::mail_full*>(&::mail_full::default_instance());
}

S2S_Add_New_Mail::S2S_Add_New_Mail(const S2S_Add_New_Mail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2S_Add_New_Mail::SharedCtor() {
  _cached_size_ = 0;
  src_role_index_ = GOOGLE_LONGLONG(0);
  tar_role_index_ = GOOGLE_LONGLONG(0);
  mail_ = nullptr;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2S_Add_New_Mail::~S2S_Add_New_Mail() {
  SharedDtor();
}

void S2S_Add_New_Mail::SharedDtor() {
  if (this != default_instance_) {
    delete mail_;
  }
}

void S2S_Add_New_Mail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2S_Add_New_Mail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2S_Add_New_Mail_descriptor_;
}

const S2S_Add_New_Mail& S2S_Add_New_Mail::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Mail_2eproto();
  return *default_instance_;
}

S2S_Add_New_Mail* S2S_Add_New_Mail::default_instance_ = nullptr;

S2S_Add_New_Mail* S2S_Add_New_Mail::New() const {
  return new S2S_Add_New_Mail;
}

void S2S_Add_New_Mail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    src_role_index_ = GOOGLE_LONGLONG(0);
    tar_role_index_ = GOOGLE_LONGLONG(0);
    if (has_mail()) {
      if (mail_ != nullptr) mail_->::mail_full::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2S_Add_New_Mail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 src_role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &src_role_index_)));
          set_has_src_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tar_role_index;
        break;
      }

      // required sint64 tar_role_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tar_role_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &tar_role_index_)));
          set_has_tar_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mail;
        break;
      }

      // required .mail_full mail = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2S_Add_New_Mail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 src_role_index = 1;
  if (has_src_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->src_role_index(), output);
  }

  // required sint64 tar_role_index = 2;
  if (has_tar_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->tar_role_index(), output);
  }

  // required .mail_full mail = 3;
  if (has_mail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2S_Add_New_Mail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 src_role_index = 1;
  if (has_src_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->src_role_index(), target);
  }

  // required sint64 tar_role_index = 2;
  if (has_tar_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->tar_role_index(), target);
  }

  // required .mail_full mail = 3;
  if (has_mail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->mail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2S_Add_New_Mail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 src_role_index = 1;
    if (has_src_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->src_role_index());
    }

    // required sint64 tar_role_index = 2;
    if (has_tar_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->tar_role_index());
    }

    // required .mail_full mail = 3;
    if (has_mail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2S_Add_New_Mail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2S_Add_New_Mail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2S_Add_New_Mail*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2S_Add_New_Mail::MergeFrom(const S2S_Add_New_Mail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_role_index()) {
      set_src_role_index(from.src_role_index());
    }
    if (from.has_tar_role_index()) {
      set_tar_role_index(from.tar_role_index());
    }
    if (from.has_mail()) {
      mutable_mail()->::mail_full::MergeFrom(from.mail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2S_Add_New_Mail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2S_Add_New_Mail::CopyFrom(const S2S_Add_New_Mail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2S_Add_New_Mail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_mail()) {
    if (!this->mail().IsInitialized()) return false;
  }
  return true;
}

void S2S_Add_New_Mail::Swap(S2S_Add_New_Mail* other) {
  if (other != this) {
    std::swap(src_role_index_, other->src_role_index_);
    std::swap(tar_role_index_, other->tar_role_index_);
    std::swap(mail_, other->mail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2S_Add_New_Mail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2S_Add_New_Mail_descriptor_;
  metadata.reflection = S2S_Add_New_Mail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Mail_Have_New::kRoleIndexFieldNumber;
#endif  // !_MSC_VER

S2C_Mail_Have_New::S2C_Mail_Have_New()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Mail_Have_New::InitAsDefaultInstance() {
}

S2C_Mail_Have_New::S2C_Mail_Have_New(const S2C_Mail_Have_New& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Mail_Have_New::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Mail_Have_New::~S2C_Mail_Have_New() {
  SharedDtor();
}

void S2C_Mail_Have_New::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2C_Mail_Have_New::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Mail_Have_New::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Mail_Have_New_descriptor_;
}

const S2C_Mail_Have_New& S2C_Mail_Have_New::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Mail_2eproto();
  return *default_instance_;
}

S2C_Mail_Have_New* S2C_Mail_Have_New::default_instance_ = nullptr;

S2C_Mail_Have_New* S2C_Mail_Have_New::New() const {
  return new S2C_Mail_Have_New;
}

void S2C_Mail_Have_New::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Mail_Have_New::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Mail_Have_New::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->role_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Mail_Have_New::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->role_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Mail_Have_New::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->role_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Mail_Have_New::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Mail_Have_New* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Mail_Have_New*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Mail_Have_New::MergeFrom(const S2C_Mail_Have_New& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Mail_Have_New::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Mail_Have_New::CopyFrom(const S2C_Mail_Have_New& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Mail_Have_New::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void S2C_Mail_Have_New::Swap(S2C_Mail_Have_New* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Mail_Have_New::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Mail_Have_New_descriptor_;
  metadata.reflection = S2C_Mail_Have_New_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Mail_Title::kRoleIndexFieldNumber;
const int C2S_Mail_Title::kIntAddrFieldNumber;
#endif  // !_MSC_VER

C2S_Mail_Title::C2S_Mail_Title()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Mail_Title::InitAsDefaultInstance() {
}

C2S_Mail_Title::C2S_Mail_Title(const C2S_Mail_Title& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Mail_Title::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  int_addr_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Mail_Title::~C2S_Mail_Title() {
  SharedDtor();
}

void C2S_Mail_Title::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_Mail_Title::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Mail_Title::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Mail_Title_descriptor_;
}

const C2S_Mail_Title& C2S_Mail_Title::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Mail_2eproto();
  return *default_instance_;
}

C2S_Mail_Title* C2S_Mail_Title::default_instance_ = nullptr;

C2S_Mail_Title* C2S_Mail_Title::New() const {
  return new C2S_Mail_Title;
}

void C2S_Mail_Title::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    int_addr_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Mail_Title::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_int_addr;
        break;
      }

      // optional sint64 int_addr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int_addr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &int_addr_)));
          set_has_int_addr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Mail_Title::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->role_index(), output);
  }

  // optional sint64 int_addr = 2;
  if (has_int_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->int_addr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Mail_Title::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->role_index(), target);
  }

  // optional sint64 int_addr = 2;
  if (has_int_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->int_addr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Mail_Title::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->role_index());
    }

    // optional sint64 int_addr = 2;
    if (has_int_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->int_addr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Mail_Title::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Mail_Title* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Mail_Title*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Mail_Title::MergeFrom(const C2S_Mail_Title& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_int_addr()) {
      set_int_addr(from.int_addr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Mail_Title::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Mail_Title::CopyFrom(const C2S_Mail_Title& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Mail_Title::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2S_Mail_Title::Swap(C2S_Mail_Title* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(int_addr_, other->int_addr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Mail_Title::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Mail_Title_descriptor_;
  metadata.reflection = C2S_Mail_Title_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Mail_Title::kRoleIndexFieldNumber;
const int S2C_Mail_Title::kListTitlesFieldNumber;
#endif  // !_MSC_VER

S2C_Mail_Title::S2C_Mail_Title()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Mail_Title::InitAsDefaultInstance() {
}

S2C_Mail_Title::S2C_Mail_Title(const S2C_Mail_Title& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Mail_Title::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Mail_Title::~S2C_Mail_Title() {
  SharedDtor();
}

void S2C_Mail_Title::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2C_Mail_Title::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Mail_Title::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Mail_Title_descriptor_;
}

const S2C_Mail_Title& S2C_Mail_Title::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Mail_2eproto();
  return *default_instance_;
}

S2C_Mail_Title* S2C_Mail_Title::default_instance_ = nullptr;

S2C_Mail_Title* S2C_Mail_Title::New() const {
  return new S2C_Mail_Title;
}

void S2C_Mail_Title::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
  }
  list_titles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Mail_Title::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list_titles;
        break;
      }

      // repeated .mail_title list_titles = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_titles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_titles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list_titles;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Mail_Title::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->role_index(), output);
  }

  // repeated .mail_title list_titles = 2;
  for (int i = 0; i < this->list_titles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list_titles(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Mail_Title::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->role_index(), target);
  }

  // repeated .mail_title list_titles = 2;
  for (int i = 0; i < this->list_titles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->list_titles(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Mail_Title::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->role_index());
    }

  }
  // repeated .mail_title list_titles = 2;
  total_size += 1 * this->list_titles_size();
  for (int i = 0; i < this->list_titles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_titles(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Mail_Title::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Mail_Title* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Mail_Title*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Mail_Title::MergeFrom(const S2C_Mail_Title& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_titles_.MergeFrom(from.list_titles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Mail_Title::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Mail_Title::CopyFrom(const S2C_Mail_Title& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Mail_Title::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < list_titles_size(); i++) {
    if (!this->list_titles(i).IsInitialized()) return false;
  }
  return true;
}

void S2C_Mail_Title::Swap(S2C_Mail_Title* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    list_titles_.Swap(&other->list_titles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Mail_Title::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Mail_Title_descriptor_;
  metadata.reflection = S2C_Mail_Title_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Mail_Full::kRoleIndexFieldNumber;
const int C2S_Mail_Full::kMailIndexFieldNumber;
const int C2S_Mail_Full::kIntAddrFieldNumber;
#endif  // !_MSC_VER

C2S_Mail_Full::C2S_Mail_Full()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Mail_Full::InitAsDefaultInstance() {
}

C2S_Mail_Full::C2S_Mail_Full(const C2S_Mail_Full& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Mail_Full::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  mail_index_ = GOOGLE_LONGLONG(0);
  int_addr_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Mail_Full::~C2S_Mail_Full() {
  SharedDtor();
}

void C2S_Mail_Full::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_Mail_Full::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Mail_Full::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Mail_Full_descriptor_;
}

const C2S_Mail_Full& C2S_Mail_Full::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Mail_2eproto();
  return *default_instance_;
}

C2S_Mail_Full* C2S_Mail_Full::default_instance_ = nullptr;

C2S_Mail_Full* C2S_Mail_Full::New() const {
  return new C2S_Mail_Full;
}

void C2S_Mail_Full::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    mail_index_ = GOOGLE_LONGLONG(0);
    int_addr_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Mail_Full::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_index;
        break;
      }

      // required sint64 mail_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &mail_index_)));
          set_has_mail_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_int_addr;
        break;
      }

      // optional sint64 int_addr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int_addr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &int_addr_)));
          set_has_int_addr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Mail_Full::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->role_index(), output);
  }

  // required sint64 mail_index = 2;
  if (has_mail_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->mail_index(), output);
  }

  // optional sint64 int_addr = 3;
  if (has_int_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->int_addr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Mail_Full::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->role_index(), target);
  }

  // required sint64 mail_index = 2;
  if (has_mail_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->mail_index(), target);
  }

  // optional sint64 int_addr = 3;
  if (has_int_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->int_addr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Mail_Full::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->role_index());
    }

    // required sint64 mail_index = 2;
    if (has_mail_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->mail_index());
    }

    // optional sint64 int_addr = 3;
    if (has_int_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->int_addr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Mail_Full::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Mail_Full* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Mail_Full*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Mail_Full::MergeFrom(const C2S_Mail_Full& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_mail_index()) {
      set_mail_index(from.mail_index());
    }
    if (from.has_int_addr()) {
      set_int_addr(from.int_addr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Mail_Full::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Mail_Full::CopyFrom(const C2S_Mail_Full& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Mail_Full::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C2S_Mail_Full::Swap(C2S_Mail_Full* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(mail_index_, other->mail_index_);
    std::swap(int_addr_, other->int_addr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Mail_Full::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Mail_Full_descriptor_;
  metadata.reflection = C2S_Mail_Full_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Mail_Full::kRoleIndexFieldNumber;
const int S2C_Mail_Full::kRetCodeFieldNumber;
const int S2C_Mail_Full::kMailFieldNumber;
#endif  // !_MSC_VER

S2C_Mail_Full::S2C_Mail_Full()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Mail_Full::InitAsDefaultInstance() {
  mail_ = const_cast< ::mail_full*>(&::mail_full::default_instance());
}

S2C_Mail_Full::S2C_Mail_Full(const S2C_Mail_Full& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Mail_Full::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  ret_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mail_ = nullptr;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Mail_Full::~S2C_Mail_Full() {
  SharedDtor();
}

void S2C_Mail_Full::SharedDtor() {
  if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
    delete ret_code_;
  }
  if (this != default_instance_) {
    delete mail_;
  }
}

void S2C_Mail_Full::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Mail_Full::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Mail_Full_descriptor_;
}

const S2C_Mail_Full& S2C_Mail_Full::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Mail_2eproto();
  return *default_instance_;
}

S2C_Mail_Full* S2C_Mail_Full::default_instance_ = nullptr;

S2C_Mail_Full* S2C_Mail_Full::New() const {
  return new S2C_Mail_Full;
}

void S2C_Mail_Full::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    if (has_ret_code()) {
      if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
        ret_code_->clear();
      }
    }
    if (has_mail()) {
      if (mail_ != nullptr) mail_->::mail_full::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Mail_Full::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ret_code;
        break;
      }

      // required bytes ret_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ret_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ret_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mail;
        break;
      }

      // optional .mail_full mail = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Mail_Full::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->role_index(), output);
  }

  // required bytes ret_code = 2;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->ret_code(), output);
  }

  // optional .mail_full mail = 3;
  if (has_mail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Mail_Full::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->role_index(), target);
  }

  // required bytes ret_code = 2;
  if (has_ret_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->ret_code(), target);
  }

  // optional .mail_full mail = 3;
  if (has_mail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->mail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Mail_Full::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->role_index());
    }

    // required bytes ret_code = 2;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ret_code());
    }

    // optional .mail_full mail = 3;
    if (has_mail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Mail_Full::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Mail_Full* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Mail_Full*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Mail_Full::MergeFrom(const S2C_Mail_Full& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_mail()) {
      mutable_mail()->::mail_full::MergeFrom(from.mail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Mail_Full::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Mail_Full::CopyFrom(const S2C_Mail_Full& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Mail_Full::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_mail()) {
    if (!this->mail().IsInitialized()) return false;
  }
  return true;
}

void S2C_Mail_Full::Swap(S2C_Mail_Full* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(ret_code_, other->ret_code_);
    std::swap(mail_, other->mail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Mail_Full::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Mail_Full_descriptor_;
  metadata.reflection = S2C_Mail_Full_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Mail_Read::kRoleIndexFieldNumber;
const int C2S_Mail_Read::kMailIndexFieldNumber;
const int C2S_Mail_Read::kIntAddrFieldNumber;
#endif  // !_MSC_VER

C2S_Mail_Read::C2S_Mail_Read()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Mail_Read::InitAsDefaultInstance() {
}

C2S_Mail_Read::C2S_Mail_Read(const C2S_Mail_Read& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Mail_Read::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  mail_index_ = GOOGLE_LONGLONG(0);
  int_addr_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Mail_Read::~C2S_Mail_Read() {
  SharedDtor();
}

void C2S_Mail_Read::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_Mail_Read::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Mail_Read::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Mail_Read_descriptor_;
}

const C2S_Mail_Read& C2S_Mail_Read::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Mail_2eproto();
  return *default_instance_;
}

C2S_Mail_Read* C2S_Mail_Read::default_instance_ = nullptr;

C2S_Mail_Read* C2S_Mail_Read::New() const {
  return new C2S_Mail_Read;
}

void C2S_Mail_Read::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    mail_index_ = GOOGLE_LONGLONG(0);
    int_addr_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Mail_Read::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_index;
        break;
      }

      // required sint64 mail_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &mail_index_)));
          set_has_mail_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_int_addr;
        break;
      }

      // optional sint64 int_addr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int_addr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &int_addr_)));
          set_has_int_addr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Mail_Read::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->role_index(), output);
  }

  // required sint64 mail_index = 2;
  if (has_mail_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->mail_index(), output);
  }

  // optional sint64 int_addr = 3;
  if (has_int_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->int_addr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Mail_Read::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->role_index(), target);
  }

  // required sint64 mail_index = 2;
  if (has_mail_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->mail_index(), target);
  }

  // optional sint64 int_addr = 3;
  if (has_int_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->int_addr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Mail_Read::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->role_index());
    }

    // required sint64 mail_index = 2;
    if (has_mail_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->mail_index());
    }

    // optional sint64 int_addr = 3;
    if (has_int_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->int_addr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Mail_Read::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Mail_Read* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Mail_Read*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Mail_Read::MergeFrom(const C2S_Mail_Read& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_mail_index()) {
      set_mail_index(from.mail_index());
    }
    if (from.has_int_addr()) {
      set_int_addr(from.int_addr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Mail_Read::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Mail_Read::CopyFrom(const C2S_Mail_Read& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Mail_Read::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C2S_Mail_Read::Swap(C2S_Mail_Read* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(mail_index_, other->mail_index_);
    std::swap(int_addr_, other->int_addr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Mail_Read::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Mail_Read_descriptor_;
  metadata.reflection = C2S_Mail_Read_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Mail_Read::kRoleIndexFieldNumber;
const int S2C_Mail_Read::kRetCodeFieldNumber;
#endif  // !_MSC_VER

S2C_Mail_Read::S2C_Mail_Read()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Mail_Read::InitAsDefaultInstance() {
}

S2C_Mail_Read::S2C_Mail_Read(const S2C_Mail_Read& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Mail_Read::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  ret_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Mail_Read::~S2C_Mail_Read() {
  SharedDtor();
}

void S2C_Mail_Read::SharedDtor() {
  if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
    delete ret_code_;
  }
  if (this != default_instance_) {
  }
}

void S2C_Mail_Read::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Mail_Read::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Mail_Read_descriptor_;
}

const S2C_Mail_Read& S2C_Mail_Read::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Mail_2eproto();
  return *default_instance_;
}

S2C_Mail_Read* S2C_Mail_Read::default_instance_ = nullptr;

S2C_Mail_Read* S2C_Mail_Read::New() const {
  return new S2C_Mail_Read;
}

void S2C_Mail_Read::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    if (has_ret_code()) {
      if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
        ret_code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Mail_Read::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ret_code;
        break;
      }

      // required bytes ret_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ret_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ret_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Mail_Read::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->role_index(), output);
  }

  // required bytes ret_code = 2;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->ret_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Mail_Read::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->role_index(), target);
  }

  // required bytes ret_code = 2;
  if (has_ret_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->ret_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Mail_Read::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->role_index());
    }

    // required bytes ret_code = 2;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ret_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Mail_Read::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Mail_Read* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Mail_Read*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Mail_Read::MergeFrom(const S2C_Mail_Read& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Mail_Read::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Mail_Read::CopyFrom(const S2C_Mail_Read& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Mail_Read::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2C_Mail_Read::Swap(S2C_Mail_Read* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(ret_code_, other->ret_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Mail_Read::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Mail_Read_descriptor_;
  metadata.reflection = S2C_Mail_Read_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
