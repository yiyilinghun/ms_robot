// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Database.proto

#ifndef PROTOBUF_Database_2eproto__INCLUDED
#define PROTOBUF_Database_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "EnumDef.pb.h"
#include "Common.pb.h"
#include "Task.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Database_2eproto();
void protobuf_AssignDesc_Database_2eproto();
void protobuf_ShutdownFile_Database_2eproto();

class sql_result_register;
class sql_ret_role_count;
class sql_ret_cluster_node_info;
class sql_check_account_key;
class sql_result_login;
class sql_result_role_online;
class sql_result_role_offline;
class sql_result_role_count;
class sql_result_createrole;
class sql_result_save_role;
class item;
class dict_item;
class suit_goods_info;
class suit_info;
class list_role_suit_info;
class face_goods_info;
class face_info;
class level_info;
class reward_box;
class chapter_info;
class list_role_face_info;
class role_info_skill;
class game_friend;
class dict_game_friend;
class summonpet;
class dict_summonpet;
class task;
class success;
class guide;
class role_info_config;
class times;
class dict_comrade_role;
class role_info_memory;
class role_info_public;
class role_info_private;
class role_info_attr;
class role_info_reward;
class roleinfo_extend_attr_1;
class roleinfo_extend_attr_2;
class roleinfo_extend_attr_3;
class roleinfo_extend_attr_4;
class roleinfo_extend_attr_5;
class role_info;

// ===================================================================

class sql_result_register : public ::google::protobuf::Message {
 public:
  sql_result_register();
  virtual ~sql_result_register();

  sql_result_register(const sql_result_register& from);

  inline sql_result_register& operator=(const sql_result_register& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sql_result_register& default_instance();

  void Swap(sql_result_register* other);

  // implements Message ----------------------------------------------

  sql_result_register* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sql_result_register& from);
  void MergeFrom(const sql_result_register& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret_code = 1;
  inline bool has_ret_code() const;
  inline void clear_ret_code();
  static const int kRetCodeFieldNumber = 1;
  inline ::google::protobuf::int32 ret_code() const;
  inline void set_ret_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sql_result_register)
 private:
  inline void set_has_ret_code();
  inline void clear_has_ret_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Database_2eproto();
  friend void protobuf_AssignDesc_Database_2eproto();
  friend void protobuf_ShutdownFile_Database_2eproto();

  void InitAsDefaultInstance();
  static sql_result_register* default_instance_;
};
// -------------------------------------------------------------------

class sql_ret_role_count : public ::google::protobuf::Message {
 public:
  sql_ret_role_count();
  virtual ~sql_ret_role_count();

  sql_ret_role_count(const sql_ret_role_count& from);

  inline sql_ret_role_count& operator=(const sql_ret_role_count& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sql_ret_role_count& default_instance();

  void Swap(sql_ret_role_count* other);

  // implements Message ----------------------------------------------

  sql_ret_role_count* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sql_ret_role_count& from);
  void MergeFrom(const sql_ret_role_count& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool is_ok = 1;
  inline bool has_is_ok() const;
  inline void clear_is_ok();
  static const int kIsOkFieldNumber = 1;
  inline bool is_ok() const;
  inline void set_is_ok(bool value);

  // repeated sint64 role_index = 2;
  inline int role_index_size() const;
  inline void clear_role_index();
  static const int kRoleIndexFieldNumber = 2;
  inline ::google::protobuf::int64 role_index(int index) const;
  inline void set_role_index(int index, ::google::protobuf::int64 value);
  inline void add_role_index(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      role_index() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_role_index();

  // @@protoc_insertion_point(class_scope:sql_ret_role_count)
 private:
  inline void set_has_is_ok();
  inline void clear_has_is_ok();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > role_index_;
  bool is_ok_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Database_2eproto();
  friend void protobuf_AssignDesc_Database_2eproto();
  friend void protobuf_ShutdownFile_Database_2eproto();

  void InitAsDefaultInstance();
  static sql_ret_role_count* default_instance_;
};
// -------------------------------------------------------------------

class sql_ret_cluster_node_info : public ::google::protobuf::Message {
 public:
  sql_ret_cluster_node_info();
  virtual ~sql_ret_cluster_node_info();

  sql_ret_cluster_node_info(const sql_ret_cluster_node_info& from);

  inline sql_ret_cluster_node_info& operator=(const sql_ret_cluster_node_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sql_ret_cluster_node_info& default_instance();

  void Swap(sql_ret_cluster_node_info* other);

  // implements Message ----------------------------------------------

  sql_ret_cluster_node_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sql_ret_cluster_node_info& from);
  void MergeFrom(const sql_ret_cluster_node_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint64 node_index = 1;
  inline bool has_node_index() const;
  inline void clear_node_index();
  static const int kNodeIndexFieldNumber = 1;
  inline ::google::protobuf::int64 node_index() const;
  inline void set_node_index(::google::protobuf::int64 value);

  // required sint64 intaddr = 2;
  inline bool has_intaddr() const;
  inline void clear_intaddr();
  static const int kIntaddrFieldNumber = 2;
  inline ::google::protobuf::int64 intaddr() const;
  inline void set_intaddr(::google::protobuf::int64 value);

  // required sint64 unit_next_index = 3;
  inline bool has_unit_next_index() const;
  inline void clear_unit_next_index();
  static const int kUnitNextIndexFieldNumber = 3;
  inline ::google::protobuf::int64 unit_next_index() const;
  inline void set_unit_next_index(::google::protobuf::int64 value);

  // required sint64 cpu_pressure = 4;
  inline bool has_cpu_pressure() const;
  inline void clear_cpu_pressure();
  static const int kCpuPressureFieldNumber = 4;
  inline ::google::protobuf::int64 cpu_pressure() const;
  inline void set_cpu_pressure(::google::protobuf::int64 value);

  // required bool is_online = 5;
  inline bool has_is_online() const;
  inline void clear_is_online();
  static const int kIsOnlineFieldNumber = 5;
  inline bool is_online() const;
  inline void set_is_online(bool value);

  // @@protoc_insertion_point(class_scope:sql_ret_cluster_node_info)
 private:
  inline void set_has_node_index();
  inline void clear_has_node_index();
  inline void set_has_intaddr();
  inline void clear_has_intaddr();
  inline void set_has_unit_next_index();
  inline void clear_has_unit_next_index();
  inline void set_has_cpu_pressure();
  inline void clear_has_cpu_pressure();
  inline void set_has_is_online();
  inline void clear_has_is_online();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 node_index_;
  ::google::protobuf::int64 intaddr_;
  ::google::protobuf::int64 unit_next_index_;
  ::google::protobuf::int64 cpu_pressure_;
  bool is_online_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Database_2eproto();
  friend void protobuf_AssignDesc_Database_2eproto();
  friend void protobuf_ShutdownFile_Database_2eproto();

  void InitAsDefaultInstance();
  static sql_ret_cluster_node_info* default_instance_;
};
// -------------------------------------------------------------------

class sql_check_account_key : public ::google::protobuf::Message {
 public:
  sql_check_account_key();
  virtual ~sql_check_account_key();

  sql_check_account_key(const sql_check_account_key& from);

  inline sql_check_account_key& operator=(const sql_check_account_key& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sql_check_account_key& default_instance();

  void Swap(sql_check_account_key* other);

  // implements Message ----------------------------------------------

  sql_check_account_key* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sql_check_account_key& from);
  void MergeFrom(const sql_check_account_key& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const void* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // @@protoc_insertion_point(class_scope:sql_check_account_key)
 private:
  inline void set_has_account();
  inline void clear_has_account();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Database_2eproto();
  friend void protobuf_AssignDesc_Database_2eproto();
  friend void protobuf_ShutdownFile_Database_2eproto();

  void InitAsDefaultInstance();
  static sql_check_account_key* default_instance_;
};
// -------------------------------------------------------------------

class sql_result_login : public ::google::protobuf::Message {
 public:
  sql_result_login();
  virtual ~sql_result_login();

  sql_result_login(const sql_result_login& from);

  inline sql_result_login& operator=(const sql_result_login& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sql_result_login& default_instance();

  void Swap(sql_result_login* other);

  // implements Message ----------------------------------------------

  sql_result_login* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sql_result_login& from);
  void MergeFrom(const sql_result_login& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const void* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // required sint64 create_time = 2;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 2;
  inline ::google::protobuf::int64 create_time() const;
  inline void set_create_time(::google::protobuf::int64 value);

  // required sint64 login_time = 3;
  inline bool has_login_time() const;
  inline void clear_login_time();
  static const int kLoginTimeFieldNumber = 3;
  inline ::google::protobuf::int64 login_time() const;
  inline void set_login_time(::google::protobuf::int64 value);

  // required bool can_login_flag = 4;
  inline bool has_can_login_flag() const;
  inline void clear_can_login_flag();
  static const int kCanLoginFlagFieldNumber = 4;
  inline bool can_login_flag() const;
  inline void set_can_login_flag(bool value);

  // required bool can_profit_flag = 5;
  inline bool has_can_profit_flag() const;
  inline void clear_can_profit_flag();
  static const int kCanProfitFlagFieldNumber = 5;
  inline bool can_profit_flag() const;
  inline void set_can_profit_flag(bool value);

  // required bool can_senior_operation = 6;
  inline bool has_can_senior_operation() const;
  inline void clear_can_senior_operation();
  static const int kCanSeniorOperationFieldNumber = 6;
  inline bool can_senior_operation() const;
  inline void set_can_senior_operation(bool value);

  // @@protoc_insertion_point(class_scope:sql_result_login)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_create_time();
  inline void clear_has_create_time();
  inline void set_has_login_time();
  inline void clear_has_login_time();
  inline void set_has_can_login_flag();
  inline void clear_has_can_login_flag();
  inline void set_has_can_profit_flag();
  inline void clear_has_can_profit_flag();
  inline void set_has_can_senior_operation();
  inline void clear_has_can_senior_operation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::google::protobuf::int64 create_time_;
  ::google::protobuf::int64 login_time_;
  bool can_login_flag_;
  bool can_profit_flag_;
  bool can_senior_operation_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Database_2eproto();
  friend void protobuf_AssignDesc_Database_2eproto();
  friend void protobuf_ShutdownFile_Database_2eproto();

  void InitAsDefaultInstance();
  static sql_result_login* default_instance_;
};
// -------------------------------------------------------------------

class sql_result_role_online : public ::google::protobuf::Message {
 public:
  sql_result_role_online();
  virtual ~sql_result_role_online();

  sql_result_role_online(const sql_result_role_online& from);

  inline sql_result_role_online& operator=(const sql_result_role_online& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sql_result_role_online& default_instance();

  void Swap(sql_result_role_online* other);

  // implements Message ----------------------------------------------

  sql_result_role_online* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sql_result_role_online& from);
  void MergeFrom(const sql_result_role_online& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint32 count = 1;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 1;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sql_result_role_online)
 private:
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Database_2eproto();
  friend void protobuf_AssignDesc_Database_2eproto();
  friend void protobuf_ShutdownFile_Database_2eproto();

  void InitAsDefaultInstance();
  static sql_result_role_online* default_instance_;
};
// -------------------------------------------------------------------

class sql_result_role_offline : public ::google::protobuf::Message {
 public:
  sql_result_role_offline();
  virtual ~sql_result_role_offline();

  sql_result_role_offline(const sql_result_role_offline& from);

  inline sql_result_role_offline& operator=(const sql_result_role_offline& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sql_result_role_offline& default_instance();

  void Swap(sql_result_role_offline* other);

  // implements Message ----------------------------------------------

  sql_result_role_offline* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sql_result_role_offline& from);
  void MergeFrom(const sql_result_role_offline& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint32 count = 1;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 1;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sql_result_role_offline)
 private:
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Database_2eproto();
  friend void protobuf_AssignDesc_Database_2eproto();
  friend void protobuf_ShutdownFile_Database_2eproto();

  void InitAsDefaultInstance();
  static sql_result_role_offline* default_instance_;
};
// -------------------------------------------------------------------

class sql_result_role_count : public ::google::protobuf::Message {
 public:
  sql_result_role_count();
  virtual ~sql_result_role_count();

  sql_result_role_count(const sql_result_role_count& from);

  inline sql_result_role_count& operator=(const sql_result_role_count& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sql_result_role_count& default_instance();

  void Swap(sql_result_role_count* other);

  // implements Message ----------------------------------------------

  sql_result_role_count* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sql_result_role_count& from);
  void MergeFrom(const sql_result_role_count& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint64 role_index = 1;
  inline bool has_role_index() const;
  inline void clear_role_index();
  static const int kRoleIndexFieldNumber = 1;
  inline ::google::protobuf::int64 role_index() const;
  inline void set_role_index(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:sql_result_role_count)
 private:
  inline void set_has_role_index();
  inline void clear_has_role_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 role_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Database_2eproto();
  friend void protobuf_AssignDesc_Database_2eproto();
  friend void protobuf_ShutdownFile_Database_2eproto();

  void InitAsDefaultInstance();
  static sql_result_role_count* default_instance_;
};
// -------------------------------------------------------------------

class sql_result_createrole : public ::google::protobuf::Message {
 public:
  sql_result_createrole();
  virtual ~sql_result_createrole();

  sql_result_createrole(const sql_result_createrole& from);

  inline sql_result_createrole& operator=(const sql_result_createrole& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sql_result_createrole& default_instance();

  void Swap(sql_result_createrole* other);

  // implements Message ----------------------------------------------

  sql_result_createrole* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sql_result_createrole& from);
  void MergeFrom(const sql_result_createrole& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint32 ret_code = 1;
  inline bool has_ret_code() const;
  inline void clear_ret_code();
  static const int kRetCodeFieldNumber = 1;
  inline ::google::protobuf::int32 ret_code() const;
  inline void set_ret_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sql_result_createrole)
 private:
  inline void set_has_ret_code();
  inline void clear_has_ret_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Database_2eproto();
  friend void protobuf_AssignDesc_Database_2eproto();
  friend void protobuf_ShutdownFile_Database_2eproto();

  void InitAsDefaultInstance();
  static sql_result_createrole* default_instance_;
};
// -------------------------------------------------------------------

class sql_result_save_role : public ::google::protobuf::Message {
 public:
  sql_result_save_role();
  virtual ~sql_result_save_role();

  sql_result_save_role(const sql_result_save_role& from);

  inline sql_result_save_role& operator=(const sql_result_save_role& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sql_result_save_role& default_instance();

  void Swap(sql_result_save_role* other);

  // implements Message ----------------------------------------------

  sql_result_save_role* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sql_result_save_role& from);
  void MergeFrom(const sql_result_save_role& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret_code = 2;
  inline bool has_ret_code() const;
  inline void clear_ret_code();
  static const int kRetCodeFieldNumber = 2;
  inline ::google::protobuf::int32 ret_code() const;
  inline void set_ret_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sql_result_save_role)
 private:
  inline void set_has_ret_code();
  inline void clear_has_ret_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Database_2eproto();
  friend void protobuf_AssignDesc_Database_2eproto();
  friend void protobuf_ShutdownFile_Database_2eproto();

  void InitAsDefaultInstance();
  static sql_result_save_role* default_instance_;
};
// -------------------------------------------------------------------

class item : public ::google::protobuf::Message {
 public:
  item();
  virtual ~item();

  item(const item& from);

  inline item& operator=(const item& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const item& default_instance();

  void Swap(item* other);

  // implements Message ----------------------------------------------

  item* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const item& from);
  void MergeFrom(const item& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint64 item_index = 1;
  inline bool has_item_index() const;
  inline void clear_item_index();
  static const int kItemIndexFieldNumber = 1;
  inline ::google::protobuf::int64 item_index() const;
  inline void set_item_index(::google::protobuf::int64 value);

  // optional bytes item_type = 2;
  inline bool has_item_type() const;
  inline void clear_item_type();
  static const int kItemTypeFieldNumber = 2;
  inline const ::std::string& item_type() const;
  inline void set_item_type(const ::std::string& value);
  inline void set_item_type(const char* value);
  inline void set_item_type(const void* value, size_t size);
  inline ::std::string* mutable_item_type();
  inline ::std::string* release_item_type();
  inline void set_allocated_item_type(::std::string* item_type);

  // optional uint32 item_pos = 3;
  inline bool has_item_pos() const;
  inline void clear_item_pos();
  static const int kItemPosFieldNumber = 3;
  inline ::google::protobuf::uint32 item_pos() const;
  inline void set_item_pos(::google::protobuf::uint32 value);

  // optional bytes item_name = 4;
  inline bool has_item_name() const;
  inline void clear_item_name();
  static const int kItemNameFieldNumber = 4;
  inline const ::std::string& item_name() const;
  inline void set_item_name(const ::std::string& value);
  inline void set_item_name(const char* value);
  inline void set_item_name(const void* value, size_t size);
  inline ::std::string* mutable_item_name();
  inline ::std::string* release_item_name();
  inline void set_allocated_item_name(::std::string* item_name);

  // optional sint32 item_count = 5;
  inline bool has_item_count() const;
  inline void clear_item_count();
  static const int kItemCountFieldNumber = 5;
  inline ::google::protobuf::int32 item_count() const;
  inline void set_item_count(::google::protobuf::int32 value);

  // optional bytes item_res_file = 6;
  inline bool has_item_res_file() const;
  inline void clear_item_res_file();
  static const int kItemResFileFieldNumber = 6;
  inline const ::std::string& item_res_file() const;
  inline void set_item_res_file(const ::std::string& value);
  inline void set_item_res_file(const char* value);
  inline void set_item_res_file(const void* value, size_t size);
  inline ::std::string* mutable_item_res_file();
  inline ::std::string* release_item_res_file();
  inline void set_allocated_item_res_file(::std::string* item_res_file);

  // optional uint32 item_res_key = 7;
  inline bool has_item_res_key() const;
  inline void clear_item_res_key();
  static const int kItemResKeyFieldNumber = 7;
  inline ::google::protobuf::uint32 item_res_key() const;
  inline void set_item_res_key(::google::protobuf::uint32 value);

  // optional .universal_data ex_info = 8;
  inline bool has_ex_info() const;
  inline void clear_ex_info();
  static const int kExInfoFieldNumber = 8;
  inline const ::universal_data& ex_info() const;
  inline ::universal_data* mutable_ex_info();
  inline ::universal_data* release_ex_info();
  inline void set_allocated_ex_info(::universal_data* ex_info);

  // @@protoc_insertion_point(class_scope:item)
 private:
  inline void set_has_item_index();
  inline void clear_has_item_index();
  inline void set_has_item_type();
  inline void clear_has_item_type();
  inline void set_has_item_pos();
  inline void clear_has_item_pos();
  inline void set_has_item_name();
  inline void clear_has_item_name();
  inline void set_has_item_count();
  inline void clear_has_item_count();
  inline void set_has_item_res_file();
  inline void clear_has_item_res_file();
  inline void set_has_item_res_key();
  inline void clear_has_item_res_key();
  inline void set_has_ex_info();
  inline void clear_has_ex_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 item_index_;
  ::std::string* item_type_;
  ::std::string* item_name_;
  ::google::protobuf::uint32 item_pos_;
  ::google::protobuf::int32 item_count_;
  ::std::string* item_res_file_;
  ::universal_data* ex_info_;
  ::google::protobuf::uint32 item_res_key_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_Database_2eproto();
  friend void protobuf_AssignDesc_Database_2eproto();
  friend void protobuf_ShutdownFile_Database_2eproto();

  void InitAsDefaultInstance();
  static item* default_instance_;
};
// -------------------------------------------------------------------

class dict_item : public ::google::protobuf::Message {
 public:
  dict_item();
  virtual ~dict_item();

  dict_item(const dict_item& from);

  inline dict_item& operator=(const dict_item& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const dict_item& default_instance();

  void Swap(dict_item* other);

  // implements Message ----------------------------------------------

  dict_item* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const dict_item& from);
  void MergeFrom(const dict_item& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated sint64 item_index = 1;
  inline int item_index_size() const;
  inline void clear_item_index();
  static const int kItemIndexFieldNumber = 1;
  inline ::google::protobuf::int64 item_index(int index) const;
  inline void set_item_index(int index, ::google::protobuf::int64 value);
  inline void add_item_index(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      item_index() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_item_index();

  // repeated .item item_info = 2;
  inline int item_info_size() const;
  inline void clear_item_info();
  static const int kItemInfoFieldNumber = 2;
  inline const ::item& item_info(int index) const;
  inline ::item* mutable_item_info(int index);
  inline ::item* add_item_info();
  inline const ::google::protobuf::RepeatedPtrField< ::item >&
      item_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::item >*
      mutable_item_info();

  // @@protoc_insertion_point(class_scope:dict_item)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > item_index_;
  ::google::protobuf::RepeatedPtrField< ::item > item_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Database_2eproto();
  friend void protobuf_AssignDesc_Database_2eproto();
  friend void protobuf_ShutdownFile_Database_2eproto();

  void InitAsDefaultInstance();
  static dict_item* default_instance_;
};
// -------------------------------------------------------------------

class suit_goods_info : public ::google::protobuf::Message {
 public:
  suit_goods_info();
  virtual ~suit_goods_info();

  suit_goods_info(const suit_goods_info& from);

  inline suit_goods_info& operator=(const suit_goods_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const suit_goods_info& default_instance();

  void Swap(suit_goods_info* other);

  // implements Message ----------------------------------------------

  suit_goods_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const suit_goods_info& from);
  void MergeFrom(const suit_goods_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint32 can_buy_suit_shop_id = 1;
  inline bool has_can_buy_suit_shop_id() const;
  inline void clear_can_buy_suit_shop_id();
  static const int kCanBuySuitShopIdFieldNumber = 1;
  inline ::google::protobuf::int32 can_buy_suit_shop_id() const;
  inline void set_can_buy_suit_shop_id(::google::protobuf::int32 value);

  // required bool is_buy = 2;
  inline bool has_is_buy() const;
  inline void clear_is_buy();
  static const int kIsBuyFieldNumber = 2;
  inline bool is_buy() const;
  inline void set_is_buy(bool value);

  // @@protoc_insertion_point(class_scope:suit_goods_info)
 private:
  inline void set_has_can_buy_suit_shop_id();
  inline void clear_has_can_buy_suit_shop_id();
  inline void set_has_is_buy();
  inline void clear_has_is_buy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 can_buy_suit_shop_id_;
  bool is_buy_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Database_2eproto();
  friend void protobuf_AssignDesc_Database_2eproto();
  friend void protobuf_ShutdownFile_Database_2eproto();

  void InitAsDefaultInstance();
  static suit_goods_info* default_instance_;
};
// -------------------------------------------------------------------

class suit_info : public ::google::protobuf::Message {
 public:
  suit_info();
  virtual ~suit_info();

  suit_info(const suit_info& from);

  inline suit_info& operator=(const suit_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const suit_info& default_instance();

  void Swap(suit_info* other);

  // implements Message ----------------------------------------------

  suit_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const suit_info& from);
  void MergeFrom(const suit_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint32 suit_id = 1;
  inline bool has_suit_id() const;
  inline void clear_suit_id();
  static const int kSuitIdFieldNumber = 1;
  inline ::google::protobuf::int32 suit_id() const;
  inline void set_suit_id(::google::protobuf::int32 value);

  // required sint64 suit_unixtime_time_out_stamp = 2;
  inline bool has_suit_unixtime_time_out_stamp() const;
  inline void clear_suit_unixtime_time_out_stamp();
  static const int kSuitUnixtimeTimeOutStampFieldNumber = 2;
  inline ::google::protobuf::int64 suit_unixtime_time_out_stamp() const;
  inline void set_suit_unixtime_time_out_stamp(::google::protobuf::int64 value);

  // required sint32 suit_duration_type = 3;
  inline bool has_suit_duration_type() const;
  inline void clear_suit_duration_type();
  static const int kSuitDurationTypeFieldNumber = 3;
  inline ::google::protobuf::int32 suit_duration_type() const;
  inline void set_suit_duration_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:suit_info)
 private:
  inline void set_has_suit_id();
  inline void clear_has_suit_id();
  inline void set_has_suit_unixtime_time_out_stamp();
  inline void clear_has_suit_unixtime_time_out_stamp();
  inline void set_has_suit_duration_type();
  inline void clear_has_suit_duration_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 suit_unixtime_time_out_stamp_;
  ::google::protobuf::int32 suit_id_;
  ::google::protobuf::int32 suit_duration_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Database_2eproto();
  friend void protobuf_AssignDesc_Database_2eproto();
  friend void protobuf_ShutdownFile_Database_2eproto();

  void InitAsDefaultInstance();
  static suit_info* default_instance_;
};
// -------------------------------------------------------------------

class list_role_suit_info : public ::google::protobuf::Message {
 public:
  list_role_suit_info();
  virtual ~list_role_suit_info();

  list_role_suit_info(const list_role_suit_info& from);

  inline list_role_suit_info& operator=(const list_role_suit_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const list_role_suit_info& default_instance();

  void Swap(list_role_suit_info* other);

  // implements Message ----------------------------------------------

  list_role_suit_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const list_role_suit_info& from);
  void MergeFrom(const list_role_suit_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .suit_goods_info list_buy_suit = 1;
  inline int list_buy_suit_size() const;
  inline void clear_list_buy_suit();
  static const int kListBuySuitFieldNumber = 1;
  inline const ::suit_goods_info& list_buy_suit(int index) const;
  inline ::suit_goods_info* mutable_list_buy_suit(int index);
  inline ::suit_goods_info* add_list_buy_suit();
  inline const ::google::protobuf::RepeatedPtrField< ::suit_goods_info >&
      list_buy_suit() const;
  inline ::google::protobuf::RepeatedPtrField< ::suit_goods_info >*
      mutable_list_buy_suit();

  // required sint64 suit_shop_last_update_time = 2;
  inline bool has_suit_shop_last_update_time() const;
  inline void clear_suit_shop_last_update_time();
  static const int kSuitShopLastUpdateTimeFieldNumber = 2;
  inline ::google::protobuf::int64 suit_shop_last_update_time() const;
  inline void set_suit_shop_last_update_time(::google::protobuf::int64 value);

  // optional .suit_info current_suit = 3;
  inline bool has_current_suit() const;
  inline void clear_current_suit();
  static const int kCurrentSuitFieldNumber = 3;
  inline const ::suit_info& current_suit() const;
  inline ::suit_info* mutable_current_suit();
  inline ::suit_info* release_current_suit();
  inline void set_allocated_current_suit(::suit_info* current_suit);

  // repeated .suit_info list_have_suits = 4;
  inline int list_have_suits_size() const;
  inline void clear_list_have_suits();
  static const int kListHaveSuitsFieldNumber = 4;
  inline const ::suit_info& list_have_suits(int index) const;
  inline ::suit_info* mutable_list_have_suits(int index);
  inline ::suit_info* add_list_have_suits();
  inline const ::google::protobuf::RepeatedPtrField< ::suit_info >&
      list_have_suits() const;
  inline ::google::protobuf::RepeatedPtrField< ::suit_info >*
      mutable_list_have_suits();

  // @@protoc_insertion_point(class_scope:list_role_suit_info)
 private:
  inline void set_has_suit_shop_last_update_time();
  inline void clear_has_suit_shop_last_update_time();
  inline void set_has_current_suit();
  inline void clear_has_current_suit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::suit_goods_info > list_buy_suit_;
  ::google::protobuf::int64 suit_shop_last_update_time_;
  ::suit_info* current_suit_;
  ::google::protobuf::RepeatedPtrField< ::suit_info > list_have_suits_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Database_2eproto();
  friend void protobuf_AssignDesc_Database_2eproto();
  friend void protobuf_ShutdownFile_Database_2eproto();

  void InitAsDefaultInstance();
  static list_role_suit_info* default_instance_;
};
// -------------------------------------------------------------------

class face_goods_info : public ::google::protobuf::Message {
 public:
  face_goods_info();
  virtual ~face_goods_info();

  face_goods_info(const face_goods_info& from);

  inline face_goods_info& operator=(const face_goods_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const face_goods_info& default_instance();

  void Swap(face_goods_info* other);

  // implements Message ----------------------------------------------

  face_goods_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const face_goods_info& from);
  void MergeFrom(const face_goods_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint32 can_buy_face_shop_id = 1;
  inline bool has_can_buy_face_shop_id() const;
  inline void clear_can_buy_face_shop_id();
  static const int kCanBuyFaceShopIdFieldNumber = 1;
  inline ::google::protobuf::int32 can_buy_face_shop_id() const;
  inline void set_can_buy_face_shop_id(::google::protobuf::int32 value);

  // required bool is_buy = 2;
  inline bool has_is_buy() const;
  inline void clear_is_buy();
  static const int kIsBuyFieldNumber = 2;
  inline bool is_buy() const;
  inline void set_is_buy(bool value);

  // required sint32 face_shop_index = 3;
  inline bool has_face_shop_index() const;
  inline void clear_face_shop_index();
  static const int kFaceShopIndexFieldNumber = 3;
  inline ::google::protobuf::int32 face_shop_index() const;
  inline void set_face_shop_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:face_goods_info)
 private:
  inline void set_has_can_buy_face_shop_id();
  inline void clear_has_can_buy_face_shop_id();
  inline void set_has_is_buy();
  inline void clear_has_is_buy();
  inline void set_has_face_shop_index();
  inline void clear_has_face_shop_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 can_buy_face_shop_id_;
  bool is_buy_;
  ::google::protobuf::int32 face_shop_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Database_2eproto();
  friend void protobuf_AssignDesc_Database_2eproto();
  friend void protobuf_ShutdownFile_Database_2eproto();

  void InitAsDefaultInstance();
  static face_goods_info* default_instance_;
};
// -------------------------------------------------------------------

class face_info : public ::google::protobuf::Message {
 public:
  face_info();
  virtual ~face_info();

  face_info(const face_info& from);

  inline face_info& operator=(const face_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const face_info& default_instance();

  void Swap(face_info* other);

  // implements Message ----------------------------------------------

  face_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const face_info& from);
  void MergeFrom(const face_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint32 face_id = 1;
  inline bool has_face_id() const;
  inline void clear_face_id();
  static const int kFaceIdFieldNumber = 1;
  inline ::google::protobuf::int32 face_id() const;
  inline void set_face_id(::google::protobuf::int32 value);

  // required sint64 face_unixtime_time_out_stamp = 2;
  inline bool has_face_unixtime_time_out_stamp() const;
  inline void clear_face_unixtime_time_out_stamp();
  static const int kFaceUnixtimeTimeOutStampFieldNumber = 2;
  inline ::google::protobuf::int64 face_unixtime_time_out_stamp() const;
  inline void set_face_unixtime_time_out_stamp(::google::protobuf::int64 value);

  // required sint32 face_duration_type = 3;
  inline bool has_face_duration_type() const;
  inline void clear_face_duration_type();
  static const int kFaceDurationTypeFieldNumber = 3;
  inline ::google::protobuf::int32 face_duration_type() const;
  inline void set_face_duration_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:face_info)
 private:
  inline void set_has_face_id();
  inline void clear_has_face_id();
  inline void set_has_face_unixtime_time_out_stamp();
  inline void clear_has_face_unixtime_time_out_stamp();
  inline void set_has_face_duration_type();
  inline void clear_has_face_duration_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 face_unixtime_time_out_stamp_;
  ::google::protobuf::int32 face_id_;
  ::google::protobuf::int32 face_duration_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Database_2eproto();
  friend void protobuf_AssignDesc_Database_2eproto();
  friend void protobuf_ShutdownFile_Database_2eproto();

  void InitAsDefaultInstance();
  static face_info* default_instance_;
};
// -------------------------------------------------------------------

class level_info : public ::google::protobuf::Message {
 public:
  level_info();
  virtual ~level_info();

  level_info(const level_info& from);

  inline level_info& operator=(const level_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const level_info& default_instance();

  void Swap(level_info* other);

  // implements Message ----------------------------------------------

  level_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const level_info& from);
  void MergeFrom(const level_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required sint32 passed = 2;
  inline bool has_passed() const;
  inline void clear_passed();
  static const int kPassedFieldNumber = 2;
  inline ::google::protobuf::int32 passed() const;
  inline void set_passed(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:level_info)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_passed();
  inline void clear_has_passed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 passed_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Database_2eproto();
  friend void protobuf_AssignDesc_Database_2eproto();
  friend void protobuf_ShutdownFile_Database_2eproto();

  void InitAsDefaultInstance();
  static level_info* default_instance_;
};
// -------------------------------------------------------------------

class reward_box : public ::google::protobuf::Message {
 public:
  reward_box();
  virtual ~reward_box();

  reward_box(const reward_box& from);

  inline reward_box& operator=(const reward_box& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const reward_box& default_instance();

  void Swap(reward_box* other);

  // implements Message ----------------------------------------------

  reward_box* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const reward_box& from);
  void MergeFrom(const reward_box& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required sint32 get = 2;
  inline bool has_get() const;
  inline void clear_get();
  static const int kGetFieldNumber = 2;
  inline ::google::protobuf::int32 get() const;
  inline void set_get(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:reward_box)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_get();
  inline void clear_has_get();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 get_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Database_2eproto();
  friend void protobuf_AssignDesc_Database_2eproto();
  friend void protobuf_ShutdownFile_Database_2eproto();

  void InitAsDefaultInstance();
  static reward_box* default_instance_;
};
// -------------------------------------------------------------------

class chapter_info : public ::google::protobuf::Message {
 public:
  chapter_info();
  virtual ~chapter_info();

  chapter_info(const chapter_info& from);

  inline chapter_info& operator=(const chapter_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const chapter_info& default_instance();

  void Swap(chapter_info* other);

  // implements Message ----------------------------------------------

  chapter_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const chapter_info& from);
  void MergeFrom(const chapter_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // repeated .level_info list_dup = 2;
  inline int list_dup_size() const;
  inline void clear_list_dup();
  static const int kListDupFieldNumber = 2;
  inline const ::level_info& list_dup(int index) const;
  inline ::level_info* mutable_list_dup(int index);
  inline ::level_info* add_list_dup();
  inline const ::google::protobuf::RepeatedPtrField< ::level_info >&
      list_dup() const;
  inline ::google::protobuf::RepeatedPtrField< ::level_info >*
      mutable_list_dup();

  // repeated .reward_box list_box = 3;
  inline int list_box_size() const;
  inline void clear_list_box();
  static const int kListBoxFieldNumber = 3;
  inline const ::reward_box& list_box(int index) const;
  inline ::reward_box* mutable_list_box(int index);
  inline ::reward_box* add_list_box();
  inline const ::google::protobuf::RepeatedPtrField< ::reward_box >&
      list_box() const;
  inline ::google::protobuf::RepeatedPtrField< ::reward_box >*
      mutable_list_box();

  // required sint32 get_reward = 4;
  inline bool has_get_reward() const;
  inline void clear_get_reward();
  static const int kGetRewardFieldNumber = 4;
  inline ::google::protobuf::int32 get_reward() const;
  inline void set_get_reward(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:chapter_info)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_get_reward();
  inline void clear_has_get_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::level_info > list_dup_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 get_reward_;
  ::google::protobuf::RepeatedPtrField< ::reward_box > list_box_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Database_2eproto();
  friend void protobuf_AssignDesc_Database_2eproto();
  friend void protobuf_ShutdownFile_Database_2eproto();

  void InitAsDefaultInstance();
  static chapter_info* default_instance_;
};
// -------------------------------------------------------------------

class list_role_face_info : public ::google::protobuf::Message {
 public:
  list_role_face_info();
  virtual ~list_role_face_info();

  list_role_face_info(const list_role_face_info& from);

  inline list_role_face_info& operator=(const list_role_face_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const list_role_face_info& default_instance();

  void Swap(list_role_face_info* other);

  // implements Message ----------------------------------------------

  list_role_face_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const list_role_face_info& from);
  void MergeFrom(const list_role_face_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .face_goods_info list_original_buy_face = 1;
  inline int list_original_buy_face_size() const;
  inline void clear_list_original_buy_face();
  static const int kListOriginalBuyFaceFieldNumber = 1;
  inline const ::face_goods_info& list_original_buy_face(int index) const;
  inline ::face_goods_info* mutable_list_original_buy_face(int index);
  inline ::face_goods_info* add_list_original_buy_face();
  inline const ::google::protobuf::RepeatedPtrField< ::face_goods_info >&
      list_original_buy_face() const;
  inline ::google::protobuf::RepeatedPtrField< ::face_goods_info >*
      mutable_list_original_buy_face();

  // repeated .face_goods_info list_discount_buy_face = 2;
  inline int list_discount_buy_face_size() const;
  inline void clear_list_discount_buy_face();
  static const int kListDiscountBuyFaceFieldNumber = 2;
  inline const ::face_goods_info& list_discount_buy_face(int index) const;
  inline ::face_goods_info* mutable_list_discount_buy_face(int index);
  inline ::face_goods_info* add_list_discount_buy_face();
  inline const ::google::protobuf::RepeatedPtrField< ::face_goods_info >&
      list_discount_buy_face() const;
  inline ::google::protobuf::RepeatedPtrField< ::face_goods_info >*
      mutable_list_discount_buy_face();

  // required sint64 face_shop_last_update_time = 3;
  inline bool has_face_shop_last_update_time() const;
  inline void clear_face_shop_last_update_time();
  static const int kFaceShopLastUpdateTimeFieldNumber = 3;
  inline ::google::protobuf::int64 face_shop_last_update_time() const;
  inline void set_face_shop_last_update_time(::google::protobuf::int64 value);

  // required sint64 face_shop_last_manual_update_time = 4;
  inline bool has_face_shop_last_manual_update_time() const;
  inline void clear_face_shop_last_manual_update_time();
  static const int kFaceShopLastManualUpdateTimeFieldNumber = 4;
  inline ::google::protobuf::int64 face_shop_last_manual_update_time() const;
  inline void set_face_shop_last_manual_update_time(::google::protobuf::int64 value);

  // required sint32 face_shop_manual_update_count = 5;
  inline bool has_face_shop_manual_update_count() const;
  inline void clear_face_shop_manual_update_count();
  static const int kFaceShopManualUpdateCountFieldNumber = 5;
  inline ::google::protobuf::int32 face_shop_manual_update_count() const;
  inline void set_face_shop_manual_update_count(::google::protobuf::int32 value);

  // optional .face_info current_face = 6;
  inline bool has_current_face() const;
  inline void clear_current_face();
  static const int kCurrentFaceFieldNumber = 6;
  inline const ::face_info& current_face() const;
  inline ::face_info* mutable_current_face();
  inline ::face_info* release_current_face();
  inline void set_allocated_current_face(::face_info* current_face);

  // repeated .face_info list_have_faces = 7;
  inline int list_have_faces_size() const;
  inline void clear_list_have_faces();
  static const int kListHaveFacesFieldNumber = 7;
  inline const ::face_info& list_have_faces(int index) const;
  inline ::face_info* mutable_list_have_faces(int index);
  inline ::face_info* add_list_have_faces();
  inline const ::google::protobuf::RepeatedPtrField< ::face_info >&
      list_have_faces() const;
  inline ::google::protobuf::RepeatedPtrField< ::face_info >*
      mutable_list_have_faces();

  // @@protoc_insertion_point(class_scope:list_role_face_info)
 private:
  inline void set_has_face_shop_last_update_time();
  inline void clear_has_face_shop_last_update_time();
  inline void set_has_face_shop_last_manual_update_time();
  inline void clear_has_face_shop_last_manual_update_time();
  inline void set_has_face_shop_manual_update_count();
  inline void clear_has_face_shop_manual_update_count();
  inline void set_has_current_face();
  inline void clear_has_current_face();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::face_goods_info > list_original_buy_face_;
  ::google::protobuf::RepeatedPtrField< ::face_goods_info > list_discount_buy_face_;
  ::google::protobuf::int64 face_shop_last_update_time_;
  ::google::protobuf::int64 face_shop_last_manual_update_time_;
  ::face_info* current_face_;
  ::google::protobuf::RepeatedPtrField< ::face_info > list_have_faces_;
  ::google::protobuf::int32 face_shop_manual_update_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Database_2eproto();
  friend void protobuf_AssignDesc_Database_2eproto();
  friend void protobuf_ShutdownFile_Database_2eproto();

  void InitAsDefaultInstance();
  static list_role_face_info* default_instance_;
};
// -------------------------------------------------------------------

class role_info_skill : public ::google::protobuf::Message {
 public:
  role_info_skill();
  virtual ~role_info_skill();

  role_info_skill(const role_info_skill& from);

  inline role_info_skill& operator=(const role_info_skill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_info_skill& default_instance();

  void Swap(role_info_skill* other);

  // implements Message ----------------------------------------------

  role_info_skill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_info_skill& from);
  void MergeFrom(const role_info_skill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes defaule_skill = 1;
  inline bool has_defaule_skill() const;
  inline void clear_defaule_skill();
  static const int kDefauleSkillFieldNumber = 1;
  inline const ::std::string& defaule_skill() const;
  inline void set_defaule_skill(const ::std::string& value);
  inline void set_defaule_skill(const char* value);
  inline void set_defaule_skill(const void* value, size_t size);
  inline ::std::string* mutable_defaule_skill();
  inline ::std::string* release_defaule_skill();
  inline void set_allocated_defaule_skill(::std::string* defaule_skill);

  // repeated bytes list_skill_name = 2;
  inline int list_skill_name_size() const;
  inline void clear_list_skill_name();
  static const int kListSkillNameFieldNumber = 2;
  inline const ::std::string& list_skill_name(int index) const;
  inline ::std::string* mutable_list_skill_name(int index);
  inline void set_list_skill_name(int index, const ::std::string& value);
  inline void set_list_skill_name(int index, const char* value);
  inline void set_list_skill_name(int index, const void* value, size_t size);
  inline ::std::string* add_list_skill_name();
  inline void add_list_skill_name(const ::std::string& value);
  inline void add_list_skill_name(const char* value);
  inline void add_list_skill_name(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& list_skill_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_list_skill_name();

  // repeated .universal_data list_skill = 3;
  inline int list_skill_size() const;
  inline void clear_list_skill();
  static const int kListSkillFieldNumber = 3;
  inline const ::universal_data& list_skill(int index) const;
  inline ::universal_data* mutable_list_skill(int index);
  inline ::universal_data* add_list_skill();
  inline const ::google::protobuf::RepeatedPtrField< ::universal_data >&
      list_skill() const;
  inline ::google::protobuf::RepeatedPtrField< ::universal_data >*
      mutable_list_skill();

  // @@protoc_insertion_point(class_scope:role_info_skill)
 private:
  inline void set_has_defaule_skill();
  inline void clear_has_defaule_skill();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* defaule_skill_;
  ::google::protobuf::RepeatedPtrField< ::std::string> list_skill_name_;
  ::google::protobuf::RepeatedPtrField< ::universal_data > list_skill_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Database_2eproto();
  friend void protobuf_AssignDesc_Database_2eproto();
  friend void protobuf_ShutdownFile_Database_2eproto();

  void InitAsDefaultInstance();
  static role_info_skill* default_instance_;
};
// -------------------------------------------------------------------

class game_friend : public ::google::protobuf::Message {
 public:
  game_friend();
  virtual ~game_friend();

  game_friend(const game_friend& from);

  inline game_friend& operator=(const game_friend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_friend& default_instance();

  void Swap(game_friend* other);

  // implements Message ----------------------------------------------

  game_friend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_friend& from);
  void MergeFrom(const game_friend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint64 role_index = 1;
  inline bool has_role_index() const;
  inline void clear_role_index();
  static const int kRoleIndexFieldNumber = 1;
  inline ::google::protobuf::int64 role_index() const;
  inline void set_role_index(::google::protobuf::int64 value);

  // required sint32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required bytes nick_name = 3;
  inline bool has_nick_name() const;
  inline void clear_nick_name();
  static const int kNickNameFieldNumber = 3;
  inline const ::std::string& nick_name() const;
  inline void set_nick_name(const ::std::string& value);
  inline void set_nick_name(const char* value);
  inline void set_nick_name(const void* value, size_t size);
  inline ::std::string* mutable_nick_name();
  inline ::std::string* release_nick_name();
  inline void set_allocated_nick_name(::std::string* nick_name);

  // required sint32 suit_id = 4;
  inline bool has_suit_id() const;
  inline void clear_suit_id();
  static const int kSuitIdFieldNumber = 4;
  inline ::google::protobuf::int32 suit_id() const;
  inline void set_suit_id(::google::protobuf::int32 value);

  // required sint32 face_id = 5;
  inline bool has_face_id() const;
  inline void clear_face_id();
  static const int kFaceIdFieldNumber = 5;
  inline ::google::protobuf::int32 face_id() const;
  inline void set_face_id(::google::protobuf::int32 value);

  // required sint32 weapon_id = 6;
  inline bool has_weapon_id() const;
  inline void clear_weapon_id();
  static const int kWeaponIdFieldNumber = 6;
  inline ::google::protobuf::int32 weapon_id() const;
  inline void set_weapon_id(::google::protobuf::int32 value);

  // required sint32 helmet_id = 7;
  inline bool has_helmet_id() const;
  inline void clear_helmet_id();
  static const int kHelmetIdFieldNumber = 7;
  inline ::google::protobuf::int32 helmet_id() const;
  inline void set_helmet_id(::google::protobuf::int32 value);

  // required bytes state = 8;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 8;
  inline const ::std::string& state() const;
  inline void set_state(const ::std::string& value);
  inline void set_state(const char* value);
  inline void set_state(const void* value, size_t size);
  inline ::std::string* mutable_state();
  inline ::std::string* release_state();
  inline void set_allocated_state(::std::string* state);

  // required sint64 time = 9;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 9;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // required bool is_online = 10;
  inline bool has_is_online() const;
  inline void clear_is_online();
  static const int kIsOnlineFieldNumber = 10;
  inline bool is_online() const;
  inline void set_is_online(bool value);

  // @@protoc_insertion_point(class_scope:game_friend)
 private:
  inline void set_has_role_index();
  inline void clear_has_role_index();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_nick_name();
  inline void clear_has_nick_name();
  inline void set_has_suit_id();
  inline void clear_has_suit_id();
  inline void set_has_face_id();
  inline void clear_has_face_id();
  inline void set_has_weapon_id();
  inline void clear_has_weapon_id();
  inline void set_has_helmet_id();
  inline void clear_has_helmet_id();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_is_online();
  inline void clear_has_is_online();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 role_index_;
  ::std::string* nick_name_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 suit_id_;
  ::google::protobuf::int32 face_id_;
  ::google::protobuf::int32 weapon_id_;
  ::std::string* state_;
  ::google::protobuf::int32 helmet_id_;
  bool is_online_;
  ::google::protobuf::int64 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_Database_2eproto();
  friend void protobuf_AssignDesc_Database_2eproto();
  friend void protobuf_ShutdownFile_Database_2eproto();

  void InitAsDefaultInstance();
  static game_friend* default_instance_;
};
// -------------------------------------------------------------------

class dict_game_friend : public ::google::protobuf::Message {
 public:
  dict_game_friend();
  virtual ~dict_game_friend();

  dict_game_friend(const dict_game_friend& from);

  inline dict_game_friend& operator=(const dict_game_friend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const dict_game_friend& default_instance();

  void Swap(dict_game_friend* other);

  // implements Message ----------------------------------------------

  dict_game_friend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const dict_game_friend& from);
  void MergeFrom(const dict_game_friend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated sint64 list_role_index = 1;
  inline int list_role_index_size() const;
  inline void clear_list_role_index();
  static const int kListRoleIndexFieldNumber = 1;
  inline ::google::protobuf::int64 list_role_index(int index) const;
  inline void set_list_role_index(int index, ::google::protobuf::int64 value);
  inline void add_list_role_index(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      list_role_index() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_list_role_index();

  // repeated .game_friend list_friends = 2;
  inline int list_friends_size() const;
  inline void clear_list_friends();
  static const int kListFriendsFieldNumber = 2;
  inline const ::game_friend& list_friends(int index) const;
  inline ::game_friend* mutable_list_friends(int index);
  inline ::game_friend* add_list_friends();
  inline const ::google::protobuf::RepeatedPtrField< ::game_friend >&
      list_friends() const;
  inline ::google::protobuf::RepeatedPtrField< ::game_friend >*
      mutable_list_friends();

  // @@protoc_insertion_point(class_scope:dict_game_friend)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > list_role_index_;
  ::google::protobuf::RepeatedPtrField< ::game_friend > list_friends_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Database_2eproto();
  friend void protobuf_AssignDesc_Database_2eproto();
  friend void protobuf_ShutdownFile_Database_2eproto();

  void InitAsDefaultInstance();
  static dict_game_friend* default_instance_;
};
// -------------------------------------------------------------------

class summonpet : public ::google::protobuf::Message {
 public:
  summonpet();
  virtual ~summonpet();

  summonpet(const summonpet& from);

  inline summonpet& operator=(const summonpet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const summonpet& default_instance();

  void Swap(summonpet* other);

  // implements Message ----------------------------------------------

  summonpet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const summonpet& from);
  void MergeFrom(const summonpet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint64 role_index = 1;
  inline bool has_role_index() const;
  inline void clear_role_index();
  static const int kRoleIndexFieldNumber = 1;
  inline ::google::protobuf::int64 role_index() const;
  inline void set_role_index(::google::protobuf::int64 value);

  // required sint32 reborn_sum = 2;
  inline bool has_reborn_sum() const;
  inline void clear_reborn_sum();
  static const int kRebornSumFieldNumber = 2;
  inline ::google::protobuf::int32 reborn_sum() const;
  inline void set_reborn_sum(::google::protobuf::int32 value);

  // required .role_info_public public_info = 3;
  inline bool has_public_info() const;
  inline void clear_public_info();
  static const int kPublicInfoFieldNumber = 3;
  inline const ::role_info_public& public_info() const;
  inline ::role_info_public* mutable_public_info();
  inline ::role_info_public* release_public_info();
  inline void set_allocated_public_info(::role_info_public* public_info);

  // optional .role_info_memory memory_info = 4;
  inline bool has_memory_info() const;
  inline void clear_memory_info();
  static const int kMemoryInfoFieldNumber = 4;
  inline const ::role_info_memory& memory_info() const;
  inline ::role_info_memory* mutable_memory_info();
  inline ::role_info_memory* release_memory_info();
  inline void set_allocated_memory_info(::role_info_memory* memory_info);

  // required .role_info_attr attr_info = 5;
  inline bool has_attr_info() const;
  inline void clear_attr_info();
  static const int kAttrInfoFieldNumber = 5;
  inline const ::role_info_attr& attr_info() const;
  inline ::role_info_attr* mutable_attr_info();
  inline ::role_info_attr* release_attr_info();
  inline void set_allocated_attr_info(::role_info_attr* attr_info);

  // required .role_info_skill skill_info = 7;
  inline bool has_skill_info() const;
  inline void clear_skill_info();
  static const int kSkillInfoFieldNumber = 7;
  inline const ::role_info_skill& skill_info() const;
  inline ::role_info_skill* mutable_skill_info();
  inline ::role_info_skill* release_skill_info();
  inline void set_allocated_skill_info(::role_info_skill* skill_info);

  // optional .role_info_reward reward_info = 8;
  inline bool has_reward_info() const;
  inline void clear_reward_info();
  static const int kRewardInfoFieldNumber = 8;
  inline const ::role_info_reward& reward_info() const;
  inline ::role_info_reward* mutable_reward_info();
  inline ::role_info_reward* release_reward_info();
  inline void set_allocated_reward_info(::role_info_reward* reward_info);

  // required bool is_follow = 9;
  inline bool has_is_follow() const;
  inline void clear_is_follow();
  static const int kIsFollowFieldNumber = 9;
  inline bool is_follow() const;
  inline void set_is_follow(bool value);

  // required bool is_comrade = 10;
  inline bool has_is_comrade() const;
  inline void clear_is_comrade();
  static const int kIsComradeFieldNumber = 10;
  inline bool is_comrade() const;
  inline void set_is_comrade(bool value);

  // @@protoc_insertion_point(class_scope:summonpet)
 private:
  inline void set_has_role_index();
  inline void clear_has_role_index();
  inline void set_has_reborn_sum();
  inline void clear_has_reborn_sum();
  inline void set_has_public_info();
  inline void clear_has_public_info();
  inline void set_has_memory_info();
  inline void clear_has_memory_info();
  inline void set_has_attr_info();
  inline void clear_has_attr_info();
  inline void set_has_skill_info();
  inline void clear_has_skill_info();
  inline void set_has_reward_info();
  inline void clear_has_reward_info();
  inline void set_has_is_follow();
  inline void clear_has_is_follow();
  inline void set_has_is_comrade();
  inline void clear_has_is_comrade();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 role_index_;
  ::role_info_public* public_info_;
  ::role_info_memory* memory_info_;
  ::role_info_attr* attr_info_;
  ::role_info_skill* skill_info_;
  ::google::protobuf::int32 reborn_sum_;
  bool is_follow_;
  bool is_comrade_;
  ::role_info_reward* reward_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_Database_2eproto();
  friend void protobuf_AssignDesc_Database_2eproto();
  friend void protobuf_ShutdownFile_Database_2eproto();

  void InitAsDefaultInstance();
  static summonpet* default_instance_;
};
// -------------------------------------------------------------------

class dict_summonpet : public ::google::protobuf::Message {
 public:
  dict_summonpet();
  virtual ~dict_summonpet();

  dict_summonpet(const dict_summonpet& from);

  inline dict_summonpet& operator=(const dict_summonpet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const dict_summonpet& default_instance();

  void Swap(dict_summonpet* other);

  // implements Message ----------------------------------------------

  dict_summonpet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const dict_summonpet& from);
  void MergeFrom(const dict_summonpet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated sint64 list_role_index = 1;
  inline int list_role_index_size() const;
  inline void clear_list_role_index();
  static const int kListRoleIndexFieldNumber = 1;
  inline ::google::protobuf::int64 list_role_index(int index) const;
  inline void set_list_role_index(int index, ::google::protobuf::int64 value);
  inline void add_list_role_index(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      list_role_index() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_list_role_index();

  // repeated .summonpet list_summonpet_info = 2;
  inline int list_summonpet_info_size() const;
  inline void clear_list_summonpet_info();
  static const int kListSummonpetInfoFieldNumber = 2;
  inline const ::summonpet& list_summonpet_info(int index) const;
  inline ::summonpet* mutable_list_summonpet_info(int index);
  inline ::summonpet* add_list_summonpet_info();
  inline const ::google::protobuf::RepeatedPtrField< ::summonpet >&
      list_summonpet_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::summonpet >*
      mutable_list_summonpet_info();

  // @@protoc_insertion_point(class_scope:dict_summonpet)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > list_role_index_;
  ::google::protobuf::RepeatedPtrField< ::summonpet > list_summonpet_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Database_2eproto();
  friend void protobuf_AssignDesc_Database_2eproto();
  friend void protobuf_ShutdownFile_Database_2eproto();

  void InitAsDefaultInstance();
  static dict_summonpet* default_instance_;
};
// -------------------------------------------------------------------

class task : public ::google::protobuf::Message {
 public:
  task();
  virtual ~task();

  task(const task& from);

  inline task& operator=(const task& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const task& default_instance();

  void Swap(task* other);

  // implements Message ----------------------------------------------

  task* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const task& from);
  void MergeFrom(const task& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated sint32 list_completed_task_list = 1;
  inline int list_completed_task_list_size() const;
  inline void clear_list_completed_task_list();
  static const int kListCompletedTaskListFieldNumber = 1;
  inline ::google::protobuf::int32 list_completed_task_list(int index) const;
  inline void set_list_completed_task_list(int index, ::google::protobuf::int32 value);
  inline void add_list_completed_task_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      list_completed_task_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_list_completed_task_list();

  // repeated .task_info list_can_accept_task_list = 2;
  inline int list_can_accept_task_list_size() const;
  inline void clear_list_can_accept_task_list();
  static const int kListCanAcceptTaskListFieldNumber = 2;
  inline const ::task_info& list_can_accept_task_list(int index) const;
  inline ::task_info* mutable_list_can_accept_task_list(int index);
  inline ::task_info* add_list_can_accept_task_list();
  inline const ::google::protobuf::RepeatedPtrField< ::task_info >&
      list_can_accept_task_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::task_info >*
      mutable_list_can_accept_task_list();

  // repeated .task_info list_accepted_task_list = 3;
  inline int list_accepted_task_list_size() const;
  inline void clear_list_accepted_task_list();
  static const int kListAcceptedTaskListFieldNumber = 3;
  inline const ::task_info& list_accepted_task_list(int index) const;
  inline ::task_info* mutable_list_accepted_task_list(int index);
  inline ::task_info* add_list_accepted_task_list();
  inline const ::google::protobuf::RepeatedPtrField< ::task_info >&
      list_accepted_task_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::task_info >*
      mutable_list_accepted_task_list();

  // @@protoc_insertion_point(class_scope:task)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > list_completed_task_list_;
  ::google::protobuf::RepeatedPtrField< ::task_info > list_can_accept_task_list_;
  ::google::protobuf::RepeatedPtrField< ::task_info > list_accepted_task_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Database_2eproto();
  friend void protobuf_AssignDesc_Database_2eproto();
  friend void protobuf_ShutdownFile_Database_2eproto();

  void InitAsDefaultInstance();
  static task* default_instance_;
};
// -------------------------------------------------------------------

class success : public ::google::protobuf::Message {
 public:
  success();
  virtual ~success();

  success(const success& from);

  inline success& operator=(const success& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const success& default_instance();

  void Swap(success* other);

  // implements Message ----------------------------------------------

  success* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const success& from);
  void MergeFrom(const success& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:success)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Database_2eproto();
  friend void protobuf_AssignDesc_Database_2eproto();
  friend void protobuf_ShutdownFile_Database_2eproto();

  void InitAsDefaultInstance();
  static success* default_instance_;
};
// -------------------------------------------------------------------

class guide : public ::google::protobuf::Message {
 public:
  guide();
  virtual ~guide();

  guide(const guide& from);

  inline guide& operator=(const guide& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const guide& default_instance();

  void Swap(guide* other);

  // implements Message ----------------------------------------------

  guide* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const guide& from);
  void MergeFrom(const guide& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:guide)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Database_2eproto();
  friend void protobuf_AssignDesc_Database_2eproto();
  friend void protobuf_ShutdownFile_Database_2eproto();

  void InitAsDefaultInstance();
  static guide* default_instance_;
};
// -------------------------------------------------------------------

class role_info_config : public ::google::protobuf::Message {
 public:
  role_info_config();
  virtual ~role_info_config();

  role_info_config(const role_info_config& from);

  inline role_info_config& operator=(const role_info_config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_info_config& default_instance();

  void Swap(role_info_config* other);

  // implements Message ----------------------------------------------

  role_info_config* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_info_config& from);
  void MergeFrom(const role_info_config& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool follower_auto_comrade = 2;
  inline bool has_follower_auto_comrade() const;
  inline void clear_follower_auto_comrade();
  static const int kFollowerAutoComradeFieldNumber = 2;
  inline bool follower_auto_comrade() const;
  inline void set_follower_auto_comrade(bool value);

  // @@protoc_insertion_point(class_scope:role_info_config)
 private:
  inline void set_has_follower_auto_comrade();
  inline void clear_has_follower_auto_comrade();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool follower_auto_comrade_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Database_2eproto();
  friend void protobuf_AssignDesc_Database_2eproto();
  friend void protobuf_ShutdownFile_Database_2eproto();

  void InitAsDefaultInstance();
  static role_info_config* default_instance_;
};
// -------------------------------------------------------------------

class times : public ::google::protobuf::Message {
 public:
  times();
  virtual ~times();

  times(const times& from);

  inline times& operator=(const times& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const times& default_instance();

  void Swap(times* other);

  // implements Message ----------------------------------------------

  times* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const times& from);
  void MergeFrom(const times& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint64 face_shop_last_update_time = 2;
  inline bool has_face_shop_last_update_time() const;
  inline void clear_face_shop_last_update_time();
  static const int kFaceShopLastUpdateTimeFieldNumber = 2;
  inline ::google::protobuf::int64 face_shop_last_update_time() const;
  inline void set_face_shop_last_update_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:times)
 private:
  inline void set_has_face_shop_last_update_time();
  inline void clear_has_face_shop_last_update_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 face_shop_last_update_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Database_2eproto();
  friend void protobuf_AssignDesc_Database_2eproto();
  friend void protobuf_ShutdownFile_Database_2eproto();

  void InitAsDefaultInstance();
  static times* default_instance_;
};
// -------------------------------------------------------------------

class dict_comrade_role : public ::google::protobuf::Message {
 public:
  dict_comrade_role();
  virtual ~dict_comrade_role();

  dict_comrade_role(const dict_comrade_role& from);

  inline dict_comrade_role& operator=(const dict_comrade_role& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const dict_comrade_role& default_instance();

  void Swap(dict_comrade_role* other);

  // implements Message ----------------------------------------------

  dict_comrade_role* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const dict_comrade_role& from);
  void MergeFrom(const dict_comrade_role& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated sint32 keys = 1;
  inline int keys_size() const;
  inline void clear_keys();
  static const int kKeysFieldNumber = 1;
  inline ::google::protobuf::int32 keys(int index) const;
  inline void set_keys(int index, ::google::protobuf::int32 value);
  inline void add_keys(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      keys() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_keys();

  // repeated sint64 values = 2;
  inline int values_size() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 2;
  inline ::google::protobuf::int64 values(int index) const;
  inline void set_values(int index, ::google::protobuf::int64 value);
  inline void add_values(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      values() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:dict_comrade_role)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > keys_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > values_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Database_2eproto();
  friend void protobuf_AssignDesc_Database_2eproto();
  friend void protobuf_ShutdownFile_Database_2eproto();

  void InitAsDefaultInstance();
  static dict_comrade_role* default_instance_;
};
// -------------------------------------------------------------------

class role_info_memory : public ::google::protobuf::Message {
 public:
  role_info_memory();
  virtual ~role_info_memory();

  role_info_memory(const role_info_memory& from);

  inline role_info_memory& operator=(const role_info_memory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_info_memory& default_instance();

  void Swap(role_info_memory* other);

  // implements Message ----------------------------------------------

  role_info_memory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_info_memory& from);
  void MergeFrom(const role_info_memory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated sint64 list_follow_role = 1;
  inline int list_follow_role_size() const;
  inline void clear_list_follow_role();
  static const int kListFollowRoleFieldNumber = 1;
  inline ::google::protobuf::int64 list_follow_role(int index) const;
  inline void set_list_follow_role(int index, ::google::protobuf::int64 value);
  inline void add_list_follow_role(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      list_follow_role() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_list_follow_role();

  // optional .dict_comrade_role comrade_info = 2;
  inline bool has_comrade_info() const;
  inline void clear_comrade_info();
  static const int kComradeInfoFieldNumber = 2;
  inline const ::dict_comrade_role& comrade_info() const;
  inline ::dict_comrade_role* mutable_comrade_info();
  inline ::dict_comrade_role* release_comrade_info();
  inline void set_allocated_comrade_info(::dict_comrade_role* comrade_info);

  // optional bool is_on_enter_game = 4;
  inline bool has_is_on_enter_game() const;
  inline void clear_is_on_enter_game();
  static const int kIsOnEnterGameFieldNumber = 4;
  inline bool is_on_enter_game() const;
  inline void set_is_on_enter_game(bool value);

  // optional sint32 battle_team_index = 5;
  inline bool has_battle_team_index() const;
  inline void clear_battle_team_index();
  static const int kBattleTeamIndexFieldNumber = 5;
  inline ::google::protobuf::int32 battle_team_index() const;
  inline void set_battle_team_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:role_info_memory)
 private:
  inline void set_has_comrade_info();
  inline void clear_has_comrade_info();
  inline void set_has_is_on_enter_game();
  inline void clear_has_is_on_enter_game();
  inline void set_has_battle_team_index();
  inline void clear_has_battle_team_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > list_follow_role_;
  ::dict_comrade_role* comrade_info_;
  bool is_on_enter_game_;
  ::google::protobuf::int32 battle_team_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Database_2eproto();
  friend void protobuf_AssignDesc_Database_2eproto();
  friend void protobuf_ShutdownFile_Database_2eproto();

  void InitAsDefaultInstance();
  static role_info_memory* default_instance_;
};
// -------------------------------------------------------------------

class role_info_public : public ::google::protobuf::Message {
 public:
  role_info_public();
  virtual ~role_info_public();

  role_info_public(const role_info_public& from);

  inline role_info_public& operator=(const role_info_public& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_info_public& default_instance();

  void Swap(role_info_public* other);

  // implements Message ----------------------------------------------

  role_info_public* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_info_public& from);
  void MergeFrom(const role_info_public& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint64 role_index = 1;
  inline bool has_role_index() const;
  inline void clear_role_index();
  static const int kRoleIndexFieldNumber = 1;
  inline ::google::protobuf::int64 role_index() const;
  inline void set_role_index(::google::protobuf::int64 value);

  // optional sint64 team_index = 2;
  inline bool has_team_index() const;
  inline void clear_team_index();
  static const int kTeamIndexFieldNumber = 2;
  inline ::google::protobuf::int64 team_index() const;
  inline void set_team_index(::google::protobuf::int64 value);

  // optional sint32 team_pos = 3;
  inline bool has_team_pos() const;
  inline void clear_team_pos();
  static const int kTeamPosFieldNumber = 3;
  inline ::google::protobuf::int32 team_pos() const;
  inline void set_team_pos(::google::protobuf::int32 value);

  // optional sint32 reborn_sum = 4;
  inline bool has_reborn_sum() const;
  inline void clear_reborn_sum();
  static const int kRebornSumFieldNumber = 4;
  inline ::google::protobuf::int32 reborn_sum() const;
  inline void set_reborn_sum(::google::protobuf::int32 value);

  // optional .E_OBJECT_TYPE object_type = 5 [default = EOT_INVALID];
  inline bool has_object_type() const;
  inline void clear_object_type();
  static const int kObjectTypeFieldNumber = 5;
  inline ::E_OBJECT_TYPE object_type() const;
  inline void set_object_type(::E_OBJECT_TYPE value);

  // optional bytes racial = 10;
  inline bool has_racial() const;
  inline void clear_racial();
  static const int kRacialFieldNumber = 10;
  inline const ::std::string& racial() const;
  inline void set_racial(const ::std::string& value);
  inline void set_racial(const char* value);
  inline void set_racial(const void* value, size_t size);
  inline ::std::string* mutable_racial();
  inline ::std::string* release_racial();
  inline void set_allocated_racial(::std::string* racial);

  // optional bytes gender = 11;
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 11;
  inline const ::std::string& gender() const;
  inline void set_gender(const ::std::string& value);
  inline void set_gender(const char* value);
  inline void set_gender(const void* value, size_t size);
  inline ::std::string* mutable_gender();
  inline ::std::string* release_gender();
  inline void set_allocated_gender(::std::string* gender);

  // optional .universal_data object_res = 12;
  inline bool has_object_res() const;
  inline void clear_object_res();
  static const int kObjectResFieldNumber = 12;
  inline const ::universal_data& object_res() const;
  inline ::universal_data* mutable_object_res();
  inline ::universal_data* release_object_res();
  inline void set_allocated_object_res(::universal_data* object_res);

  // optional bytes head_icon_file_small = 20;
  inline bool has_head_icon_file_small() const;
  inline void clear_head_icon_file_small();
  static const int kHeadIconFileSmallFieldNumber = 20;
  inline const ::std::string& head_icon_file_small() const;
  inline void set_head_icon_file_small(const ::std::string& value);
  inline void set_head_icon_file_small(const char* value);
  inline void set_head_icon_file_small(const void* value, size_t size);
  inline ::std::string* mutable_head_icon_file_small();
  inline ::std::string* release_head_icon_file_small();
  inline void set_allocated_head_icon_file_small(::std::string* head_icon_file_small);

  // optional uint32 head_icon_key_small = 21;
  inline bool has_head_icon_key_small() const;
  inline void clear_head_icon_key_small();
  static const int kHeadIconKeySmallFieldNumber = 21;
  inline ::google::protobuf::uint32 head_icon_key_small() const;
  inline void set_head_icon_key_small(::google::protobuf::uint32 value);

  // optional bytes head_icon_file_medium = 22;
  inline bool has_head_icon_file_medium() const;
  inline void clear_head_icon_file_medium();
  static const int kHeadIconFileMediumFieldNumber = 22;
  inline const ::std::string& head_icon_file_medium() const;
  inline void set_head_icon_file_medium(const ::std::string& value);
  inline void set_head_icon_file_medium(const char* value);
  inline void set_head_icon_file_medium(const void* value, size_t size);
  inline ::std::string* mutable_head_icon_file_medium();
  inline ::std::string* release_head_icon_file_medium();
  inline void set_allocated_head_icon_file_medium(::std::string* head_icon_file_medium);

  // optional uint32 head_icon_key_medium = 23;
  inline bool has_head_icon_key_medium() const;
  inline void clear_head_icon_key_medium();
  static const int kHeadIconKeyMediumFieldNumber = 23;
  inline ::google::protobuf::uint32 head_icon_key_medium() const;
  inline void set_head_icon_key_medium(::google::protobuf::uint32 value);

  // optional bytes head_icon_file_big = 24;
  inline bool has_head_icon_file_big() const;
  inline void clear_head_icon_file_big();
  static const int kHeadIconFileBigFieldNumber = 24;
  inline const ::std::string& head_icon_file_big() const;
  inline void set_head_icon_file_big(const ::std::string& value);
  inline void set_head_icon_file_big(const char* value);
  inline void set_head_icon_file_big(const void* value, size_t size);
  inline ::std::string* mutable_head_icon_file_big();
  inline ::std::string* release_head_icon_file_big();
  inline void set_allocated_head_icon_file_big(::std::string* head_icon_file_big);

  // optional uint32 head_icon_key_big = 25;
  inline bool has_head_icon_key_big() const;
  inline void clear_head_icon_key_big();
  static const int kHeadIconKeyBigFieldNumber = 25;
  inline ::google::protobuf::uint32 head_icon_key_big() const;
  inline void set_head_icon_key_big(::google::protobuf::uint32 value);

  // optional bytes head_icon_file_portrait = 26;
  inline bool has_head_icon_file_portrait() const;
  inline void clear_head_icon_file_portrait();
  static const int kHeadIconFilePortraitFieldNumber = 26;
  inline const ::std::string& head_icon_file_portrait() const;
  inline void set_head_icon_file_portrait(const ::std::string& value);
  inline void set_head_icon_file_portrait(const char* value);
  inline void set_head_icon_file_portrait(const void* value, size_t size);
  inline ::std::string* mutable_head_icon_file_portrait();
  inline ::std::string* release_head_icon_file_portrait();
  inline void set_allocated_head_icon_file_portrait(::std::string* head_icon_file_portrait);

  // optional uint32 head_icon_key_portrait = 27;
  inline bool has_head_icon_key_portrait() const;
  inline void clear_head_icon_key_portrait();
  static const int kHeadIconKeyPortraitFieldNumber = 27;
  inline ::google::protobuf::uint32 head_icon_key_portrait() const;
  inline void set_head_icon_key_portrait(::google::protobuf::uint32 value);

  // optional bytes nick_name = 100;
  inline bool has_nick_name() const;
  inline void clear_nick_name();
  static const int kNickNameFieldNumber = 100;
  inline const ::std::string& nick_name() const;
  inline void set_nick_name(const ::std::string& value);
  inline void set_nick_name(const char* value);
  inline void set_nick_name(const void* value, size_t size);
  inline ::std::string* mutable_nick_name();
  inline ::std::string* release_nick_name();
  inline void set_allocated_nick_name(::std::string* nick_name);

  // optional sint64 level = 101;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 101;
  inline ::google::protobuf::int64 level() const;
  inline void set_level(::google::protobuf::int64 value);

  // optional sint32 scene_id = 201;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 201;
  inline ::google::protobuf::int32 scene_id() const;
  inline void set_scene_id(::google::protobuf::int32 value);

  // optional sint32 dir = 202;
  inline bool has_dir() const;
  inline void clear_dir();
  static const int kDirFieldNumber = 202;
  inline ::google::protobuf::int32 dir() const;
  inline void set_dir(::google::protobuf::int32 value);

  // optional float pos_x = 203;
  inline bool has_pos_x() const;
  inline void clear_pos_x();
  static const int kPosXFieldNumber = 203;
  inline float pos_x() const;
  inline void set_pos_x(float value);

  // optional float pos_y = 204;
  inline bool has_pos_y() const;
  inline void clear_pos_y();
  static const int kPosYFieldNumber = 204;
  inline float pos_y() const;
  inline void set_pos_y(float value);

  // @@protoc_insertion_point(class_scope:role_info_public)
 private:
  inline void set_has_role_index();
  inline void clear_has_role_index();
  inline void set_has_team_index();
  inline void clear_has_team_index();
  inline void set_has_team_pos();
  inline void clear_has_team_pos();
  inline void set_has_reborn_sum();
  inline void clear_has_reborn_sum();
  inline void set_has_object_type();
  inline void clear_has_object_type();
  inline void set_has_racial();
  inline void clear_has_racial();
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_object_res();
  inline void clear_has_object_res();
  inline void set_has_head_icon_file_small();
  inline void clear_has_head_icon_file_small();
  inline void set_has_head_icon_key_small();
  inline void clear_has_head_icon_key_small();
  inline void set_has_head_icon_file_medium();
  inline void clear_has_head_icon_file_medium();
  inline void set_has_head_icon_key_medium();
  inline void clear_has_head_icon_key_medium();
  inline void set_has_head_icon_file_big();
  inline void clear_has_head_icon_file_big();
  inline void set_has_head_icon_key_big();
  inline void clear_has_head_icon_key_big();
  inline void set_has_head_icon_file_portrait();
  inline void clear_has_head_icon_file_portrait();
  inline void set_has_head_icon_key_portrait();
  inline void clear_has_head_icon_key_portrait();
  inline void set_has_nick_name();
  inline void clear_has_nick_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_dir();
  inline void clear_has_dir();
  inline void set_has_pos_x();
  inline void clear_has_pos_x();
  inline void set_has_pos_y();
  inline void clear_has_pos_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 role_index_;
  ::google::protobuf::int64 team_index_;
  ::google::protobuf::int32 team_pos_;
  ::google::protobuf::int32 reborn_sum_;
  ::std::string* racial_;
  ::std::string* gender_;
  int object_type_;
  ::google::protobuf::uint32 head_icon_key_small_;
  ::universal_data* object_res_;
  ::std::string* head_icon_file_small_;
  ::std::string* head_icon_file_medium_;
  ::std::string* head_icon_file_big_;
  ::google::protobuf::uint32 head_icon_key_medium_;
  ::google::protobuf::uint32 head_icon_key_big_;
  ::std::string* head_icon_file_portrait_;
  ::std::string* nick_name_;
  ::google::protobuf::uint32 head_icon_key_portrait_;
  ::google::protobuf::int32 scene_id_;
  ::google::protobuf::int64 level_;
  ::google::protobuf::int32 dir_;
  float pos_x_;
  float pos_y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(22 + 31) / 32];

  friend void  protobuf_AddDesc_Database_2eproto();
  friend void protobuf_AssignDesc_Database_2eproto();
  friend void protobuf_ShutdownFile_Database_2eproto();

  void InitAsDefaultInstance();
  static role_info_public* default_instance_;
};
// -------------------------------------------------------------------

class role_info_private : public ::google::protobuf::Message {
 public:
  role_info_private();
  virtual ~role_info_private();

  role_info_private(const role_info_private& from);

  inline role_info_private& operator=(const role_info_private& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_info_private& default_instance();

  void Swap(role_info_private* other);

  // implements Message ----------------------------------------------

  role_info_private* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_info_private& from);
  void MergeFrom(const role_info_private& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint64 battle_index = 1;
  inline bool has_battle_index() const;
  inline void clear_battle_index();
  static const int kBattleIndexFieldNumber = 1;
  inline ::google::protobuf::int64 battle_index() const;
  inline void set_battle_index(::google::protobuf::int64 value);

  // required sint64 game_coin = 2;
  inline bool has_game_coin() const;
  inline void clear_game_coin();
  static const int kGameCoinFieldNumber = 2;
  inline ::google::protobuf::int64 game_coin() const;
  inline void set_game_coin(::google::protobuf::int64 value);

  // required sint32 stamina = 3;
  inline bool has_stamina() const;
  inline void clear_stamina();
  static const int kStaminaFieldNumber = 3;
  inline ::google::protobuf::int32 stamina() const;
  inline void set_stamina(::google::protobuf::int32 value);

  // required sint64 diamond_coin = 4;
  inline bool has_diamond_coin() const;
  inline void clear_diamond_coin();
  static const int kDiamondCoinFieldNumber = 4;
  inline ::google::protobuf::int64 diamond_coin() const;
  inline void set_diamond_coin(::google::protobuf::int64 value);

  // required sint32 skill_point = 5;
  inline bool has_skill_point() const;
  inline void clear_skill_point();
  static const int kSkillPointFieldNumber = 5;
  inline ::google::protobuf::int32 skill_point() const;
  inline void set_skill_point(::google::protobuf::int32 value);

  // required sint32 vip_level = 6;
  inline bool has_vip_level() const;
  inline void clear_vip_level();
  static const int kVipLevelFieldNumber = 6;
  inline ::google::protobuf::int32 vip_level() const;
  inline void set_vip_level(::google::protobuf::int32 value);

  // repeated sint64 list_watcher_role_index = 50;
  inline int list_watcher_role_index_size() const;
  inline void clear_list_watcher_role_index();
  static const int kListWatcherRoleIndexFieldNumber = 50;
  inline ::google::protobuf::int64 list_watcher_role_index(int index) const;
  inline void set_list_watcher_role_index(int index, ::google::protobuf::int64 value);
  inline void add_list_watcher_role_index(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      list_watcher_role_index() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_list_watcher_role_index();

  // optional bytes phone = 100;
  inline bool has_phone() const;
  inline void clear_phone();
  static const int kPhoneFieldNumber = 100;
  inline const ::std::string& phone() const;
  inline void set_phone(const ::std::string& value);
  inline void set_phone(const char* value);
  inline void set_phone(const void* value, size_t size);
  inline ::std::string* mutable_phone();
  inline ::std::string* release_phone();
  inline void set_allocated_phone(::std::string* phone);

  // optional bytes email = 101;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 101;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const void* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  inline void set_allocated_email(::std::string* email);

  // optional bytes qq = 102;
  inline bool has_qq() const;
  inline void clear_qq();
  static const int kQqFieldNumber = 102;
  inline const ::std::string& qq() const;
  inline void set_qq(const ::std::string& value);
  inline void set_qq(const char* value);
  inline void set_qq(const void* value, size_t size);
  inline ::std::string* mutable_qq();
  inline ::std::string* release_qq();
  inline void set_allocated_qq(::std::string* qq);

  // optional bytes platform_type = 103;
  inline bool has_platform_type() const;
  inline void clear_platform_type();
  static const int kPlatformTypeFieldNumber = 103;
  inline const ::std::string& platform_type() const;
  inline void set_platform_type(const ::std::string& value);
  inline void set_platform_type(const char* value);
  inline void set_platform_type(const void* value, size_t size);
  inline ::std::string* mutable_platform_type();
  inline ::std::string* release_platform_type();
  inline void set_allocated_platform_type(::std::string* platform_type);

  // @@protoc_insertion_point(class_scope:role_info_private)
 private:
  inline void set_has_battle_index();
  inline void clear_has_battle_index();
  inline void set_has_game_coin();
  inline void clear_has_game_coin();
  inline void set_has_stamina();
  inline void clear_has_stamina();
  inline void set_has_diamond_coin();
  inline void clear_has_diamond_coin();
  inline void set_has_skill_point();
  inline void clear_has_skill_point();
  inline void set_has_vip_level();
  inline void clear_has_vip_level();
  inline void set_has_phone();
  inline void clear_has_phone();
  inline void set_has_email();
  inline void clear_has_email();
  inline void set_has_qq();
  inline void clear_has_qq();
  inline void set_has_platform_type();
  inline void clear_has_platform_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 battle_index_;
  ::google::protobuf::int64 game_coin_;
  ::google::protobuf::int64 diamond_coin_;
  ::google::protobuf::int32 stamina_;
  ::google::protobuf::int32 skill_point_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > list_watcher_role_index_;
  ::std::string* phone_;
  ::std::string* email_;
  ::std::string* qq_;
  ::std::string* platform_type_;
  ::google::protobuf::int32 vip_level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_Database_2eproto();
  friend void protobuf_AssignDesc_Database_2eproto();
  friend void protobuf_ShutdownFile_Database_2eproto();

  void InitAsDefaultInstance();
  static role_info_private* default_instance_;
};
// -------------------------------------------------------------------

class role_info_attr : public ::google::protobuf::Message {
 public:
  role_info_attr();
  virtual ~role_info_attr();

  role_info_attr(const role_info_attr& from);

  inline role_info_attr& operator=(const role_info_attr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_info_attr& default_instance();

  void Swap(role_info_attr* other);

  // implements Message ----------------------------------------------

  role_info_attr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_info_attr& from);
  void MergeFrom(const role_info_attr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated sint32 attr_key = 1;
  inline int attr_key_size() const;
  inline void clear_attr_key();
  static const int kAttrKeyFieldNumber = 1;
  inline ::google::protobuf::int32 attr_key(int index) const;
  inline void set_attr_key(int index, ::google::protobuf::int32 value);
  inline void add_attr_key(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      attr_key() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_attr_key();

  // repeated sint64 attr_value = 2;
  inline int attr_value_size() const;
  inline void clear_attr_value();
  static const int kAttrValueFieldNumber = 2;
  inline ::google::protobuf::int64 attr_value(int index) const;
  inline void set_attr_value(int index, ::google::protobuf::int64 value);
  inline void add_attr_value(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      attr_value() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_attr_value();

  // @@protoc_insertion_point(class_scope:role_info_attr)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > attr_key_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > attr_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Database_2eproto();
  friend void protobuf_AssignDesc_Database_2eproto();
  friend void protobuf_ShutdownFile_Database_2eproto();

  void InitAsDefaultInstance();
  static role_info_attr* default_instance_;
};
// -------------------------------------------------------------------

class role_info_reward : public ::google::protobuf::Message {
 public:
  role_info_reward();
  virtual ~role_info_reward();

  role_info_reward(const role_info_reward& from);

  inline role_info_reward& operator=(const role_info_reward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_info_reward& default_instance();

  void Swap(role_info_reward* other);

  // implements Message ----------------------------------------------

  role_info_reward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_info_reward& from);
  void MergeFrom(const role_info_reward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated sint64 list_exp = 10;
  inline int list_exp_size() const;
  inline void clear_list_exp();
  static const int kListExpFieldNumber = 10;
  inline ::google::protobuf::int64 list_exp(int index) const;
  inline void set_list_exp(int index, ::google::protobuf::int64 value);
  inline void add_list_exp(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      list_exp() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_list_exp();

  // repeated sint64 list_money = 11;
  inline int list_money_size() const;
  inline void clear_list_money();
  static const int kListMoneyFieldNumber = 11;
  inline ::google::protobuf::int64 list_money(int index) const;
  inline void set_list_money(int index, ::google::protobuf::int64 value);
  inline void add_list_money(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      list_money() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_list_money();

  // required .dict_item list_item = 12;
  inline bool has_list_item() const;
  inline void clear_list_item();
  static const int kListItemFieldNumber = 12;
  inline const ::dict_item& list_item() const;
  inline ::dict_item* mutable_list_item();
  inline ::dict_item* release_list_item();
  inline void set_allocated_list_item(::dict_item* list_item);

  // @@protoc_insertion_point(class_scope:role_info_reward)
 private:
  inline void set_has_list_item();
  inline void clear_has_list_item();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > list_exp_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > list_money_;
  ::dict_item* list_item_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Database_2eproto();
  friend void protobuf_AssignDesc_Database_2eproto();
  friend void protobuf_ShutdownFile_Database_2eproto();

  void InitAsDefaultInstance();
  static role_info_reward* default_instance_;
};
// -------------------------------------------------------------------

class roleinfo_extend_attr_1 : public ::google::protobuf::Message {
 public:
  roleinfo_extend_attr_1();
  virtual ~roleinfo_extend_attr_1();

  roleinfo_extend_attr_1(const roleinfo_extend_attr_1& from);

  inline roleinfo_extend_attr_1& operator=(const roleinfo_extend_attr_1& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const roleinfo_extend_attr_1& default_instance();

  void Swap(roleinfo_extend_attr_1* other);

  // implements Message ----------------------------------------------

  roleinfo_extend_attr_1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const roleinfo_extend_attr_1& from);
  void MergeFrom(const roleinfo_extend_attr_1& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint64 test_data = 1;
  inline bool has_test_data() const;
  inline void clear_test_data();
  static const int kTestDataFieldNumber = 1;
  inline ::google::protobuf::int64 test_data() const;
  inline void set_test_data(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:roleinfo_extend_attr_1)
 private:
  inline void set_has_test_data();
  inline void clear_has_test_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 test_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Database_2eproto();
  friend void protobuf_AssignDesc_Database_2eproto();
  friend void protobuf_ShutdownFile_Database_2eproto();

  void InitAsDefaultInstance();
  static roleinfo_extend_attr_1* default_instance_;
};
// -------------------------------------------------------------------

class roleinfo_extend_attr_2 : public ::google::protobuf::Message {
 public:
  roleinfo_extend_attr_2();
  virtual ~roleinfo_extend_attr_2();

  roleinfo_extend_attr_2(const roleinfo_extend_attr_2& from);

  inline roleinfo_extend_attr_2& operator=(const roleinfo_extend_attr_2& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const roleinfo_extend_attr_2& default_instance();

  void Swap(roleinfo_extend_attr_2* other);

  // implements Message ----------------------------------------------

  roleinfo_extend_attr_2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const roleinfo_extend_attr_2& from);
  void MergeFrom(const roleinfo_extend_attr_2& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint64 test_data = 1;
  inline bool has_test_data() const;
  inline void clear_test_data();
  static const int kTestDataFieldNumber = 1;
  inline ::google::protobuf::int64 test_data() const;
  inline void set_test_data(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:roleinfo_extend_attr_2)
 private:
  inline void set_has_test_data();
  inline void clear_has_test_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 test_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Database_2eproto();
  friend void protobuf_AssignDesc_Database_2eproto();
  friend void protobuf_ShutdownFile_Database_2eproto();

  void InitAsDefaultInstance();
  static roleinfo_extend_attr_2* default_instance_;
};
// -------------------------------------------------------------------

class roleinfo_extend_attr_3 : public ::google::protobuf::Message {
 public:
  roleinfo_extend_attr_3();
  virtual ~roleinfo_extend_attr_3();

  roleinfo_extend_attr_3(const roleinfo_extend_attr_3& from);

  inline roleinfo_extend_attr_3& operator=(const roleinfo_extend_attr_3& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const roleinfo_extend_attr_3& default_instance();

  void Swap(roleinfo_extend_attr_3* other);

  // implements Message ----------------------------------------------

  roleinfo_extend_attr_3* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const roleinfo_extend_attr_3& from);
  void MergeFrom(const roleinfo_extend_attr_3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint64 test_data = 1;
  inline bool has_test_data() const;
  inline void clear_test_data();
  static const int kTestDataFieldNumber = 1;
  inline ::google::protobuf::int64 test_data() const;
  inline void set_test_data(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:roleinfo_extend_attr_3)
 private:
  inline void set_has_test_data();
  inline void clear_has_test_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 test_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Database_2eproto();
  friend void protobuf_AssignDesc_Database_2eproto();
  friend void protobuf_ShutdownFile_Database_2eproto();

  void InitAsDefaultInstance();
  static roleinfo_extend_attr_3* default_instance_;
};
// -------------------------------------------------------------------

class roleinfo_extend_attr_4 : public ::google::protobuf::Message {
 public:
  roleinfo_extend_attr_4();
  virtual ~roleinfo_extend_attr_4();

  roleinfo_extend_attr_4(const roleinfo_extend_attr_4& from);

  inline roleinfo_extend_attr_4& operator=(const roleinfo_extend_attr_4& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const roleinfo_extend_attr_4& default_instance();

  void Swap(roleinfo_extend_attr_4* other);

  // implements Message ----------------------------------------------

  roleinfo_extend_attr_4* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const roleinfo_extend_attr_4& from);
  void MergeFrom(const roleinfo_extend_attr_4& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint64 test_data = 1;
  inline bool has_test_data() const;
  inline void clear_test_data();
  static const int kTestDataFieldNumber = 1;
  inline ::google::protobuf::int64 test_data() const;
  inline void set_test_data(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:roleinfo_extend_attr_4)
 private:
  inline void set_has_test_data();
  inline void clear_has_test_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 test_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Database_2eproto();
  friend void protobuf_AssignDesc_Database_2eproto();
  friend void protobuf_ShutdownFile_Database_2eproto();

  void InitAsDefaultInstance();
  static roleinfo_extend_attr_4* default_instance_;
};
// -------------------------------------------------------------------

class roleinfo_extend_attr_5 : public ::google::protobuf::Message {
 public:
  roleinfo_extend_attr_5();
  virtual ~roleinfo_extend_attr_5();

  roleinfo_extend_attr_5(const roleinfo_extend_attr_5& from);

  inline roleinfo_extend_attr_5& operator=(const roleinfo_extend_attr_5& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const roleinfo_extend_attr_5& default_instance();

  void Swap(roleinfo_extend_attr_5* other);

  // implements Message ----------------------------------------------

  roleinfo_extend_attr_5* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const roleinfo_extend_attr_5& from);
  void MergeFrom(const roleinfo_extend_attr_5& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint64 test_data = 1;
  inline bool has_test_data() const;
  inline void clear_test_data();
  static const int kTestDataFieldNumber = 1;
  inline ::google::protobuf::int64 test_data() const;
  inline void set_test_data(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:roleinfo_extend_attr_5)
 private:
  inline void set_has_test_data();
  inline void clear_has_test_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 test_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Database_2eproto();
  friend void protobuf_AssignDesc_Database_2eproto();
  friend void protobuf_ShutdownFile_Database_2eproto();

  void InitAsDefaultInstance();
  static roleinfo_extend_attr_5* default_instance_;
};
// -------------------------------------------------------------------

class role_info : public ::google::protobuf::Message {
 public:
  role_info();
  virtual ~role_info();

  role_info(const role_info& from);

  inline role_info& operator=(const role_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_info& default_instance();

  void Swap(role_info* other);

  // implements Message ----------------------------------------------

  role_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_info& from);
  void MergeFrom(const role_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint64 role_index = 1;
  inline bool has_role_index() const;
  inline void clear_role_index();
  static const int kRoleIndexFieldNumber = 1;
  inline ::google::protobuf::int64 role_index() const;
  inline void set_role_index(::google::protobuf::int64 value);

  // required bytes account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const void* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // required .role_info_public public_info = 3;
  inline bool has_public_info() const;
  inline void clear_public_info();
  static const int kPublicInfoFieldNumber = 3;
  inline const ::role_info_public& public_info() const;
  inline ::role_info_public* mutable_public_info();
  inline ::role_info_public* release_public_info();
  inline void set_allocated_public_info(::role_info_public* public_info);

  // optional .role_info_private private_info = 4;
  inline bool has_private_info() const;
  inline void clear_private_info();
  static const int kPrivateInfoFieldNumber = 4;
  inline const ::role_info_private& private_info() const;
  inline ::role_info_private* mutable_private_info();
  inline ::role_info_private* release_private_info();
  inline void set_allocated_private_info(::role_info_private* private_info);

  // optional .role_info_attr attr_info = 5;
  inline bool has_attr_info() const;
  inline void clear_attr_info();
  static const int kAttrInfoFieldNumber = 5;
  inline const ::role_info_attr& attr_info() const;
  inline ::role_info_attr* mutable_attr_info();
  inline ::role_info_attr* release_attr_info();
  inline void set_allocated_attr_info(::role_info_attr* attr_info);

  // optional .role_info_memory memory_info = 6;
  inline bool has_memory_info() const;
  inline void clear_memory_info();
  static const int kMemoryInfoFieldNumber = 6;
  inline const ::role_info_memory& memory_info() const;
  inline ::role_info_memory* mutable_memory_info();
  inline ::role_info_memory* release_memory_info();
  inline void set_allocated_memory_info(::role_info_memory* memory_info);

  // optional .role_info_skill skill_info = 7;
  inline bool has_skill_info() const;
  inline void clear_skill_info();
  static const int kSkillInfoFieldNumber = 7;
  inline const ::role_info_skill& skill_info() const;
  inline ::role_info_skill* mutable_skill_info();
  inline ::role_info_skill* release_skill_info();
  inline void set_allocated_skill_info(::role_info_skill* skill_info);

  // optional .role_info_reward reward_info = 8;
  inline bool has_reward_info() const;
  inline void clear_reward_info();
  static const int kRewardInfoFieldNumber = 8;
  inline const ::role_info_reward& reward_info() const;
  inline ::role_info_reward* mutable_reward_info();
  inline ::role_info_reward* release_reward_info();
  inline void set_allocated_reward_info(::role_info_reward* reward_info);

  // optional .role_info_config config_info = 9;
  inline bool has_config_info() const;
  inline void clear_config_info();
  static const int kConfigInfoFieldNumber = 9;
  inline const ::role_info_config& config_info() const;
  inline ::role_info_config* mutable_config_info();
  inline ::role_info_config* release_config_info();
  inline void set_allocated_config_info(::role_info_config* config_info);

  // optional sint32 bag_page_count = 10;
  inline bool has_bag_page_count() const;
  inline void clear_bag_page_count();
  static const int kBagPageCountFieldNumber = 10;
  inline ::google::protobuf::int32 bag_page_count() const;
  inline void set_bag_page_count(::google::protobuf::int32 value);

  // optional .dict_item items = 103;
  inline bool has_items() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 103;
  inline const ::dict_item& items() const;
  inline ::dict_item* mutable_items();
  inline ::dict_item* release_items();
  inline void set_allocated_items(::dict_item* items);

  // optional .dict_item equips = 106;
  inline bool has_equips() const;
  inline void clear_equips();
  static const int kEquipsFieldNumber = 106;
  inline const ::dict_item& equips() const;
  inline ::dict_item* mutable_equips();
  inline ::dict_item* release_equips();
  inline void set_allocated_equips(::dict_item* equips);

  // optional .dict_summonpet summonpets = 202;
  inline bool has_summonpets() const;
  inline void clear_summonpets();
  static const int kSummonpetsFieldNumber = 202;
  inline const ::dict_summonpet& summonpets() const;
  inline ::dict_summonpet* mutable_summonpets();
  inline ::dict_summonpet* release_summonpets();
  inline void set_allocated_summonpets(::dict_summonpet* summonpets);

  // optional .dict_game_friend friends = 203;
  inline bool has_friends() const;
  inline void clear_friends();
  static const int kFriendsFieldNumber = 203;
  inline const ::dict_game_friend& friends() const;
  inline ::dict_game_friend* mutable_friends();
  inline ::dict_game_friend* release_friends();
  inline void set_allocated_friends(::dict_game_friend* friends);

  // optional .task task_info = 204;
  inline bool has_task_info() const;
  inline void clear_task_info();
  static const int kTaskInfoFieldNumber = 204;
  inline const ::task& task_info() const;
  inline ::task* mutable_task_info();
  inline ::task* release_task_info();
  inline void set_allocated_task_info(::task* task_info);

  // optional .success list_success = 205;
  inline bool has_list_success() const;
  inline void clear_list_success();
  static const int kListSuccessFieldNumber = 205;
  inline const ::success& list_success() const;
  inline ::success* mutable_list_success();
  inline ::success* release_list_success();
  inline void set_allocated_list_success(::success* list_success);

  // optional .guide list_guide = 206;
  inline bool has_list_guide() const;
  inline void clear_list_guide();
  static const int kListGuideFieldNumber = 206;
  inline const ::guide& list_guide() const;
  inline ::guide* mutable_list_guide();
  inline ::guide* release_list_guide();
  inline void set_allocated_list_guide(::guide* list_guide);

  // optional .times times = 208;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 208;
  inline const ::times& times() const;
  inline ::times* mutable_times();
  inline ::times* release_times();
  inline void set_allocated_times(::times* times);

  // optional .roleinfo_extend_attr_1 extend_attr1 = 301;
  inline bool has_extend_attr1() const;
  inline void clear_extend_attr1();
  static const int kExtendAttr1FieldNumber = 301;
  inline const ::roleinfo_extend_attr_1& extend_attr1() const;
  inline ::roleinfo_extend_attr_1* mutable_extend_attr1();
  inline ::roleinfo_extend_attr_1* release_extend_attr1();
  inline void set_allocated_extend_attr1(::roleinfo_extend_attr_1* extend_attr1);

  // optional .roleinfo_extend_attr_2 extend_attr2 = 302;
  inline bool has_extend_attr2() const;
  inline void clear_extend_attr2();
  static const int kExtendAttr2FieldNumber = 302;
  inline const ::roleinfo_extend_attr_2& extend_attr2() const;
  inline ::roleinfo_extend_attr_2* mutable_extend_attr2();
  inline ::roleinfo_extend_attr_2* release_extend_attr2();
  inline void set_allocated_extend_attr2(::roleinfo_extend_attr_2* extend_attr2);

  // optional .roleinfo_extend_attr_3 extend_attr3 = 303;
  inline bool has_extend_attr3() const;
  inline void clear_extend_attr3();
  static const int kExtendAttr3FieldNumber = 303;
  inline const ::roleinfo_extend_attr_3& extend_attr3() const;
  inline ::roleinfo_extend_attr_3* mutable_extend_attr3();
  inline ::roleinfo_extend_attr_3* release_extend_attr3();
  inline void set_allocated_extend_attr3(::roleinfo_extend_attr_3* extend_attr3);

  // optional .roleinfo_extend_attr_4 extend_attr4 = 304;
  inline bool has_extend_attr4() const;
  inline void clear_extend_attr4();
  static const int kExtendAttr4FieldNumber = 304;
  inline const ::roleinfo_extend_attr_4& extend_attr4() const;
  inline ::roleinfo_extend_attr_4* mutable_extend_attr4();
  inline ::roleinfo_extend_attr_4* release_extend_attr4();
  inline void set_allocated_extend_attr4(::roleinfo_extend_attr_4* extend_attr4);

  // optional .roleinfo_extend_attr_5 extend_attr5 = 305;
  inline bool has_extend_attr5() const;
  inline void clear_extend_attr5();
  static const int kExtendAttr5FieldNumber = 305;
  inline const ::roleinfo_extend_attr_5& extend_attr5() const;
  inline ::roleinfo_extend_attr_5* mutable_extend_attr5();
  inline ::roleinfo_extend_attr_5* release_extend_attr5();
  inline void set_allocated_extend_attr5(::roleinfo_extend_attr_5* extend_attr5);

  // @@protoc_insertion_point(class_scope:role_info)
 private:
  inline void set_has_role_index();
  inline void clear_has_role_index();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_public_info();
  inline void clear_has_public_info();
  inline void set_has_private_info();
  inline void clear_has_private_info();
  inline void set_has_attr_info();
  inline void clear_has_attr_info();
  inline void set_has_memory_info();
  inline void clear_has_memory_info();
  inline void set_has_skill_info();
  inline void clear_has_skill_info();
  inline void set_has_reward_info();
  inline void clear_has_reward_info();
  inline void set_has_config_info();
  inline void clear_has_config_info();
  inline void set_has_bag_page_count();
  inline void clear_has_bag_page_count();
  inline void set_has_items();
  inline void clear_has_items();
  inline void set_has_equips();
  inline void clear_has_equips();
  inline void set_has_summonpets();
  inline void clear_has_summonpets();
  inline void set_has_friends();
  inline void clear_has_friends();
  inline void set_has_task_info();
  inline void clear_has_task_info();
  inline void set_has_list_success();
  inline void clear_has_list_success();
  inline void set_has_list_guide();
  inline void clear_has_list_guide();
  inline void set_has_times();
  inline void clear_has_times();
  inline void set_has_extend_attr1();
  inline void clear_has_extend_attr1();
  inline void set_has_extend_attr2();
  inline void clear_has_extend_attr2();
  inline void set_has_extend_attr3();
  inline void clear_has_extend_attr3();
  inline void set_has_extend_attr4();
  inline void clear_has_extend_attr4();
  inline void set_has_extend_attr5();
  inline void clear_has_extend_attr5();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 role_index_;
  ::std::string* account_;
  ::role_info_public* public_info_;
  ::role_info_private* private_info_;
  ::role_info_attr* attr_info_;
  ::role_info_memory* memory_info_;
  ::role_info_skill* skill_info_;
  ::role_info_reward* reward_info_;
  ::role_info_config* config_info_;
  ::dict_item* items_;
  ::dict_item* equips_;
  ::dict_summonpet* summonpets_;
  ::dict_game_friend* friends_;
  ::task* task_info_;
  ::success* list_success_;
  ::guide* list_guide_;
  ::times* times_;
  ::roleinfo_extend_attr_1* extend_attr1_;
  ::roleinfo_extend_attr_2* extend_attr2_;
  ::roleinfo_extend_attr_3* extend_attr3_;
  ::roleinfo_extend_attr_4* extend_attr4_;
  ::roleinfo_extend_attr_5* extend_attr5_;
  ::google::protobuf::int32 bag_page_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(23 + 31) / 32];

  friend void  protobuf_AddDesc_Database_2eproto();
  friend void protobuf_AssignDesc_Database_2eproto();
  friend void protobuf_ShutdownFile_Database_2eproto();

  void InitAsDefaultInstance();
  static role_info* default_instance_;
};
// ===================================================================


// ===================================================================

// sql_result_register

// required int32 ret_code = 1;
inline bool sql_result_register::has_ret_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sql_result_register::set_has_ret_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sql_result_register::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sql_result_register::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::google::protobuf::int32 sql_result_register::ret_code() const {
  return ret_code_;
}
inline void sql_result_register::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
}

// -------------------------------------------------------------------

// sql_ret_role_count

// required bool is_ok = 1;
inline bool sql_ret_role_count::has_is_ok() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sql_ret_role_count::set_has_is_ok() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sql_ret_role_count::clear_has_is_ok() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sql_ret_role_count::clear_is_ok() {
  is_ok_ = false;
  clear_has_is_ok();
}
inline bool sql_ret_role_count::is_ok() const {
  return is_ok_;
}
inline void sql_ret_role_count::set_is_ok(bool value) {
  set_has_is_ok();
  is_ok_ = value;
}

// repeated sint64 role_index = 2;
inline int sql_ret_role_count::role_index_size() const {
  return role_index_.size();
}
inline void sql_ret_role_count::clear_role_index() {
  role_index_.Clear();
}
inline ::google::protobuf::int64 sql_ret_role_count::role_index(int index) const {
  return role_index_.Get(index);
}
inline void sql_ret_role_count::set_role_index(int index, ::google::protobuf::int64 value) {
  role_index_.Set(index, value);
}
inline void sql_ret_role_count::add_role_index(::google::protobuf::int64 value) {
  role_index_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
sql_ret_role_count::role_index() const {
  return role_index_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
sql_ret_role_count::mutable_role_index() {
  return &role_index_;
}

// -------------------------------------------------------------------

// sql_ret_cluster_node_info

// required sint64 node_index = 1;
inline bool sql_ret_cluster_node_info::has_node_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sql_ret_cluster_node_info::set_has_node_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sql_ret_cluster_node_info::clear_has_node_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sql_ret_cluster_node_info::clear_node_index() {
  node_index_ = GOOGLE_LONGLONG(0);
  clear_has_node_index();
}
inline ::google::protobuf::int64 sql_ret_cluster_node_info::node_index() const {
  return node_index_;
}
inline void sql_ret_cluster_node_info::set_node_index(::google::protobuf::int64 value) {
  set_has_node_index();
  node_index_ = value;
}

// required sint64 intaddr = 2;
inline bool sql_ret_cluster_node_info::has_intaddr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sql_ret_cluster_node_info::set_has_intaddr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sql_ret_cluster_node_info::clear_has_intaddr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sql_ret_cluster_node_info::clear_intaddr() {
  intaddr_ = GOOGLE_LONGLONG(0);
  clear_has_intaddr();
}
inline ::google::protobuf::int64 sql_ret_cluster_node_info::intaddr() const {
  return intaddr_;
}
inline void sql_ret_cluster_node_info::set_intaddr(::google::protobuf::int64 value) {
  set_has_intaddr();
  intaddr_ = value;
}

// required sint64 unit_next_index = 3;
inline bool sql_ret_cluster_node_info::has_unit_next_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sql_ret_cluster_node_info::set_has_unit_next_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sql_ret_cluster_node_info::clear_has_unit_next_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sql_ret_cluster_node_info::clear_unit_next_index() {
  unit_next_index_ = GOOGLE_LONGLONG(0);
  clear_has_unit_next_index();
}
inline ::google::protobuf::int64 sql_ret_cluster_node_info::unit_next_index() const {
  return unit_next_index_;
}
inline void sql_ret_cluster_node_info::set_unit_next_index(::google::protobuf::int64 value) {
  set_has_unit_next_index();
  unit_next_index_ = value;
}

// required sint64 cpu_pressure = 4;
inline bool sql_ret_cluster_node_info::has_cpu_pressure() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sql_ret_cluster_node_info::set_has_cpu_pressure() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sql_ret_cluster_node_info::clear_has_cpu_pressure() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sql_ret_cluster_node_info::clear_cpu_pressure() {
  cpu_pressure_ = GOOGLE_LONGLONG(0);
  clear_has_cpu_pressure();
}
inline ::google::protobuf::int64 sql_ret_cluster_node_info::cpu_pressure() const {
  return cpu_pressure_;
}
inline void sql_ret_cluster_node_info::set_cpu_pressure(::google::protobuf::int64 value) {
  set_has_cpu_pressure();
  cpu_pressure_ = value;
}

// required bool is_online = 5;
inline bool sql_ret_cluster_node_info::has_is_online() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sql_ret_cluster_node_info::set_has_is_online() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sql_ret_cluster_node_info::clear_has_is_online() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sql_ret_cluster_node_info::clear_is_online() {
  is_online_ = false;
  clear_has_is_online();
}
inline bool sql_ret_cluster_node_info::is_online() const {
  return is_online_;
}
inline void sql_ret_cluster_node_info::set_is_online(bool value) {
  set_has_is_online();
  is_online_ = value;
}

// -------------------------------------------------------------------

// sql_check_account_key

// required bytes account = 1;
inline bool sql_check_account_key::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sql_check_account_key::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sql_check_account_key::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sql_check_account_key::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& sql_check_account_key::account() const {
  return *account_;
}
inline void sql_check_account_key::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void sql_check_account_key::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void sql_check_account_key::set_account(const void* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sql_check_account_key::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* sql_check_account_key::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return nullptr;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sql_check_account_key::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// sql_result_login

// required bytes account = 1;
inline bool sql_result_login::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sql_result_login::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sql_result_login::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sql_result_login::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& sql_result_login::account() const {
  return *account_;
}
inline void sql_result_login::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void sql_result_login::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void sql_result_login::set_account(const void* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sql_result_login::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* sql_result_login::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return nullptr;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sql_result_login::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required sint64 create_time = 2;
inline bool sql_result_login::has_create_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sql_result_login::set_has_create_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sql_result_login::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sql_result_login::clear_create_time() {
  create_time_ = GOOGLE_LONGLONG(0);
  clear_has_create_time();
}
inline ::google::protobuf::int64 sql_result_login::create_time() const {
  return create_time_;
}
inline void sql_result_login::set_create_time(::google::protobuf::int64 value) {
  set_has_create_time();
  create_time_ = value;
}

// required sint64 login_time = 3;
inline bool sql_result_login::has_login_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sql_result_login::set_has_login_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sql_result_login::clear_has_login_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sql_result_login::clear_login_time() {
  login_time_ = GOOGLE_LONGLONG(0);
  clear_has_login_time();
}
inline ::google::protobuf::int64 sql_result_login::login_time() const {
  return login_time_;
}
inline void sql_result_login::set_login_time(::google::protobuf::int64 value) {
  set_has_login_time();
  login_time_ = value;
}

// required bool can_login_flag = 4;
inline bool sql_result_login::has_can_login_flag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sql_result_login::set_has_can_login_flag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sql_result_login::clear_has_can_login_flag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sql_result_login::clear_can_login_flag() {
  can_login_flag_ = false;
  clear_has_can_login_flag();
}
inline bool sql_result_login::can_login_flag() const {
  return can_login_flag_;
}
inline void sql_result_login::set_can_login_flag(bool value) {
  set_has_can_login_flag();
  can_login_flag_ = value;
}

// required bool can_profit_flag = 5;
inline bool sql_result_login::has_can_profit_flag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sql_result_login::set_has_can_profit_flag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sql_result_login::clear_has_can_profit_flag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sql_result_login::clear_can_profit_flag() {
  can_profit_flag_ = false;
  clear_has_can_profit_flag();
}
inline bool sql_result_login::can_profit_flag() const {
  return can_profit_flag_;
}
inline void sql_result_login::set_can_profit_flag(bool value) {
  set_has_can_profit_flag();
  can_profit_flag_ = value;
}

// required bool can_senior_operation = 6;
inline bool sql_result_login::has_can_senior_operation() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sql_result_login::set_has_can_senior_operation() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sql_result_login::clear_has_can_senior_operation() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sql_result_login::clear_can_senior_operation() {
  can_senior_operation_ = false;
  clear_has_can_senior_operation();
}
inline bool sql_result_login::can_senior_operation() const {
  return can_senior_operation_;
}
inline void sql_result_login::set_can_senior_operation(bool value) {
  set_has_can_senior_operation();
  can_senior_operation_ = value;
}

// -------------------------------------------------------------------

// sql_result_role_online

// required sint32 count = 1;
inline bool sql_result_role_online::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sql_result_role_online::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sql_result_role_online::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sql_result_role_online::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 sql_result_role_online::count() const {
  return count_;
}
inline void sql_result_role_online::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// sql_result_role_offline

// required sint32 count = 1;
inline bool sql_result_role_offline::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sql_result_role_offline::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sql_result_role_offline::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sql_result_role_offline::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 sql_result_role_offline::count() const {
  return count_;
}
inline void sql_result_role_offline::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// sql_result_role_count

// required sint64 role_index = 1;
inline bool sql_result_role_count::has_role_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sql_result_role_count::set_has_role_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sql_result_role_count::clear_has_role_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sql_result_role_count::clear_role_index() {
  role_index_ = GOOGLE_LONGLONG(0);
  clear_has_role_index();
}
inline ::google::protobuf::int64 sql_result_role_count::role_index() const {
  return role_index_;
}
inline void sql_result_role_count::set_role_index(::google::protobuf::int64 value) {
  set_has_role_index();
  role_index_ = value;
}

// -------------------------------------------------------------------

// sql_result_createrole

// required sint32 ret_code = 1;
inline bool sql_result_createrole::has_ret_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sql_result_createrole::set_has_ret_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sql_result_createrole::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sql_result_createrole::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::google::protobuf::int32 sql_result_createrole::ret_code() const {
  return ret_code_;
}
inline void sql_result_createrole::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
}

// -------------------------------------------------------------------

// sql_result_save_role

// required int32 ret_code = 2;
inline bool sql_result_save_role::has_ret_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sql_result_save_role::set_has_ret_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sql_result_save_role::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sql_result_save_role::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::google::protobuf::int32 sql_result_save_role::ret_code() const {
  return ret_code_;
}
inline void sql_result_save_role::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
}

// -------------------------------------------------------------------

// item

// optional sint64 item_index = 1;
inline bool item::has_item_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void item::set_has_item_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void item::clear_has_item_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void item::clear_item_index() {
  item_index_ = GOOGLE_LONGLONG(0);
  clear_has_item_index();
}
inline ::google::protobuf::int64 item::item_index() const {
  return item_index_;
}
inline void item::set_item_index(::google::protobuf::int64 value) {
  set_has_item_index();
  item_index_ = value;
}

// optional bytes item_type = 2;
inline bool item::has_item_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void item::set_has_item_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void item::clear_has_item_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void item::clear_item_type() {
  if (item_type_ != &::google::protobuf::internal::kEmptyString) {
    item_type_->clear();
  }
  clear_has_item_type();
}
inline const ::std::string& item::item_type() const {
  return *item_type_;
}
inline void item::set_item_type(const ::std::string& value) {
  set_has_item_type();
  if (item_type_ == &::google::protobuf::internal::kEmptyString) {
    item_type_ = new ::std::string;
  }
  item_type_->assign(value);
}
inline void item::set_item_type(const char* value) {
  set_has_item_type();
  if (item_type_ == &::google::protobuf::internal::kEmptyString) {
    item_type_ = new ::std::string;
  }
  item_type_->assign(value);
}
inline void item::set_item_type(const void* value, size_t size) {
  set_has_item_type();
  if (item_type_ == &::google::protobuf::internal::kEmptyString) {
    item_type_ = new ::std::string;
  }
  item_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* item::mutable_item_type() {
  set_has_item_type();
  if (item_type_ == &::google::protobuf::internal::kEmptyString) {
    item_type_ = new ::std::string;
  }
  return item_type_;
}
inline ::std::string* item::release_item_type() {
  clear_has_item_type();
  if (item_type_ == &::google::protobuf::internal::kEmptyString) {
    return nullptr;
  } else {
    ::std::string* temp = item_type_;
    item_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void item::set_allocated_item_type(::std::string* item_type) {
  if (item_type_ != &::google::protobuf::internal::kEmptyString) {
    delete item_type_;
  }
  if (item_type) {
    set_has_item_type();
    item_type_ = item_type;
  } else {
    clear_has_item_type();
    item_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 item_pos = 3;
inline bool item::has_item_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void item::set_has_item_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void item::clear_has_item_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void item::clear_item_pos() {
  item_pos_ = 0u;
  clear_has_item_pos();
}
inline ::google::protobuf::uint32 item::item_pos() const {
  return item_pos_;
}
inline void item::set_item_pos(::google::protobuf::uint32 value) {
  set_has_item_pos();
  item_pos_ = value;
}

// optional bytes item_name = 4;
inline bool item::has_item_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void item::set_has_item_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void item::clear_has_item_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void item::clear_item_name() {
  if (item_name_ != &::google::protobuf::internal::kEmptyString) {
    item_name_->clear();
  }
  clear_has_item_name();
}
inline const ::std::string& item::item_name() const {
  return *item_name_;
}
inline void item::set_item_name(const ::std::string& value) {
  set_has_item_name();
  if (item_name_ == &::google::protobuf::internal::kEmptyString) {
    item_name_ = new ::std::string;
  }
  item_name_->assign(value);
}
inline void item::set_item_name(const char* value) {
  set_has_item_name();
  if (item_name_ == &::google::protobuf::internal::kEmptyString) {
    item_name_ = new ::std::string;
  }
  item_name_->assign(value);
}
inline void item::set_item_name(const void* value, size_t size) {
  set_has_item_name();
  if (item_name_ == &::google::protobuf::internal::kEmptyString) {
    item_name_ = new ::std::string;
  }
  item_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* item::mutable_item_name() {
  set_has_item_name();
  if (item_name_ == &::google::protobuf::internal::kEmptyString) {
    item_name_ = new ::std::string;
  }
  return item_name_;
}
inline ::std::string* item::release_item_name() {
  clear_has_item_name();
  if (item_name_ == &::google::protobuf::internal::kEmptyString) {
    return nullptr;
  } else {
    ::std::string* temp = item_name_;
    item_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void item::set_allocated_item_name(::std::string* item_name) {
  if (item_name_ != &::google::protobuf::internal::kEmptyString) {
    delete item_name_;
  }
  if (item_name) {
    set_has_item_name();
    item_name_ = item_name;
  } else {
    clear_has_item_name();
    item_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional sint32 item_count = 5;
inline bool item::has_item_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void item::set_has_item_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void item::clear_has_item_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void item::clear_item_count() {
  item_count_ = 0;
  clear_has_item_count();
}
inline ::google::protobuf::int32 item::item_count() const {
  return item_count_;
}
inline void item::set_item_count(::google::protobuf::int32 value) {
  set_has_item_count();
  item_count_ = value;
}

// optional bytes item_res_file = 6;
inline bool item::has_item_res_file() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void item::set_has_item_res_file() {
  _has_bits_[0] |= 0x00000020u;
}
inline void item::clear_has_item_res_file() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void item::clear_item_res_file() {
  if (item_res_file_ != &::google::protobuf::internal::kEmptyString) {
    item_res_file_->clear();
  }
  clear_has_item_res_file();
}
inline const ::std::string& item::item_res_file() const {
  return *item_res_file_;
}
inline void item::set_item_res_file(const ::std::string& value) {
  set_has_item_res_file();
  if (item_res_file_ == &::google::protobuf::internal::kEmptyString) {
    item_res_file_ = new ::std::string;
  }
  item_res_file_->assign(value);
}
inline void item::set_item_res_file(const char* value) {
  set_has_item_res_file();
  if (item_res_file_ == &::google::protobuf::internal::kEmptyString) {
    item_res_file_ = new ::std::string;
  }
  item_res_file_->assign(value);
}
inline void item::set_item_res_file(const void* value, size_t size) {
  set_has_item_res_file();
  if (item_res_file_ == &::google::protobuf::internal::kEmptyString) {
    item_res_file_ = new ::std::string;
  }
  item_res_file_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* item::mutable_item_res_file() {
  set_has_item_res_file();
  if (item_res_file_ == &::google::protobuf::internal::kEmptyString) {
    item_res_file_ = new ::std::string;
  }
  return item_res_file_;
}
inline ::std::string* item::release_item_res_file() {
  clear_has_item_res_file();
  if (item_res_file_ == &::google::protobuf::internal::kEmptyString) {
    return nullptr;
  } else {
    ::std::string* temp = item_res_file_;
    item_res_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void item::set_allocated_item_res_file(::std::string* item_res_file) {
  if (item_res_file_ != &::google::protobuf::internal::kEmptyString) {
    delete item_res_file_;
  }
  if (item_res_file) {
    set_has_item_res_file();
    item_res_file_ = item_res_file;
  } else {
    clear_has_item_res_file();
    item_res_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 item_res_key = 7;
inline bool item::has_item_res_key() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void item::set_has_item_res_key() {
  _has_bits_[0] |= 0x00000040u;
}
inline void item::clear_has_item_res_key() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void item::clear_item_res_key() {
  item_res_key_ = 0u;
  clear_has_item_res_key();
}
inline ::google::protobuf::uint32 item::item_res_key() const {
  return item_res_key_;
}
inline void item::set_item_res_key(::google::protobuf::uint32 value) {
  set_has_item_res_key();
  item_res_key_ = value;
}

// optional .universal_data ex_info = 8;
inline bool item::has_ex_info() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void item::set_has_ex_info() {
  _has_bits_[0] |= 0x00000080u;
}
inline void item::clear_has_ex_info() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void item::clear_ex_info() {
  if (ex_info_ != nullptr) ex_info_->::universal_data::Clear();
  clear_has_ex_info();
}
inline const ::universal_data& item::ex_info() const {
  return ex_info_ != nullptr ? *ex_info_ : *default_instance_->ex_info_;
}
inline ::universal_data* item::mutable_ex_info() {
  set_has_ex_info();
  if (ex_info_ == nullptr) ex_info_ = new ::universal_data;
  return ex_info_;
}
inline ::universal_data* item::release_ex_info() {
  clear_has_ex_info();
  ::universal_data* temp = ex_info_;
  ex_info_ = nullptr;
  return temp;
}
inline void item::set_allocated_ex_info(::universal_data* ex_info) {
  delete ex_info_;
  ex_info_ = ex_info;
  if (ex_info) {
    set_has_ex_info();
  } else {
    clear_has_ex_info();
  }
}

// -------------------------------------------------------------------

// dict_item

// repeated sint64 item_index = 1;
inline int dict_item::item_index_size() const {
  return item_index_.size();
}
inline void dict_item::clear_item_index() {
  item_index_.Clear();
}
inline ::google::protobuf::int64 dict_item::item_index(int index) const {
  return item_index_.Get(index);
}
inline void dict_item::set_item_index(int index, ::google::protobuf::int64 value) {
  item_index_.Set(index, value);
}
inline void dict_item::add_item_index(::google::protobuf::int64 value) {
  item_index_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
dict_item::item_index() const {
  return item_index_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
dict_item::mutable_item_index() {
  return &item_index_;
}

// repeated .item item_info = 2;
inline int dict_item::item_info_size() const {
  return item_info_.size();
}
inline void dict_item::clear_item_info() {
  item_info_.Clear();
}
inline const ::item& dict_item::item_info(int index) const {
  return item_info_.Get(index);
}
inline ::item* dict_item::mutable_item_info(int index) {
  return item_info_.Mutable(index);
}
inline ::item* dict_item::add_item_info() {
  return item_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::item >&
dict_item::item_info() const {
  return item_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::item >*
dict_item::mutable_item_info() {
  return &item_info_;
}

// -------------------------------------------------------------------

// suit_goods_info

// required sint32 can_buy_suit_shop_id = 1;
inline bool suit_goods_info::has_can_buy_suit_shop_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void suit_goods_info::set_has_can_buy_suit_shop_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void suit_goods_info::clear_has_can_buy_suit_shop_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void suit_goods_info::clear_can_buy_suit_shop_id() {
  can_buy_suit_shop_id_ = 0;
  clear_has_can_buy_suit_shop_id();
}
inline ::google::protobuf::int32 suit_goods_info::can_buy_suit_shop_id() const {
  return can_buy_suit_shop_id_;
}
inline void suit_goods_info::set_can_buy_suit_shop_id(::google::protobuf::int32 value) {
  set_has_can_buy_suit_shop_id();
  can_buy_suit_shop_id_ = value;
}

// required bool is_buy = 2;
inline bool suit_goods_info::has_is_buy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void suit_goods_info::set_has_is_buy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void suit_goods_info::clear_has_is_buy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void suit_goods_info::clear_is_buy() {
  is_buy_ = false;
  clear_has_is_buy();
}
inline bool suit_goods_info::is_buy() const {
  return is_buy_;
}
inline void suit_goods_info::set_is_buy(bool value) {
  set_has_is_buy();
  is_buy_ = value;
}

// -------------------------------------------------------------------

// suit_info

// required sint32 suit_id = 1;
inline bool suit_info::has_suit_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void suit_info::set_has_suit_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void suit_info::clear_has_suit_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void suit_info::clear_suit_id() {
  suit_id_ = 0;
  clear_has_suit_id();
}
inline ::google::protobuf::int32 suit_info::suit_id() const {
  return suit_id_;
}
inline void suit_info::set_suit_id(::google::protobuf::int32 value) {
  set_has_suit_id();
  suit_id_ = value;
}

// required sint64 suit_unixtime_time_out_stamp = 2;
inline bool suit_info::has_suit_unixtime_time_out_stamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void suit_info::set_has_suit_unixtime_time_out_stamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void suit_info::clear_has_suit_unixtime_time_out_stamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void suit_info::clear_suit_unixtime_time_out_stamp() {
  suit_unixtime_time_out_stamp_ = GOOGLE_LONGLONG(0);
  clear_has_suit_unixtime_time_out_stamp();
}
inline ::google::protobuf::int64 suit_info::suit_unixtime_time_out_stamp() const {
  return suit_unixtime_time_out_stamp_;
}
inline void suit_info::set_suit_unixtime_time_out_stamp(::google::protobuf::int64 value) {
  set_has_suit_unixtime_time_out_stamp();
  suit_unixtime_time_out_stamp_ = value;
}

// required sint32 suit_duration_type = 3;
inline bool suit_info::has_suit_duration_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void suit_info::set_has_suit_duration_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void suit_info::clear_has_suit_duration_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void suit_info::clear_suit_duration_type() {
  suit_duration_type_ = 0;
  clear_has_suit_duration_type();
}
inline ::google::protobuf::int32 suit_info::suit_duration_type() const {
  return suit_duration_type_;
}
inline void suit_info::set_suit_duration_type(::google::protobuf::int32 value) {
  set_has_suit_duration_type();
  suit_duration_type_ = value;
}

// -------------------------------------------------------------------

// list_role_suit_info

// repeated .suit_goods_info list_buy_suit = 1;
inline int list_role_suit_info::list_buy_suit_size() const {
  return list_buy_suit_.size();
}
inline void list_role_suit_info::clear_list_buy_suit() {
  list_buy_suit_.Clear();
}
inline const ::suit_goods_info& list_role_suit_info::list_buy_suit(int index) const {
  return list_buy_suit_.Get(index);
}
inline ::suit_goods_info* list_role_suit_info::mutable_list_buy_suit(int index) {
  return list_buy_suit_.Mutable(index);
}
inline ::suit_goods_info* list_role_suit_info::add_list_buy_suit() {
  return list_buy_suit_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::suit_goods_info >&
list_role_suit_info::list_buy_suit() const {
  return list_buy_suit_;
}
inline ::google::protobuf::RepeatedPtrField< ::suit_goods_info >*
list_role_suit_info::mutable_list_buy_suit() {
  return &list_buy_suit_;
}

// required sint64 suit_shop_last_update_time = 2;
inline bool list_role_suit_info::has_suit_shop_last_update_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void list_role_suit_info::set_has_suit_shop_last_update_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void list_role_suit_info::clear_has_suit_shop_last_update_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void list_role_suit_info::clear_suit_shop_last_update_time() {
  suit_shop_last_update_time_ = GOOGLE_LONGLONG(0);
  clear_has_suit_shop_last_update_time();
}
inline ::google::protobuf::int64 list_role_suit_info::suit_shop_last_update_time() const {
  return suit_shop_last_update_time_;
}
inline void list_role_suit_info::set_suit_shop_last_update_time(::google::protobuf::int64 value) {
  set_has_suit_shop_last_update_time();
  suit_shop_last_update_time_ = value;
}

// optional .suit_info current_suit = 3;
inline bool list_role_suit_info::has_current_suit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void list_role_suit_info::set_has_current_suit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void list_role_suit_info::clear_has_current_suit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void list_role_suit_info::clear_current_suit() {
  if (current_suit_ != nullptr) current_suit_->::suit_info::Clear();
  clear_has_current_suit();
}
inline const ::suit_info& list_role_suit_info::current_suit() const {
  return current_suit_ != nullptr ? *current_suit_ : *default_instance_->current_suit_;
}
inline ::suit_info* list_role_suit_info::mutable_current_suit() {
  set_has_current_suit();
  if (current_suit_ == nullptr) current_suit_ = new ::suit_info;
  return current_suit_;
}
inline ::suit_info* list_role_suit_info::release_current_suit() {
  clear_has_current_suit();
  ::suit_info* temp = current_suit_;
  current_suit_ = nullptr;
  return temp;
}
inline void list_role_suit_info::set_allocated_current_suit(::suit_info* current_suit) {
  delete current_suit_;
  current_suit_ = current_suit;
  if (current_suit) {
    set_has_current_suit();
  } else {
    clear_has_current_suit();
  }
}

// repeated .suit_info list_have_suits = 4;
inline int list_role_suit_info::list_have_suits_size() const {
  return list_have_suits_.size();
}
inline void list_role_suit_info::clear_list_have_suits() {
  list_have_suits_.Clear();
}
inline const ::suit_info& list_role_suit_info::list_have_suits(int index) const {
  return list_have_suits_.Get(index);
}
inline ::suit_info* list_role_suit_info::mutable_list_have_suits(int index) {
  return list_have_suits_.Mutable(index);
}
inline ::suit_info* list_role_suit_info::add_list_have_suits() {
  return list_have_suits_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::suit_info >&
list_role_suit_info::list_have_suits() const {
  return list_have_suits_;
}
inline ::google::protobuf::RepeatedPtrField< ::suit_info >*
list_role_suit_info::mutable_list_have_suits() {
  return &list_have_suits_;
}

// -------------------------------------------------------------------

// face_goods_info

// required sint32 can_buy_face_shop_id = 1;
inline bool face_goods_info::has_can_buy_face_shop_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void face_goods_info::set_has_can_buy_face_shop_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void face_goods_info::clear_has_can_buy_face_shop_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void face_goods_info::clear_can_buy_face_shop_id() {
  can_buy_face_shop_id_ = 0;
  clear_has_can_buy_face_shop_id();
}
inline ::google::protobuf::int32 face_goods_info::can_buy_face_shop_id() const {
  return can_buy_face_shop_id_;
}
inline void face_goods_info::set_can_buy_face_shop_id(::google::protobuf::int32 value) {
  set_has_can_buy_face_shop_id();
  can_buy_face_shop_id_ = value;
}

// required bool is_buy = 2;
inline bool face_goods_info::has_is_buy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void face_goods_info::set_has_is_buy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void face_goods_info::clear_has_is_buy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void face_goods_info::clear_is_buy() {
  is_buy_ = false;
  clear_has_is_buy();
}
inline bool face_goods_info::is_buy() const {
  return is_buy_;
}
inline void face_goods_info::set_is_buy(bool value) {
  set_has_is_buy();
  is_buy_ = value;
}

// required sint32 face_shop_index = 3;
inline bool face_goods_info::has_face_shop_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void face_goods_info::set_has_face_shop_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void face_goods_info::clear_has_face_shop_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void face_goods_info::clear_face_shop_index() {
  face_shop_index_ = 0;
  clear_has_face_shop_index();
}
inline ::google::protobuf::int32 face_goods_info::face_shop_index() const {
  return face_shop_index_;
}
inline void face_goods_info::set_face_shop_index(::google::protobuf::int32 value) {
  set_has_face_shop_index();
  face_shop_index_ = value;
}

// -------------------------------------------------------------------

// face_info

// required sint32 face_id = 1;
inline bool face_info::has_face_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void face_info::set_has_face_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void face_info::clear_has_face_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void face_info::clear_face_id() {
  face_id_ = 0;
  clear_has_face_id();
}
inline ::google::protobuf::int32 face_info::face_id() const {
  return face_id_;
}
inline void face_info::set_face_id(::google::protobuf::int32 value) {
  set_has_face_id();
  face_id_ = value;
}

// required sint64 face_unixtime_time_out_stamp = 2;
inline bool face_info::has_face_unixtime_time_out_stamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void face_info::set_has_face_unixtime_time_out_stamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void face_info::clear_has_face_unixtime_time_out_stamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void face_info::clear_face_unixtime_time_out_stamp() {
  face_unixtime_time_out_stamp_ = GOOGLE_LONGLONG(0);
  clear_has_face_unixtime_time_out_stamp();
}
inline ::google::protobuf::int64 face_info::face_unixtime_time_out_stamp() const {
  return face_unixtime_time_out_stamp_;
}
inline void face_info::set_face_unixtime_time_out_stamp(::google::protobuf::int64 value) {
  set_has_face_unixtime_time_out_stamp();
  face_unixtime_time_out_stamp_ = value;
}

// required sint32 face_duration_type = 3;
inline bool face_info::has_face_duration_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void face_info::set_has_face_duration_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void face_info::clear_has_face_duration_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void face_info::clear_face_duration_type() {
  face_duration_type_ = 0;
  clear_has_face_duration_type();
}
inline ::google::protobuf::int32 face_info::face_duration_type() const {
  return face_duration_type_;
}
inline void face_info::set_face_duration_type(::google::protobuf::int32 value) {
  set_has_face_duration_type();
  face_duration_type_ = value;
}

// -------------------------------------------------------------------

// level_info

// required sint32 id = 1;
inline bool level_info::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void level_info::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void level_info::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void level_info::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 level_info::id() const {
  return id_;
}
inline void level_info::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required sint32 passed = 2;
inline bool level_info::has_passed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void level_info::set_has_passed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void level_info::clear_has_passed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void level_info::clear_passed() {
  passed_ = 0;
  clear_has_passed();
}
inline ::google::protobuf::int32 level_info::passed() const {
  return passed_;
}
inline void level_info::set_passed(::google::protobuf::int32 value) {
  set_has_passed();
  passed_ = value;
}

// -------------------------------------------------------------------

// reward_box

// required sint32 id = 1;
inline bool reward_box::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void reward_box::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void reward_box::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void reward_box::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 reward_box::id() const {
  return id_;
}
inline void reward_box::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required sint32 get = 2;
inline bool reward_box::has_get() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void reward_box::set_has_get() {
  _has_bits_[0] |= 0x00000002u;
}
inline void reward_box::clear_has_get() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void reward_box::clear_get() {
  get_ = 0;
  clear_has_get();
}
inline ::google::protobuf::int32 reward_box::get() const {
  return get_;
}
inline void reward_box::set_get(::google::protobuf::int32 value) {
  set_has_get();
  get_ = value;
}

// -------------------------------------------------------------------

// chapter_info

// required sint32 id = 1;
inline bool chapter_info::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void chapter_info::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void chapter_info::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void chapter_info::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 chapter_info::id() const {
  return id_;
}
inline void chapter_info::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// repeated .level_info list_dup = 2;
inline int chapter_info::list_dup_size() const {
  return list_dup_.size();
}
inline void chapter_info::clear_list_dup() {
  list_dup_.Clear();
}
inline const ::level_info& chapter_info::list_dup(int index) const {
  return list_dup_.Get(index);
}
inline ::level_info* chapter_info::mutable_list_dup(int index) {
  return list_dup_.Mutable(index);
}
inline ::level_info* chapter_info::add_list_dup() {
  return list_dup_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::level_info >&
chapter_info::list_dup() const {
  return list_dup_;
}
inline ::google::protobuf::RepeatedPtrField< ::level_info >*
chapter_info::mutable_list_dup() {
  return &list_dup_;
}

// repeated .reward_box list_box = 3;
inline int chapter_info::list_box_size() const {
  return list_box_.size();
}
inline void chapter_info::clear_list_box() {
  list_box_.Clear();
}
inline const ::reward_box& chapter_info::list_box(int index) const {
  return list_box_.Get(index);
}
inline ::reward_box* chapter_info::mutable_list_box(int index) {
  return list_box_.Mutable(index);
}
inline ::reward_box* chapter_info::add_list_box() {
  return list_box_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::reward_box >&
chapter_info::list_box() const {
  return list_box_;
}
inline ::google::protobuf::RepeatedPtrField< ::reward_box >*
chapter_info::mutable_list_box() {
  return &list_box_;
}

// required sint32 get_reward = 4;
inline bool chapter_info::has_get_reward() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void chapter_info::set_has_get_reward() {
  _has_bits_[0] |= 0x00000008u;
}
inline void chapter_info::clear_has_get_reward() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void chapter_info::clear_get_reward() {
  get_reward_ = 0;
  clear_has_get_reward();
}
inline ::google::protobuf::int32 chapter_info::get_reward() const {
  return get_reward_;
}
inline void chapter_info::set_get_reward(::google::protobuf::int32 value) {
  set_has_get_reward();
  get_reward_ = value;
}

// -------------------------------------------------------------------

// list_role_face_info

// repeated .face_goods_info list_original_buy_face = 1;
inline int list_role_face_info::list_original_buy_face_size() const {
  return list_original_buy_face_.size();
}
inline void list_role_face_info::clear_list_original_buy_face() {
  list_original_buy_face_.Clear();
}
inline const ::face_goods_info& list_role_face_info::list_original_buy_face(int index) const {
  return list_original_buy_face_.Get(index);
}
inline ::face_goods_info* list_role_face_info::mutable_list_original_buy_face(int index) {
  return list_original_buy_face_.Mutable(index);
}
inline ::face_goods_info* list_role_face_info::add_list_original_buy_face() {
  return list_original_buy_face_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::face_goods_info >&
list_role_face_info::list_original_buy_face() const {
  return list_original_buy_face_;
}
inline ::google::protobuf::RepeatedPtrField< ::face_goods_info >*
list_role_face_info::mutable_list_original_buy_face() {
  return &list_original_buy_face_;
}

// repeated .face_goods_info list_discount_buy_face = 2;
inline int list_role_face_info::list_discount_buy_face_size() const {
  return list_discount_buy_face_.size();
}
inline void list_role_face_info::clear_list_discount_buy_face() {
  list_discount_buy_face_.Clear();
}
inline const ::face_goods_info& list_role_face_info::list_discount_buy_face(int index) const {
  return list_discount_buy_face_.Get(index);
}
inline ::face_goods_info* list_role_face_info::mutable_list_discount_buy_face(int index) {
  return list_discount_buy_face_.Mutable(index);
}
inline ::face_goods_info* list_role_face_info::add_list_discount_buy_face() {
  return list_discount_buy_face_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::face_goods_info >&
list_role_face_info::list_discount_buy_face() const {
  return list_discount_buy_face_;
}
inline ::google::protobuf::RepeatedPtrField< ::face_goods_info >*
list_role_face_info::mutable_list_discount_buy_face() {
  return &list_discount_buy_face_;
}

// required sint64 face_shop_last_update_time = 3;
inline bool list_role_face_info::has_face_shop_last_update_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void list_role_face_info::set_has_face_shop_last_update_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void list_role_face_info::clear_has_face_shop_last_update_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void list_role_face_info::clear_face_shop_last_update_time() {
  face_shop_last_update_time_ = GOOGLE_LONGLONG(0);
  clear_has_face_shop_last_update_time();
}
inline ::google::protobuf::int64 list_role_face_info::face_shop_last_update_time() const {
  return face_shop_last_update_time_;
}
inline void list_role_face_info::set_face_shop_last_update_time(::google::protobuf::int64 value) {
  set_has_face_shop_last_update_time();
  face_shop_last_update_time_ = value;
}

// required sint64 face_shop_last_manual_update_time = 4;
inline bool list_role_face_info::has_face_shop_last_manual_update_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void list_role_face_info::set_has_face_shop_last_manual_update_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void list_role_face_info::clear_has_face_shop_last_manual_update_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void list_role_face_info::clear_face_shop_last_manual_update_time() {
  face_shop_last_manual_update_time_ = GOOGLE_LONGLONG(0);
  clear_has_face_shop_last_manual_update_time();
}
inline ::google::protobuf::int64 list_role_face_info::face_shop_last_manual_update_time() const {
  return face_shop_last_manual_update_time_;
}
inline void list_role_face_info::set_face_shop_last_manual_update_time(::google::protobuf::int64 value) {
  set_has_face_shop_last_manual_update_time();
  face_shop_last_manual_update_time_ = value;
}

// required sint32 face_shop_manual_update_count = 5;
inline bool list_role_face_info::has_face_shop_manual_update_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void list_role_face_info::set_has_face_shop_manual_update_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void list_role_face_info::clear_has_face_shop_manual_update_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void list_role_face_info::clear_face_shop_manual_update_count() {
  face_shop_manual_update_count_ = 0;
  clear_has_face_shop_manual_update_count();
}
inline ::google::protobuf::int32 list_role_face_info::face_shop_manual_update_count() const {
  return face_shop_manual_update_count_;
}
inline void list_role_face_info::set_face_shop_manual_update_count(::google::protobuf::int32 value) {
  set_has_face_shop_manual_update_count();
  face_shop_manual_update_count_ = value;
}

// optional .face_info current_face = 6;
inline bool list_role_face_info::has_current_face() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void list_role_face_info::set_has_current_face() {
  _has_bits_[0] |= 0x00000020u;
}
inline void list_role_face_info::clear_has_current_face() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void list_role_face_info::clear_current_face() {
  if (current_face_ != nullptr) current_face_->::face_info::Clear();
  clear_has_current_face();
}
inline const ::face_info& list_role_face_info::current_face() const {
  return current_face_ != nullptr ? *current_face_ : *default_instance_->current_face_;
}
inline ::face_info* list_role_face_info::mutable_current_face() {
  set_has_current_face();
  if (current_face_ == nullptr) current_face_ = new ::face_info;
  return current_face_;
}
inline ::face_info* list_role_face_info::release_current_face() {
  clear_has_current_face();
  ::face_info* temp = current_face_;
  current_face_ = nullptr;
  return temp;
}
inline void list_role_face_info::set_allocated_current_face(::face_info* current_face) {
  delete current_face_;
  current_face_ = current_face;
  if (current_face) {
    set_has_current_face();
  } else {
    clear_has_current_face();
  }
}

// repeated .face_info list_have_faces = 7;
inline int list_role_face_info::list_have_faces_size() const {
  return list_have_faces_.size();
}
inline void list_role_face_info::clear_list_have_faces() {
  list_have_faces_.Clear();
}
inline const ::face_info& list_role_face_info::list_have_faces(int index) const {
  return list_have_faces_.Get(index);
}
inline ::face_info* list_role_face_info::mutable_list_have_faces(int index) {
  return list_have_faces_.Mutable(index);
}
inline ::face_info* list_role_face_info::add_list_have_faces() {
  return list_have_faces_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::face_info >&
list_role_face_info::list_have_faces() const {
  return list_have_faces_;
}
inline ::google::protobuf::RepeatedPtrField< ::face_info >*
list_role_face_info::mutable_list_have_faces() {
  return &list_have_faces_;
}

// -------------------------------------------------------------------

// role_info_skill

// optional bytes defaule_skill = 1;
inline bool role_info_skill::has_defaule_skill() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_info_skill::set_has_defaule_skill() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_info_skill::clear_has_defaule_skill() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_info_skill::clear_defaule_skill() {
  if (defaule_skill_ != &::google::protobuf::internal::kEmptyString) {
    defaule_skill_->clear();
  }
  clear_has_defaule_skill();
}
inline const ::std::string& role_info_skill::defaule_skill() const {
  return *defaule_skill_;
}
inline void role_info_skill::set_defaule_skill(const ::std::string& value) {
  set_has_defaule_skill();
  if (defaule_skill_ == &::google::protobuf::internal::kEmptyString) {
    defaule_skill_ = new ::std::string;
  }
  defaule_skill_->assign(value);
}
inline void role_info_skill::set_defaule_skill(const char* value) {
  set_has_defaule_skill();
  if (defaule_skill_ == &::google::protobuf::internal::kEmptyString) {
    defaule_skill_ = new ::std::string;
  }
  defaule_skill_->assign(value);
}
inline void role_info_skill::set_defaule_skill(const void* value, size_t size) {
  set_has_defaule_skill();
  if (defaule_skill_ == &::google::protobuf::internal::kEmptyString) {
    defaule_skill_ = new ::std::string;
  }
  defaule_skill_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* role_info_skill::mutable_defaule_skill() {
  set_has_defaule_skill();
  if (defaule_skill_ == &::google::protobuf::internal::kEmptyString) {
    defaule_skill_ = new ::std::string;
  }
  return defaule_skill_;
}
inline ::std::string* role_info_skill::release_defaule_skill() {
  clear_has_defaule_skill();
  if (defaule_skill_ == &::google::protobuf::internal::kEmptyString) {
    return nullptr;
  } else {
    ::std::string* temp = defaule_skill_;
    defaule_skill_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void role_info_skill::set_allocated_defaule_skill(::std::string* defaule_skill) {
  if (defaule_skill_ != &::google::protobuf::internal::kEmptyString) {
    delete defaule_skill_;
  }
  if (defaule_skill) {
    set_has_defaule_skill();
    defaule_skill_ = defaule_skill;
  } else {
    clear_has_defaule_skill();
    defaule_skill_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated bytes list_skill_name = 2;
inline int role_info_skill::list_skill_name_size() const {
  return list_skill_name_.size();
}
inline void role_info_skill::clear_list_skill_name() {
  list_skill_name_.Clear();
}
inline const ::std::string& role_info_skill::list_skill_name(int index) const {
  return list_skill_name_.Get(index);
}
inline ::std::string* role_info_skill::mutable_list_skill_name(int index) {
  return list_skill_name_.Mutable(index);
}
inline void role_info_skill::set_list_skill_name(int index, const ::std::string& value) {
  list_skill_name_.Mutable(index)->assign(value);
}
inline void role_info_skill::set_list_skill_name(int index, const char* value) {
  list_skill_name_.Mutable(index)->assign(value);
}
inline void role_info_skill::set_list_skill_name(int index, const void* value, size_t size) {
  list_skill_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* role_info_skill::add_list_skill_name() {
  return list_skill_name_.Add();
}
inline void role_info_skill::add_list_skill_name(const ::std::string& value) {
  list_skill_name_.Add()->assign(value);
}
inline void role_info_skill::add_list_skill_name(const char* value) {
  list_skill_name_.Add()->assign(value);
}
inline void role_info_skill::add_list_skill_name(const void* value, size_t size) {
  list_skill_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
role_info_skill::list_skill_name() const {
  return list_skill_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
role_info_skill::mutable_list_skill_name() {
  return &list_skill_name_;
}

// repeated .universal_data list_skill = 3;
inline int role_info_skill::list_skill_size() const {
  return list_skill_.size();
}
inline void role_info_skill::clear_list_skill() {
  list_skill_.Clear();
}
inline const ::universal_data& role_info_skill::list_skill(int index) const {
  return list_skill_.Get(index);
}
inline ::universal_data* role_info_skill::mutable_list_skill(int index) {
  return list_skill_.Mutable(index);
}
inline ::universal_data* role_info_skill::add_list_skill() {
  return list_skill_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::universal_data >&
role_info_skill::list_skill() const {
  return list_skill_;
}
inline ::google::protobuf::RepeatedPtrField< ::universal_data >*
role_info_skill::mutable_list_skill() {
  return &list_skill_;
}

// -------------------------------------------------------------------

// game_friend

// required sint64 role_index = 1;
inline bool game_friend::has_role_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_friend::set_has_role_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_friend::clear_has_role_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_friend::clear_role_index() {
  role_index_ = GOOGLE_LONGLONG(0);
  clear_has_role_index();
}
inline ::google::protobuf::int64 game_friend::role_index() const {
  return role_index_;
}
inline void game_friend::set_role_index(::google::protobuf::int64 value) {
  set_has_role_index();
  role_index_ = value;
}

// required sint32 level = 2;
inline bool game_friend::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_friend::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_friend::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_friend::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 game_friend::level() const {
  return level_;
}
inline void game_friend::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// required bytes nick_name = 3;
inline bool game_friend::has_nick_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_friend::set_has_nick_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_friend::clear_has_nick_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_friend::clear_nick_name() {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    nick_name_->clear();
  }
  clear_has_nick_name();
}
inline const ::std::string& game_friend::nick_name() const {
  return *nick_name_;
}
inline void game_friend::set_nick_name(const ::std::string& value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
}
inline void game_friend::set_nick_name(const char* value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
}
inline void game_friend::set_nick_name(const void* value, size_t size) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* game_friend::mutable_nick_name() {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  return nick_name_;
}
inline ::std::string* game_friend::release_nick_name() {
  clear_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    return nullptr;
  } else {
    ::std::string* temp = nick_name_;
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void game_friend::set_allocated_nick_name(::std::string* nick_name) {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (nick_name) {
    set_has_nick_name();
    nick_name_ = nick_name;
  } else {
    clear_has_nick_name();
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required sint32 suit_id = 4;
inline bool game_friend::has_suit_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void game_friend::set_has_suit_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void game_friend::clear_has_suit_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void game_friend::clear_suit_id() {
  suit_id_ = 0;
  clear_has_suit_id();
}
inline ::google::protobuf::int32 game_friend::suit_id() const {
  return suit_id_;
}
inline void game_friend::set_suit_id(::google::protobuf::int32 value) {
  set_has_suit_id();
  suit_id_ = value;
}

// required sint32 face_id = 5;
inline bool game_friend::has_face_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void game_friend::set_has_face_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void game_friend::clear_has_face_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void game_friend::clear_face_id() {
  face_id_ = 0;
  clear_has_face_id();
}
inline ::google::protobuf::int32 game_friend::face_id() const {
  return face_id_;
}
inline void game_friend::set_face_id(::google::protobuf::int32 value) {
  set_has_face_id();
  face_id_ = value;
}

// required sint32 weapon_id = 6;
inline bool game_friend::has_weapon_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void game_friend::set_has_weapon_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void game_friend::clear_has_weapon_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void game_friend::clear_weapon_id() {
  weapon_id_ = 0;
  clear_has_weapon_id();
}
inline ::google::protobuf::int32 game_friend::weapon_id() const {
  return weapon_id_;
}
inline void game_friend::set_weapon_id(::google::protobuf::int32 value) {
  set_has_weapon_id();
  weapon_id_ = value;
}

// required sint32 helmet_id = 7;
inline bool game_friend::has_helmet_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void game_friend::set_has_helmet_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void game_friend::clear_has_helmet_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void game_friend::clear_helmet_id() {
  helmet_id_ = 0;
  clear_has_helmet_id();
}
inline ::google::protobuf::int32 game_friend::helmet_id() const {
  return helmet_id_;
}
inline void game_friend::set_helmet_id(::google::protobuf::int32 value) {
  set_has_helmet_id();
  helmet_id_ = value;
}

// required bytes state = 8;
inline bool game_friend::has_state() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void game_friend::set_has_state() {
  _has_bits_[0] |= 0x00000080u;
}
inline void game_friend::clear_has_state() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void game_friend::clear_state() {
  if (state_ != &::google::protobuf::internal::kEmptyString) {
    state_->clear();
  }
  clear_has_state();
}
inline const ::std::string& game_friend::state() const {
  return *state_;
}
inline void game_friend::set_state(const ::std::string& value) {
  set_has_state();
  if (state_ == &::google::protobuf::internal::kEmptyString) {
    state_ = new ::std::string;
  }
  state_->assign(value);
}
inline void game_friend::set_state(const char* value) {
  set_has_state();
  if (state_ == &::google::protobuf::internal::kEmptyString) {
    state_ = new ::std::string;
  }
  state_->assign(value);
}
inline void game_friend::set_state(const void* value, size_t size) {
  set_has_state();
  if (state_ == &::google::protobuf::internal::kEmptyString) {
    state_ = new ::std::string;
  }
  state_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* game_friend::mutable_state() {
  set_has_state();
  if (state_ == &::google::protobuf::internal::kEmptyString) {
    state_ = new ::std::string;
  }
  return state_;
}
inline ::std::string* game_friend::release_state() {
  clear_has_state();
  if (state_ == &::google::protobuf::internal::kEmptyString) {
    return nullptr;
  } else {
    ::std::string* temp = state_;
    state_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void game_friend::set_allocated_state(::std::string* state) {
  if (state_ != &::google::protobuf::internal::kEmptyString) {
    delete state_;
  }
  if (state) {
    set_has_state();
    state_ = state;
  } else {
    clear_has_state();
    state_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required sint64 time = 9;
inline bool game_friend::has_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void game_friend::set_has_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void game_friend::clear_has_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void game_friend::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 game_friend::time() const {
  return time_;
}
inline void game_friend::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// required bool is_online = 10;
inline bool game_friend::has_is_online() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void game_friend::set_has_is_online() {
  _has_bits_[0] |= 0x00000200u;
}
inline void game_friend::clear_has_is_online() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void game_friend::clear_is_online() {
  is_online_ = false;
  clear_has_is_online();
}
inline bool game_friend::is_online() const {
  return is_online_;
}
inline void game_friend::set_is_online(bool value) {
  set_has_is_online();
  is_online_ = value;
}

// -------------------------------------------------------------------

// dict_game_friend

// repeated sint64 list_role_index = 1;
inline int dict_game_friend::list_role_index_size() const {
  return list_role_index_.size();
}
inline void dict_game_friend::clear_list_role_index() {
  list_role_index_.Clear();
}
inline ::google::protobuf::int64 dict_game_friend::list_role_index(int index) const {
  return list_role_index_.Get(index);
}
inline void dict_game_friend::set_list_role_index(int index, ::google::protobuf::int64 value) {
  list_role_index_.Set(index, value);
}
inline void dict_game_friend::add_list_role_index(::google::protobuf::int64 value) {
  list_role_index_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
dict_game_friend::list_role_index() const {
  return list_role_index_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
dict_game_friend::mutable_list_role_index() {
  return &list_role_index_;
}

// repeated .game_friend list_friends = 2;
inline int dict_game_friend::list_friends_size() const {
  return list_friends_.size();
}
inline void dict_game_friend::clear_list_friends() {
  list_friends_.Clear();
}
inline const ::game_friend& dict_game_friend::list_friends(int index) const {
  return list_friends_.Get(index);
}
inline ::game_friend* dict_game_friend::mutable_list_friends(int index) {
  return list_friends_.Mutable(index);
}
inline ::game_friend* dict_game_friend::add_list_friends() {
  return list_friends_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::game_friend >&
dict_game_friend::list_friends() const {
  return list_friends_;
}
inline ::google::protobuf::RepeatedPtrField< ::game_friend >*
dict_game_friend::mutable_list_friends() {
  return &list_friends_;
}

// -------------------------------------------------------------------

// summonpet

// required sint64 role_index = 1;
inline bool summonpet::has_role_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void summonpet::set_has_role_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void summonpet::clear_has_role_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void summonpet::clear_role_index() {
  role_index_ = GOOGLE_LONGLONG(0);
  clear_has_role_index();
}
inline ::google::protobuf::int64 summonpet::role_index() const {
  return role_index_;
}
inline void summonpet::set_role_index(::google::protobuf::int64 value) {
  set_has_role_index();
  role_index_ = value;
}

// required sint32 reborn_sum = 2;
inline bool summonpet::has_reborn_sum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void summonpet::set_has_reborn_sum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void summonpet::clear_has_reborn_sum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void summonpet::clear_reborn_sum() {
  reborn_sum_ = 0;
  clear_has_reborn_sum();
}
inline ::google::protobuf::int32 summonpet::reborn_sum() const {
  return reborn_sum_;
}
inline void summonpet::set_reborn_sum(::google::protobuf::int32 value) {
  set_has_reborn_sum();
  reborn_sum_ = value;
}

// required .role_info_public public_info = 3;
inline bool summonpet::has_public_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void summonpet::set_has_public_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void summonpet::clear_has_public_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void summonpet::clear_public_info() {
  if (public_info_ != nullptr) public_info_->::role_info_public::Clear();
  clear_has_public_info();
}
inline const ::role_info_public& summonpet::public_info() const {
  return public_info_ != nullptr ? *public_info_ : *default_instance_->public_info_;
}
inline ::role_info_public* summonpet::mutable_public_info() {
  set_has_public_info();
  if (public_info_ == nullptr) public_info_ = new ::role_info_public;
  return public_info_;
}
inline ::role_info_public* summonpet::release_public_info() {
  clear_has_public_info();
  ::role_info_public* temp = public_info_;
  public_info_ = nullptr;
  return temp;
}
inline void summonpet::set_allocated_public_info(::role_info_public* public_info) {
  delete public_info_;
  public_info_ = public_info;
  if (public_info) {
    set_has_public_info();
  } else {
    clear_has_public_info();
  }
}

// optional .role_info_memory memory_info = 4;
inline bool summonpet::has_memory_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void summonpet::set_has_memory_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void summonpet::clear_has_memory_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void summonpet::clear_memory_info() {
  if (memory_info_ != nullptr) memory_info_->::role_info_memory::Clear();
  clear_has_memory_info();
}
inline const ::role_info_memory& summonpet::memory_info() const {
  return memory_info_ != nullptr ? *memory_info_ : *default_instance_->memory_info_;
}
inline ::role_info_memory* summonpet::mutable_memory_info() {
  set_has_memory_info();
  if (memory_info_ == nullptr) memory_info_ = new ::role_info_memory;
  return memory_info_;
}
inline ::role_info_memory* summonpet::release_memory_info() {
  clear_has_memory_info();
  ::role_info_memory* temp = memory_info_;
  memory_info_ = nullptr;
  return temp;
}
inline void summonpet::set_allocated_memory_info(::role_info_memory* memory_info) {
  delete memory_info_;
  memory_info_ = memory_info;
  if (memory_info) {
    set_has_memory_info();
  } else {
    clear_has_memory_info();
  }
}

// required .role_info_attr attr_info = 5;
inline bool summonpet::has_attr_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void summonpet::set_has_attr_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void summonpet::clear_has_attr_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void summonpet::clear_attr_info() {
  if (attr_info_ != nullptr) attr_info_->::role_info_attr::Clear();
  clear_has_attr_info();
}
inline const ::role_info_attr& summonpet::attr_info() const {
  return attr_info_ != nullptr ? *attr_info_ : *default_instance_->attr_info_;
}
inline ::role_info_attr* summonpet::mutable_attr_info() {
  set_has_attr_info();
  if (attr_info_ == nullptr) attr_info_ = new ::role_info_attr;
  return attr_info_;
}
inline ::role_info_attr* summonpet::release_attr_info() {
  clear_has_attr_info();
  ::role_info_attr* temp = attr_info_;
  attr_info_ = nullptr;
  return temp;
}
inline void summonpet::set_allocated_attr_info(::role_info_attr* attr_info) {
  delete attr_info_;
  attr_info_ = attr_info;
  if (attr_info) {
    set_has_attr_info();
  } else {
    clear_has_attr_info();
  }
}

// required .role_info_skill skill_info = 7;
inline bool summonpet::has_skill_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void summonpet::set_has_skill_info() {
  _has_bits_[0] |= 0x00000020u;
}
inline void summonpet::clear_has_skill_info() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void summonpet::clear_skill_info() {
  if (skill_info_ != nullptr) skill_info_->::role_info_skill::Clear();
  clear_has_skill_info();
}
inline const ::role_info_skill& summonpet::skill_info() const {
  return skill_info_ != nullptr ? *skill_info_ : *default_instance_->skill_info_;
}
inline ::role_info_skill* summonpet::mutable_skill_info() {
  set_has_skill_info();
  if (skill_info_ == nullptr) skill_info_ = new ::role_info_skill;
  return skill_info_;
}
inline ::role_info_skill* summonpet::release_skill_info() {
  clear_has_skill_info();
  ::role_info_skill* temp = skill_info_;
  skill_info_ = nullptr;
  return temp;
}
inline void summonpet::set_allocated_skill_info(::role_info_skill* skill_info) {
  delete skill_info_;
  skill_info_ = skill_info;
  if (skill_info) {
    set_has_skill_info();
  } else {
    clear_has_skill_info();
  }
}

// optional .role_info_reward reward_info = 8;
inline bool summonpet::has_reward_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void summonpet::set_has_reward_info() {
  _has_bits_[0] |= 0x00000040u;
}
inline void summonpet::clear_has_reward_info() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void summonpet::clear_reward_info() {
  if (reward_info_ != nullptr) reward_info_->::role_info_reward::Clear();
  clear_has_reward_info();
}
inline const ::role_info_reward& summonpet::reward_info() const {
  return reward_info_ != nullptr ? *reward_info_ : *default_instance_->reward_info_;
}
inline ::role_info_reward* summonpet::mutable_reward_info() {
  set_has_reward_info();
  if (reward_info_ == nullptr) reward_info_ = new ::role_info_reward;
  return reward_info_;
}
inline ::role_info_reward* summonpet::release_reward_info() {
  clear_has_reward_info();
  ::role_info_reward* temp = reward_info_;
  reward_info_ = nullptr;
  return temp;
}
inline void summonpet::set_allocated_reward_info(::role_info_reward* reward_info) {
  delete reward_info_;
  reward_info_ = reward_info;
  if (reward_info) {
    set_has_reward_info();
  } else {
    clear_has_reward_info();
  }
}

// required bool is_follow = 9;
inline bool summonpet::has_is_follow() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void summonpet::set_has_is_follow() {
  _has_bits_[0] |= 0x00000080u;
}
inline void summonpet::clear_has_is_follow() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void summonpet::clear_is_follow() {
  is_follow_ = false;
  clear_has_is_follow();
}
inline bool summonpet::is_follow() const {
  return is_follow_;
}
inline void summonpet::set_is_follow(bool value) {
  set_has_is_follow();
  is_follow_ = value;
}

// required bool is_comrade = 10;
inline bool summonpet::has_is_comrade() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void summonpet::set_has_is_comrade() {
  _has_bits_[0] |= 0x00000100u;
}
inline void summonpet::clear_has_is_comrade() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void summonpet::clear_is_comrade() {
  is_comrade_ = false;
  clear_has_is_comrade();
}
inline bool summonpet::is_comrade() const {
  return is_comrade_;
}
inline void summonpet::set_is_comrade(bool value) {
  set_has_is_comrade();
  is_comrade_ = value;
}

// -------------------------------------------------------------------

// dict_summonpet

// repeated sint64 list_role_index = 1;
inline int dict_summonpet::list_role_index_size() const {
  return list_role_index_.size();
}
inline void dict_summonpet::clear_list_role_index() {
  list_role_index_.Clear();
}
inline ::google::protobuf::int64 dict_summonpet::list_role_index(int index) const {
  return list_role_index_.Get(index);
}
inline void dict_summonpet::set_list_role_index(int index, ::google::protobuf::int64 value) {
  list_role_index_.Set(index, value);
}
inline void dict_summonpet::add_list_role_index(::google::protobuf::int64 value) {
  list_role_index_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
dict_summonpet::list_role_index() const {
  return list_role_index_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
dict_summonpet::mutable_list_role_index() {
  return &list_role_index_;
}

// repeated .summonpet list_summonpet_info = 2;
inline int dict_summonpet::list_summonpet_info_size() const {
  return list_summonpet_info_.size();
}
inline void dict_summonpet::clear_list_summonpet_info() {
  list_summonpet_info_.Clear();
}
inline const ::summonpet& dict_summonpet::list_summonpet_info(int index) const {
  return list_summonpet_info_.Get(index);
}
inline ::summonpet* dict_summonpet::mutable_list_summonpet_info(int index) {
  return list_summonpet_info_.Mutable(index);
}
inline ::summonpet* dict_summonpet::add_list_summonpet_info() {
  return list_summonpet_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::summonpet >&
dict_summonpet::list_summonpet_info() const {
  return list_summonpet_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::summonpet >*
dict_summonpet::mutable_list_summonpet_info() {
  return &list_summonpet_info_;
}

// -------------------------------------------------------------------

// task

// repeated sint32 list_completed_task_list = 1;
inline int task::list_completed_task_list_size() const {
  return list_completed_task_list_.size();
}
inline void task::clear_list_completed_task_list() {
  list_completed_task_list_.Clear();
}
inline ::google::protobuf::int32 task::list_completed_task_list(int index) const {
  return list_completed_task_list_.Get(index);
}
inline void task::set_list_completed_task_list(int index, ::google::protobuf::int32 value) {
  list_completed_task_list_.Set(index, value);
}
inline void task::add_list_completed_task_list(::google::protobuf::int32 value) {
  list_completed_task_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
task::list_completed_task_list() const {
  return list_completed_task_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
task::mutable_list_completed_task_list() {
  return &list_completed_task_list_;
}

// repeated .task_info list_can_accept_task_list = 2;
inline int task::list_can_accept_task_list_size() const {
  return list_can_accept_task_list_.size();
}
inline void task::clear_list_can_accept_task_list() {
  list_can_accept_task_list_.Clear();
}
inline const ::task_info& task::list_can_accept_task_list(int index) const {
  return list_can_accept_task_list_.Get(index);
}
inline ::task_info* task::mutable_list_can_accept_task_list(int index) {
  return list_can_accept_task_list_.Mutable(index);
}
inline ::task_info* task::add_list_can_accept_task_list() {
  return list_can_accept_task_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::task_info >&
task::list_can_accept_task_list() const {
  return list_can_accept_task_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::task_info >*
task::mutable_list_can_accept_task_list() {
  return &list_can_accept_task_list_;
}

// repeated .task_info list_accepted_task_list = 3;
inline int task::list_accepted_task_list_size() const {
  return list_accepted_task_list_.size();
}
inline void task::clear_list_accepted_task_list() {
  list_accepted_task_list_.Clear();
}
inline const ::task_info& task::list_accepted_task_list(int index) const {
  return list_accepted_task_list_.Get(index);
}
inline ::task_info* task::mutable_list_accepted_task_list(int index) {
  return list_accepted_task_list_.Mutable(index);
}
inline ::task_info* task::add_list_accepted_task_list() {
  return list_accepted_task_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::task_info >&
task::list_accepted_task_list() const {
  return list_accepted_task_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::task_info >*
task::mutable_list_accepted_task_list() {
  return &list_accepted_task_list_;
}

// -------------------------------------------------------------------

// success

// -------------------------------------------------------------------

// guide

// -------------------------------------------------------------------

// role_info_config

// optional bool follower_auto_comrade = 2;
inline bool role_info_config::has_follower_auto_comrade() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_info_config::set_has_follower_auto_comrade() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_info_config::clear_has_follower_auto_comrade() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_info_config::clear_follower_auto_comrade() {
  follower_auto_comrade_ = false;
  clear_has_follower_auto_comrade();
}
inline bool role_info_config::follower_auto_comrade() const {
  return follower_auto_comrade_;
}
inline void role_info_config::set_follower_auto_comrade(bool value) {
  set_has_follower_auto_comrade();
  follower_auto_comrade_ = value;
}

// -------------------------------------------------------------------

// times

// optional sint64 face_shop_last_update_time = 2;
inline bool times::has_face_shop_last_update_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void times::set_has_face_shop_last_update_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void times::clear_has_face_shop_last_update_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void times::clear_face_shop_last_update_time() {
  face_shop_last_update_time_ = GOOGLE_LONGLONG(0);
  clear_has_face_shop_last_update_time();
}
inline ::google::protobuf::int64 times::face_shop_last_update_time() const {
  return face_shop_last_update_time_;
}
inline void times::set_face_shop_last_update_time(::google::protobuf::int64 value) {
  set_has_face_shop_last_update_time();
  face_shop_last_update_time_ = value;
}

// -------------------------------------------------------------------

// dict_comrade_role

// repeated sint32 keys = 1;
inline int dict_comrade_role::keys_size() const {
  return keys_.size();
}
inline void dict_comrade_role::clear_keys() {
  keys_.Clear();
}
inline ::google::protobuf::int32 dict_comrade_role::keys(int index) const {
  return keys_.Get(index);
}
inline void dict_comrade_role::set_keys(int index, ::google::protobuf::int32 value) {
  keys_.Set(index, value);
}
inline void dict_comrade_role::add_keys(::google::protobuf::int32 value) {
  keys_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
dict_comrade_role::keys() const {
  return keys_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
dict_comrade_role::mutable_keys() {
  return &keys_;
}

// repeated sint64 values = 2;
inline int dict_comrade_role::values_size() const {
  return values_.size();
}
inline void dict_comrade_role::clear_values() {
  values_.Clear();
}
inline ::google::protobuf::int64 dict_comrade_role::values(int index) const {
  return values_.Get(index);
}
inline void dict_comrade_role::set_values(int index, ::google::protobuf::int64 value) {
  values_.Set(index, value);
}
inline void dict_comrade_role::add_values(::google::protobuf::int64 value) {
  values_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
dict_comrade_role::values() const {
  return values_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
dict_comrade_role::mutable_values() {
  return &values_;
}

// -------------------------------------------------------------------

// role_info_memory

// repeated sint64 list_follow_role = 1;
inline int role_info_memory::list_follow_role_size() const {
  return list_follow_role_.size();
}
inline void role_info_memory::clear_list_follow_role() {
  list_follow_role_.Clear();
}
inline ::google::protobuf::int64 role_info_memory::list_follow_role(int index) const {
  return list_follow_role_.Get(index);
}
inline void role_info_memory::set_list_follow_role(int index, ::google::protobuf::int64 value) {
  list_follow_role_.Set(index, value);
}
inline void role_info_memory::add_list_follow_role(::google::protobuf::int64 value) {
  list_follow_role_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
role_info_memory::list_follow_role() const {
  return list_follow_role_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
role_info_memory::mutable_list_follow_role() {
  return &list_follow_role_;
}

// optional .dict_comrade_role comrade_info = 2;
inline bool role_info_memory::has_comrade_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_info_memory::set_has_comrade_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_info_memory::clear_has_comrade_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_info_memory::clear_comrade_info() {
  if (comrade_info_ != nullptr) comrade_info_->::dict_comrade_role::Clear();
  clear_has_comrade_info();
}
inline const ::dict_comrade_role& role_info_memory::comrade_info() const {
  return comrade_info_ != nullptr ? *comrade_info_ : *default_instance_->comrade_info_;
}
inline ::dict_comrade_role* role_info_memory::mutable_comrade_info() {
  set_has_comrade_info();
  if (comrade_info_ == nullptr) comrade_info_ = new ::dict_comrade_role;
  return comrade_info_;
}
inline ::dict_comrade_role* role_info_memory::release_comrade_info() {
  clear_has_comrade_info();
  ::dict_comrade_role* temp = comrade_info_;
  comrade_info_ = nullptr;
  return temp;
}
inline void role_info_memory::set_allocated_comrade_info(::dict_comrade_role* comrade_info) {
  delete comrade_info_;
  comrade_info_ = comrade_info;
  if (comrade_info) {
    set_has_comrade_info();
  } else {
    clear_has_comrade_info();
  }
}

// optional bool is_on_enter_game = 4;
inline bool role_info_memory::has_is_on_enter_game() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_info_memory::set_has_is_on_enter_game() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_info_memory::clear_has_is_on_enter_game() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_info_memory::clear_is_on_enter_game() {
  is_on_enter_game_ = false;
  clear_has_is_on_enter_game();
}
inline bool role_info_memory::is_on_enter_game() const {
  return is_on_enter_game_;
}
inline void role_info_memory::set_is_on_enter_game(bool value) {
  set_has_is_on_enter_game();
  is_on_enter_game_ = value;
}

// optional sint32 battle_team_index = 5;
inline bool role_info_memory::has_battle_team_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void role_info_memory::set_has_battle_team_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void role_info_memory::clear_has_battle_team_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void role_info_memory::clear_battle_team_index() {
  battle_team_index_ = 0;
  clear_has_battle_team_index();
}
inline ::google::protobuf::int32 role_info_memory::battle_team_index() const {
  return battle_team_index_;
}
inline void role_info_memory::set_battle_team_index(::google::protobuf::int32 value) {
  set_has_battle_team_index();
  battle_team_index_ = value;
}

// -------------------------------------------------------------------

// role_info_public

// optional sint64 role_index = 1;
inline bool role_info_public::has_role_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_info_public::set_has_role_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_info_public::clear_has_role_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_info_public::clear_role_index() {
  role_index_ = GOOGLE_LONGLONG(0);
  clear_has_role_index();
}
inline ::google::protobuf::int64 role_info_public::role_index() const {
  return role_index_;
}
inline void role_info_public::set_role_index(::google::protobuf::int64 value) {
  set_has_role_index();
  role_index_ = value;
}

// optional sint64 team_index = 2;
inline bool role_info_public::has_team_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_info_public::set_has_team_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_info_public::clear_has_team_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_info_public::clear_team_index() {
  team_index_ = GOOGLE_LONGLONG(0);
  clear_has_team_index();
}
inline ::google::protobuf::int64 role_info_public::team_index() const {
  return team_index_;
}
inline void role_info_public::set_team_index(::google::protobuf::int64 value) {
  set_has_team_index();
  team_index_ = value;
}

// optional sint32 team_pos = 3;
inline bool role_info_public::has_team_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_info_public::set_has_team_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_info_public::clear_has_team_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_info_public::clear_team_pos() {
  team_pos_ = 0;
  clear_has_team_pos();
}
inline ::google::protobuf::int32 role_info_public::team_pos() const {
  return team_pos_;
}
inline void role_info_public::set_team_pos(::google::protobuf::int32 value) {
  set_has_team_pos();
  team_pos_ = value;
}

// optional sint32 reborn_sum = 4;
inline bool role_info_public::has_reborn_sum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void role_info_public::set_has_reborn_sum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void role_info_public::clear_has_reborn_sum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void role_info_public::clear_reborn_sum() {
  reborn_sum_ = 0;
  clear_has_reborn_sum();
}
inline ::google::protobuf::int32 role_info_public::reborn_sum() const {
  return reborn_sum_;
}
inline void role_info_public::set_reborn_sum(::google::protobuf::int32 value) {
  set_has_reborn_sum();
  reborn_sum_ = value;
}

// optional .E_OBJECT_TYPE object_type = 5 [default = EOT_INVALID];
inline bool role_info_public::has_object_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void role_info_public::set_has_object_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void role_info_public::clear_has_object_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void role_info_public::clear_object_type() {
  object_type_ = 0;
  clear_has_object_type();
}
inline ::E_OBJECT_TYPE role_info_public::object_type() const {
  return static_cast< ::E_OBJECT_TYPE >(object_type_);
}
inline void role_info_public::set_object_type(::E_OBJECT_TYPE value) {
  assert(::E_OBJECT_TYPE_IsValid(value));
  set_has_object_type();
  object_type_ = value;
}

// optional bytes racial = 10;
inline bool role_info_public::has_racial() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void role_info_public::set_has_racial() {
  _has_bits_[0] |= 0x00000020u;
}
inline void role_info_public::clear_has_racial() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void role_info_public::clear_racial() {
  if (racial_ != &::google::protobuf::internal::kEmptyString) {
    racial_->clear();
  }
  clear_has_racial();
}
inline const ::std::string& role_info_public::racial() const {
  return *racial_;
}
inline void role_info_public::set_racial(const ::std::string& value) {
  set_has_racial();
  if (racial_ == &::google::protobuf::internal::kEmptyString) {
    racial_ = new ::std::string;
  }
  racial_->assign(value);
}
inline void role_info_public::set_racial(const char* value) {
  set_has_racial();
  if (racial_ == &::google::protobuf::internal::kEmptyString) {
    racial_ = new ::std::string;
  }
  racial_->assign(value);
}
inline void role_info_public::set_racial(const void* value, size_t size) {
  set_has_racial();
  if (racial_ == &::google::protobuf::internal::kEmptyString) {
    racial_ = new ::std::string;
  }
  racial_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* role_info_public::mutable_racial() {
  set_has_racial();
  if (racial_ == &::google::protobuf::internal::kEmptyString) {
    racial_ = new ::std::string;
  }
  return racial_;
}
inline ::std::string* role_info_public::release_racial() {
  clear_has_racial();
  if (racial_ == &::google::protobuf::internal::kEmptyString) {
    return nullptr;
  } else {
    ::std::string* temp = racial_;
    racial_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void role_info_public::set_allocated_racial(::std::string* racial) {
  if (racial_ != &::google::protobuf::internal::kEmptyString) {
    delete racial_;
  }
  if (racial) {
    set_has_racial();
    racial_ = racial;
  } else {
    clear_has_racial();
    racial_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes gender = 11;
inline bool role_info_public::has_gender() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void role_info_public::set_has_gender() {
  _has_bits_[0] |= 0x00000040u;
}
inline void role_info_public::clear_has_gender() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void role_info_public::clear_gender() {
  if (gender_ != &::google::protobuf::internal::kEmptyString) {
    gender_->clear();
  }
  clear_has_gender();
}
inline const ::std::string& role_info_public::gender() const {
  return *gender_;
}
inline void role_info_public::set_gender(const ::std::string& value) {
  set_has_gender();
  if (gender_ == &::google::protobuf::internal::kEmptyString) {
    gender_ = new ::std::string;
  }
  gender_->assign(value);
}
inline void role_info_public::set_gender(const char* value) {
  set_has_gender();
  if (gender_ == &::google::protobuf::internal::kEmptyString) {
    gender_ = new ::std::string;
  }
  gender_->assign(value);
}
inline void role_info_public::set_gender(const void* value, size_t size) {
  set_has_gender();
  if (gender_ == &::google::protobuf::internal::kEmptyString) {
    gender_ = new ::std::string;
  }
  gender_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* role_info_public::mutable_gender() {
  set_has_gender();
  if (gender_ == &::google::protobuf::internal::kEmptyString) {
    gender_ = new ::std::string;
  }
  return gender_;
}
inline ::std::string* role_info_public::release_gender() {
  clear_has_gender();
  if (gender_ == &::google::protobuf::internal::kEmptyString) {
    return nullptr;
  } else {
    ::std::string* temp = gender_;
    gender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void role_info_public::set_allocated_gender(::std::string* gender) {
  if (gender_ != &::google::protobuf::internal::kEmptyString) {
    delete gender_;
  }
  if (gender) {
    set_has_gender();
    gender_ = gender;
  } else {
    clear_has_gender();
    gender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .universal_data object_res = 12;
inline bool role_info_public::has_object_res() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void role_info_public::set_has_object_res() {
  _has_bits_[0] |= 0x00000080u;
}
inline void role_info_public::clear_has_object_res() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void role_info_public::clear_object_res() {
  if (object_res_ != nullptr) object_res_->::universal_data::Clear();
  clear_has_object_res();
}
inline const ::universal_data& role_info_public::object_res() const {
  return object_res_ != nullptr ? *object_res_ : *default_instance_->object_res_;
}
inline ::universal_data* role_info_public::mutable_object_res() {
  set_has_object_res();
  if (object_res_ == nullptr) object_res_ = new ::universal_data;
  return object_res_;
}
inline ::universal_data* role_info_public::release_object_res() {
  clear_has_object_res();
  ::universal_data* temp = object_res_;
  object_res_ = nullptr;
  return temp;
}
inline void role_info_public::set_allocated_object_res(::universal_data* object_res) {
  delete object_res_;
  object_res_ = object_res;
  if (object_res) {
    set_has_object_res();
  } else {
    clear_has_object_res();
  }
}

// optional bytes head_icon_file_small = 20;
inline bool role_info_public::has_head_icon_file_small() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void role_info_public::set_has_head_icon_file_small() {
  _has_bits_[0] |= 0x00000100u;
}
inline void role_info_public::clear_has_head_icon_file_small() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void role_info_public::clear_head_icon_file_small() {
  if (head_icon_file_small_ != &::google::protobuf::internal::kEmptyString) {
    head_icon_file_small_->clear();
  }
  clear_has_head_icon_file_small();
}
inline const ::std::string& role_info_public::head_icon_file_small() const {
  return *head_icon_file_small_;
}
inline void role_info_public::set_head_icon_file_small(const ::std::string& value) {
  set_has_head_icon_file_small();
  if (head_icon_file_small_ == &::google::protobuf::internal::kEmptyString) {
    head_icon_file_small_ = new ::std::string;
  }
  head_icon_file_small_->assign(value);
}
inline void role_info_public::set_head_icon_file_small(const char* value) {
  set_has_head_icon_file_small();
  if (head_icon_file_small_ == &::google::protobuf::internal::kEmptyString) {
    head_icon_file_small_ = new ::std::string;
  }
  head_icon_file_small_->assign(value);
}
inline void role_info_public::set_head_icon_file_small(const void* value, size_t size) {
  set_has_head_icon_file_small();
  if (head_icon_file_small_ == &::google::protobuf::internal::kEmptyString) {
    head_icon_file_small_ = new ::std::string;
  }
  head_icon_file_small_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* role_info_public::mutable_head_icon_file_small() {
  set_has_head_icon_file_small();
  if (head_icon_file_small_ == &::google::protobuf::internal::kEmptyString) {
    head_icon_file_small_ = new ::std::string;
  }
  return head_icon_file_small_;
}
inline ::std::string* role_info_public::release_head_icon_file_small() {
  clear_has_head_icon_file_small();
  if (head_icon_file_small_ == &::google::protobuf::internal::kEmptyString) {
    return nullptr;
  } else {
    ::std::string* temp = head_icon_file_small_;
    head_icon_file_small_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void role_info_public::set_allocated_head_icon_file_small(::std::string* head_icon_file_small) {
  if (head_icon_file_small_ != &::google::protobuf::internal::kEmptyString) {
    delete head_icon_file_small_;
  }
  if (head_icon_file_small) {
    set_has_head_icon_file_small();
    head_icon_file_small_ = head_icon_file_small;
  } else {
    clear_has_head_icon_file_small();
    head_icon_file_small_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 head_icon_key_small = 21;
inline bool role_info_public::has_head_icon_key_small() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void role_info_public::set_has_head_icon_key_small() {
  _has_bits_[0] |= 0x00000200u;
}
inline void role_info_public::clear_has_head_icon_key_small() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void role_info_public::clear_head_icon_key_small() {
  head_icon_key_small_ = 0u;
  clear_has_head_icon_key_small();
}
inline ::google::protobuf::uint32 role_info_public::head_icon_key_small() const {
  return head_icon_key_small_;
}
inline void role_info_public::set_head_icon_key_small(::google::protobuf::uint32 value) {
  set_has_head_icon_key_small();
  head_icon_key_small_ = value;
}

// optional bytes head_icon_file_medium = 22;
inline bool role_info_public::has_head_icon_file_medium() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void role_info_public::set_has_head_icon_file_medium() {
  _has_bits_[0] |= 0x00000400u;
}
inline void role_info_public::clear_has_head_icon_file_medium() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void role_info_public::clear_head_icon_file_medium() {
  if (head_icon_file_medium_ != &::google::protobuf::internal::kEmptyString) {
    head_icon_file_medium_->clear();
  }
  clear_has_head_icon_file_medium();
}
inline const ::std::string& role_info_public::head_icon_file_medium() const {
  return *head_icon_file_medium_;
}
inline void role_info_public::set_head_icon_file_medium(const ::std::string& value) {
  set_has_head_icon_file_medium();
  if (head_icon_file_medium_ == &::google::protobuf::internal::kEmptyString) {
    head_icon_file_medium_ = new ::std::string;
  }
  head_icon_file_medium_->assign(value);
}
inline void role_info_public::set_head_icon_file_medium(const char* value) {
  set_has_head_icon_file_medium();
  if (head_icon_file_medium_ == &::google::protobuf::internal::kEmptyString) {
    head_icon_file_medium_ = new ::std::string;
  }
  head_icon_file_medium_->assign(value);
}
inline void role_info_public::set_head_icon_file_medium(const void* value, size_t size) {
  set_has_head_icon_file_medium();
  if (head_icon_file_medium_ == &::google::protobuf::internal::kEmptyString) {
    head_icon_file_medium_ = new ::std::string;
  }
  head_icon_file_medium_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* role_info_public::mutable_head_icon_file_medium() {
  set_has_head_icon_file_medium();
  if (head_icon_file_medium_ == &::google::protobuf::internal::kEmptyString) {
    head_icon_file_medium_ = new ::std::string;
  }
  return head_icon_file_medium_;
}
inline ::std::string* role_info_public::release_head_icon_file_medium() {
  clear_has_head_icon_file_medium();
  if (head_icon_file_medium_ == &::google::protobuf::internal::kEmptyString) {
    return nullptr;
  } else {
    ::std::string* temp = head_icon_file_medium_;
    head_icon_file_medium_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void role_info_public::set_allocated_head_icon_file_medium(::std::string* head_icon_file_medium) {
  if (head_icon_file_medium_ != &::google::protobuf::internal::kEmptyString) {
    delete head_icon_file_medium_;
  }
  if (head_icon_file_medium) {
    set_has_head_icon_file_medium();
    head_icon_file_medium_ = head_icon_file_medium;
  } else {
    clear_has_head_icon_file_medium();
    head_icon_file_medium_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 head_icon_key_medium = 23;
inline bool role_info_public::has_head_icon_key_medium() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void role_info_public::set_has_head_icon_key_medium() {
  _has_bits_[0] |= 0x00000800u;
}
inline void role_info_public::clear_has_head_icon_key_medium() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void role_info_public::clear_head_icon_key_medium() {
  head_icon_key_medium_ = 0u;
  clear_has_head_icon_key_medium();
}
inline ::google::protobuf::uint32 role_info_public::head_icon_key_medium() const {
  return head_icon_key_medium_;
}
inline void role_info_public::set_head_icon_key_medium(::google::protobuf::uint32 value) {
  set_has_head_icon_key_medium();
  head_icon_key_medium_ = value;
}

// optional bytes head_icon_file_big = 24;
inline bool role_info_public::has_head_icon_file_big() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void role_info_public::set_has_head_icon_file_big() {
  _has_bits_[0] |= 0x00001000u;
}
inline void role_info_public::clear_has_head_icon_file_big() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void role_info_public::clear_head_icon_file_big() {
  if (head_icon_file_big_ != &::google::protobuf::internal::kEmptyString) {
    head_icon_file_big_->clear();
  }
  clear_has_head_icon_file_big();
}
inline const ::std::string& role_info_public::head_icon_file_big() const {
  return *head_icon_file_big_;
}
inline void role_info_public::set_head_icon_file_big(const ::std::string& value) {
  set_has_head_icon_file_big();
  if (head_icon_file_big_ == &::google::protobuf::internal::kEmptyString) {
    head_icon_file_big_ = new ::std::string;
  }
  head_icon_file_big_->assign(value);
}
inline void role_info_public::set_head_icon_file_big(const char* value) {
  set_has_head_icon_file_big();
  if (head_icon_file_big_ == &::google::protobuf::internal::kEmptyString) {
    head_icon_file_big_ = new ::std::string;
  }
  head_icon_file_big_->assign(value);
}
inline void role_info_public::set_head_icon_file_big(const void* value, size_t size) {
  set_has_head_icon_file_big();
  if (head_icon_file_big_ == &::google::protobuf::internal::kEmptyString) {
    head_icon_file_big_ = new ::std::string;
  }
  head_icon_file_big_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* role_info_public::mutable_head_icon_file_big() {
  set_has_head_icon_file_big();
  if (head_icon_file_big_ == &::google::protobuf::internal::kEmptyString) {
    head_icon_file_big_ = new ::std::string;
  }
  return head_icon_file_big_;
}
inline ::std::string* role_info_public::release_head_icon_file_big() {
  clear_has_head_icon_file_big();
  if (head_icon_file_big_ == &::google::protobuf::internal::kEmptyString) {
    return nullptr;
  } else {
    ::std::string* temp = head_icon_file_big_;
    head_icon_file_big_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void role_info_public::set_allocated_head_icon_file_big(::std::string* head_icon_file_big) {
  if (head_icon_file_big_ != &::google::protobuf::internal::kEmptyString) {
    delete head_icon_file_big_;
  }
  if (head_icon_file_big) {
    set_has_head_icon_file_big();
    head_icon_file_big_ = head_icon_file_big;
  } else {
    clear_has_head_icon_file_big();
    head_icon_file_big_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 head_icon_key_big = 25;
inline bool role_info_public::has_head_icon_key_big() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void role_info_public::set_has_head_icon_key_big() {
  _has_bits_[0] |= 0x00002000u;
}
inline void role_info_public::clear_has_head_icon_key_big() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void role_info_public::clear_head_icon_key_big() {
  head_icon_key_big_ = 0u;
  clear_has_head_icon_key_big();
}
inline ::google::protobuf::uint32 role_info_public::head_icon_key_big() const {
  return head_icon_key_big_;
}
inline void role_info_public::set_head_icon_key_big(::google::protobuf::uint32 value) {
  set_has_head_icon_key_big();
  head_icon_key_big_ = value;
}

// optional bytes head_icon_file_portrait = 26;
inline bool role_info_public::has_head_icon_file_portrait() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void role_info_public::set_has_head_icon_file_portrait() {
  _has_bits_[0] |= 0x00004000u;
}
inline void role_info_public::clear_has_head_icon_file_portrait() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void role_info_public::clear_head_icon_file_portrait() {
  if (head_icon_file_portrait_ != &::google::protobuf::internal::kEmptyString) {
    head_icon_file_portrait_->clear();
  }
  clear_has_head_icon_file_portrait();
}
inline const ::std::string& role_info_public::head_icon_file_portrait() const {
  return *head_icon_file_portrait_;
}
inline void role_info_public::set_head_icon_file_portrait(const ::std::string& value) {
  set_has_head_icon_file_portrait();
  if (head_icon_file_portrait_ == &::google::protobuf::internal::kEmptyString) {
    head_icon_file_portrait_ = new ::std::string;
  }
  head_icon_file_portrait_->assign(value);
}
inline void role_info_public::set_head_icon_file_portrait(const char* value) {
  set_has_head_icon_file_portrait();
  if (head_icon_file_portrait_ == &::google::protobuf::internal::kEmptyString) {
    head_icon_file_portrait_ = new ::std::string;
  }
  head_icon_file_portrait_->assign(value);
}
inline void role_info_public::set_head_icon_file_portrait(const void* value, size_t size) {
  set_has_head_icon_file_portrait();
  if (head_icon_file_portrait_ == &::google::protobuf::internal::kEmptyString) {
    head_icon_file_portrait_ = new ::std::string;
  }
  head_icon_file_portrait_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* role_info_public::mutable_head_icon_file_portrait() {
  set_has_head_icon_file_portrait();
  if (head_icon_file_portrait_ == &::google::protobuf::internal::kEmptyString) {
    head_icon_file_portrait_ = new ::std::string;
  }
  return head_icon_file_portrait_;
}
inline ::std::string* role_info_public::release_head_icon_file_portrait() {
  clear_has_head_icon_file_portrait();
  if (head_icon_file_portrait_ == &::google::protobuf::internal::kEmptyString) {
    return nullptr;
  } else {
    ::std::string* temp = head_icon_file_portrait_;
    head_icon_file_portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void role_info_public::set_allocated_head_icon_file_portrait(::std::string* head_icon_file_portrait) {
  if (head_icon_file_portrait_ != &::google::protobuf::internal::kEmptyString) {
    delete head_icon_file_portrait_;
  }
  if (head_icon_file_portrait) {
    set_has_head_icon_file_portrait();
    head_icon_file_portrait_ = head_icon_file_portrait;
  } else {
    clear_has_head_icon_file_portrait();
    head_icon_file_portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 head_icon_key_portrait = 27;
inline bool role_info_public::has_head_icon_key_portrait() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void role_info_public::set_has_head_icon_key_portrait() {
  _has_bits_[0] |= 0x00008000u;
}
inline void role_info_public::clear_has_head_icon_key_portrait() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void role_info_public::clear_head_icon_key_portrait() {
  head_icon_key_portrait_ = 0u;
  clear_has_head_icon_key_portrait();
}
inline ::google::protobuf::uint32 role_info_public::head_icon_key_portrait() const {
  return head_icon_key_portrait_;
}
inline void role_info_public::set_head_icon_key_portrait(::google::protobuf::uint32 value) {
  set_has_head_icon_key_portrait();
  head_icon_key_portrait_ = value;
}

// optional bytes nick_name = 100;
inline bool role_info_public::has_nick_name() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void role_info_public::set_has_nick_name() {
  _has_bits_[0] |= 0x00010000u;
}
inline void role_info_public::clear_has_nick_name() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void role_info_public::clear_nick_name() {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    nick_name_->clear();
  }
  clear_has_nick_name();
}
inline const ::std::string& role_info_public::nick_name() const {
  return *nick_name_;
}
inline void role_info_public::set_nick_name(const ::std::string& value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
}
inline void role_info_public::set_nick_name(const char* value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
}
inline void role_info_public::set_nick_name(const void* value, size_t size) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* role_info_public::mutable_nick_name() {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  return nick_name_;
}
inline ::std::string* role_info_public::release_nick_name() {
  clear_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    return nullptr;
  } else {
    ::std::string* temp = nick_name_;
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void role_info_public::set_allocated_nick_name(::std::string* nick_name) {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (nick_name) {
    set_has_nick_name();
    nick_name_ = nick_name;
  } else {
    clear_has_nick_name();
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional sint64 level = 101;
inline bool role_info_public::has_level() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void role_info_public::set_has_level() {
  _has_bits_[0] |= 0x00020000u;
}
inline void role_info_public::clear_has_level() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void role_info_public::clear_level() {
  level_ = GOOGLE_LONGLONG(0);
  clear_has_level();
}
inline ::google::protobuf::int64 role_info_public::level() const {
  return level_;
}
inline void role_info_public::set_level(::google::protobuf::int64 value) {
  set_has_level();
  level_ = value;
}

// optional sint32 scene_id = 201;
inline bool role_info_public::has_scene_id() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void role_info_public::set_has_scene_id() {
  _has_bits_[0] |= 0x00040000u;
}
inline void role_info_public::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void role_info_public::clear_scene_id() {
  scene_id_ = 0;
  clear_has_scene_id();
}
inline ::google::protobuf::int32 role_info_public::scene_id() const {
  return scene_id_;
}
inline void role_info_public::set_scene_id(::google::protobuf::int32 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// optional sint32 dir = 202;
inline bool role_info_public::has_dir() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void role_info_public::set_has_dir() {
  _has_bits_[0] |= 0x00080000u;
}
inline void role_info_public::clear_has_dir() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void role_info_public::clear_dir() {
  dir_ = 0;
  clear_has_dir();
}
inline ::google::protobuf::int32 role_info_public::dir() const {
  return dir_;
}
inline void role_info_public::set_dir(::google::protobuf::int32 value) {
  set_has_dir();
  dir_ = value;
}

// optional float pos_x = 203;
inline bool role_info_public::has_pos_x() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void role_info_public::set_has_pos_x() {
  _has_bits_[0] |= 0x00100000u;
}
inline void role_info_public::clear_has_pos_x() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void role_info_public::clear_pos_x() {
  pos_x_ = 0;
  clear_has_pos_x();
}
inline float role_info_public::pos_x() const {
  return pos_x_;
}
inline void role_info_public::set_pos_x(float value) {
  set_has_pos_x();
  pos_x_ = value;
}

// optional float pos_y = 204;
inline bool role_info_public::has_pos_y() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void role_info_public::set_has_pos_y() {
  _has_bits_[0] |= 0x00200000u;
}
inline void role_info_public::clear_has_pos_y() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void role_info_public::clear_pos_y() {
  pos_y_ = 0;
  clear_has_pos_y();
}
inline float role_info_public::pos_y() const {
  return pos_y_;
}
inline void role_info_public::set_pos_y(float value) {
  set_has_pos_y();
  pos_y_ = value;
}

// -------------------------------------------------------------------

// role_info_private

// required sint64 battle_index = 1;
inline bool role_info_private::has_battle_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_info_private::set_has_battle_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_info_private::clear_has_battle_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_info_private::clear_battle_index() {
  battle_index_ = GOOGLE_LONGLONG(0);
  clear_has_battle_index();
}
inline ::google::protobuf::int64 role_info_private::battle_index() const {
  return battle_index_;
}
inline void role_info_private::set_battle_index(::google::protobuf::int64 value) {
  set_has_battle_index();
  battle_index_ = value;
}

// required sint64 game_coin = 2;
inline bool role_info_private::has_game_coin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_info_private::set_has_game_coin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_info_private::clear_has_game_coin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_info_private::clear_game_coin() {
  game_coin_ = GOOGLE_LONGLONG(0);
  clear_has_game_coin();
}
inline ::google::protobuf::int64 role_info_private::game_coin() const {
  return game_coin_;
}
inline void role_info_private::set_game_coin(::google::protobuf::int64 value) {
  set_has_game_coin();
  game_coin_ = value;
}

// required sint32 stamina = 3;
inline bool role_info_private::has_stamina() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_info_private::set_has_stamina() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_info_private::clear_has_stamina() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_info_private::clear_stamina() {
  stamina_ = 0;
  clear_has_stamina();
}
inline ::google::protobuf::int32 role_info_private::stamina() const {
  return stamina_;
}
inline void role_info_private::set_stamina(::google::protobuf::int32 value) {
  set_has_stamina();
  stamina_ = value;
}

// required sint64 diamond_coin = 4;
inline bool role_info_private::has_diamond_coin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void role_info_private::set_has_diamond_coin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void role_info_private::clear_has_diamond_coin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void role_info_private::clear_diamond_coin() {
  diamond_coin_ = GOOGLE_LONGLONG(0);
  clear_has_diamond_coin();
}
inline ::google::protobuf::int64 role_info_private::diamond_coin() const {
  return diamond_coin_;
}
inline void role_info_private::set_diamond_coin(::google::protobuf::int64 value) {
  set_has_diamond_coin();
  diamond_coin_ = value;
}

// required sint32 skill_point = 5;
inline bool role_info_private::has_skill_point() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void role_info_private::set_has_skill_point() {
  _has_bits_[0] |= 0x00000010u;
}
inline void role_info_private::clear_has_skill_point() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void role_info_private::clear_skill_point() {
  skill_point_ = 0;
  clear_has_skill_point();
}
inline ::google::protobuf::int32 role_info_private::skill_point() const {
  return skill_point_;
}
inline void role_info_private::set_skill_point(::google::protobuf::int32 value) {
  set_has_skill_point();
  skill_point_ = value;
}

// required sint32 vip_level = 6;
inline bool role_info_private::has_vip_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void role_info_private::set_has_vip_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void role_info_private::clear_has_vip_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void role_info_private::clear_vip_level() {
  vip_level_ = 0;
  clear_has_vip_level();
}
inline ::google::protobuf::int32 role_info_private::vip_level() const {
  return vip_level_;
}
inline void role_info_private::set_vip_level(::google::protobuf::int32 value) {
  set_has_vip_level();
  vip_level_ = value;
}

// repeated sint64 list_watcher_role_index = 50;
inline int role_info_private::list_watcher_role_index_size() const {
  return list_watcher_role_index_.size();
}
inline void role_info_private::clear_list_watcher_role_index() {
  list_watcher_role_index_.Clear();
}
inline ::google::protobuf::int64 role_info_private::list_watcher_role_index(int index) const {
  return list_watcher_role_index_.Get(index);
}
inline void role_info_private::set_list_watcher_role_index(int index, ::google::protobuf::int64 value) {
  list_watcher_role_index_.Set(index, value);
}
inline void role_info_private::add_list_watcher_role_index(::google::protobuf::int64 value) {
  list_watcher_role_index_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
role_info_private::list_watcher_role_index() const {
  return list_watcher_role_index_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
role_info_private::mutable_list_watcher_role_index() {
  return &list_watcher_role_index_;
}

// optional bytes phone = 100;
inline bool role_info_private::has_phone() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void role_info_private::set_has_phone() {
  _has_bits_[0] |= 0x00000080u;
}
inline void role_info_private::clear_has_phone() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void role_info_private::clear_phone() {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    phone_->clear();
  }
  clear_has_phone();
}
inline const ::std::string& role_info_private::phone() const {
  return *phone_;
}
inline void role_info_private::set_phone(const ::std::string& value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
}
inline void role_info_private::set_phone(const char* value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
}
inline void role_info_private::set_phone(const void* value, size_t size) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* role_info_private::mutable_phone() {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  return phone_;
}
inline ::std::string* role_info_private::release_phone() {
  clear_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    return nullptr;
  } else {
    ::std::string* temp = phone_;
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void role_info_private::set_allocated_phone(::std::string* phone) {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (phone) {
    set_has_phone();
    phone_ = phone;
  } else {
    clear_has_phone();
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes email = 101;
inline bool role_info_private::has_email() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void role_info_private::set_has_email() {
  _has_bits_[0] |= 0x00000100u;
}
inline void role_info_private::clear_has_email() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void role_info_private::clear_email() {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& role_info_private::email() const {
  return *email_;
}
inline void role_info_private::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void role_info_private::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void role_info_private::set_email(const void* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* role_info_private::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  return email_;
}
inline ::std::string* role_info_private::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    return nullptr;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void role_info_private::set_allocated_email(::std::string* email) {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (email) {
    set_has_email();
    email_ = email;
  } else {
    clear_has_email();
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes qq = 102;
inline bool role_info_private::has_qq() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void role_info_private::set_has_qq() {
  _has_bits_[0] |= 0x00000200u;
}
inline void role_info_private::clear_has_qq() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void role_info_private::clear_qq() {
  if (qq_ != &::google::protobuf::internal::kEmptyString) {
    qq_->clear();
  }
  clear_has_qq();
}
inline const ::std::string& role_info_private::qq() const {
  return *qq_;
}
inline void role_info_private::set_qq(const ::std::string& value) {
  set_has_qq();
  if (qq_ == &::google::protobuf::internal::kEmptyString) {
    qq_ = new ::std::string;
  }
  qq_->assign(value);
}
inline void role_info_private::set_qq(const char* value) {
  set_has_qq();
  if (qq_ == &::google::protobuf::internal::kEmptyString) {
    qq_ = new ::std::string;
  }
  qq_->assign(value);
}
inline void role_info_private::set_qq(const void* value, size_t size) {
  set_has_qq();
  if (qq_ == &::google::protobuf::internal::kEmptyString) {
    qq_ = new ::std::string;
  }
  qq_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* role_info_private::mutable_qq() {
  set_has_qq();
  if (qq_ == &::google::protobuf::internal::kEmptyString) {
    qq_ = new ::std::string;
  }
  return qq_;
}
inline ::std::string* role_info_private::release_qq() {
  clear_has_qq();
  if (qq_ == &::google::protobuf::internal::kEmptyString) {
    return nullptr;
  } else {
    ::std::string* temp = qq_;
    qq_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void role_info_private::set_allocated_qq(::std::string* qq) {
  if (qq_ != &::google::protobuf::internal::kEmptyString) {
    delete qq_;
  }
  if (qq) {
    set_has_qq();
    qq_ = qq;
  } else {
    clear_has_qq();
    qq_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes platform_type = 103;
inline bool role_info_private::has_platform_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void role_info_private::set_has_platform_type() {
  _has_bits_[0] |= 0x00000400u;
}
inline void role_info_private::clear_has_platform_type() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void role_info_private::clear_platform_type() {
  if (platform_type_ != &::google::protobuf::internal::kEmptyString) {
    platform_type_->clear();
  }
  clear_has_platform_type();
}
inline const ::std::string& role_info_private::platform_type() const {
  return *platform_type_;
}
inline void role_info_private::set_platform_type(const ::std::string& value) {
  set_has_platform_type();
  if (platform_type_ == &::google::protobuf::internal::kEmptyString) {
    platform_type_ = new ::std::string;
  }
  platform_type_->assign(value);
}
inline void role_info_private::set_platform_type(const char* value) {
  set_has_platform_type();
  if (platform_type_ == &::google::protobuf::internal::kEmptyString) {
    platform_type_ = new ::std::string;
  }
  platform_type_->assign(value);
}
inline void role_info_private::set_platform_type(const void* value, size_t size) {
  set_has_platform_type();
  if (platform_type_ == &::google::protobuf::internal::kEmptyString) {
    platform_type_ = new ::std::string;
  }
  platform_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* role_info_private::mutable_platform_type() {
  set_has_platform_type();
  if (platform_type_ == &::google::protobuf::internal::kEmptyString) {
    platform_type_ = new ::std::string;
  }
  return platform_type_;
}
inline ::std::string* role_info_private::release_platform_type() {
  clear_has_platform_type();
  if (platform_type_ == &::google::protobuf::internal::kEmptyString) {
    return nullptr;
  } else {
    ::std::string* temp = platform_type_;
    platform_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void role_info_private::set_allocated_platform_type(::std::string* platform_type) {
  if (platform_type_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_type_;
  }
  if (platform_type) {
    set_has_platform_type();
    platform_type_ = platform_type;
  } else {
    clear_has_platform_type();
    platform_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// role_info_attr

// repeated sint32 attr_key = 1;
inline int role_info_attr::attr_key_size() const {
  return attr_key_.size();
}
inline void role_info_attr::clear_attr_key() {
  attr_key_.Clear();
}
inline ::google::protobuf::int32 role_info_attr::attr_key(int index) const {
  return attr_key_.Get(index);
}
inline void role_info_attr::set_attr_key(int index, ::google::protobuf::int32 value) {
  attr_key_.Set(index, value);
}
inline void role_info_attr::add_attr_key(::google::protobuf::int32 value) {
  attr_key_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
role_info_attr::attr_key() const {
  return attr_key_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
role_info_attr::mutable_attr_key() {
  return &attr_key_;
}

// repeated sint64 attr_value = 2;
inline int role_info_attr::attr_value_size() const {
  return attr_value_.size();
}
inline void role_info_attr::clear_attr_value() {
  attr_value_.Clear();
}
inline ::google::protobuf::int64 role_info_attr::attr_value(int index) const {
  return attr_value_.Get(index);
}
inline void role_info_attr::set_attr_value(int index, ::google::protobuf::int64 value) {
  attr_value_.Set(index, value);
}
inline void role_info_attr::add_attr_value(::google::protobuf::int64 value) {
  attr_value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
role_info_attr::attr_value() const {
  return attr_value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
role_info_attr::mutable_attr_value() {
  return &attr_value_;
}

// -------------------------------------------------------------------

// role_info_reward

// repeated sint64 list_exp = 10;
inline int role_info_reward::list_exp_size() const {
  return list_exp_.size();
}
inline void role_info_reward::clear_list_exp() {
  list_exp_.Clear();
}
inline ::google::protobuf::int64 role_info_reward::list_exp(int index) const {
  return list_exp_.Get(index);
}
inline void role_info_reward::set_list_exp(int index, ::google::protobuf::int64 value) {
  list_exp_.Set(index, value);
}
inline void role_info_reward::add_list_exp(::google::protobuf::int64 value) {
  list_exp_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
role_info_reward::list_exp() const {
  return list_exp_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
role_info_reward::mutable_list_exp() {
  return &list_exp_;
}

// repeated sint64 list_money = 11;
inline int role_info_reward::list_money_size() const {
  return list_money_.size();
}
inline void role_info_reward::clear_list_money() {
  list_money_.Clear();
}
inline ::google::protobuf::int64 role_info_reward::list_money(int index) const {
  return list_money_.Get(index);
}
inline void role_info_reward::set_list_money(int index, ::google::protobuf::int64 value) {
  list_money_.Set(index, value);
}
inline void role_info_reward::add_list_money(::google::protobuf::int64 value) {
  list_money_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
role_info_reward::list_money() const {
  return list_money_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
role_info_reward::mutable_list_money() {
  return &list_money_;
}

// required .dict_item list_item = 12;
inline bool role_info_reward::has_list_item() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_info_reward::set_has_list_item() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_info_reward::clear_has_list_item() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_info_reward::clear_list_item() {
  if (list_item_ != nullptr) list_item_->::dict_item::Clear();
  clear_has_list_item();
}
inline const ::dict_item& role_info_reward::list_item() const {
  return list_item_ != nullptr ? *list_item_ : *default_instance_->list_item_;
}
inline ::dict_item* role_info_reward::mutable_list_item() {
  set_has_list_item();
  if (list_item_ == nullptr) list_item_ = new ::dict_item;
  return list_item_;
}
inline ::dict_item* role_info_reward::release_list_item() {
  clear_has_list_item();
  ::dict_item* temp = list_item_;
  list_item_ = nullptr;
  return temp;
}
inline void role_info_reward::set_allocated_list_item(::dict_item* list_item) {
  delete list_item_;
  list_item_ = list_item;
  if (list_item) {
    set_has_list_item();
  } else {
    clear_has_list_item();
  }
}

// -------------------------------------------------------------------

// roleinfo_extend_attr_1

// optional sint64 test_data = 1;
inline bool roleinfo_extend_attr_1::has_test_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void roleinfo_extend_attr_1::set_has_test_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void roleinfo_extend_attr_1::clear_has_test_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void roleinfo_extend_attr_1::clear_test_data() {
  test_data_ = GOOGLE_LONGLONG(0);
  clear_has_test_data();
}
inline ::google::protobuf::int64 roleinfo_extend_attr_1::test_data() const {
  return test_data_;
}
inline void roleinfo_extend_attr_1::set_test_data(::google::protobuf::int64 value) {
  set_has_test_data();
  test_data_ = value;
}

// -------------------------------------------------------------------

// roleinfo_extend_attr_2

// optional sint64 test_data = 1;
inline bool roleinfo_extend_attr_2::has_test_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void roleinfo_extend_attr_2::set_has_test_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void roleinfo_extend_attr_2::clear_has_test_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void roleinfo_extend_attr_2::clear_test_data() {
  test_data_ = GOOGLE_LONGLONG(0);
  clear_has_test_data();
}
inline ::google::protobuf::int64 roleinfo_extend_attr_2::test_data() const {
  return test_data_;
}
inline void roleinfo_extend_attr_2::set_test_data(::google::protobuf::int64 value) {
  set_has_test_data();
  test_data_ = value;
}

// -------------------------------------------------------------------

// roleinfo_extend_attr_3

// optional sint64 test_data = 1;
inline bool roleinfo_extend_attr_3::has_test_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void roleinfo_extend_attr_3::set_has_test_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void roleinfo_extend_attr_3::clear_has_test_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void roleinfo_extend_attr_3::clear_test_data() {
  test_data_ = GOOGLE_LONGLONG(0);
  clear_has_test_data();
}
inline ::google::protobuf::int64 roleinfo_extend_attr_3::test_data() const {
  return test_data_;
}
inline void roleinfo_extend_attr_3::set_test_data(::google::protobuf::int64 value) {
  set_has_test_data();
  test_data_ = value;
}

// -------------------------------------------------------------------

// roleinfo_extend_attr_4

// optional sint64 test_data = 1;
inline bool roleinfo_extend_attr_4::has_test_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void roleinfo_extend_attr_4::set_has_test_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void roleinfo_extend_attr_4::clear_has_test_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void roleinfo_extend_attr_4::clear_test_data() {
  test_data_ = GOOGLE_LONGLONG(0);
  clear_has_test_data();
}
inline ::google::protobuf::int64 roleinfo_extend_attr_4::test_data() const {
  return test_data_;
}
inline void roleinfo_extend_attr_4::set_test_data(::google::protobuf::int64 value) {
  set_has_test_data();
  test_data_ = value;
}

// -------------------------------------------------------------------

// roleinfo_extend_attr_5

// optional sint64 test_data = 1;
inline bool roleinfo_extend_attr_5::has_test_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void roleinfo_extend_attr_5::set_has_test_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void roleinfo_extend_attr_5::clear_has_test_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void roleinfo_extend_attr_5::clear_test_data() {
  test_data_ = GOOGLE_LONGLONG(0);
  clear_has_test_data();
}
inline ::google::protobuf::int64 roleinfo_extend_attr_5::test_data() const {
  return test_data_;
}
inline void roleinfo_extend_attr_5::set_test_data(::google::protobuf::int64 value) {
  set_has_test_data();
  test_data_ = value;
}

// -------------------------------------------------------------------

// role_info

// required sint64 role_index = 1;
inline bool role_info::has_role_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_info::set_has_role_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_info::clear_has_role_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_info::clear_role_index() {
  role_index_ = GOOGLE_LONGLONG(0);
  clear_has_role_index();
}
inline ::google::protobuf::int64 role_info::role_index() const {
  return role_index_;
}
inline void role_info::set_role_index(::google::protobuf::int64 value) {
  set_has_role_index();
  role_index_ = value;
}

// required bytes account = 2;
inline bool role_info::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_info::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_info::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_info::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& role_info::account() const {
  return *account_;
}
inline void role_info::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void role_info::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void role_info::set_account(const void* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* role_info::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* role_info::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return nullptr;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void role_info::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .role_info_public public_info = 3;
inline bool role_info::has_public_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_info::set_has_public_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_info::clear_has_public_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_info::clear_public_info() {
  if (public_info_ != nullptr) public_info_->::role_info_public::Clear();
  clear_has_public_info();
}
inline const ::role_info_public& role_info::public_info() const {
  return public_info_ != nullptr ? *public_info_ : *default_instance_->public_info_;
}
inline ::role_info_public* role_info::mutable_public_info() {
  set_has_public_info();
  if (public_info_ == nullptr) public_info_ = new ::role_info_public;
  return public_info_;
}
inline ::role_info_public* role_info::release_public_info() {
  clear_has_public_info();
  ::role_info_public* temp = public_info_;
  public_info_ = nullptr;
  return temp;
}
inline void role_info::set_allocated_public_info(::role_info_public* public_info) {
  delete public_info_;
  public_info_ = public_info;
  if (public_info) {
    set_has_public_info();
  } else {
    clear_has_public_info();
  }
}

// optional .role_info_private private_info = 4;
inline bool role_info::has_private_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void role_info::set_has_private_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void role_info::clear_has_private_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void role_info::clear_private_info() {
  if (private_info_ != nullptr) private_info_->::role_info_private::Clear();
  clear_has_private_info();
}
inline const ::role_info_private& role_info::private_info() const {
  return private_info_ != nullptr ? *private_info_ : *default_instance_->private_info_;
}
inline ::role_info_private* role_info::mutable_private_info() {
  set_has_private_info();
  if (private_info_ == nullptr) private_info_ = new ::role_info_private;
  return private_info_;
}
inline ::role_info_private* role_info::release_private_info() {
  clear_has_private_info();
  ::role_info_private* temp = private_info_;
  private_info_ = nullptr;
  return temp;
}
inline void role_info::set_allocated_private_info(::role_info_private* private_info) {
  delete private_info_;
  private_info_ = private_info;
  if (private_info) {
    set_has_private_info();
  } else {
    clear_has_private_info();
  }
}

// optional .role_info_attr attr_info = 5;
inline bool role_info::has_attr_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void role_info::set_has_attr_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void role_info::clear_has_attr_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void role_info::clear_attr_info() {
  if (attr_info_ != nullptr) attr_info_->::role_info_attr::Clear();
  clear_has_attr_info();
}
inline const ::role_info_attr& role_info::attr_info() const {
  return attr_info_ != nullptr ? *attr_info_ : *default_instance_->attr_info_;
}
inline ::role_info_attr* role_info::mutable_attr_info() {
  set_has_attr_info();
  if (attr_info_ == nullptr) attr_info_ = new ::role_info_attr;
  return attr_info_;
}
inline ::role_info_attr* role_info::release_attr_info() {
  clear_has_attr_info();
  ::role_info_attr* temp = attr_info_;
  attr_info_ = nullptr;
  return temp;
}
inline void role_info::set_allocated_attr_info(::role_info_attr* attr_info) {
  delete attr_info_;
  attr_info_ = attr_info;
  if (attr_info) {
    set_has_attr_info();
  } else {
    clear_has_attr_info();
  }
}

// optional .role_info_memory memory_info = 6;
inline bool role_info::has_memory_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void role_info::set_has_memory_info() {
  _has_bits_[0] |= 0x00000020u;
}
inline void role_info::clear_has_memory_info() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void role_info::clear_memory_info() {
  if (memory_info_ != nullptr) memory_info_->::role_info_memory::Clear();
  clear_has_memory_info();
}
inline const ::role_info_memory& role_info::memory_info() const {
  return memory_info_ != nullptr ? *memory_info_ : *default_instance_->memory_info_;
}
inline ::role_info_memory* role_info::mutable_memory_info() {
  set_has_memory_info();
  if (memory_info_ == nullptr) memory_info_ = new ::role_info_memory;
  return memory_info_;
}
inline ::role_info_memory* role_info::release_memory_info() {
  clear_has_memory_info();
  ::role_info_memory* temp = memory_info_;
  memory_info_ = nullptr;
  return temp;
}
inline void role_info::set_allocated_memory_info(::role_info_memory* memory_info) {
  delete memory_info_;
  memory_info_ = memory_info;
  if (memory_info) {
    set_has_memory_info();
  } else {
    clear_has_memory_info();
  }
}

// optional .role_info_skill skill_info = 7;
inline bool role_info::has_skill_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void role_info::set_has_skill_info() {
  _has_bits_[0] |= 0x00000040u;
}
inline void role_info::clear_has_skill_info() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void role_info::clear_skill_info() {
  if (skill_info_ != nullptr) skill_info_->::role_info_skill::Clear();
  clear_has_skill_info();
}
inline const ::role_info_skill& role_info::skill_info() const {
  return skill_info_ != nullptr ? *skill_info_ : *default_instance_->skill_info_;
}
inline ::role_info_skill* role_info::mutable_skill_info() {
  set_has_skill_info();
  if (skill_info_ == nullptr) skill_info_ = new ::role_info_skill;
  return skill_info_;
}
inline ::role_info_skill* role_info::release_skill_info() {
  clear_has_skill_info();
  ::role_info_skill* temp = skill_info_;
  skill_info_ = nullptr;
  return temp;
}
inline void role_info::set_allocated_skill_info(::role_info_skill* skill_info) {
  delete skill_info_;
  skill_info_ = skill_info;
  if (skill_info) {
    set_has_skill_info();
  } else {
    clear_has_skill_info();
  }
}

// optional .role_info_reward reward_info = 8;
inline bool role_info::has_reward_info() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void role_info::set_has_reward_info() {
  _has_bits_[0] |= 0x00000080u;
}
inline void role_info::clear_has_reward_info() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void role_info::clear_reward_info() {
  if (reward_info_ != nullptr) reward_info_->::role_info_reward::Clear();
  clear_has_reward_info();
}
inline const ::role_info_reward& role_info::reward_info() const {
  return reward_info_ != nullptr ? *reward_info_ : *default_instance_->reward_info_;
}
inline ::role_info_reward* role_info::mutable_reward_info() {
  set_has_reward_info();
  if (reward_info_ == nullptr) reward_info_ = new ::role_info_reward;
  return reward_info_;
}
inline ::role_info_reward* role_info::release_reward_info() {
  clear_has_reward_info();
  ::role_info_reward* temp = reward_info_;
  reward_info_ = nullptr;
  return temp;
}
inline void role_info::set_allocated_reward_info(::role_info_reward* reward_info) {
  delete reward_info_;
  reward_info_ = reward_info;
  if (reward_info) {
    set_has_reward_info();
  } else {
    clear_has_reward_info();
  }
}

// optional .role_info_config config_info = 9;
inline bool role_info::has_config_info() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void role_info::set_has_config_info() {
  _has_bits_[0] |= 0x00000100u;
}
inline void role_info::clear_has_config_info() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void role_info::clear_config_info() {
  if (config_info_ != nullptr) config_info_->::role_info_config::Clear();
  clear_has_config_info();
}
inline const ::role_info_config& role_info::config_info() const {
  return config_info_ != nullptr ? *config_info_ : *default_instance_->config_info_;
}
inline ::role_info_config* role_info::mutable_config_info() {
  set_has_config_info();
  if (config_info_ == nullptr) config_info_ = new ::role_info_config;
  return config_info_;
}
inline ::role_info_config* role_info::release_config_info() {
  clear_has_config_info();
  ::role_info_config* temp = config_info_;
  config_info_ = nullptr;
  return temp;
}
inline void role_info::set_allocated_config_info(::role_info_config* config_info) {
  delete config_info_;
  config_info_ = config_info;
  if (config_info) {
    set_has_config_info();
  } else {
    clear_has_config_info();
  }
}

// optional sint32 bag_page_count = 10;
inline bool role_info::has_bag_page_count() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void role_info::set_has_bag_page_count() {
  _has_bits_[0] |= 0x00000200u;
}
inline void role_info::clear_has_bag_page_count() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void role_info::clear_bag_page_count() {
  bag_page_count_ = 0;
  clear_has_bag_page_count();
}
inline ::google::protobuf::int32 role_info::bag_page_count() const {
  return bag_page_count_;
}
inline void role_info::set_bag_page_count(::google::protobuf::int32 value) {
  set_has_bag_page_count();
  bag_page_count_ = value;
}

// optional .dict_item items = 103;
inline bool role_info::has_items() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void role_info::set_has_items() {
  _has_bits_[0] |= 0x00000400u;
}
inline void role_info::clear_has_items() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void role_info::clear_items() {
  if (items_ != nullptr) items_->::dict_item::Clear();
  clear_has_items();
}
inline const ::dict_item& role_info::items() const {
  return items_ != nullptr ? *items_ : *default_instance_->items_;
}
inline ::dict_item* role_info::mutable_items() {
  set_has_items();
  if (items_ == nullptr) items_ = new ::dict_item;
  return items_;
}
inline ::dict_item* role_info::release_items() {
  clear_has_items();
  ::dict_item* temp = items_;
  items_ = nullptr;
  return temp;
}
inline void role_info::set_allocated_items(::dict_item* items) {
  delete items_;
  items_ = items;
  if (items) {
    set_has_items();
  } else {
    clear_has_items();
  }
}

// optional .dict_item equips = 106;
inline bool role_info::has_equips() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void role_info::set_has_equips() {
  _has_bits_[0] |= 0x00000800u;
}
inline void role_info::clear_has_equips() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void role_info::clear_equips() {
  if (equips_ != nullptr) equips_->::dict_item::Clear();
  clear_has_equips();
}
inline const ::dict_item& role_info::equips() const {
  return equips_ != nullptr ? *equips_ : *default_instance_->equips_;
}
inline ::dict_item* role_info::mutable_equips() {
  set_has_equips();
  if (equips_ == nullptr) equips_ = new ::dict_item;
  return equips_;
}
inline ::dict_item* role_info::release_equips() {
  clear_has_equips();
  ::dict_item* temp = equips_;
  equips_ = nullptr;
  return temp;
}
inline void role_info::set_allocated_equips(::dict_item* equips) {
  delete equips_;
  equips_ = equips;
  if (equips) {
    set_has_equips();
  } else {
    clear_has_equips();
  }
}

// optional .dict_summonpet summonpets = 202;
inline bool role_info::has_summonpets() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void role_info::set_has_summonpets() {
  _has_bits_[0] |= 0x00001000u;
}
inline void role_info::clear_has_summonpets() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void role_info::clear_summonpets() {
  if (summonpets_ != nullptr) summonpets_->::dict_summonpet::Clear();
  clear_has_summonpets();
}
inline const ::dict_summonpet& role_info::summonpets() const {
  return summonpets_ != nullptr ? *summonpets_ : *default_instance_->summonpets_;
}
inline ::dict_summonpet* role_info::mutable_summonpets() {
  set_has_summonpets();
  if (summonpets_ == nullptr) summonpets_ = new ::dict_summonpet;
  return summonpets_;
}
inline ::dict_summonpet* role_info::release_summonpets() {
  clear_has_summonpets();
  ::dict_summonpet* temp = summonpets_;
  summonpets_ = nullptr;
  return temp;
}
inline void role_info::set_allocated_summonpets(::dict_summonpet* summonpets) {
  delete summonpets_;
  summonpets_ = summonpets;
  if (summonpets) {
    set_has_summonpets();
  } else {
    clear_has_summonpets();
  }
}

// optional .dict_game_friend friends = 203;
inline bool role_info::has_friends() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void role_info::set_has_friends() {
  _has_bits_[0] |= 0x00002000u;
}
inline void role_info::clear_has_friends() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void role_info::clear_friends() {
  if (friends_ != nullptr) friends_->::dict_game_friend::Clear();
  clear_has_friends();
}
inline const ::dict_game_friend& role_info::friends() const {
  return friends_ != nullptr ? *friends_ : *default_instance_->friends_;
}
inline ::dict_game_friend* role_info::mutable_friends() {
  set_has_friends();
  if (friends_ == nullptr) friends_ = new ::dict_game_friend;
  return friends_;
}
inline ::dict_game_friend* role_info::release_friends() {
  clear_has_friends();
  ::dict_game_friend* temp = friends_;
  friends_ = nullptr;
  return temp;
}
inline void role_info::set_allocated_friends(::dict_game_friend* friends) {
  delete friends_;
  friends_ = friends;
  if (friends) {
    set_has_friends();
  } else {
    clear_has_friends();
  }
}

// optional .task task_info = 204;
inline bool role_info::has_task_info() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void role_info::set_has_task_info() {
  _has_bits_[0] |= 0x00004000u;
}
inline void role_info::clear_has_task_info() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void role_info::clear_task_info() {
  if (task_info_ != nullptr) task_info_->::task::Clear();
  clear_has_task_info();
}
inline const ::task& role_info::task_info() const {
  return task_info_ != nullptr ? *task_info_ : *default_instance_->task_info_;
}
inline ::task* role_info::mutable_task_info() {
  set_has_task_info();
  if (task_info_ == nullptr) task_info_ = new ::task;
  return task_info_;
}
inline ::task* role_info::release_task_info() {
  clear_has_task_info();
  ::task* temp = task_info_;
  task_info_ = nullptr;
  return temp;
}
inline void role_info::set_allocated_task_info(::task* task_info) {
  delete task_info_;
  task_info_ = task_info;
  if (task_info) {
    set_has_task_info();
  } else {
    clear_has_task_info();
  }
}

// optional .success list_success = 205;
inline bool role_info::has_list_success() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void role_info::set_has_list_success() {
  _has_bits_[0] |= 0x00008000u;
}
inline void role_info::clear_has_list_success() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void role_info::clear_list_success() {
  if (list_success_ != nullptr) list_success_->::success::Clear();
  clear_has_list_success();
}
inline const ::success& role_info::list_success() const {
  return list_success_ != nullptr ? *list_success_ : *default_instance_->list_success_;
}
inline ::success* role_info::mutable_list_success() {
  set_has_list_success();
  if (list_success_ == nullptr) list_success_ = new ::success;
  return list_success_;
}
inline ::success* role_info::release_list_success() {
  clear_has_list_success();
  ::success* temp = list_success_;
  list_success_ = nullptr;
  return temp;
}
inline void role_info::set_allocated_list_success(::success* list_success) {
  delete list_success_;
  list_success_ = list_success;
  if (list_success) {
    set_has_list_success();
  } else {
    clear_has_list_success();
  }
}

// optional .guide list_guide = 206;
inline bool role_info::has_list_guide() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void role_info::set_has_list_guide() {
  _has_bits_[0] |= 0x00010000u;
}
inline void role_info::clear_has_list_guide() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void role_info::clear_list_guide() {
  if (list_guide_ != nullptr) list_guide_->::guide::Clear();
  clear_has_list_guide();
}
inline const ::guide& role_info::list_guide() const {
  return list_guide_ != nullptr ? *list_guide_ : *default_instance_->list_guide_;
}
inline ::guide* role_info::mutable_list_guide() {
  set_has_list_guide();
  if (list_guide_ == nullptr) list_guide_ = new ::guide;
  return list_guide_;
}
inline ::guide* role_info::release_list_guide() {
  clear_has_list_guide();
  ::guide* temp = list_guide_;
  list_guide_ = nullptr;
  return temp;
}
inline void role_info::set_allocated_list_guide(::guide* list_guide) {
  delete list_guide_;
  list_guide_ = list_guide;
  if (list_guide) {
    set_has_list_guide();
  } else {
    clear_has_list_guide();
  }
}

// optional .times times = 208;
inline bool role_info::has_times() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void role_info::set_has_times() {
  _has_bits_[0] |= 0x00020000u;
}
inline void role_info::clear_has_times() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void role_info::clear_times() {
  if (times_ != nullptr) times_->::times::Clear();
  clear_has_times();
}
inline const ::times& role_info::times() const {
  return times_ != nullptr ? *times_ : *default_instance_->times_;
}
inline ::times* role_info::mutable_times() {
  set_has_times();
  if (times_ == nullptr) times_ = new ::times;
  return times_;
}
inline ::times* role_info::release_times() {
  clear_has_times();
  ::times* temp = times_;
  times_ = nullptr;
  return temp;
}
inline void role_info::set_allocated_times(::times* times) {
  delete times_;
  times_ = times;
  if (times) {
    set_has_times();
  } else {
    clear_has_times();
  }
}

// optional .roleinfo_extend_attr_1 extend_attr1 = 301;
inline bool role_info::has_extend_attr1() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void role_info::set_has_extend_attr1() {
  _has_bits_[0] |= 0x00040000u;
}
inline void role_info::clear_has_extend_attr1() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void role_info::clear_extend_attr1() {
  if (extend_attr1_ != nullptr) extend_attr1_->::roleinfo_extend_attr_1::Clear();
  clear_has_extend_attr1();
}
inline const ::roleinfo_extend_attr_1& role_info::extend_attr1() const {
  return extend_attr1_ != nullptr ? *extend_attr1_ : *default_instance_->extend_attr1_;
}
inline ::roleinfo_extend_attr_1* role_info::mutable_extend_attr1() {
  set_has_extend_attr1();
  if (extend_attr1_ == nullptr) extend_attr1_ = new ::roleinfo_extend_attr_1;
  return extend_attr1_;
}
inline ::roleinfo_extend_attr_1* role_info::release_extend_attr1() {
  clear_has_extend_attr1();
  ::roleinfo_extend_attr_1* temp = extend_attr1_;
  extend_attr1_ = nullptr;
  return temp;
}
inline void role_info::set_allocated_extend_attr1(::roleinfo_extend_attr_1* extend_attr1) {
  delete extend_attr1_;
  extend_attr1_ = extend_attr1;
  if (extend_attr1) {
    set_has_extend_attr1();
  } else {
    clear_has_extend_attr1();
  }
}

// optional .roleinfo_extend_attr_2 extend_attr2 = 302;
inline bool role_info::has_extend_attr2() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void role_info::set_has_extend_attr2() {
  _has_bits_[0] |= 0x00080000u;
}
inline void role_info::clear_has_extend_attr2() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void role_info::clear_extend_attr2() {
  if (extend_attr2_ != nullptr) extend_attr2_->::roleinfo_extend_attr_2::Clear();
  clear_has_extend_attr2();
}
inline const ::roleinfo_extend_attr_2& role_info::extend_attr2() const {
  return extend_attr2_ != nullptr ? *extend_attr2_ : *default_instance_->extend_attr2_;
}
inline ::roleinfo_extend_attr_2* role_info::mutable_extend_attr2() {
  set_has_extend_attr2();
  if (extend_attr2_ == nullptr) extend_attr2_ = new ::roleinfo_extend_attr_2;
  return extend_attr2_;
}
inline ::roleinfo_extend_attr_2* role_info::release_extend_attr2() {
  clear_has_extend_attr2();
  ::roleinfo_extend_attr_2* temp = extend_attr2_;
  extend_attr2_ = nullptr;
  return temp;
}
inline void role_info::set_allocated_extend_attr2(::roleinfo_extend_attr_2* extend_attr2) {
  delete extend_attr2_;
  extend_attr2_ = extend_attr2;
  if (extend_attr2) {
    set_has_extend_attr2();
  } else {
    clear_has_extend_attr2();
  }
}

// optional .roleinfo_extend_attr_3 extend_attr3 = 303;
inline bool role_info::has_extend_attr3() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void role_info::set_has_extend_attr3() {
  _has_bits_[0] |= 0x00100000u;
}
inline void role_info::clear_has_extend_attr3() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void role_info::clear_extend_attr3() {
  if (extend_attr3_ != nullptr) extend_attr3_->::roleinfo_extend_attr_3::Clear();
  clear_has_extend_attr3();
}
inline const ::roleinfo_extend_attr_3& role_info::extend_attr3() const {
  return extend_attr3_ != nullptr ? *extend_attr3_ : *default_instance_->extend_attr3_;
}
inline ::roleinfo_extend_attr_3* role_info::mutable_extend_attr3() {
  set_has_extend_attr3();
  if (extend_attr3_ == nullptr) extend_attr3_ = new ::roleinfo_extend_attr_3;
  return extend_attr3_;
}
inline ::roleinfo_extend_attr_3* role_info::release_extend_attr3() {
  clear_has_extend_attr3();
  ::roleinfo_extend_attr_3* temp = extend_attr3_;
  extend_attr3_ = nullptr;
  return temp;
}
inline void role_info::set_allocated_extend_attr3(::roleinfo_extend_attr_3* extend_attr3) {
  delete extend_attr3_;
  extend_attr3_ = extend_attr3;
  if (extend_attr3) {
    set_has_extend_attr3();
  } else {
    clear_has_extend_attr3();
  }
}

// optional .roleinfo_extend_attr_4 extend_attr4 = 304;
inline bool role_info::has_extend_attr4() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void role_info::set_has_extend_attr4() {
  _has_bits_[0] |= 0x00200000u;
}
inline void role_info::clear_has_extend_attr4() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void role_info::clear_extend_attr4() {
  if (extend_attr4_ != nullptr) extend_attr4_->::roleinfo_extend_attr_4::Clear();
  clear_has_extend_attr4();
}
inline const ::roleinfo_extend_attr_4& role_info::extend_attr4() const {
  return extend_attr4_ != nullptr ? *extend_attr4_ : *default_instance_->extend_attr4_;
}
inline ::roleinfo_extend_attr_4* role_info::mutable_extend_attr4() {
  set_has_extend_attr4();
  if (extend_attr4_ == nullptr) extend_attr4_ = new ::roleinfo_extend_attr_4;
  return extend_attr4_;
}
inline ::roleinfo_extend_attr_4* role_info::release_extend_attr4() {
  clear_has_extend_attr4();
  ::roleinfo_extend_attr_4* temp = extend_attr4_;
  extend_attr4_ = nullptr;
  return temp;
}
inline void role_info::set_allocated_extend_attr4(::roleinfo_extend_attr_4* extend_attr4) {
  delete extend_attr4_;
  extend_attr4_ = extend_attr4;
  if (extend_attr4) {
    set_has_extend_attr4();
  } else {
    clear_has_extend_attr4();
  }
}

// optional .roleinfo_extend_attr_5 extend_attr5 = 305;
inline bool role_info::has_extend_attr5() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void role_info::set_has_extend_attr5() {
  _has_bits_[0] |= 0x00400000u;
}
inline void role_info::clear_has_extend_attr5() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void role_info::clear_extend_attr5() {
  if (extend_attr5_ != nullptr) extend_attr5_->::roleinfo_extend_attr_5::Clear();
  clear_has_extend_attr5();
}
inline const ::roleinfo_extend_attr_5& role_info::extend_attr5() const {
  return extend_attr5_ != nullptr ? *extend_attr5_ : *default_instance_->extend_attr5_;
}
inline ::roleinfo_extend_attr_5* role_info::mutable_extend_attr5() {
  set_has_extend_attr5();
  if (extend_attr5_ == nullptr) extend_attr5_ = new ::roleinfo_extend_attr_5;
  return extend_attr5_;
}
inline ::roleinfo_extend_attr_5* role_info::release_extend_attr5() {
  clear_has_extend_attr5();
  ::roleinfo_extend_attr_5* temp = extend_attr5_;
  extend_attr5_ = nullptr;
  return temp;
}
inline void role_info::set_allocated_extend_attr5(::roleinfo_extend_attr_5* extend_attr5) {
  delete extend_attr5_;
  extend_attr5_ = extend_attr5;
  if (extend_attr5) {
    set_has_extend_attr5();
  } else {
    clear_has_extend_attr5();
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Database_2eproto__INCLUDED
