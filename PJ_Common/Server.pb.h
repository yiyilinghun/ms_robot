// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Server.proto

#ifndef PROTOBUF_Server_2eproto__INCLUDED
#define PROTOBUF_Server_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "EnumDef.pb.h"
#include "Common.pb.h"
#include "Battle.pb.h"
#include "Database.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Server_2eproto();
void protobuf_AssignDesc_Server_2eproto();
void protobuf_ShutdownFile_Server_2eproto();

class ReadyRunSceneInfo;
class RunningSceneInfo;
class S2S_Ask_CreateNewScene;
class S2S_Ret_CreateNewScene;
class S2S_Sync_NewSceneInfo;
class S2S_Currency_Packet;
class S2S_Player_Displacement;
class S2S_Player_Offline;
class S2S_Ask_Role_Save;
class S2S_Ask_Role_Leave_Login;
class S2S_Ask_Role_Enter_Scene;
class S2S_Ask_Role_Leave_Scene;
class S2S_Ret_Register_ClusterNode;
class S2S_Ret_Select_ClusterNode;
class S2S_Ret_Update_ClusterNode;
class S2S_Ask_ClusterInfo;
class S2S_Ret_ClusterInfo;
class S2S_Ret_Update_OnlineUnit;
class S2S_Delete_OnlineUnitInfo;
class S2S_Suspend_OnlineUnitInfo;
class S2S_Resume_OnlineUnitInfo;
class S2S_Select_OnlineUnitInfo;
class S2S_Ret_Select_OnlineUnitInfo;
class S2S_RetReadyChangeScene;
class S2S_Request_Add_Friend;
class S2S_Friends_List;
class S2S_AskCheckPlayerInLogin;
class S2S_RetCheckPlayerInLogin;
class S2S_AskEnterScene;
class S2S_RetEnterScene;
class S2S_ReadyEnterScene;
class S2S_TeamReadyEnterScene;
class S2S_BroadcastHaveNewScene;
class S2S_AskLoadNewScene;
class S2S_RetLoadNewScene;
class S2S_AskRegRunningSceneInfo;
class S2S_AskUnRegRunningSceneInfo;
class GM2S_AskLogin;
class S2GM_RetLogin;
class S2S_RegNodeInfo;
class GM2S_AskNodeInfo;
class S2GM_RetNodeInfo;
class GM2S_AskPlayerInfo;
class S2GM_RetPlayerInfo;
class GM2S_AskSceneInfo;
class S2GM_RetSceneInfo;
class GM2S_KickPlayer;
class GM2S_Close;
class S2S_Ask_CheckAccount;
class S2S_Ret_CheckAccount;
class S2S_Ask_Login;
class S2S_Ret_Login;

// ===================================================================

class ReadyRunSceneInfo : public ::google::protobuf::Message {
 public:
  ReadyRunSceneInfo();
  virtual ~ReadyRunSceneInfo();

  ReadyRunSceneInfo(const ReadyRunSceneInfo& from);

  inline ReadyRunSceneInfo& operator=(const ReadyRunSceneInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadyRunSceneInfo& default_instance();

  void Swap(ReadyRunSceneInfo* other);

  // implements Message ----------------------------------------------

  ReadyRunSceneInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReadyRunSceneInfo& from);
  void MergeFrom(const ReadyRunSceneInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint32 scene_id = 1;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 1;
  inline ::google::protobuf::int32 scene_id() const;
  inline void set_scene_id(::google::protobuf::int32 value);

  // required sint32 scene_index = 2;
  inline bool has_scene_index() const;
  inline void clear_scene_index();
  static const int kSceneIndexFieldNumber = 2;
  inline ::google::protobuf::int32 scene_index() const;
  inline void set_scene_index(::google::protobuf::int32 value);

  // required sint32 map_id = 3;
  inline bool has_map_id() const;
  inline void clear_map_id();
  static const int kMapIdFieldNumber = 3;
  inline ::google::protobuf::int32 map_id() const;
  inline void set_map_id(::google::protobuf::int32 value);

  // required .E_SCENE_TYPE scene_type = 4 [default = EST_INVALID];
  inline bool has_scene_type() const;
  inline void clear_scene_type();
  static const int kSceneTypeFieldNumber = 4;
  inline ::E_SCENE_TYPE scene_type() const;
  inline void set_scene_type(::E_SCENE_TYPE value);

  // repeated .universal_data list_role_info = 5;
  inline int list_role_info_size() const;
  inline void clear_list_role_info();
  static const int kListRoleInfoFieldNumber = 5;
  inline const ::universal_data& list_role_info(int index) const;
  inline ::universal_data* mutable_list_role_info(int index);
  inline ::universal_data* add_list_role_info();
  inline const ::google::protobuf::RepeatedPtrField< ::universal_data >&
      list_role_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::universal_data >*
      mutable_list_role_info();

  // repeated .universal_data list_team_info = 6;
  inline int list_team_info_size() const;
  inline void clear_list_team_info();
  static const int kListTeamInfoFieldNumber = 6;
  inline const ::universal_data& list_team_info(int index) const;
  inline ::universal_data* mutable_list_team_info(int index);
  inline ::universal_data* add_list_team_info();
  inline const ::google::protobuf::RepeatedPtrField< ::universal_data >&
      list_team_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::universal_data >*
      mutable_list_team_info();

  // repeated .ServerBattleUnitInfo list_monster_info = 7;
  inline int list_monster_info_size() const;
  inline void clear_list_monster_info();
  static const int kListMonsterInfoFieldNumber = 7;
  inline const ::ServerBattleUnitInfo& list_monster_info(int index) const;
  inline ::ServerBattleUnitInfo* mutable_list_monster_info(int index);
  inline ::ServerBattleUnitInfo* add_list_monster_info();
  inline const ::google::protobuf::RepeatedPtrField< ::ServerBattleUnitInfo >&
      list_monster_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::ServerBattleUnitInfo >*
      mutable_list_monster_info();

  // repeated sint64 list_login_intaddr = 8;
  inline int list_login_intaddr_size() const;
  inline void clear_list_login_intaddr();
  static const int kListLoginIntaddrFieldNumber = 8;
  inline ::google::protobuf::int64 list_login_intaddr(int index) const;
  inline void set_list_login_intaddr(int index, ::google::protobuf::int64 value);
  inline void add_list_login_intaddr(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      list_login_intaddr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_list_login_intaddr();

  // @@protoc_insertion_point(class_scope:ReadyRunSceneInfo)
 private:
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_scene_index();
  inline void clear_has_scene_index();
  inline void set_has_map_id();
  inline void clear_has_map_id();
  inline void set_has_scene_type();
  inline void clear_has_scene_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 scene_id_;
  ::google::protobuf::int32 scene_index_;
  ::google::protobuf::int32 map_id_;
  int scene_type_;
  ::google::protobuf::RepeatedPtrField< ::universal_data > list_role_info_;
  ::google::protobuf::RepeatedPtrField< ::universal_data > list_team_info_;
  ::google::protobuf::RepeatedPtrField< ::ServerBattleUnitInfo > list_monster_info_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > list_login_intaddr_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static ReadyRunSceneInfo* default_instance_;
};
// -------------------------------------------------------------------

class RunningSceneInfo : public ::google::protobuf::Message {
 public:
  RunningSceneInfo();
  virtual ~RunningSceneInfo();

  RunningSceneInfo(const RunningSceneInfo& from);

  inline RunningSceneInfo& operator=(const RunningSceneInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RunningSceneInfo& default_instance();

  void Swap(RunningSceneInfo* other);

  // implements Message ----------------------------------------------

  RunningSceneInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RunningSceneInfo& from);
  void MergeFrom(const RunningSceneInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint64 scene_instance_id = 1;
  inline bool has_scene_instance_id() const;
  inline void clear_scene_instance_id();
  static const int kSceneInstanceIdFieldNumber = 1;
  inline ::google::protobuf::int64 scene_instance_id() const;
  inline void set_scene_instance_id(::google::protobuf::int64 value);

  // required sint32 scene_id = 2;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 2;
  inline ::google::protobuf::int32 scene_id() const;
  inline void set_scene_id(::google::protobuf::int32 value);

  // required sint32 scene_index = 3;
  inline bool has_scene_index() const;
  inline void clear_scene_index();
  static const int kSceneIndexFieldNumber = 3;
  inline ::google::protobuf::int32 scene_index() const;
  inline void set_scene_index(::google::protobuf::int32 value);

  // required sint64 intaddr = 4;
  inline bool has_intaddr() const;
  inline void clear_intaddr();
  static const int kIntaddrFieldNumber = 4;
  inline ::google::protobuf::int64 intaddr() const;
  inline void set_intaddr(::google::protobuf::int64 value);

  // required sint32 loads = 5;
  inline bool has_loads() const;
  inline void clear_loads();
  static const int kLoadsFieldNumber = 5;
  inline ::google::protobuf::int32 loads() const;
  inline void set_loads(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RunningSceneInfo)
 private:
  inline void set_has_scene_instance_id();
  inline void clear_has_scene_instance_id();
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_scene_index();
  inline void clear_has_scene_index();
  inline void set_has_intaddr();
  inline void clear_has_intaddr();
  inline void set_has_loads();
  inline void clear_has_loads();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 scene_instance_id_;
  ::google::protobuf::int32 scene_id_;
  ::google::protobuf::int32 scene_index_;
  ::google::protobuf::int64 intaddr_;
  ::google::protobuf::int32 loads_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static RunningSceneInfo* default_instance_;
};
// -------------------------------------------------------------------

class S2S_Ask_CreateNewScene : public ::google::protobuf::Message {
 public:
  S2S_Ask_CreateNewScene();
  virtual ~S2S_Ask_CreateNewScene();

  S2S_Ask_CreateNewScene(const S2S_Ask_CreateNewScene& from);

  inline S2S_Ask_CreateNewScene& operator=(const S2S_Ask_CreateNewScene& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2S_Ask_CreateNewScene& default_instance();

  void Swap(S2S_Ask_CreateNewScene* other);

  // implements Message ----------------------------------------------

  S2S_Ask_CreateNewScene* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2S_Ask_CreateNewScene& from);
  void MergeFrom(const S2S_Ask_CreateNewScene& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint32 scene_id = 1;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 1;
  inline ::google::protobuf::int32 scene_id() const;
  inline void set_scene_id(::google::protobuf::int32 value);

  // required sint64 scene_instance_id = 2;
  inline bool has_scene_instance_id() const;
  inline void clear_scene_instance_id();
  static const int kSceneInstanceIdFieldNumber = 2;
  inline ::google::protobuf::int64 scene_instance_id() const;
  inline void set_scene_instance_id(::google::protobuf::int64 value);

  // required sint64 server_instance_id = 3;
  inline bool has_server_instance_id() const;
  inline void clear_server_instance_id();
  static const int kServerInstanceIdFieldNumber = 3;
  inline ::google::protobuf::int64 server_instance_id() const;
  inline void set_server_instance_id(::google::protobuf::int64 value);

  // required .E_SCENE_TYPE scene_type = 4 [default = EST_INVALID];
  inline bool has_scene_type() const;
  inline void clear_scene_type();
  static const int kSceneTypeFieldNumber = 4;
  inline ::E_SCENE_TYPE scene_type() const;
  inline void set_scene_type(::E_SCENE_TYPE value);

  // @@protoc_insertion_point(class_scope:S2S_Ask_CreateNewScene)
 private:
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_scene_instance_id();
  inline void clear_has_scene_instance_id();
  inline void set_has_server_instance_id();
  inline void clear_has_server_instance_id();
  inline void set_has_scene_type();
  inline void clear_has_scene_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 scene_instance_id_;
  ::google::protobuf::int32 scene_id_;
  int scene_type_;
  ::google::protobuf::int64 server_instance_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static S2S_Ask_CreateNewScene* default_instance_;
};
// -------------------------------------------------------------------

class S2S_Ret_CreateNewScene : public ::google::protobuf::Message {
 public:
  S2S_Ret_CreateNewScene();
  virtual ~S2S_Ret_CreateNewScene();

  S2S_Ret_CreateNewScene(const S2S_Ret_CreateNewScene& from);

  inline S2S_Ret_CreateNewScene& operator=(const S2S_Ret_CreateNewScene& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2S_Ret_CreateNewScene& default_instance();

  void Swap(S2S_Ret_CreateNewScene* other);

  // implements Message ----------------------------------------------

  S2S_Ret_CreateNewScene* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2S_Ret_CreateNewScene& from);
  void MergeFrom(const S2S_Ret_CreateNewScene& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes ret_code = 1;
  inline bool has_ret_code() const;
  inline void clear_ret_code();
  static const int kRetCodeFieldNumber = 1;
  inline const ::std::string& ret_code() const;
  inline void set_ret_code(const ::std::string& value);
  inline void set_ret_code(const char* value);
  inline void set_ret_code(const void* value, size_t size);
  inline ::std::string* mutable_ret_code();
  inline ::std::string* release_ret_code();
  inline void set_allocated_ret_code(::std::string* ret_code);

  // required sint32 scene_id = 2;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 2;
  inline ::google::protobuf::int32 scene_id() const;
  inline void set_scene_id(::google::protobuf::int32 value);

  // required sint64 scene_instance_id = 3;
  inline bool has_scene_instance_id() const;
  inline void clear_scene_instance_id();
  static const int kSceneInstanceIdFieldNumber = 3;
  inline ::google::protobuf::int64 scene_instance_id() const;
  inline void set_scene_instance_id(::google::protobuf::int64 value);

  // required sint64 server_instance_id = 4;
  inline bool has_server_instance_id() const;
  inline void clear_server_instance_id();
  static const int kServerInstanceIdFieldNumber = 4;
  inline ::google::protobuf::int64 server_instance_id() const;
  inline void set_server_instance_id(::google::protobuf::int64 value);

  // required .E_SCENE_TYPE scene_type = 5 [default = EST_INVALID];
  inline bool has_scene_type() const;
  inline void clear_scene_type();
  static const int kSceneTypeFieldNumber = 5;
  inline ::E_SCENE_TYPE scene_type() const;
  inline void set_scene_type(::E_SCENE_TYPE value);

  // @@protoc_insertion_point(class_scope:S2S_Ret_CreateNewScene)
 private:
  inline void set_has_ret_code();
  inline void clear_has_ret_code();
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_scene_instance_id();
  inline void clear_has_scene_instance_id();
  inline void set_has_server_instance_id();
  inline void clear_has_server_instance_id();
  inline void set_has_scene_type();
  inline void clear_has_scene_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ret_code_;
  ::google::protobuf::int64 scene_instance_id_;
  ::google::protobuf::int32 scene_id_;
  int scene_type_;
  ::google::protobuf::int64 server_instance_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static S2S_Ret_CreateNewScene* default_instance_;
};
// -------------------------------------------------------------------

class S2S_Sync_NewSceneInfo : public ::google::protobuf::Message {
 public:
  S2S_Sync_NewSceneInfo();
  virtual ~S2S_Sync_NewSceneInfo();

  S2S_Sync_NewSceneInfo(const S2S_Sync_NewSceneInfo& from);

  inline S2S_Sync_NewSceneInfo& operator=(const S2S_Sync_NewSceneInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2S_Sync_NewSceneInfo& default_instance();

  void Swap(S2S_Sync_NewSceneInfo* other);

  // implements Message ----------------------------------------------

  S2S_Sync_NewSceneInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2S_Sync_NewSceneInfo& from);
  void MergeFrom(const S2S_Sync_NewSceneInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint32 scene_id = 1;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 1;
  inline ::google::protobuf::int32 scene_id() const;
  inline void set_scene_id(::google::protobuf::int32 value);

  // required sint64 scene_instance_id = 2;
  inline bool has_scene_instance_id() const;
  inline void clear_scene_instance_id();
  static const int kSceneInstanceIdFieldNumber = 2;
  inline ::google::protobuf::int64 scene_instance_id() const;
  inline void set_scene_instance_id(::google::protobuf::int64 value);

  // required sint64 server_instance_id = 3;
  inline bool has_server_instance_id() const;
  inline void clear_server_instance_id();
  static const int kServerInstanceIdFieldNumber = 3;
  inline ::google::protobuf::int64 server_instance_id() const;
  inline void set_server_instance_id(::google::protobuf::int64 value);

  // required .E_SCENE_TYPE scene_type = 4 [default = EST_INVALID];
  inline bool has_scene_type() const;
  inline void clear_scene_type();
  static const int kSceneTypeFieldNumber = 4;
  inline ::E_SCENE_TYPE scene_type() const;
  inline void set_scene_type(::E_SCENE_TYPE value);

  // @@protoc_insertion_point(class_scope:S2S_Sync_NewSceneInfo)
 private:
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_scene_instance_id();
  inline void clear_has_scene_instance_id();
  inline void set_has_server_instance_id();
  inline void clear_has_server_instance_id();
  inline void set_has_scene_type();
  inline void clear_has_scene_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 scene_instance_id_;
  ::google::protobuf::int32 scene_id_;
  int scene_type_;
  ::google::protobuf::int64 server_instance_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static S2S_Sync_NewSceneInfo* default_instance_;
};
// -------------------------------------------------------------------

class S2S_Currency_Packet : public ::google::protobuf::Message {
 public:
  S2S_Currency_Packet();
  virtual ~S2S_Currency_Packet();

  S2S_Currency_Packet(const S2S_Currency_Packet& from);

  inline S2S_Currency_Packet& operator=(const S2S_Currency_Packet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2S_Currency_Packet& default_instance();

  void Swap(S2S_Currency_Packet* other);

  // implements Message ----------------------------------------------

  S2S_Currency_Packet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2S_Currency_Packet& from);
  void MergeFrom(const S2S_Currency_Packet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes datas = 1;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 1;
  inline const ::std::string& datas(int index) const;
  inline ::std::string* mutable_datas(int index);
  inline void set_datas(int index, const ::std::string& value);
  inline void set_datas(int index, const char* value);
  inline void set_datas(int index, const void* value, size_t size);
  inline ::std::string* add_datas();
  inline void add_datas(const ::std::string& value);
  inline void add_datas(const char* value);
  inline void add_datas(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_datas();

  // @@protoc_insertion_point(class_scope:S2S_Currency_Packet)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> datas_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static S2S_Currency_Packet* default_instance_;
};
// -------------------------------------------------------------------

class S2S_Player_Displacement : public ::google::protobuf::Message {
 public:
  S2S_Player_Displacement();
  virtual ~S2S_Player_Displacement();

  S2S_Player_Displacement(const S2S_Player_Displacement& from);

  inline S2S_Player_Displacement& operator=(const S2S_Player_Displacement& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2S_Player_Displacement& default_instance();

  void Swap(S2S_Player_Displacement* other);

  // implements Message ----------------------------------------------

  S2S_Player_Displacement* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2S_Player_Displacement& from);
  void MergeFrom(const S2S_Player_Displacement& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint64 role_index = 1;
  inline bool has_role_index() const;
  inline void clear_role_index();
  static const int kRoleIndexFieldNumber = 1;
  inline ::google::protobuf::int64 role_index() const;
  inline void set_role_index(::google::protobuf::int64 value);

  // required sint64 gate_intaddr = 2;
  inline bool has_gate_intaddr() const;
  inline void clear_gate_intaddr();
  static const int kGateIntaddrFieldNumber = 2;
  inline ::google::protobuf::int64 gate_intaddr() const;
  inline void set_gate_intaddr(::google::protobuf::int64 value);

  // required sint64 scene_intaddr = 3;
  inline bool has_scene_intaddr() const;
  inline void clear_scene_intaddr();
  static const int kSceneIntaddrFieldNumber = 3;
  inline ::google::protobuf::int64 scene_intaddr() const;
  inline void set_scene_intaddr(::google::protobuf::int64 value);

  // required sint64 scene_instance_id = 4;
  inline bool has_scene_instance_id() const;
  inline void clear_scene_instance_id();
  static const int kSceneInstanceIdFieldNumber = 4;
  inline ::google::protobuf::int64 scene_instance_id() const;
  inline void set_scene_instance_id(::google::protobuf::int64 value);

  // required sint64 save_intaddr = 5;
  inline bool has_save_intaddr() const;
  inline void clear_save_intaddr();
  static const int kSaveIntaddrFieldNumber = 5;
  inline ::google::protobuf::int64 save_intaddr() const;
  inline void set_save_intaddr(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:S2S_Player_Displacement)
 private:
  inline void set_has_role_index();
  inline void clear_has_role_index();
  inline void set_has_gate_intaddr();
  inline void clear_has_gate_intaddr();
  inline void set_has_scene_intaddr();
  inline void clear_has_scene_intaddr();
  inline void set_has_scene_instance_id();
  inline void clear_has_scene_instance_id();
  inline void set_has_save_intaddr();
  inline void clear_has_save_intaddr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 role_index_;
  ::google::protobuf::int64 gate_intaddr_;
  ::google::protobuf::int64 scene_intaddr_;
  ::google::protobuf::int64 scene_instance_id_;
  ::google::protobuf::int64 save_intaddr_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static S2S_Player_Displacement* default_instance_;
};
// -------------------------------------------------------------------

class S2S_Player_Offline : public ::google::protobuf::Message {
 public:
  S2S_Player_Offline();
  virtual ~S2S_Player_Offline();

  S2S_Player_Offline(const S2S_Player_Offline& from);

  inline S2S_Player_Offline& operator=(const S2S_Player_Offline& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2S_Player_Offline& default_instance();

  void Swap(S2S_Player_Offline* other);

  // implements Message ----------------------------------------------

  S2S_Player_Offline* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2S_Player_Offline& from);
  void MergeFrom(const S2S_Player_Offline& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint64 role_index = 1;
  inline bool has_role_index() const;
  inline void clear_role_index();
  static const int kRoleIndexFieldNumber = 1;
  inline ::google::protobuf::int64 role_index() const;
  inline void set_role_index(::google::protobuf::int64 value);

  // required bytes kick_reason = 2;
  inline bool has_kick_reason() const;
  inline void clear_kick_reason();
  static const int kKickReasonFieldNumber = 2;
  inline const ::std::string& kick_reason() const;
  inline void set_kick_reason(const ::std::string& value);
  inline void set_kick_reason(const char* value);
  inline void set_kick_reason(const void* value, size_t size);
  inline ::std::string* mutable_kick_reason();
  inline ::std::string* release_kick_reason();
  inline void set_allocated_kick_reason(::std::string* kick_reason);

  // @@protoc_insertion_point(class_scope:S2S_Player_Offline)
 private:
  inline void set_has_role_index();
  inline void clear_has_role_index();
  inline void set_has_kick_reason();
  inline void clear_has_kick_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 role_index_;
  ::std::string* kick_reason_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static S2S_Player_Offline* default_instance_;
};
// -------------------------------------------------------------------

class S2S_Ask_Role_Save : public ::google::protobuf::Message {
 public:
  S2S_Ask_Role_Save();
  virtual ~S2S_Ask_Role_Save();

  S2S_Ask_Role_Save(const S2S_Ask_Role_Save& from);

  inline S2S_Ask_Role_Save& operator=(const S2S_Ask_Role_Save& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2S_Ask_Role_Save& default_instance();

  void Swap(S2S_Ask_Role_Save* other);

  // implements Message ----------------------------------------------

  S2S_Ask_Role_Save* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2S_Ask_Role_Save& from);
  void MergeFrom(const S2S_Ask_Role_Save& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .universal_data role_info = 1;
  inline bool has_role_info() const;
  inline void clear_role_info();
  static const int kRoleInfoFieldNumber = 1;
  inline const ::universal_data& role_info() const;
  inline ::universal_data* mutable_role_info();
  inline ::universal_data* release_role_info();
  inline void set_allocated_role_info(::universal_data* role_info);

  // @@protoc_insertion_point(class_scope:S2S_Ask_Role_Save)
 private:
  inline void set_has_role_info();
  inline void clear_has_role_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::universal_data* role_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static S2S_Ask_Role_Save* default_instance_;
};
// -------------------------------------------------------------------

class S2S_Ask_Role_Leave_Login : public ::google::protobuf::Message {
 public:
  S2S_Ask_Role_Leave_Login();
  virtual ~S2S_Ask_Role_Leave_Login();

  S2S_Ask_Role_Leave_Login(const S2S_Ask_Role_Leave_Login& from);

  inline S2S_Ask_Role_Leave_Login& operator=(const S2S_Ask_Role_Leave_Login& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2S_Ask_Role_Leave_Login& default_instance();

  void Swap(S2S_Ask_Role_Leave_Login* other);

  // implements Message ----------------------------------------------

  S2S_Ask_Role_Leave_Login* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2S_Ask_Role_Leave_Login& from);
  void MergeFrom(const S2S_Ask_Role_Leave_Login& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint64 role_index = 1;
  inline bool has_role_index() const;
  inline void clear_role_index();
  static const int kRoleIndexFieldNumber = 1;
  inline ::google::protobuf::int64 role_index() const;
  inline void set_role_index(::google::protobuf::int64 value);

  // required bytes account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const void* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // required bytes sid = 3;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 3;
  inline const ::std::string& sid() const;
  inline void set_sid(const ::std::string& value);
  inline void set_sid(const char* value);
  inline void set_sid(const void* value, size_t size);
  inline ::std::string* mutable_sid();
  inline ::std::string* release_sid();
  inline void set_allocated_sid(::std::string* sid);

  // required bytes ip = 4;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 4;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const void* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // @@protoc_insertion_point(class_scope:S2S_Ask_Role_Leave_Login)
 private:
  inline void set_has_role_index();
  inline void clear_has_role_index();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_ip();
  inline void clear_has_ip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 role_index_;
  ::std::string* account_;
  ::std::string* sid_;
  ::std::string* ip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static S2S_Ask_Role_Leave_Login* default_instance_;
};
// -------------------------------------------------------------------

class S2S_Ask_Role_Enter_Scene : public ::google::protobuf::Message {
 public:
  S2S_Ask_Role_Enter_Scene();
  virtual ~S2S_Ask_Role_Enter_Scene();

  S2S_Ask_Role_Enter_Scene(const S2S_Ask_Role_Enter_Scene& from);

  inline S2S_Ask_Role_Enter_Scene& operator=(const S2S_Ask_Role_Enter_Scene& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2S_Ask_Role_Enter_Scene& default_instance();

  void Swap(S2S_Ask_Role_Enter_Scene* other);

  // implements Message ----------------------------------------------

  S2S_Ask_Role_Enter_Scene* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2S_Ask_Role_Enter_Scene& from);
  void MergeFrom(const S2S_Ask_Role_Enter_Scene& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint64 role_index = 1;
  inline bool has_role_index() const;
  inline void clear_role_index();
  static const int kRoleIndexFieldNumber = 1;
  inline ::google::protobuf::int64 role_index() const;
  inline void set_role_index(::google::protobuf::int64 value);

  // required sint64 role_intaddr = 2;
  inline bool has_role_intaddr() const;
  inline void clear_role_intaddr();
  static const int kRoleIntaddrFieldNumber = 2;
  inline ::google::protobuf::int64 role_intaddr() const;
  inline void set_role_intaddr(::google::protobuf::int64 value);

  // required sint64 scene_instance_id = 3;
  inline bool has_scene_instance_id() const;
  inline void clear_scene_instance_id();
  static const int kSceneInstanceIdFieldNumber = 3;
  inline ::google::protobuf::int64 scene_instance_id() const;
  inline void set_scene_instance_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:S2S_Ask_Role_Enter_Scene)
 private:
  inline void set_has_role_index();
  inline void clear_has_role_index();
  inline void set_has_role_intaddr();
  inline void clear_has_role_intaddr();
  inline void set_has_scene_instance_id();
  inline void clear_has_scene_instance_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 role_index_;
  ::google::protobuf::int64 role_intaddr_;
  ::google::protobuf::int64 scene_instance_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static S2S_Ask_Role_Enter_Scene* default_instance_;
};
// -------------------------------------------------------------------

class S2S_Ask_Role_Leave_Scene : public ::google::protobuf::Message {
 public:
  S2S_Ask_Role_Leave_Scene();
  virtual ~S2S_Ask_Role_Leave_Scene();

  S2S_Ask_Role_Leave_Scene(const S2S_Ask_Role_Leave_Scene& from);

  inline S2S_Ask_Role_Leave_Scene& operator=(const S2S_Ask_Role_Leave_Scene& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2S_Ask_Role_Leave_Scene& default_instance();

  void Swap(S2S_Ask_Role_Leave_Scene* other);

  // implements Message ----------------------------------------------

  S2S_Ask_Role_Leave_Scene* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2S_Ask_Role_Leave_Scene& from);
  void MergeFrom(const S2S_Ask_Role_Leave_Scene& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint64 role_index = 1;
  inline bool has_role_index() const;
  inline void clear_role_index();
  static const int kRoleIndexFieldNumber = 1;
  inline ::google::protobuf::int64 role_index() const;
  inline void set_role_index(::google::protobuf::int64 value);

  // required sint64 role_intaddr = 2;
  inline bool has_role_intaddr() const;
  inline void clear_role_intaddr();
  static const int kRoleIntaddrFieldNumber = 2;
  inline ::google::protobuf::int64 role_intaddr() const;
  inline void set_role_intaddr(::google::protobuf::int64 value);

  // required sint64 scene_instance_id = 3;
  inline bool has_scene_instance_id() const;
  inline void clear_scene_instance_id();
  static const int kSceneInstanceIdFieldNumber = 3;
  inline ::google::protobuf::int64 scene_instance_id() const;
  inline void set_scene_instance_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:S2S_Ask_Role_Leave_Scene)
 private:
  inline void set_has_role_index();
  inline void clear_has_role_index();
  inline void set_has_role_intaddr();
  inline void clear_has_role_intaddr();
  inline void set_has_scene_instance_id();
  inline void clear_has_scene_instance_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 role_index_;
  ::google::protobuf::int64 role_intaddr_;
  ::google::protobuf::int64 scene_instance_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static S2S_Ask_Role_Leave_Scene* default_instance_;
};
// -------------------------------------------------------------------

class S2S_Ret_Register_ClusterNode : public ::google::protobuf::Message {
 public:
  S2S_Ret_Register_ClusterNode();
  virtual ~S2S_Ret_Register_ClusterNode();

  S2S_Ret_Register_ClusterNode(const S2S_Ret_Register_ClusterNode& from);

  inline S2S_Ret_Register_ClusterNode& operator=(const S2S_Ret_Register_ClusterNode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2S_Ret_Register_ClusterNode& default_instance();

  void Swap(S2S_Ret_Register_ClusterNode* other);

  // implements Message ----------------------------------------------

  S2S_Ret_Register_ClusterNode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2S_Ret_Register_ClusterNode& from);
  void MergeFrom(const S2S_Ret_Register_ClusterNode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint32 node_index = 1;
  inline bool has_node_index() const;
  inline void clear_node_index();
  static const int kNodeIndexFieldNumber = 1;
  inline ::google::protobuf::int32 node_index() const;
  inline void set_node_index(::google::protobuf::int32 value);

  // required sint64 unit_next_index = 2;
  inline bool has_unit_next_index() const;
  inline void clear_unit_next_index();
  static const int kUnitNextIndexFieldNumber = 2;
  inline ::google::protobuf::int64 unit_next_index() const;
  inline void set_unit_next_index(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:S2S_Ret_Register_ClusterNode)
 private:
  inline void set_has_node_index();
  inline void clear_has_node_index();
  inline void set_has_unit_next_index();
  inline void clear_has_unit_next_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 unit_next_index_;
  ::google::protobuf::int32 node_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static S2S_Ret_Register_ClusterNode* default_instance_;
};
// -------------------------------------------------------------------

class S2S_Ret_Select_ClusterNode : public ::google::protobuf::Message {
 public:
  S2S_Ret_Select_ClusterNode();
  virtual ~S2S_Ret_Select_ClusterNode();

  S2S_Ret_Select_ClusterNode(const S2S_Ret_Select_ClusterNode& from);

  inline S2S_Ret_Select_ClusterNode& operator=(const S2S_Ret_Select_ClusterNode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2S_Ret_Select_ClusterNode& default_instance();

  void Swap(S2S_Ret_Select_ClusterNode* other);

  // implements Message ----------------------------------------------

  S2S_Ret_Select_ClusterNode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2S_Ret_Select_ClusterNode& from);
  void MergeFrom(const S2S_Ret_Select_ClusterNode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated sint64 list_intaddr = 1;
  inline int list_intaddr_size() const;
  inline void clear_list_intaddr();
  static const int kListIntaddrFieldNumber = 1;
  inline ::google::protobuf::int64 list_intaddr(int index) const;
  inline void set_list_intaddr(int index, ::google::protobuf::int64 value);
  inline void add_list_intaddr(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      list_intaddr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_list_intaddr();

  // repeated sint32 list_node_index = 2;
  inline int list_node_index_size() const;
  inline void clear_list_node_index();
  static const int kListNodeIndexFieldNumber = 2;
  inline ::google::protobuf::int32 list_node_index(int index) const;
  inline void set_list_node_index(int index, ::google::protobuf::int32 value);
  inline void add_list_node_index(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      list_node_index() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_list_node_index();

  // repeated sint64 list_pressure = 3;
  inline int list_pressure_size() const;
  inline void clear_list_pressure();
  static const int kListPressureFieldNumber = 3;
  inline ::google::protobuf::int64 list_pressure(int index) const;
  inline void set_list_pressure(int index, ::google::protobuf::int64 value);
  inline void add_list_pressure(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      list_pressure() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_list_pressure();

  // repeated sint64 list_last_time = 4;
  inline int list_last_time_size() const;
  inline void clear_list_last_time();
  static const int kListLastTimeFieldNumber = 4;
  inline ::google::protobuf::int64 list_last_time(int index) const;
  inline void set_list_last_time(int index, ::google::protobuf::int64 value);
  inline void add_list_last_time(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      list_last_time() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_list_last_time();

  // @@protoc_insertion_point(class_scope:S2S_Ret_Select_ClusterNode)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > list_intaddr_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > list_node_index_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > list_pressure_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > list_last_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static S2S_Ret_Select_ClusterNode* default_instance_;
};
// -------------------------------------------------------------------

class S2S_Ret_Update_ClusterNode : public ::google::protobuf::Message {
 public:
  S2S_Ret_Update_ClusterNode();
  virtual ~S2S_Ret_Update_ClusterNode();

  S2S_Ret_Update_ClusterNode(const S2S_Ret_Update_ClusterNode& from);

  inline S2S_Ret_Update_ClusterNode& operator=(const S2S_Ret_Update_ClusterNode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2S_Ret_Update_ClusterNode& default_instance();

  void Swap(S2S_Ret_Update_ClusterNode* other);

  // implements Message ----------------------------------------------

  S2S_Ret_Update_ClusterNode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2S_Ret_Update_ClusterNode& from);
  void MergeFrom(const S2S_Ret_Update_ClusterNode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint64 intaddr = 1;
  inline bool has_intaddr() const;
  inline void clear_intaddr();
  static const int kIntaddrFieldNumber = 1;
  inline ::google::protobuf::int64 intaddr() const;
  inline void set_intaddr(::google::protobuf::int64 value);

  // required sint32 node_index = 2;
  inline bool has_node_index() const;
  inline void clear_node_index();
  static const int kNodeIndexFieldNumber = 2;
  inline ::google::protobuf::int32 node_index() const;
  inline void set_node_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:S2S_Ret_Update_ClusterNode)
 private:
  inline void set_has_intaddr();
  inline void clear_has_intaddr();
  inline void set_has_node_index();
  inline void clear_has_node_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 intaddr_;
  ::google::protobuf::int32 node_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static S2S_Ret_Update_ClusterNode* default_instance_;
};
// -------------------------------------------------------------------

class S2S_Ask_ClusterInfo : public ::google::protobuf::Message {
 public:
  S2S_Ask_ClusterInfo();
  virtual ~S2S_Ask_ClusterInfo();

  S2S_Ask_ClusterInfo(const S2S_Ask_ClusterInfo& from);

  inline S2S_Ask_ClusterInfo& operator=(const S2S_Ask_ClusterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2S_Ask_ClusterInfo& default_instance();

  void Swap(S2S_Ask_ClusterInfo* other);

  // implements Message ----------------------------------------------

  S2S_Ask_ClusterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2S_Ask_ClusterInfo& from);
  void MergeFrom(const S2S_Ask_ClusterInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint64 node_index = 1;
  inline bool has_node_index() const;
  inline void clear_node_index();
  static const int kNodeIndexFieldNumber = 1;
  inline ::google::protobuf::int64 node_index() const;
  inline void set_node_index(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:S2S_Ask_ClusterInfo)
 private:
  inline void set_has_node_index();
  inline void clear_has_node_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 node_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static S2S_Ask_ClusterInfo* default_instance_;
};
// -------------------------------------------------------------------

class S2S_Ret_ClusterInfo : public ::google::protobuf::Message {
 public:
  S2S_Ret_ClusterInfo();
  virtual ~S2S_Ret_ClusterInfo();

  S2S_Ret_ClusterInfo(const S2S_Ret_ClusterInfo& from);

  inline S2S_Ret_ClusterInfo& operator=(const S2S_Ret_ClusterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2S_Ret_ClusterInfo& default_instance();

  void Swap(S2S_Ret_ClusterInfo* other);

  // implements Message ----------------------------------------------

  S2S_Ret_ClusterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2S_Ret_ClusterInfo& from);
  void MergeFrom(const S2S_Ret_ClusterInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes list_addr = 1;
  inline int list_addr_size() const;
  inline void clear_list_addr();
  static const int kListAddrFieldNumber = 1;
  inline const ::std::string& list_addr(int index) const;
  inline ::std::string* mutable_list_addr(int index);
  inline void set_list_addr(int index, const ::std::string& value);
  inline void set_list_addr(int index, const char* value);
  inline void set_list_addr(int index, const void* value, size_t size);
  inline ::std::string* add_list_addr();
  inline void add_list_addr(const ::std::string& value);
  inline void add_list_addr(const char* value);
  inline void add_list_addr(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& list_addr() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_list_addr();

  // repeated sint32 list_port = 2;
  inline int list_port_size() const;
  inline void clear_list_port();
  static const int kListPortFieldNumber = 2;
  inline ::google::protobuf::int32 list_port(int index) const;
  inline void set_list_port(int index, ::google::protobuf::int32 value);
  inline void add_list_port(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      list_port() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_list_port();

  // repeated sint64 list_pressure = 3;
  inline int list_pressure_size() const;
  inline void clear_list_pressure();
  static const int kListPressureFieldNumber = 3;
  inline ::google::protobuf::int64 list_pressure(int index) const;
  inline void set_list_pressure(int index, ::google::protobuf::int64 value);
  inline void add_list_pressure(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      list_pressure() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_list_pressure();

  // repeated sint32 list_node_index = 4;
  inline int list_node_index_size() const;
  inline void clear_list_node_index();
  static const int kListNodeIndexFieldNumber = 4;
  inline ::google::protobuf::int32 list_node_index(int index) const;
  inline void set_list_node_index(int index, ::google::protobuf::int32 value);
  inline void add_list_node_index(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      list_node_index() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_list_node_index();

  // @@protoc_insertion_point(class_scope:S2S_Ret_ClusterInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> list_addr_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > list_port_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > list_pressure_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > list_node_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static S2S_Ret_ClusterInfo* default_instance_;
};
// -------------------------------------------------------------------

class S2S_Ret_Update_OnlineUnit : public ::google::protobuf::Message {
 public:
  S2S_Ret_Update_OnlineUnit();
  virtual ~S2S_Ret_Update_OnlineUnit();

  S2S_Ret_Update_OnlineUnit(const S2S_Ret_Update_OnlineUnit& from);

  inline S2S_Ret_Update_OnlineUnit& operator=(const S2S_Ret_Update_OnlineUnit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2S_Ret_Update_OnlineUnit& default_instance();

  void Swap(S2S_Ret_Update_OnlineUnit* other);

  // implements Message ----------------------------------------------

  S2S_Ret_Update_OnlineUnit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2S_Ret_Update_OnlineUnit& from);
  void MergeFrom(const S2S_Ret_Update_OnlineUnit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .E_ONLINE_UNIT_RET ret = 1 [default = EOUR_OK];
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::E_ONLINE_UNIT_RET ret() const;
  inline void set_ret(::E_ONLINE_UNIT_RET value);

  // @@protoc_insertion_point(class_scope:S2S_Ret_Update_OnlineUnit)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static S2S_Ret_Update_OnlineUnit* default_instance_;
};
// -------------------------------------------------------------------

class S2S_Delete_OnlineUnitInfo : public ::google::protobuf::Message {
 public:
  S2S_Delete_OnlineUnitInfo();
  virtual ~S2S_Delete_OnlineUnitInfo();

  S2S_Delete_OnlineUnitInfo(const S2S_Delete_OnlineUnitInfo& from);

  inline S2S_Delete_OnlineUnitInfo& operator=(const S2S_Delete_OnlineUnitInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2S_Delete_OnlineUnitInfo& default_instance();

  void Swap(S2S_Delete_OnlineUnitInfo* other);

  // implements Message ----------------------------------------------

  S2S_Delete_OnlineUnitInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2S_Delete_OnlineUnitInfo& from);
  void MergeFrom(const S2S_Delete_OnlineUnitInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint32 unit_type = 1;
  inline bool has_unit_type() const;
  inline void clear_unit_type();
  static const int kUnitTypeFieldNumber = 1;
  inline ::google::protobuf::int32 unit_type() const;
  inline void set_unit_type(::google::protobuf::int32 value);

  // required sint64 unit_index = 2;
  inline bool has_unit_index() const;
  inline void clear_unit_index();
  static const int kUnitIndexFieldNumber = 2;
  inline ::google::protobuf::int64 unit_index() const;
  inline void set_unit_index(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:S2S_Delete_OnlineUnitInfo)
 private:
  inline void set_has_unit_type();
  inline void clear_has_unit_type();
  inline void set_has_unit_index();
  inline void clear_has_unit_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 unit_index_;
  ::google::protobuf::int32 unit_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static S2S_Delete_OnlineUnitInfo* default_instance_;
};
// -------------------------------------------------------------------

class S2S_Suspend_OnlineUnitInfo : public ::google::protobuf::Message {
 public:
  S2S_Suspend_OnlineUnitInfo();
  virtual ~S2S_Suspend_OnlineUnitInfo();

  S2S_Suspend_OnlineUnitInfo(const S2S_Suspend_OnlineUnitInfo& from);

  inline S2S_Suspend_OnlineUnitInfo& operator=(const S2S_Suspend_OnlineUnitInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2S_Suspend_OnlineUnitInfo& default_instance();

  void Swap(S2S_Suspend_OnlineUnitInfo* other);

  // implements Message ----------------------------------------------

  S2S_Suspend_OnlineUnitInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2S_Suspend_OnlineUnitInfo& from);
  void MergeFrom(const S2S_Suspend_OnlineUnitInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint32 unit_type = 1;
  inline bool has_unit_type() const;
  inline void clear_unit_type();
  static const int kUnitTypeFieldNumber = 1;
  inline ::google::protobuf::int32 unit_type() const;
  inline void set_unit_type(::google::protobuf::int32 value);

  // required sint64 unit_index = 2;
  inline bool has_unit_index() const;
  inline void clear_unit_index();
  static const int kUnitIndexFieldNumber = 2;
  inline ::google::protobuf::int64 unit_index() const;
  inline void set_unit_index(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:S2S_Suspend_OnlineUnitInfo)
 private:
  inline void set_has_unit_type();
  inline void clear_has_unit_type();
  inline void set_has_unit_index();
  inline void clear_has_unit_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 unit_index_;
  ::google::protobuf::int32 unit_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static S2S_Suspend_OnlineUnitInfo* default_instance_;
};
// -------------------------------------------------------------------

class S2S_Resume_OnlineUnitInfo : public ::google::protobuf::Message {
 public:
  S2S_Resume_OnlineUnitInfo();
  virtual ~S2S_Resume_OnlineUnitInfo();

  S2S_Resume_OnlineUnitInfo(const S2S_Resume_OnlineUnitInfo& from);

  inline S2S_Resume_OnlineUnitInfo& operator=(const S2S_Resume_OnlineUnitInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2S_Resume_OnlineUnitInfo& default_instance();

  void Swap(S2S_Resume_OnlineUnitInfo* other);

  // implements Message ----------------------------------------------

  S2S_Resume_OnlineUnitInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2S_Resume_OnlineUnitInfo& from);
  void MergeFrom(const S2S_Resume_OnlineUnitInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint32 unit_type = 1;
  inline bool has_unit_type() const;
  inline void clear_unit_type();
  static const int kUnitTypeFieldNumber = 1;
  inline ::google::protobuf::int32 unit_type() const;
  inline void set_unit_type(::google::protobuf::int32 value);

  // required sint64 unit_index = 2;
  inline bool has_unit_index() const;
  inline void clear_unit_index();
  static const int kUnitIndexFieldNumber = 2;
  inline ::google::protobuf::int64 unit_index() const;
  inline void set_unit_index(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:S2S_Resume_OnlineUnitInfo)
 private:
  inline void set_has_unit_type();
  inline void clear_has_unit_type();
  inline void set_has_unit_index();
  inline void clear_has_unit_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 unit_index_;
  ::google::protobuf::int32 unit_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static S2S_Resume_OnlineUnitInfo* default_instance_;
};
// -------------------------------------------------------------------

class S2S_Select_OnlineUnitInfo : public ::google::protobuf::Message {
 public:
  S2S_Select_OnlineUnitInfo();
  virtual ~S2S_Select_OnlineUnitInfo();

  S2S_Select_OnlineUnitInfo(const S2S_Select_OnlineUnitInfo& from);

  inline S2S_Select_OnlineUnitInfo& operator=(const S2S_Select_OnlineUnitInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2S_Select_OnlineUnitInfo& default_instance();

  void Swap(S2S_Select_OnlineUnitInfo* other);

  // implements Message ----------------------------------------------

  S2S_Select_OnlineUnitInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2S_Select_OnlineUnitInfo& from);
  void MergeFrom(const S2S_Select_OnlineUnitInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint32 unit_type = 1;
  inline bool has_unit_type() const;
  inline void clear_unit_type();
  static const int kUnitTypeFieldNumber = 1;
  inline ::google::protobuf::int32 unit_type() const;
  inline void set_unit_type(::google::protobuf::int32 value);

  // required sint64 unit_index = 2;
  inline bool has_unit_index() const;
  inline void clear_unit_index();
  static const int kUnitIndexFieldNumber = 2;
  inline ::google::protobuf::int64 unit_index() const;
  inline void set_unit_index(::google::protobuf::int64 value);

  // required bytes addr = 3;
  inline bool has_addr() const;
  inline void clear_addr();
  static const int kAddrFieldNumber = 3;
  inline const ::std::string& addr() const;
  inline void set_addr(const ::std::string& value);
  inline void set_addr(const char* value);
  inline void set_addr(const void* value, size_t size);
  inline ::std::string* mutable_addr();
  inline ::std::string* release_addr();
  inline void set_allocated_addr(::std::string* addr);

  // required sint32 port = 4;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 4;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:S2S_Select_OnlineUnitInfo)
 private:
  inline void set_has_unit_type();
  inline void clear_has_unit_type();
  inline void set_has_unit_index();
  inline void clear_has_unit_index();
  inline void set_has_addr();
  inline void clear_has_addr();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 unit_index_;
  ::google::protobuf::int32 unit_type_;
  ::google::protobuf::int32 port_;
  ::std::string* addr_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static S2S_Select_OnlineUnitInfo* default_instance_;
};
// -------------------------------------------------------------------

class S2S_Ret_Select_OnlineUnitInfo : public ::google::protobuf::Message {
 public:
  S2S_Ret_Select_OnlineUnitInfo();
  virtual ~S2S_Ret_Select_OnlineUnitInfo();

  S2S_Ret_Select_OnlineUnitInfo(const S2S_Ret_Select_OnlineUnitInfo& from);

  inline S2S_Ret_Select_OnlineUnitInfo& operator=(const S2S_Ret_Select_OnlineUnitInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2S_Ret_Select_OnlineUnitInfo& default_instance();

  void Swap(S2S_Ret_Select_OnlineUnitInfo* other);

  // implements Message ----------------------------------------------

  S2S_Ret_Select_OnlineUnitInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2S_Ret_Select_OnlineUnitInfo& from);
  void MergeFrom(const S2S_Ret_Select_OnlineUnitInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint32 unit_type = 1;
  inline bool has_unit_type() const;
  inline void clear_unit_type();
  static const int kUnitTypeFieldNumber = 1;
  inline ::google::protobuf::int32 unit_type() const;
  inline void set_unit_type(::google::protobuf::int32 value);

  // required sint64 unit_index = 2;
  inline bool has_unit_index() const;
  inline void clear_unit_index();
  static const int kUnitIndexFieldNumber = 2;
  inline ::google::protobuf::int64 unit_index() const;
  inline void set_unit_index(::google::protobuf::int64 value);

  // required bytes addr = 3;
  inline bool has_addr() const;
  inline void clear_addr();
  static const int kAddrFieldNumber = 3;
  inline const ::std::string& addr() const;
  inline void set_addr(const ::std::string& value);
  inline void set_addr(const char* value);
  inline void set_addr(const void* value, size_t size);
  inline ::std::string* mutable_addr();
  inline ::std::string* release_addr();
  inline void set_allocated_addr(::std::string* addr);

  // required sint32 port = 4;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 4;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:S2S_Ret_Select_OnlineUnitInfo)
 private:
  inline void set_has_unit_type();
  inline void clear_has_unit_type();
  inline void set_has_unit_index();
  inline void clear_has_unit_index();
  inline void set_has_addr();
  inline void clear_has_addr();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 unit_index_;
  ::google::protobuf::int32 unit_type_;
  ::google::protobuf::int32 port_;
  ::std::string* addr_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static S2S_Ret_Select_OnlineUnitInfo* default_instance_;
};
// -------------------------------------------------------------------

class S2S_RetReadyChangeScene : public ::google::protobuf::Message {
 public:
  S2S_RetReadyChangeScene();
  virtual ~S2S_RetReadyChangeScene();

  S2S_RetReadyChangeScene(const S2S_RetReadyChangeScene& from);

  inline S2S_RetReadyChangeScene& operator=(const S2S_RetReadyChangeScene& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2S_RetReadyChangeScene& default_instance();

  void Swap(S2S_RetReadyChangeScene* other);

  // implements Message ----------------------------------------------

  S2S_RetReadyChangeScene* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2S_RetReadyChangeScene& from);
  void MergeFrom(const S2S_RetReadyChangeScene& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes ret_code = 1;
  inline bool has_ret_code() const;
  inline void clear_ret_code();
  static const int kRetCodeFieldNumber = 1;
  inline const ::std::string& ret_code() const;
  inline void set_ret_code(const ::std::string& value);
  inline void set_ret_code(const char* value);
  inline void set_ret_code(const void* value, size_t size);
  inline ::std::string* mutable_ret_code();
  inline ::std::string* release_ret_code();
  inline void set_allocated_ret_code(::std::string* ret_code);

  // required sint64 role_index = 2;
  inline bool has_role_index() const;
  inline void clear_role_index();
  static const int kRoleIndexFieldNumber = 2;
  inline ::google::protobuf::int64 role_index() const;
  inline void set_role_index(::google::protobuf::int64 value);

  // required sint32 scene_id = 5;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 5;
  inline ::google::protobuf::int32 scene_id() const;
  inline void set_scene_id(::google::protobuf::int32 value);

  // required sint64 scene_instance_id = 6;
  inline bool has_scene_instance_id() const;
  inline void clear_scene_instance_id();
  static const int kSceneInstanceIdFieldNumber = 6;
  inline ::google::protobuf::int64 scene_instance_id() const;
  inline void set_scene_instance_id(::google::protobuf::int64 value);

  // required sint64 login_intaddr = 7;
  inline bool has_login_intaddr() const;
  inline void clear_login_intaddr();
  static const int kLoginIntaddrFieldNumber = 7;
  inline ::google::protobuf::int64 login_intaddr() const;
  inline void set_login_intaddr(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:S2S_RetReadyChangeScene)
 private:
  inline void set_has_ret_code();
  inline void clear_has_ret_code();
  inline void set_has_role_index();
  inline void clear_has_role_index();
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_scene_instance_id();
  inline void clear_has_scene_instance_id();
  inline void set_has_login_intaddr();
  inline void clear_has_login_intaddr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ret_code_;
  ::google::protobuf::int64 role_index_;
  ::google::protobuf::int64 scene_instance_id_;
  ::google::protobuf::int64 login_intaddr_;
  ::google::protobuf::int32 scene_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static S2S_RetReadyChangeScene* default_instance_;
};
// -------------------------------------------------------------------

class S2S_Request_Add_Friend : public ::google::protobuf::Message {
 public:
  S2S_Request_Add_Friend();
  virtual ~S2S_Request_Add_Friend();

  S2S_Request_Add_Friend(const S2S_Request_Add_Friend& from);

  inline S2S_Request_Add_Friend& operator=(const S2S_Request_Add_Friend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2S_Request_Add_Friend& default_instance();

  void Swap(S2S_Request_Add_Friend* other);

  // implements Message ----------------------------------------------

  S2S_Request_Add_Friend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2S_Request_Add_Friend& from);
  void MergeFrom(const S2S_Request_Add_Friend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint64 role_index = 1;
  inline bool has_role_index() const;
  inline void clear_role_index();
  static const int kRoleIndexFieldNumber = 1;
  inline ::google::protobuf::int64 role_index() const;
  inline void set_role_index(::google::protobuf::int64 value);

  // required sint64 src_role_index = 2;
  inline bool has_src_role_index() const;
  inline void clear_src_role_index();
  static const int kSrcRoleIndexFieldNumber = 2;
  inline ::google::protobuf::int64 src_role_index() const;
  inline void set_src_role_index(::google::protobuf::int64 value);

  // required bool is_refuse = 3;
  inline bool has_is_refuse() const;
  inline void clear_is_refuse();
  static const int kIsRefuseFieldNumber = 3;
  inline bool is_refuse() const;
  inline void set_is_refuse(bool value);

  // @@protoc_insertion_point(class_scope:S2S_Request_Add_Friend)
 private:
  inline void set_has_role_index();
  inline void clear_has_role_index();
  inline void set_has_src_role_index();
  inline void clear_has_src_role_index();
  inline void set_has_is_refuse();
  inline void clear_has_is_refuse();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 role_index_;
  ::google::protobuf::int64 src_role_index_;
  bool is_refuse_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static S2S_Request_Add_Friend* default_instance_;
};
// -------------------------------------------------------------------

class S2S_Friends_List : public ::google::protobuf::Message {
 public:
  S2S_Friends_List();
  virtual ~S2S_Friends_List();

  S2S_Friends_List(const S2S_Friends_List& from);

  inline S2S_Friends_List& operator=(const S2S_Friends_List& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2S_Friends_List& default_instance();

  void Swap(S2S_Friends_List* other);

  // implements Message ----------------------------------------------

  S2S_Friends_List* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2S_Friends_List& from);
  void MergeFrom(const S2S_Friends_List& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated sint64 list_friend_role_index = 1;
  inline int list_friend_role_index_size() const;
  inline void clear_list_friend_role_index();
  static const int kListFriendRoleIndexFieldNumber = 1;
  inline ::google::protobuf::int64 list_friend_role_index(int index) const;
  inline void set_list_friend_role_index(int index, ::google::protobuf::int64 value);
  inline void add_list_friend_role_index(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      list_friend_role_index() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_list_friend_role_index();

  // @@protoc_insertion_point(class_scope:S2S_Friends_List)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > list_friend_role_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static S2S_Friends_List* default_instance_;
};
// -------------------------------------------------------------------

class S2S_AskCheckPlayerInLogin : public ::google::protobuf::Message {
 public:
  S2S_AskCheckPlayerInLogin();
  virtual ~S2S_AskCheckPlayerInLogin();

  S2S_AskCheckPlayerInLogin(const S2S_AskCheckPlayerInLogin& from);

  inline S2S_AskCheckPlayerInLogin& operator=(const S2S_AskCheckPlayerInLogin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2S_AskCheckPlayerInLogin& default_instance();

  void Swap(S2S_AskCheckPlayerInLogin* other);

  // implements Message ----------------------------------------------

  S2S_AskCheckPlayerInLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2S_AskCheckPlayerInLogin& from);
  void MergeFrom(const S2S_AskCheckPlayerInLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint64 role_index = 1;
  inline bool has_role_index() const;
  inline void clear_role_index();
  static const int kRoleIndexFieldNumber = 1;
  inline ::google::protobuf::int64 role_index() const;
  inline void set_role_index(::google::protobuf::int64 value);

  // required sint64 src_temp_unit_index = 2;
  inline bool has_src_temp_unit_index() const;
  inline void clear_src_temp_unit_index();
  static const int kSrcTempUnitIndexFieldNumber = 2;
  inline ::google::protobuf::int64 src_temp_unit_index() const;
  inline void set_src_temp_unit_index(::google::protobuf::int64 value);

  // required sint64 src_intaddr = 3;
  inline bool has_src_intaddr() const;
  inline void clear_src_intaddr();
  static const int kSrcIntaddrFieldNumber = 3;
  inline ::google::protobuf::int64 src_intaddr() const;
  inline void set_src_intaddr(::google::protobuf::int64 value);

  // required sint64 intaddr = 4;
  inline bool has_intaddr() const;
  inline void clear_intaddr();
  static const int kIntaddrFieldNumber = 4;
  inline ::google::protobuf::int64 intaddr() const;
  inline void set_intaddr(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:S2S_AskCheckPlayerInLogin)
 private:
  inline void set_has_role_index();
  inline void clear_has_role_index();
  inline void set_has_src_temp_unit_index();
  inline void clear_has_src_temp_unit_index();
  inline void set_has_src_intaddr();
  inline void clear_has_src_intaddr();
  inline void set_has_intaddr();
  inline void clear_has_intaddr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 role_index_;
  ::google::protobuf::int64 src_temp_unit_index_;
  ::google::protobuf::int64 src_intaddr_;
  ::google::protobuf::int64 intaddr_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static S2S_AskCheckPlayerInLogin* default_instance_;
};
// -------------------------------------------------------------------

class S2S_RetCheckPlayerInLogin : public ::google::protobuf::Message {
 public:
  S2S_RetCheckPlayerInLogin();
  virtual ~S2S_RetCheckPlayerInLogin();

  S2S_RetCheckPlayerInLogin(const S2S_RetCheckPlayerInLogin& from);

  inline S2S_RetCheckPlayerInLogin& operator=(const S2S_RetCheckPlayerInLogin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2S_RetCheckPlayerInLogin& default_instance();

  void Swap(S2S_RetCheckPlayerInLogin* other);

  // implements Message ----------------------------------------------

  S2S_RetCheckPlayerInLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2S_RetCheckPlayerInLogin& from);
  void MergeFrom(const S2S_RetCheckPlayerInLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint64 role_index = 1;
  inline bool has_role_index() const;
  inline void clear_role_index();
  static const int kRoleIndexFieldNumber = 1;
  inline ::google::protobuf::int64 role_index() const;
  inline void set_role_index(::google::protobuf::int64 value);

  // required bool in_login = 2;
  inline bool has_in_login() const;
  inline void clear_in_login();
  static const int kInLoginFieldNumber = 2;
  inline bool in_login() const;
  inline void set_in_login(bool value);

  // required sint64 intaddr = 3;
  inline bool has_intaddr() const;
  inline void clear_intaddr();
  static const int kIntaddrFieldNumber = 3;
  inline ::google::protobuf::int64 intaddr() const;
  inline void set_intaddr(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:S2S_RetCheckPlayerInLogin)
 private:
  inline void set_has_role_index();
  inline void clear_has_role_index();
  inline void set_has_in_login();
  inline void clear_has_in_login();
  inline void set_has_intaddr();
  inline void clear_has_intaddr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 role_index_;
  ::google::protobuf::int64 intaddr_;
  bool in_login_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static S2S_RetCheckPlayerInLogin* default_instance_;
};
// -------------------------------------------------------------------

class S2S_AskEnterScene : public ::google::protobuf::Message {
 public:
  S2S_AskEnterScene();
  virtual ~S2S_AskEnterScene();

  S2S_AskEnterScene(const S2S_AskEnterScene& from);

  inline S2S_AskEnterScene& operator=(const S2S_AskEnterScene& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2S_AskEnterScene& default_instance();

  void Swap(S2S_AskEnterScene* other);

  // implements Message ----------------------------------------------

  S2S_AskEnterScene* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2S_AskEnterScene& from);
  void MergeFrom(const S2S_AskEnterScene& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint32 scene_id = 1;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 1;
  inline ::google::protobuf::int32 scene_id() const;
  inline void set_scene_id(::google::protobuf::int32 value);

  // required sint32 map_id = 2;
  inline bool has_map_id() const;
  inline void clear_map_id();
  static const int kMapIdFieldNumber = 2;
  inline ::google::protobuf::int32 map_id() const;
  inline void set_map_id(::google::protobuf::int32 value);

  // optional .universal_data team_info = 3;
  inline bool has_team_info() const;
  inline void clear_team_info();
  static const int kTeamInfoFieldNumber = 3;
  inline const ::universal_data& team_info() const;
  inline ::universal_data* mutable_team_info();
  inline ::universal_data* release_team_info();
  inline void set_allocated_team_info(::universal_data* team_info);

  // repeated .universal_data list_role_info = 4;
  inline int list_role_info_size() const;
  inline void clear_list_role_info();
  static const int kListRoleInfoFieldNumber = 4;
  inline const ::universal_data& list_role_info(int index) const;
  inline ::universal_data* mutable_list_role_info(int index);
  inline ::universal_data* add_list_role_info();
  inline const ::google::protobuf::RepeatedPtrField< ::universal_data >&
      list_role_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::universal_data >*
      mutable_list_role_info();

  // repeated .ServerBattleUnitInfo list_monster_info = 5;
  inline int list_monster_info_size() const;
  inline void clear_list_monster_info();
  static const int kListMonsterInfoFieldNumber = 5;
  inline const ::ServerBattleUnitInfo& list_monster_info(int index) const;
  inline ::ServerBattleUnitInfo* mutable_list_monster_info(int index);
  inline ::ServerBattleUnitInfo* add_list_monster_info();
  inline const ::google::protobuf::RepeatedPtrField< ::ServerBattleUnitInfo >&
      list_monster_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::ServerBattleUnitInfo >*
      mutable_list_monster_info();

  // repeated sint64 list_login_intaddr = 6;
  inline int list_login_intaddr_size() const;
  inline void clear_list_login_intaddr();
  static const int kListLoginIntaddrFieldNumber = 6;
  inline ::google::protobuf::int64 list_login_intaddr(int index) const;
  inline void set_list_login_intaddr(int index, ::google::protobuf::int64 value);
  inline void add_list_login_intaddr(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      list_login_intaddr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_list_login_intaddr();

  // @@protoc_insertion_point(class_scope:S2S_AskEnterScene)
 private:
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_map_id();
  inline void clear_has_map_id();
  inline void set_has_team_info();
  inline void clear_has_team_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 scene_id_;
  ::google::protobuf::int32 map_id_;
  ::universal_data* team_info_;
  ::google::protobuf::RepeatedPtrField< ::universal_data > list_role_info_;
  ::google::protobuf::RepeatedPtrField< ::ServerBattleUnitInfo > list_monster_info_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > list_login_intaddr_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static S2S_AskEnterScene* default_instance_;
};
// -------------------------------------------------------------------

class S2S_RetEnterScene : public ::google::protobuf::Message {
 public:
  S2S_RetEnterScene();
  virtual ~S2S_RetEnterScene();

  S2S_RetEnterScene(const S2S_RetEnterScene& from);

  inline S2S_RetEnterScene& operator=(const S2S_RetEnterScene& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2S_RetEnterScene& default_instance();

  void Swap(S2S_RetEnterScene* other);

  // implements Message ----------------------------------------------

  S2S_RetEnterScene* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2S_RetEnterScene& from);
  void MergeFrom(const S2S_RetEnterScene& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint32 scene_id = 1;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 1;
  inline ::google::protobuf::int32 scene_id() const;
  inline void set_scene_id(::google::protobuf::int32 value);

  // required sint64 role_index = 2;
  inline bool has_role_index() const;
  inline void clear_role_index();
  static const int kRoleIndexFieldNumber = 2;
  inline ::google::protobuf::int64 role_index() const;
  inline void set_role_index(::google::protobuf::int64 value);

  // required sint64 login_intaddr = 3;
  inline bool has_login_intaddr() const;
  inline void clear_login_intaddr();
  static const int kLoginIntaddrFieldNumber = 3;
  inline ::google::protobuf::int64 login_intaddr() const;
  inline void set_login_intaddr(::google::protobuf::int64 value);

  // required bool is_ok = 4;
  inline bool has_is_ok() const;
  inline void clear_is_ok();
  static const int kIsOkFieldNumber = 4;
  inline bool is_ok() const;
  inline void set_is_ok(bool value);

  // @@protoc_insertion_point(class_scope:S2S_RetEnterScene)
 private:
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_role_index();
  inline void clear_has_role_index();
  inline void set_has_login_intaddr();
  inline void clear_has_login_intaddr();
  inline void set_has_is_ok();
  inline void clear_has_is_ok();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 role_index_;
  ::google::protobuf::int32 scene_id_;
  bool is_ok_;
  ::google::protobuf::int64 login_intaddr_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static S2S_RetEnterScene* default_instance_;
};
// -------------------------------------------------------------------

class S2S_ReadyEnterScene : public ::google::protobuf::Message {
 public:
  S2S_ReadyEnterScene();
  virtual ~S2S_ReadyEnterScene();

  S2S_ReadyEnterScene(const S2S_ReadyEnterScene& from);

  inline S2S_ReadyEnterScene& operator=(const S2S_ReadyEnterScene& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2S_ReadyEnterScene& default_instance();

  void Swap(S2S_ReadyEnterScene* other);

  // implements Message ----------------------------------------------

  S2S_ReadyEnterScene* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2S_ReadyEnterScene& from);
  void MergeFrom(const S2S_ReadyEnterScene& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint32 scene_id = 1;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 1;
  inline ::google::protobuf::int32 scene_id() const;
  inline void set_scene_id(::google::protobuf::int32 value);

  // required sint64 scene_instance_id = 2;
  inline bool has_scene_instance_id() const;
  inline void clear_scene_instance_id();
  static const int kSceneInstanceIdFieldNumber = 2;
  inline ::google::protobuf::int64 scene_instance_id() const;
  inline void set_scene_instance_id(::google::protobuf::int64 value);

  // required sint64 role_index = 3;
  inline bool has_role_index() const;
  inline void clear_role_index();
  static const int kRoleIndexFieldNumber = 3;
  inline ::google::protobuf::int64 role_index() const;
  inline void set_role_index(::google::protobuf::int64 value);

  // required bytes account = 4;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 4;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const void* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // required bytes nick_name = 5;
  inline bool has_nick_name() const;
  inline void clear_nick_name();
  static const int kNickNameFieldNumber = 5;
  inline const ::std::string& nick_name() const;
  inline void set_nick_name(const ::std::string& value);
  inline void set_nick_name(const char* value);
  inline void set_nick_name(const void* value, size_t size);
  inline ::std::string* mutable_nick_name();
  inline ::std::string* release_nick_name();
  inline void set_allocated_nick_name(::std::string* nick_name);

  // required .universal_data role_info = 6;
  inline bool has_role_info() const;
  inline void clear_role_info();
  static const int kRoleInfoFieldNumber = 6;
  inline const ::universal_data& role_info() const;
  inline ::universal_data* mutable_role_info();
  inline ::universal_data* release_role_info();
  inline void set_allocated_role_info(::universal_data* role_info);

  // required sint64 login_intaddr = 7;
  inline bool has_login_intaddr() const;
  inline void clear_login_intaddr();
  static const int kLoginIntaddrFieldNumber = 7;
  inline ::google::protobuf::int64 login_intaddr() const;
  inline void set_login_intaddr(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:S2S_ReadyEnterScene)
 private:
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_scene_instance_id();
  inline void clear_has_scene_instance_id();
  inline void set_has_role_index();
  inline void clear_has_role_index();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_nick_name();
  inline void clear_has_nick_name();
  inline void set_has_role_info();
  inline void clear_has_role_info();
  inline void set_has_login_intaddr();
  inline void clear_has_login_intaddr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 scene_instance_id_;
  ::google::protobuf::int64 role_index_;
  ::std::string* account_;
  ::std::string* nick_name_;
  ::universal_data* role_info_;
  ::google::protobuf::int64 login_intaddr_;
  ::google::protobuf::int32 scene_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static S2S_ReadyEnterScene* default_instance_;
};
// -------------------------------------------------------------------

class S2S_TeamReadyEnterScene : public ::google::protobuf::Message {
 public:
  S2S_TeamReadyEnterScene();
  virtual ~S2S_TeamReadyEnterScene();

  S2S_TeamReadyEnterScene(const S2S_TeamReadyEnterScene& from);

  inline S2S_TeamReadyEnterScene& operator=(const S2S_TeamReadyEnterScene& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2S_TeamReadyEnterScene& default_instance();

  void Swap(S2S_TeamReadyEnterScene* other);

  // implements Message ----------------------------------------------

  S2S_TeamReadyEnterScene* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2S_TeamReadyEnterScene& from);
  void MergeFrom(const S2S_TeamReadyEnterScene& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint32 scene_id = 1;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 1;
  inline ::google::protobuf::int32 scene_id() const;
  inline void set_scene_id(::google::protobuf::int32 value);

  // required sint64 scene_instance_id = 2;
  inline bool has_scene_instance_id() const;
  inline void clear_scene_instance_id();
  static const int kSceneInstanceIdFieldNumber = 2;
  inline ::google::protobuf::int64 scene_instance_id() const;
  inline void set_scene_instance_id(::google::protobuf::int64 value);

  // required .universal_data team_info = 3;
  inline bool has_team_info() const;
  inline void clear_team_info();
  static const int kTeamInfoFieldNumber = 3;
  inline const ::universal_data& team_info() const;
  inline ::universal_data* mutable_team_info();
  inline ::universal_data* release_team_info();
  inline void set_allocated_team_info(::universal_data* team_info);

  // repeated .universal_data list_role_info = 4;
  inline int list_role_info_size() const;
  inline void clear_list_role_info();
  static const int kListRoleInfoFieldNumber = 4;
  inline const ::universal_data& list_role_info(int index) const;
  inline ::universal_data* mutable_list_role_info(int index);
  inline ::universal_data* add_list_role_info();
  inline const ::google::protobuf::RepeatedPtrField< ::universal_data >&
      list_role_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::universal_data >*
      mutable_list_role_info();

  // repeated .ServerBattleUnitInfo list_monster_info = 5;
  inline int list_monster_info_size() const;
  inline void clear_list_monster_info();
  static const int kListMonsterInfoFieldNumber = 5;
  inline const ::ServerBattleUnitInfo& list_monster_info(int index) const;
  inline ::ServerBattleUnitInfo* mutable_list_monster_info(int index);
  inline ::ServerBattleUnitInfo* add_list_monster_info();
  inline const ::google::protobuf::RepeatedPtrField< ::ServerBattleUnitInfo >&
      list_monster_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::ServerBattleUnitInfo >*
      mutable_list_monster_info();

  // repeated sint64 list_login_intaddr = 6;
  inline int list_login_intaddr_size() const;
  inline void clear_list_login_intaddr();
  static const int kListLoginIntaddrFieldNumber = 6;
  inline ::google::protobuf::int64 list_login_intaddr(int index) const;
  inline void set_list_login_intaddr(int index, ::google::protobuf::int64 value);
  inline void add_list_login_intaddr(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      list_login_intaddr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_list_login_intaddr();

  // @@protoc_insertion_point(class_scope:S2S_TeamReadyEnterScene)
 private:
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_scene_instance_id();
  inline void clear_has_scene_instance_id();
  inline void set_has_team_info();
  inline void clear_has_team_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 scene_instance_id_;
  ::universal_data* team_info_;
  ::google::protobuf::RepeatedPtrField< ::universal_data > list_role_info_;
  ::google::protobuf::RepeatedPtrField< ::ServerBattleUnitInfo > list_monster_info_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > list_login_intaddr_;
  ::google::protobuf::int32 scene_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static S2S_TeamReadyEnterScene* default_instance_;
};
// -------------------------------------------------------------------

class S2S_BroadcastHaveNewScene : public ::google::protobuf::Message {
 public:
  S2S_BroadcastHaveNewScene();
  virtual ~S2S_BroadcastHaveNewScene();

  S2S_BroadcastHaveNewScene(const S2S_BroadcastHaveNewScene& from);

  inline S2S_BroadcastHaveNewScene& operator=(const S2S_BroadcastHaveNewScene& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2S_BroadcastHaveNewScene& default_instance();

  void Swap(S2S_BroadcastHaveNewScene* other);

  // implements Message ----------------------------------------------

  S2S_BroadcastHaveNewScene* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2S_BroadcastHaveNewScene& from);
  void MergeFrom(const S2S_BroadcastHaveNewScene& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint64 center_scene_manager_intaddr = 1;
  inline bool has_center_scene_manager_intaddr() const;
  inline void clear_center_scene_manager_intaddr();
  static const int kCenterSceneManagerIntaddrFieldNumber = 1;
  inline ::google::protobuf::int64 center_scene_manager_intaddr() const;
  inline void set_center_scene_manager_intaddr(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:S2S_BroadcastHaveNewScene)
 private:
  inline void set_has_center_scene_manager_intaddr();
  inline void clear_has_center_scene_manager_intaddr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 center_scene_manager_intaddr_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static S2S_BroadcastHaveNewScene* default_instance_;
};
// -------------------------------------------------------------------

class S2S_AskLoadNewScene : public ::google::protobuf::Message {
 public:
  S2S_AskLoadNewScene();
  virtual ~S2S_AskLoadNewScene();

  S2S_AskLoadNewScene(const S2S_AskLoadNewScene& from);

  inline S2S_AskLoadNewScene& operator=(const S2S_AskLoadNewScene& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2S_AskLoadNewScene& default_instance();

  void Swap(S2S_AskLoadNewScene* other);

  // implements Message ----------------------------------------------

  S2S_AskLoadNewScene* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2S_AskLoadNewScene& from);
  void MergeFrom(const S2S_AskLoadNewScene& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint64 scene_manager_intaddr = 1;
  inline bool has_scene_manager_intaddr() const;
  inline void clear_scene_manager_intaddr();
  static const int kSceneManagerIntaddrFieldNumber = 1;
  inline ::google::protobuf::int64 scene_manager_intaddr() const;
  inline void set_scene_manager_intaddr(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:S2S_AskLoadNewScene)
 private:
  inline void set_has_scene_manager_intaddr();
  inline void clear_has_scene_manager_intaddr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 scene_manager_intaddr_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static S2S_AskLoadNewScene* default_instance_;
};
// -------------------------------------------------------------------

class S2S_RetLoadNewScene : public ::google::protobuf::Message {
 public:
  S2S_RetLoadNewScene();
  virtual ~S2S_RetLoadNewScene();

  S2S_RetLoadNewScene(const S2S_RetLoadNewScene& from);

  inline S2S_RetLoadNewScene& operator=(const S2S_RetLoadNewScene& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2S_RetLoadNewScene& default_instance();

  void Swap(S2S_RetLoadNewScene* other);

  // implements Message ----------------------------------------------

  S2S_RetLoadNewScene* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2S_RetLoadNewScene& from);
  void MergeFrom(const S2S_RetLoadNewScene& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint32 scene_id = 1;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 1;
  inline ::google::protobuf::int32 scene_id() const;
  inline void set_scene_id(::google::protobuf::int32 value);

  // required sint32 scene_index = 2;
  inline bool has_scene_index() const;
  inline void clear_scene_index();
  static const int kSceneIndexFieldNumber = 2;
  inline ::google::protobuf::int32 scene_index() const;
  inline void set_scene_index(::google::protobuf::int32 value);

  // required sint32 map_id = 3;
  inline bool has_map_id() const;
  inline void clear_map_id();
  static const int kMapIdFieldNumber = 3;
  inline ::google::protobuf::int32 map_id() const;
  inline void set_map_id(::google::protobuf::int32 value);

  // required .E_SCENE_TYPE scene_type = 4 [default = EST_INVALID];
  inline bool has_scene_type() const;
  inline void clear_scene_type();
  static const int kSceneTypeFieldNumber = 4;
  inline ::E_SCENE_TYPE scene_type() const;
  inline void set_scene_type(::E_SCENE_TYPE value);

  // repeated .universal_data list_role_info = 5;
  inline int list_role_info_size() const;
  inline void clear_list_role_info();
  static const int kListRoleInfoFieldNumber = 5;
  inline const ::universal_data& list_role_info(int index) const;
  inline ::universal_data* mutable_list_role_info(int index);
  inline ::universal_data* add_list_role_info();
  inline const ::google::protobuf::RepeatedPtrField< ::universal_data >&
      list_role_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::universal_data >*
      mutable_list_role_info();

  // repeated .universal_data list_team_info = 6;
  inline int list_team_info_size() const;
  inline void clear_list_team_info();
  static const int kListTeamInfoFieldNumber = 6;
  inline const ::universal_data& list_team_info(int index) const;
  inline ::universal_data* mutable_list_team_info(int index);
  inline ::universal_data* add_list_team_info();
  inline const ::google::protobuf::RepeatedPtrField< ::universal_data >&
      list_team_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::universal_data >*
      mutable_list_team_info();

  // repeated .ServerBattleUnitInfo list_monster_info = 7;
  inline int list_monster_info_size() const;
  inline void clear_list_monster_info();
  static const int kListMonsterInfoFieldNumber = 7;
  inline const ::ServerBattleUnitInfo& list_monster_info(int index) const;
  inline ::ServerBattleUnitInfo* mutable_list_monster_info(int index);
  inline ::ServerBattleUnitInfo* add_list_monster_info();
  inline const ::google::protobuf::RepeatedPtrField< ::ServerBattleUnitInfo >&
      list_monster_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::ServerBattleUnitInfo >*
      mutable_list_monster_info();

  // repeated sint64 list_login_intaddr = 8;
  inline int list_login_intaddr_size() const;
  inline void clear_list_login_intaddr();
  static const int kListLoginIntaddrFieldNumber = 8;
  inline ::google::protobuf::int64 list_login_intaddr(int index) const;
  inline void set_list_login_intaddr(int index, ::google::protobuf::int64 value);
  inline void add_list_login_intaddr(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      list_login_intaddr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_list_login_intaddr();

  // @@protoc_insertion_point(class_scope:S2S_RetLoadNewScene)
 private:
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_scene_index();
  inline void clear_has_scene_index();
  inline void set_has_map_id();
  inline void clear_has_map_id();
  inline void set_has_scene_type();
  inline void clear_has_scene_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 scene_id_;
  ::google::protobuf::int32 scene_index_;
  ::google::protobuf::int32 map_id_;
  int scene_type_;
  ::google::protobuf::RepeatedPtrField< ::universal_data > list_role_info_;
  ::google::protobuf::RepeatedPtrField< ::universal_data > list_team_info_;
  ::google::protobuf::RepeatedPtrField< ::ServerBattleUnitInfo > list_monster_info_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > list_login_intaddr_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static S2S_RetLoadNewScene* default_instance_;
};
// -------------------------------------------------------------------

class S2S_AskRegRunningSceneInfo : public ::google::protobuf::Message {
 public:
  S2S_AskRegRunningSceneInfo();
  virtual ~S2S_AskRegRunningSceneInfo();

  S2S_AskRegRunningSceneInfo(const S2S_AskRegRunningSceneInfo& from);

  inline S2S_AskRegRunningSceneInfo& operator=(const S2S_AskRegRunningSceneInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2S_AskRegRunningSceneInfo& default_instance();

  void Swap(S2S_AskRegRunningSceneInfo* other);

  // implements Message ----------------------------------------------

  S2S_AskRegRunningSceneInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2S_AskRegRunningSceneInfo& from);
  void MergeFrom(const S2S_AskRegRunningSceneInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .RunningSceneInfo scene_info = 1;
  inline bool has_scene_info() const;
  inline void clear_scene_info();
  static const int kSceneInfoFieldNumber = 1;
  inline const ::RunningSceneInfo& scene_info() const;
  inline ::RunningSceneInfo* mutable_scene_info();
  inline ::RunningSceneInfo* release_scene_info();
  inline void set_allocated_scene_info(::RunningSceneInfo* scene_info);

  // @@protoc_insertion_point(class_scope:S2S_AskRegRunningSceneInfo)
 private:
  inline void set_has_scene_info();
  inline void clear_has_scene_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::RunningSceneInfo* scene_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static S2S_AskRegRunningSceneInfo* default_instance_;
};
// -------------------------------------------------------------------

class S2S_AskUnRegRunningSceneInfo : public ::google::protobuf::Message {
 public:
  S2S_AskUnRegRunningSceneInfo();
  virtual ~S2S_AskUnRegRunningSceneInfo();

  S2S_AskUnRegRunningSceneInfo(const S2S_AskUnRegRunningSceneInfo& from);

  inline S2S_AskUnRegRunningSceneInfo& operator=(const S2S_AskUnRegRunningSceneInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2S_AskUnRegRunningSceneInfo& default_instance();

  void Swap(S2S_AskUnRegRunningSceneInfo* other);

  // implements Message ----------------------------------------------

  S2S_AskUnRegRunningSceneInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2S_AskUnRegRunningSceneInfo& from);
  void MergeFrom(const S2S_AskUnRegRunningSceneInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .RunningSceneInfo scene_info = 1;
  inline bool has_scene_info() const;
  inline void clear_scene_info();
  static const int kSceneInfoFieldNumber = 1;
  inline const ::RunningSceneInfo& scene_info() const;
  inline ::RunningSceneInfo* mutable_scene_info();
  inline ::RunningSceneInfo* release_scene_info();
  inline void set_allocated_scene_info(::RunningSceneInfo* scene_info);

  // @@protoc_insertion_point(class_scope:S2S_AskUnRegRunningSceneInfo)
 private:
  inline void set_has_scene_info();
  inline void clear_has_scene_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::RunningSceneInfo* scene_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static S2S_AskUnRegRunningSceneInfo* default_instance_;
};
// -------------------------------------------------------------------

class GM2S_AskLogin : public ::google::protobuf::Message {
 public:
  GM2S_AskLogin();
  virtual ~GM2S_AskLogin();

  GM2S_AskLogin(const GM2S_AskLogin& from);

  inline GM2S_AskLogin& operator=(const GM2S_AskLogin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM2S_AskLogin& default_instance();

  void Swap(GM2S_AskLogin* other);

  // implements Message ----------------------------------------------

  GM2S_AskLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM2S_AskLogin& from);
  void MergeFrom(const GM2S_AskLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const void* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // required bytes password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const void* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:GM2S_AskLogin)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_password();
  inline void clear_has_password();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::std::string* password_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static GM2S_AskLogin* default_instance_;
};
// -------------------------------------------------------------------

class S2GM_RetLogin : public ::google::protobuf::Message {
 public:
  S2GM_RetLogin();
  virtual ~S2GM_RetLogin();

  S2GM_RetLogin(const S2GM_RetLogin& from);

  inline S2GM_RetLogin& operator=(const S2GM_RetLogin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2GM_RetLogin& default_instance();

  void Swap(S2GM_RetLogin* other);

  // implements Message ----------------------------------------------

  S2GM_RetLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2GM_RetLogin& from);
  void MergeFrom(const S2GM_RetLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes ret_code = 1;
  inline bool has_ret_code() const;
  inline void clear_ret_code();
  static const int kRetCodeFieldNumber = 1;
  inline const ::std::string& ret_code() const;
  inline void set_ret_code(const ::std::string& value);
  inline void set_ret_code(const char* value);
  inline void set_ret_code(const void* value, size_t size);
  inline ::std::string* mutable_ret_code();
  inline ::std::string* release_ret_code();
  inline void set_allocated_ret_code(::std::string* ret_code);

  // required bytes account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const void* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // @@protoc_insertion_point(class_scope:S2GM_RetLogin)
 private:
  inline void set_has_ret_code();
  inline void clear_has_ret_code();
  inline void set_has_account();
  inline void clear_has_account();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ret_code_;
  ::std::string* account_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static S2GM_RetLogin* default_instance_;
};
// -------------------------------------------------------------------

class S2S_RegNodeInfo : public ::google::protobuf::Message {
 public:
  S2S_RegNodeInfo();
  virtual ~S2S_RegNodeInfo();

  S2S_RegNodeInfo(const S2S_RegNodeInfo& from);

  inline S2S_RegNodeInfo& operator=(const S2S_RegNodeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2S_RegNodeInfo& default_instance();

  void Swap(S2S_RegNodeInfo* other);

  // implements Message ----------------------------------------------

  S2S_RegNodeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2S_RegNodeInfo& from);
  void MergeFrom(const S2S_RegNodeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sql_ret_cluster_node_info cluster_node_info = 1;
  inline bool has_cluster_node_info() const;
  inline void clear_cluster_node_info();
  static const int kClusterNodeInfoFieldNumber = 1;
  inline const ::sql_ret_cluster_node_info& cluster_node_info() const;
  inline ::sql_ret_cluster_node_info* mutable_cluster_node_info();
  inline ::sql_ret_cluster_node_info* release_cluster_node_info();
  inline void set_allocated_cluster_node_info(::sql_ret_cluster_node_info* cluster_node_info);

  // @@protoc_insertion_point(class_scope:S2S_RegNodeInfo)
 private:
  inline void set_has_cluster_node_info();
  inline void clear_has_cluster_node_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::sql_ret_cluster_node_info* cluster_node_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static S2S_RegNodeInfo* default_instance_;
};
// -------------------------------------------------------------------

class GM2S_AskNodeInfo : public ::google::protobuf::Message {
 public:
  GM2S_AskNodeInfo();
  virtual ~GM2S_AskNodeInfo();

  GM2S_AskNodeInfo(const GM2S_AskNodeInfo& from);

  inline GM2S_AskNodeInfo& operator=(const GM2S_AskNodeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM2S_AskNodeInfo& default_instance();

  void Swap(GM2S_AskNodeInfo* other);

  // implements Message ----------------------------------------------

  GM2S_AskNodeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM2S_AskNodeInfo& from);
  void MergeFrom(const GM2S_AskNodeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes request_node_name = 1;
  inline bool has_request_node_name() const;
  inline void clear_request_node_name();
  static const int kRequestNodeNameFieldNumber = 1;
  inline const ::std::string& request_node_name() const;
  inline void set_request_node_name(const ::std::string& value);
  inline void set_request_node_name(const char* value);
  inline void set_request_node_name(const void* value, size_t size);
  inline ::std::string* mutable_request_node_name();
  inline ::std::string* release_request_node_name();
  inline void set_allocated_request_node_name(::std::string* request_node_name);

  // required bool is_online = 2;
  inline bool has_is_online() const;
  inline void clear_is_online();
  static const int kIsOnlineFieldNumber = 2;
  inline bool is_online() const;
  inline void set_is_online(bool value);

  // @@protoc_insertion_point(class_scope:GM2S_AskNodeInfo)
 private:
  inline void set_has_request_node_name();
  inline void clear_has_request_node_name();
  inline void set_has_is_online();
  inline void clear_has_is_online();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* request_node_name_;
  bool is_online_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static GM2S_AskNodeInfo* default_instance_;
};
// -------------------------------------------------------------------

class S2GM_RetNodeInfo : public ::google::protobuf::Message {
 public:
  S2GM_RetNodeInfo();
  virtual ~S2GM_RetNodeInfo();

  S2GM_RetNodeInfo(const S2GM_RetNodeInfo& from);

  inline S2GM_RetNodeInfo& operator=(const S2GM_RetNodeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2GM_RetNodeInfo& default_instance();

  void Swap(S2GM_RetNodeInfo* other);

  // implements Message ----------------------------------------------

  S2GM_RetNodeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2GM_RetNodeInfo& from);
  void MergeFrom(const S2GM_RetNodeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes request_node_name = 1;
  inline bool has_request_node_name() const;
  inline void clear_request_node_name();
  static const int kRequestNodeNameFieldNumber = 1;
  inline const ::std::string& request_node_name() const;
  inline void set_request_node_name(const ::std::string& value);
  inline void set_request_node_name(const char* value);
  inline void set_request_node_name(const void* value, size_t size);
  inline ::std::string* mutable_request_node_name();
  inline ::std::string* release_request_node_name();
  inline void set_allocated_request_node_name(::std::string* request_node_name);

  // repeated .sql_ret_cluster_node_info list_cluster_node_info = 2;
  inline int list_cluster_node_info_size() const;
  inline void clear_list_cluster_node_info();
  static const int kListClusterNodeInfoFieldNumber = 2;
  inline const ::sql_ret_cluster_node_info& list_cluster_node_info(int index) const;
  inline ::sql_ret_cluster_node_info* mutable_list_cluster_node_info(int index);
  inline ::sql_ret_cluster_node_info* add_list_cluster_node_info();
  inline const ::google::protobuf::RepeatedPtrField< ::sql_ret_cluster_node_info >&
      list_cluster_node_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::sql_ret_cluster_node_info >*
      mutable_list_cluster_node_info();

  // @@protoc_insertion_point(class_scope:S2GM_RetNodeInfo)
 private:
  inline void set_has_request_node_name();
  inline void clear_has_request_node_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* request_node_name_;
  ::google::protobuf::RepeatedPtrField< ::sql_ret_cluster_node_info > list_cluster_node_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static S2GM_RetNodeInfo* default_instance_;
};
// -------------------------------------------------------------------

class GM2S_AskPlayerInfo : public ::google::protobuf::Message {
 public:
  GM2S_AskPlayerInfo();
  virtual ~GM2S_AskPlayerInfo();

  GM2S_AskPlayerInfo(const GM2S_AskPlayerInfo& from);

  inline GM2S_AskPlayerInfo& operator=(const GM2S_AskPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM2S_AskPlayerInfo& default_instance();

  void Swap(GM2S_AskPlayerInfo* other);

  // implements Message ----------------------------------------------

  GM2S_AskPlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM2S_AskPlayerInfo& from);
  void MergeFrom(const GM2S_AskPlayerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes request_node_name = 1;
  inline bool has_request_node_name() const;
  inline void clear_request_node_name();
  static const int kRequestNodeNameFieldNumber = 1;
  inline const ::std::string& request_node_name() const;
  inline void set_request_node_name(const ::std::string& value);
  inline void set_request_node_name(const char* value);
  inline void set_request_node_name(const void* value, size_t size);
  inline ::std::string* mutable_request_node_name();
  inline ::std::string* release_request_node_name();
  inline void set_allocated_request_node_name(::std::string* request_node_name);

  // required bool is_online = 2;
  inline bool has_is_online() const;
  inline void clear_is_online();
  static const int kIsOnlineFieldNumber = 2;
  inline bool is_online() const;
  inline void set_is_online(bool value);

  // @@protoc_insertion_point(class_scope:GM2S_AskPlayerInfo)
 private:
  inline void set_has_request_node_name();
  inline void clear_has_request_node_name();
  inline void set_has_is_online();
  inline void clear_has_is_online();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* request_node_name_;
  bool is_online_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static GM2S_AskPlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class S2GM_RetPlayerInfo : public ::google::protobuf::Message {
 public:
  S2GM_RetPlayerInfo();
  virtual ~S2GM_RetPlayerInfo();

  S2GM_RetPlayerInfo(const S2GM_RetPlayerInfo& from);

  inline S2GM_RetPlayerInfo& operator=(const S2GM_RetPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2GM_RetPlayerInfo& default_instance();

  void Swap(S2GM_RetPlayerInfo* other);

  // implements Message ----------------------------------------------

  S2GM_RetPlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2GM_RetPlayerInfo& from);
  void MergeFrom(const S2GM_RetPlayerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes request_node_name = 1;
  inline bool has_request_node_name() const;
  inline void clear_request_node_name();
  static const int kRequestNodeNameFieldNumber = 1;
  inline const ::std::string& request_node_name() const;
  inline void set_request_node_name(const ::std::string& value);
  inline void set_request_node_name(const char* value);
  inline void set_request_node_name(const void* value, size_t size);
  inline ::std::string* mutable_request_node_name();
  inline ::std::string* release_request_node_name();
  inline void set_allocated_request_node_name(::std::string* request_node_name);

  // repeated .universal_data list_roleinfo = 2;
  inline int list_roleinfo_size() const;
  inline void clear_list_roleinfo();
  static const int kListRoleinfoFieldNumber = 2;
  inline const ::universal_data& list_roleinfo(int index) const;
  inline ::universal_data* mutable_list_roleinfo(int index);
  inline ::universal_data* add_list_roleinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::universal_data >&
      list_roleinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::universal_data >*
      mutable_list_roleinfo();

  // @@protoc_insertion_point(class_scope:S2GM_RetPlayerInfo)
 private:
  inline void set_has_request_node_name();
  inline void clear_has_request_node_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* request_node_name_;
  ::google::protobuf::RepeatedPtrField< ::universal_data > list_roleinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static S2GM_RetPlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class GM2S_AskSceneInfo : public ::google::protobuf::Message {
 public:
  GM2S_AskSceneInfo();
  virtual ~GM2S_AskSceneInfo();

  GM2S_AskSceneInfo(const GM2S_AskSceneInfo& from);

  inline GM2S_AskSceneInfo& operator=(const GM2S_AskSceneInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM2S_AskSceneInfo& default_instance();

  void Swap(GM2S_AskSceneInfo* other);

  // implements Message ----------------------------------------------

  GM2S_AskSceneInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM2S_AskSceneInfo& from);
  void MergeFrom(const GM2S_AskSceneInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool is_online = 1;
  inline bool has_is_online() const;
  inline void clear_is_online();
  static const int kIsOnlineFieldNumber = 1;
  inline bool is_online() const;
  inline void set_is_online(bool value);

  // @@protoc_insertion_point(class_scope:GM2S_AskSceneInfo)
 private:
  inline void set_has_is_online();
  inline void clear_has_is_online();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool is_online_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static GM2S_AskSceneInfo* default_instance_;
};
// -------------------------------------------------------------------

class S2GM_RetSceneInfo : public ::google::protobuf::Message {
 public:
  S2GM_RetSceneInfo();
  virtual ~S2GM_RetSceneInfo();

  S2GM_RetSceneInfo(const S2GM_RetSceneInfo& from);

  inline S2GM_RetSceneInfo& operator=(const S2GM_RetSceneInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2GM_RetSceneInfo& default_instance();

  void Swap(S2GM_RetSceneInfo* other);

  // implements Message ----------------------------------------------

  S2GM_RetSceneInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2GM_RetSceneInfo& from);
  void MergeFrom(const S2GM_RetSceneInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sql_ret_cluster_node_info list_cluster_node_info = 1;
  inline int list_cluster_node_info_size() const;
  inline void clear_list_cluster_node_info();
  static const int kListClusterNodeInfoFieldNumber = 1;
  inline const ::sql_ret_cluster_node_info& list_cluster_node_info(int index) const;
  inline ::sql_ret_cluster_node_info* mutable_list_cluster_node_info(int index);
  inline ::sql_ret_cluster_node_info* add_list_cluster_node_info();
  inline const ::google::protobuf::RepeatedPtrField< ::sql_ret_cluster_node_info >&
      list_cluster_node_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::sql_ret_cluster_node_info >*
      mutable_list_cluster_node_info();

  // @@protoc_insertion_point(class_scope:S2GM_RetSceneInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::sql_ret_cluster_node_info > list_cluster_node_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static S2GM_RetSceneInfo* default_instance_;
};
// -------------------------------------------------------------------

class GM2S_KickPlayer : public ::google::protobuf::Message {
 public:
  GM2S_KickPlayer();
  virtual ~GM2S_KickPlayer();

  GM2S_KickPlayer(const GM2S_KickPlayer& from);

  inline GM2S_KickPlayer& operator=(const GM2S_KickPlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM2S_KickPlayer& default_instance();

  void Swap(GM2S_KickPlayer* other);

  // implements Message ----------------------------------------------

  GM2S_KickPlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM2S_KickPlayer& from);
  void MergeFrom(const GM2S_KickPlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint64 role_index = 1;
  inline bool has_role_index() const;
  inline void clear_role_index();
  static const int kRoleIndexFieldNumber = 1;
  inline ::google::protobuf::int64 role_index() const;
  inline void set_role_index(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:GM2S_KickPlayer)
 private:
  inline void set_has_role_index();
  inline void clear_has_role_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 role_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static GM2S_KickPlayer* default_instance_;
};
// -------------------------------------------------------------------

class GM2S_Close : public ::google::protobuf::Message {
 public:
  GM2S_Close();
  virtual ~GM2S_Close();

  GM2S_Close(const GM2S_Close& from);

  inline GM2S_Close& operator=(const GM2S_Close& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GM2S_Close& default_instance();

  void Swap(GM2S_Close* other);

  // implements Message ----------------------------------------------

  GM2S_Close* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GM2S_Close& from);
  void MergeFrom(const GM2S_Close& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint64 role_index = 1;
  inline bool has_role_index() const;
  inline void clear_role_index();
  static const int kRoleIndexFieldNumber = 1;
  inline ::google::protobuf::int64 role_index() const;
  inline void set_role_index(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:GM2S_Close)
 private:
  inline void set_has_role_index();
  inline void clear_has_role_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 role_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static GM2S_Close* default_instance_;
};
// -------------------------------------------------------------------

class S2S_Ask_CheckAccount : public ::google::protobuf::Message {
 public:
  S2S_Ask_CheckAccount();
  virtual ~S2S_Ask_CheckAccount();

  S2S_Ask_CheckAccount(const S2S_Ask_CheckAccount& from);

  inline S2S_Ask_CheckAccount& operator=(const S2S_Ask_CheckAccount& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2S_Ask_CheckAccount& default_instance();

  void Swap(S2S_Ask_CheckAccount* other);

  // implements Message ----------------------------------------------

  S2S_Ask_CheckAccount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2S_Ask_CheckAccount& from);
  void MergeFrom(const S2S_Ask_CheckAccount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const void* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional int64 ret_unitindex = 2;
  inline bool has_ret_unitindex() const;
  inline void clear_ret_unitindex();
  static const int kRetUnitindexFieldNumber = 2;
  inline ::google::protobuf::int64 ret_unitindex() const;
  inline void set_ret_unitindex(::google::protobuf::int64 value);

  // optional int64 ret_intaddr = 3;
  inline bool has_ret_intaddr() const;
  inline void clear_ret_intaddr();
  static const int kRetIntaddrFieldNumber = 3;
  inline ::google::protobuf::int64 ret_intaddr() const;
  inline void set_ret_intaddr(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:S2S_Ask_CheckAccount)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_ret_unitindex();
  inline void clear_has_ret_unitindex();
  inline void set_has_ret_intaddr();
  inline void clear_has_ret_intaddr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::google::protobuf::int64 ret_unitindex_;
  ::google::protobuf::int64 ret_intaddr_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static S2S_Ask_CheckAccount* default_instance_;
};
// -------------------------------------------------------------------

class S2S_Ret_CheckAccount : public ::google::protobuf::Message {
 public:
  S2S_Ret_CheckAccount();
  virtual ~S2S_Ret_CheckAccount();

  S2S_Ret_CheckAccount(const S2S_Ret_CheckAccount& from);

  inline S2S_Ret_CheckAccount& operator=(const S2S_Ret_CheckAccount& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2S_Ret_CheckAccount& default_instance();

  void Swap(S2S_Ret_CheckAccount* other);

  // implements Message ----------------------------------------------

  S2S_Ret_CheckAccount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2S_Ret_CheckAccount& from);
  void MergeFrom(const S2S_Ret_CheckAccount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes ret_code = 1;
  inline bool has_ret_code() const;
  inline void clear_ret_code();
  static const int kRetCodeFieldNumber = 1;
  inline const ::std::string& ret_code() const;
  inline void set_ret_code(const ::std::string& value);
  inline void set_ret_code(const char* value);
  inline void set_ret_code(const void* value, size_t size);
  inline ::std::string* mutable_ret_code();
  inline ::std::string* release_ret_code();
  inline void set_allocated_ret_code(::std::string* ret_code);

  // required bytes account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const void* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // required int64 account_key = 3;
  inline bool has_account_key() const;
  inline void clear_account_key();
  static const int kAccountKeyFieldNumber = 3;
  inline ::google::protobuf::int64 account_key() const;
  inline void set_account_key(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:S2S_Ret_CheckAccount)
 private:
  inline void set_has_ret_code();
  inline void clear_has_ret_code();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_account_key();
  inline void clear_has_account_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ret_code_;
  ::std::string* account_;
  ::google::protobuf::int64 account_key_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static S2S_Ret_CheckAccount* default_instance_;
};
// -------------------------------------------------------------------

class S2S_Ask_Login : public ::google::protobuf::Message {
 public:
  S2S_Ask_Login();
  virtual ~S2S_Ask_Login();

  S2S_Ask_Login(const S2S_Ask_Login& from);

  inline S2S_Ask_Login& operator=(const S2S_Ask_Login& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2S_Ask_Login& default_instance();

  void Swap(S2S_Ask_Login* other);

  // implements Message ----------------------------------------------

  S2S_Ask_Login* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2S_Ask_Login& from);
  void MergeFrom(const S2S_Ask_Login& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const void* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // required bytes password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const void* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // required bytes sid = 3;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 3;
  inline const ::std::string& sid() const;
  inline void set_sid(const ::std::string& value);
  inline void set_sid(const char* value);
  inline void set_sid(const void* value, size_t size);
  inline ::std::string* mutable_sid();
  inline ::std::string* release_sid();
  inline void set_allocated_sid(::std::string* sid);

  // optional bytes ip = 4;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 4;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const void* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional int64 ret_unitindex = 5;
  inline bool has_ret_unitindex() const;
  inline void clear_ret_unitindex();
  static const int kRetUnitindexFieldNumber = 5;
  inline ::google::protobuf::int64 ret_unitindex() const;
  inline void set_ret_unitindex(::google::protobuf::int64 value);

  // optional int64 ret_intaddr = 6;
  inline bool has_ret_intaddr() const;
  inline void clear_ret_intaddr();
  static const int kRetIntaddrFieldNumber = 6;
  inline ::google::protobuf::int64 ret_intaddr() const;
  inline void set_ret_intaddr(::google::protobuf::int64 value);

  // optional int64 account_key = 7;
  inline bool has_account_key() const;
  inline void clear_account_key();
  static const int kAccountKeyFieldNumber = 7;
  inline ::google::protobuf::int64 account_key() const;
  inline void set_account_key(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:S2S_Ask_Login)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_ret_unitindex();
  inline void clear_has_ret_unitindex();
  inline void set_has_ret_intaddr();
  inline void clear_has_ret_intaddr();
  inline void set_has_account_key();
  inline void clear_has_account_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::std::string* password_;
  ::std::string* sid_;
  ::std::string* ip_;
  ::google::protobuf::int64 ret_unitindex_;
  ::google::protobuf::int64 ret_intaddr_;
  ::google::protobuf::int64 account_key_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static S2S_Ask_Login* default_instance_;
};
// -------------------------------------------------------------------

class S2S_Ret_Login : public ::google::protobuf::Message {
 public:
  S2S_Ret_Login();
  virtual ~S2S_Ret_Login();

  S2S_Ret_Login(const S2S_Ret_Login& from);

  inline S2S_Ret_Login& operator=(const S2S_Ret_Login& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2S_Ret_Login& default_instance();

  void Swap(S2S_Ret_Login* other);

  // implements Message ----------------------------------------------

  S2S_Ret_Login* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2S_Ret_Login& from);
  void MergeFrom(const S2S_Ret_Login& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes ret_code = 1;
  inline bool has_ret_code() const;
  inline void clear_ret_code();
  static const int kRetCodeFieldNumber = 1;
  inline const ::std::string& ret_code() const;
  inline void set_ret_code(const ::std::string& value);
  inline void set_ret_code(const char* value);
  inline void set_ret_code(const void* value, size_t size);
  inline ::std::string* mutable_ret_code();
  inline ::std::string* release_ret_code();
  inline void set_allocated_ret_code(::std::string* ret_code);

  // required bool re_login = 2;
  inline bool has_re_login() const;
  inline void clear_re_login();
  static const int kReLoginFieldNumber = 2;
  inline bool re_login() const;
  inline void set_re_login(bool value);

  // required bytes account = 3;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 3;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const void* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional int64 account_key = 4;
  inline bool has_account_key() const;
  inline void clear_account_key();
  static const int kAccountKeyFieldNumber = 4;
  inline ::google::protobuf::int64 account_key() const;
  inline void set_account_key(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:S2S_Ret_Login)
 private:
  inline void set_has_ret_code();
  inline void clear_has_ret_code();
  inline void set_has_re_login();
  inline void clear_has_re_login();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_account_key();
  inline void clear_has_account_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ret_code_;
  ::std::string* account_;
  ::google::protobuf::int64 account_key_;
  bool re_login_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static S2S_Ret_Login* default_instance_;
};
// ===================================================================


// ===================================================================

// ReadyRunSceneInfo

// required sint32 scene_id = 1;
inline bool ReadyRunSceneInfo::has_scene_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReadyRunSceneInfo::set_has_scene_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReadyRunSceneInfo::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReadyRunSceneInfo::clear_scene_id() {
  scene_id_ = 0;
  clear_has_scene_id();
}
inline ::google::protobuf::int32 ReadyRunSceneInfo::scene_id() const {
  return scene_id_;
}
inline void ReadyRunSceneInfo::set_scene_id(::google::protobuf::int32 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// required sint32 scene_index = 2;
inline bool ReadyRunSceneInfo::has_scene_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReadyRunSceneInfo::set_has_scene_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReadyRunSceneInfo::clear_has_scene_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReadyRunSceneInfo::clear_scene_index() {
  scene_index_ = 0;
  clear_has_scene_index();
}
inline ::google::protobuf::int32 ReadyRunSceneInfo::scene_index() const {
  return scene_index_;
}
inline void ReadyRunSceneInfo::set_scene_index(::google::protobuf::int32 value) {
  set_has_scene_index();
  scene_index_ = value;
}

// required sint32 map_id = 3;
inline bool ReadyRunSceneInfo::has_map_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReadyRunSceneInfo::set_has_map_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReadyRunSceneInfo::clear_has_map_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReadyRunSceneInfo::clear_map_id() {
  map_id_ = 0;
  clear_has_map_id();
}
inline ::google::protobuf::int32 ReadyRunSceneInfo::map_id() const {
  return map_id_;
}
inline void ReadyRunSceneInfo::set_map_id(::google::protobuf::int32 value) {
  set_has_map_id();
  map_id_ = value;
}

// required .E_SCENE_TYPE scene_type = 4 [default = EST_INVALID];
inline bool ReadyRunSceneInfo::has_scene_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReadyRunSceneInfo::set_has_scene_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReadyRunSceneInfo::clear_has_scene_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReadyRunSceneInfo::clear_scene_type() {
  scene_type_ = 0;
  clear_has_scene_type();
}
inline ::E_SCENE_TYPE ReadyRunSceneInfo::scene_type() const {
  return static_cast< ::E_SCENE_TYPE >(scene_type_);
}
inline void ReadyRunSceneInfo::set_scene_type(::E_SCENE_TYPE value) {
  assert(::E_SCENE_TYPE_IsValid(value));
  set_has_scene_type();
  scene_type_ = value;
}

// repeated .universal_data list_role_info = 5;
inline int ReadyRunSceneInfo::list_role_info_size() const {
  return list_role_info_.size();
}
inline void ReadyRunSceneInfo::clear_list_role_info() {
  list_role_info_.Clear();
}
inline const ::universal_data& ReadyRunSceneInfo::list_role_info(int index) const {
  return list_role_info_.Get(index);
}
inline ::universal_data* ReadyRunSceneInfo::mutable_list_role_info(int index) {
  return list_role_info_.Mutable(index);
}
inline ::universal_data* ReadyRunSceneInfo::add_list_role_info() {
  return list_role_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::universal_data >&
ReadyRunSceneInfo::list_role_info() const {
  return list_role_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::universal_data >*
ReadyRunSceneInfo::mutable_list_role_info() {
  return &list_role_info_;
}

// repeated .universal_data list_team_info = 6;
inline int ReadyRunSceneInfo::list_team_info_size() const {
  return list_team_info_.size();
}
inline void ReadyRunSceneInfo::clear_list_team_info() {
  list_team_info_.Clear();
}
inline const ::universal_data& ReadyRunSceneInfo::list_team_info(int index) const {
  return list_team_info_.Get(index);
}
inline ::universal_data* ReadyRunSceneInfo::mutable_list_team_info(int index) {
  return list_team_info_.Mutable(index);
}
inline ::universal_data* ReadyRunSceneInfo::add_list_team_info() {
  return list_team_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::universal_data >&
ReadyRunSceneInfo::list_team_info() const {
  return list_team_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::universal_data >*
ReadyRunSceneInfo::mutable_list_team_info() {
  return &list_team_info_;
}

// repeated .ServerBattleUnitInfo list_monster_info = 7;
inline int ReadyRunSceneInfo::list_monster_info_size() const {
  return list_monster_info_.size();
}
inline void ReadyRunSceneInfo::clear_list_monster_info() {
  list_monster_info_.Clear();
}
inline const ::ServerBattleUnitInfo& ReadyRunSceneInfo::list_monster_info(int index) const {
  return list_monster_info_.Get(index);
}
inline ::ServerBattleUnitInfo* ReadyRunSceneInfo::mutable_list_monster_info(int index) {
  return list_monster_info_.Mutable(index);
}
inline ::ServerBattleUnitInfo* ReadyRunSceneInfo::add_list_monster_info() {
  return list_monster_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerBattleUnitInfo >&
ReadyRunSceneInfo::list_monster_info() const {
  return list_monster_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::ServerBattleUnitInfo >*
ReadyRunSceneInfo::mutable_list_monster_info() {
  return &list_monster_info_;
}

// repeated sint64 list_login_intaddr = 8;
inline int ReadyRunSceneInfo::list_login_intaddr_size() const {
  return list_login_intaddr_.size();
}
inline void ReadyRunSceneInfo::clear_list_login_intaddr() {
  list_login_intaddr_.Clear();
}
inline ::google::protobuf::int64 ReadyRunSceneInfo::list_login_intaddr(int index) const {
  return list_login_intaddr_.Get(index);
}
inline void ReadyRunSceneInfo::set_list_login_intaddr(int index, ::google::protobuf::int64 value) {
  list_login_intaddr_.Set(index, value);
}
inline void ReadyRunSceneInfo::add_list_login_intaddr(::google::protobuf::int64 value) {
  list_login_intaddr_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ReadyRunSceneInfo::list_login_intaddr() const {
  return list_login_intaddr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ReadyRunSceneInfo::mutable_list_login_intaddr() {
  return &list_login_intaddr_;
}

// -------------------------------------------------------------------

// RunningSceneInfo

// required sint64 scene_instance_id = 1;
inline bool RunningSceneInfo::has_scene_instance_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RunningSceneInfo::set_has_scene_instance_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RunningSceneInfo::clear_has_scene_instance_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RunningSceneInfo::clear_scene_instance_id() {
  scene_instance_id_ = GOOGLE_LONGLONG(0);
  clear_has_scene_instance_id();
}
inline ::google::protobuf::int64 RunningSceneInfo::scene_instance_id() const {
  return scene_instance_id_;
}
inline void RunningSceneInfo::set_scene_instance_id(::google::protobuf::int64 value) {
  set_has_scene_instance_id();
  scene_instance_id_ = value;
}

// required sint32 scene_id = 2;
inline bool RunningSceneInfo::has_scene_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RunningSceneInfo::set_has_scene_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RunningSceneInfo::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RunningSceneInfo::clear_scene_id() {
  scene_id_ = 0;
  clear_has_scene_id();
}
inline ::google::protobuf::int32 RunningSceneInfo::scene_id() const {
  return scene_id_;
}
inline void RunningSceneInfo::set_scene_id(::google::protobuf::int32 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// required sint32 scene_index = 3;
inline bool RunningSceneInfo::has_scene_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RunningSceneInfo::set_has_scene_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RunningSceneInfo::clear_has_scene_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RunningSceneInfo::clear_scene_index() {
  scene_index_ = 0;
  clear_has_scene_index();
}
inline ::google::protobuf::int32 RunningSceneInfo::scene_index() const {
  return scene_index_;
}
inline void RunningSceneInfo::set_scene_index(::google::protobuf::int32 value) {
  set_has_scene_index();
  scene_index_ = value;
}

// required sint64 intaddr = 4;
inline bool RunningSceneInfo::has_intaddr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RunningSceneInfo::set_has_intaddr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RunningSceneInfo::clear_has_intaddr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RunningSceneInfo::clear_intaddr() {
  intaddr_ = GOOGLE_LONGLONG(0);
  clear_has_intaddr();
}
inline ::google::protobuf::int64 RunningSceneInfo::intaddr() const {
  return intaddr_;
}
inline void RunningSceneInfo::set_intaddr(::google::protobuf::int64 value) {
  set_has_intaddr();
  intaddr_ = value;
}

// required sint32 loads = 5;
inline bool RunningSceneInfo::has_loads() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RunningSceneInfo::set_has_loads() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RunningSceneInfo::clear_has_loads() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RunningSceneInfo::clear_loads() {
  loads_ = 0;
  clear_has_loads();
}
inline ::google::protobuf::int32 RunningSceneInfo::loads() const {
  return loads_;
}
inline void RunningSceneInfo::set_loads(::google::protobuf::int32 value) {
  set_has_loads();
  loads_ = value;
}

// -------------------------------------------------------------------

// S2S_Ask_CreateNewScene

// required sint32 scene_id = 1;
inline bool S2S_Ask_CreateNewScene::has_scene_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2S_Ask_CreateNewScene::set_has_scene_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2S_Ask_CreateNewScene::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2S_Ask_CreateNewScene::clear_scene_id() {
  scene_id_ = 0;
  clear_has_scene_id();
}
inline ::google::protobuf::int32 S2S_Ask_CreateNewScene::scene_id() const {
  return scene_id_;
}
inline void S2S_Ask_CreateNewScene::set_scene_id(::google::protobuf::int32 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// required sint64 scene_instance_id = 2;
inline bool S2S_Ask_CreateNewScene::has_scene_instance_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2S_Ask_CreateNewScene::set_has_scene_instance_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2S_Ask_CreateNewScene::clear_has_scene_instance_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2S_Ask_CreateNewScene::clear_scene_instance_id() {
  scene_instance_id_ = GOOGLE_LONGLONG(0);
  clear_has_scene_instance_id();
}
inline ::google::protobuf::int64 S2S_Ask_CreateNewScene::scene_instance_id() const {
  return scene_instance_id_;
}
inline void S2S_Ask_CreateNewScene::set_scene_instance_id(::google::protobuf::int64 value) {
  set_has_scene_instance_id();
  scene_instance_id_ = value;
}

// required sint64 server_instance_id = 3;
inline bool S2S_Ask_CreateNewScene::has_server_instance_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2S_Ask_CreateNewScene::set_has_server_instance_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2S_Ask_CreateNewScene::clear_has_server_instance_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2S_Ask_CreateNewScene::clear_server_instance_id() {
  server_instance_id_ = GOOGLE_LONGLONG(0);
  clear_has_server_instance_id();
}
inline ::google::protobuf::int64 S2S_Ask_CreateNewScene::server_instance_id() const {
  return server_instance_id_;
}
inline void S2S_Ask_CreateNewScene::set_server_instance_id(::google::protobuf::int64 value) {
  set_has_server_instance_id();
  server_instance_id_ = value;
}

// required .E_SCENE_TYPE scene_type = 4 [default = EST_INVALID];
inline bool S2S_Ask_CreateNewScene::has_scene_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2S_Ask_CreateNewScene::set_has_scene_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2S_Ask_CreateNewScene::clear_has_scene_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2S_Ask_CreateNewScene::clear_scene_type() {
  scene_type_ = 0;
  clear_has_scene_type();
}
inline ::E_SCENE_TYPE S2S_Ask_CreateNewScene::scene_type() const {
  return static_cast< ::E_SCENE_TYPE >(scene_type_);
}
inline void S2S_Ask_CreateNewScene::set_scene_type(::E_SCENE_TYPE value) {
  assert(::E_SCENE_TYPE_IsValid(value));
  set_has_scene_type();
  scene_type_ = value;
}

// -------------------------------------------------------------------

// S2S_Ret_CreateNewScene

// required bytes ret_code = 1;
inline bool S2S_Ret_CreateNewScene::has_ret_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2S_Ret_CreateNewScene::set_has_ret_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2S_Ret_CreateNewScene::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2S_Ret_CreateNewScene::clear_ret_code() {
  if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
    ret_code_->clear();
  }
  clear_has_ret_code();
}
inline const ::std::string& S2S_Ret_CreateNewScene::ret_code() const {
  return *ret_code_;
}
inline void S2S_Ret_CreateNewScene::set_ret_code(const ::std::string& value) {
  set_has_ret_code();
  if (ret_code_ == &::google::protobuf::internal::kEmptyString) {
    ret_code_ = new ::std::string;
  }
  ret_code_->assign(value);
}
inline void S2S_Ret_CreateNewScene::set_ret_code(const char* value) {
  set_has_ret_code();
  if (ret_code_ == &::google::protobuf::internal::kEmptyString) {
    ret_code_ = new ::std::string;
  }
  ret_code_->assign(value);
}
inline void S2S_Ret_CreateNewScene::set_ret_code(const void* value, size_t size) {
  set_has_ret_code();
  if (ret_code_ == &::google::protobuf::internal::kEmptyString) {
    ret_code_ = new ::std::string;
  }
  ret_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2S_Ret_CreateNewScene::mutable_ret_code() {
  set_has_ret_code();
  if (ret_code_ == &::google::protobuf::internal::kEmptyString) {
    ret_code_ = new ::std::string;
  }
  return ret_code_;
}
inline ::std::string* S2S_Ret_CreateNewScene::release_ret_code() {
  clear_has_ret_code();
  if (ret_code_ == &::google::protobuf::internal::kEmptyString) {
    return nullptr;
  } else {
    ::std::string* temp = ret_code_;
    ret_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2S_Ret_CreateNewScene::set_allocated_ret_code(::std::string* ret_code) {
  if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
    delete ret_code_;
  }
  if (ret_code) {
    set_has_ret_code();
    ret_code_ = ret_code;
  } else {
    clear_has_ret_code();
    ret_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required sint32 scene_id = 2;
inline bool S2S_Ret_CreateNewScene::has_scene_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2S_Ret_CreateNewScene::set_has_scene_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2S_Ret_CreateNewScene::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2S_Ret_CreateNewScene::clear_scene_id() {
  scene_id_ = 0;
  clear_has_scene_id();
}
inline ::google::protobuf::int32 S2S_Ret_CreateNewScene::scene_id() const {
  return scene_id_;
}
inline void S2S_Ret_CreateNewScene::set_scene_id(::google::protobuf::int32 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// required sint64 scene_instance_id = 3;
inline bool S2S_Ret_CreateNewScene::has_scene_instance_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2S_Ret_CreateNewScene::set_has_scene_instance_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2S_Ret_CreateNewScene::clear_has_scene_instance_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2S_Ret_CreateNewScene::clear_scene_instance_id() {
  scene_instance_id_ = GOOGLE_LONGLONG(0);
  clear_has_scene_instance_id();
}
inline ::google::protobuf::int64 S2S_Ret_CreateNewScene::scene_instance_id() const {
  return scene_instance_id_;
}
inline void S2S_Ret_CreateNewScene::set_scene_instance_id(::google::protobuf::int64 value) {
  set_has_scene_instance_id();
  scene_instance_id_ = value;
}

// required sint64 server_instance_id = 4;
inline bool S2S_Ret_CreateNewScene::has_server_instance_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2S_Ret_CreateNewScene::set_has_server_instance_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2S_Ret_CreateNewScene::clear_has_server_instance_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2S_Ret_CreateNewScene::clear_server_instance_id() {
  server_instance_id_ = GOOGLE_LONGLONG(0);
  clear_has_server_instance_id();
}
inline ::google::protobuf::int64 S2S_Ret_CreateNewScene::server_instance_id() const {
  return server_instance_id_;
}
inline void S2S_Ret_CreateNewScene::set_server_instance_id(::google::protobuf::int64 value) {
  set_has_server_instance_id();
  server_instance_id_ = value;
}

// required .E_SCENE_TYPE scene_type = 5 [default = EST_INVALID];
inline bool S2S_Ret_CreateNewScene::has_scene_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void S2S_Ret_CreateNewScene::set_has_scene_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void S2S_Ret_CreateNewScene::clear_has_scene_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void S2S_Ret_CreateNewScene::clear_scene_type() {
  scene_type_ = 0;
  clear_has_scene_type();
}
inline ::E_SCENE_TYPE S2S_Ret_CreateNewScene::scene_type() const {
  return static_cast< ::E_SCENE_TYPE >(scene_type_);
}
inline void S2S_Ret_CreateNewScene::set_scene_type(::E_SCENE_TYPE value) {
  assert(::E_SCENE_TYPE_IsValid(value));
  set_has_scene_type();
  scene_type_ = value;
}

// -------------------------------------------------------------------

// S2S_Sync_NewSceneInfo

// required sint32 scene_id = 1;
inline bool S2S_Sync_NewSceneInfo::has_scene_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2S_Sync_NewSceneInfo::set_has_scene_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2S_Sync_NewSceneInfo::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2S_Sync_NewSceneInfo::clear_scene_id() {
  scene_id_ = 0;
  clear_has_scene_id();
}
inline ::google::protobuf::int32 S2S_Sync_NewSceneInfo::scene_id() const {
  return scene_id_;
}
inline void S2S_Sync_NewSceneInfo::set_scene_id(::google::protobuf::int32 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// required sint64 scene_instance_id = 2;
inline bool S2S_Sync_NewSceneInfo::has_scene_instance_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2S_Sync_NewSceneInfo::set_has_scene_instance_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2S_Sync_NewSceneInfo::clear_has_scene_instance_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2S_Sync_NewSceneInfo::clear_scene_instance_id() {
  scene_instance_id_ = GOOGLE_LONGLONG(0);
  clear_has_scene_instance_id();
}
inline ::google::protobuf::int64 S2S_Sync_NewSceneInfo::scene_instance_id() const {
  return scene_instance_id_;
}
inline void S2S_Sync_NewSceneInfo::set_scene_instance_id(::google::protobuf::int64 value) {
  set_has_scene_instance_id();
  scene_instance_id_ = value;
}

// required sint64 server_instance_id = 3;
inline bool S2S_Sync_NewSceneInfo::has_server_instance_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2S_Sync_NewSceneInfo::set_has_server_instance_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2S_Sync_NewSceneInfo::clear_has_server_instance_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2S_Sync_NewSceneInfo::clear_server_instance_id() {
  server_instance_id_ = GOOGLE_LONGLONG(0);
  clear_has_server_instance_id();
}
inline ::google::protobuf::int64 S2S_Sync_NewSceneInfo::server_instance_id() const {
  return server_instance_id_;
}
inline void S2S_Sync_NewSceneInfo::set_server_instance_id(::google::protobuf::int64 value) {
  set_has_server_instance_id();
  server_instance_id_ = value;
}

// required .E_SCENE_TYPE scene_type = 4 [default = EST_INVALID];
inline bool S2S_Sync_NewSceneInfo::has_scene_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2S_Sync_NewSceneInfo::set_has_scene_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2S_Sync_NewSceneInfo::clear_has_scene_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2S_Sync_NewSceneInfo::clear_scene_type() {
  scene_type_ = 0;
  clear_has_scene_type();
}
inline ::E_SCENE_TYPE S2S_Sync_NewSceneInfo::scene_type() const {
  return static_cast< ::E_SCENE_TYPE >(scene_type_);
}
inline void S2S_Sync_NewSceneInfo::set_scene_type(::E_SCENE_TYPE value) {
  assert(::E_SCENE_TYPE_IsValid(value));
  set_has_scene_type();
  scene_type_ = value;
}

// -------------------------------------------------------------------

// S2S_Currency_Packet

// repeated bytes datas = 1;
inline int S2S_Currency_Packet::datas_size() const {
  return datas_.size();
}
inline void S2S_Currency_Packet::clear_datas() {
  datas_.Clear();
}
inline const ::std::string& S2S_Currency_Packet::datas(int index) const {
  return datas_.Get(index);
}
inline ::std::string* S2S_Currency_Packet::mutable_datas(int index) {
  return datas_.Mutable(index);
}
inline void S2S_Currency_Packet::set_datas(int index, const ::std::string& value) {
  datas_.Mutable(index)->assign(value);
}
inline void S2S_Currency_Packet::set_datas(int index, const char* value) {
  datas_.Mutable(index)->assign(value);
}
inline void S2S_Currency_Packet::set_datas(int index, const void* value, size_t size) {
  datas_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2S_Currency_Packet::add_datas() {
  return datas_.Add();
}
inline void S2S_Currency_Packet::add_datas(const ::std::string& value) {
  datas_.Add()->assign(value);
}
inline void S2S_Currency_Packet::add_datas(const char* value) {
  datas_.Add()->assign(value);
}
inline void S2S_Currency_Packet::add_datas(const void* value, size_t size) {
  datas_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
S2S_Currency_Packet::datas() const {
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
S2S_Currency_Packet::mutable_datas() {
  return &datas_;
}

// -------------------------------------------------------------------

// S2S_Player_Displacement

// required sint64 role_index = 1;
inline bool S2S_Player_Displacement::has_role_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2S_Player_Displacement::set_has_role_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2S_Player_Displacement::clear_has_role_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2S_Player_Displacement::clear_role_index() {
  role_index_ = GOOGLE_LONGLONG(0);
  clear_has_role_index();
}
inline ::google::protobuf::int64 S2S_Player_Displacement::role_index() const {
  return role_index_;
}
inline void S2S_Player_Displacement::set_role_index(::google::protobuf::int64 value) {
  set_has_role_index();
  role_index_ = value;
}

// required sint64 gate_intaddr = 2;
inline bool S2S_Player_Displacement::has_gate_intaddr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2S_Player_Displacement::set_has_gate_intaddr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2S_Player_Displacement::clear_has_gate_intaddr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2S_Player_Displacement::clear_gate_intaddr() {
  gate_intaddr_ = GOOGLE_LONGLONG(0);
  clear_has_gate_intaddr();
}
inline ::google::protobuf::int64 S2S_Player_Displacement::gate_intaddr() const {
  return gate_intaddr_;
}
inline void S2S_Player_Displacement::set_gate_intaddr(::google::protobuf::int64 value) {
  set_has_gate_intaddr();
  gate_intaddr_ = value;
}

// required sint64 scene_intaddr = 3;
inline bool S2S_Player_Displacement::has_scene_intaddr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2S_Player_Displacement::set_has_scene_intaddr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2S_Player_Displacement::clear_has_scene_intaddr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2S_Player_Displacement::clear_scene_intaddr() {
  scene_intaddr_ = GOOGLE_LONGLONG(0);
  clear_has_scene_intaddr();
}
inline ::google::protobuf::int64 S2S_Player_Displacement::scene_intaddr() const {
  return scene_intaddr_;
}
inline void S2S_Player_Displacement::set_scene_intaddr(::google::protobuf::int64 value) {
  set_has_scene_intaddr();
  scene_intaddr_ = value;
}

// required sint64 scene_instance_id = 4;
inline bool S2S_Player_Displacement::has_scene_instance_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2S_Player_Displacement::set_has_scene_instance_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2S_Player_Displacement::clear_has_scene_instance_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2S_Player_Displacement::clear_scene_instance_id() {
  scene_instance_id_ = GOOGLE_LONGLONG(0);
  clear_has_scene_instance_id();
}
inline ::google::protobuf::int64 S2S_Player_Displacement::scene_instance_id() const {
  return scene_instance_id_;
}
inline void S2S_Player_Displacement::set_scene_instance_id(::google::protobuf::int64 value) {
  set_has_scene_instance_id();
  scene_instance_id_ = value;
}

// required sint64 save_intaddr = 5;
inline bool S2S_Player_Displacement::has_save_intaddr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void S2S_Player_Displacement::set_has_save_intaddr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void S2S_Player_Displacement::clear_has_save_intaddr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void S2S_Player_Displacement::clear_save_intaddr() {
  save_intaddr_ = GOOGLE_LONGLONG(0);
  clear_has_save_intaddr();
}
inline ::google::protobuf::int64 S2S_Player_Displacement::save_intaddr() const {
  return save_intaddr_;
}
inline void S2S_Player_Displacement::set_save_intaddr(::google::protobuf::int64 value) {
  set_has_save_intaddr();
  save_intaddr_ = value;
}

// -------------------------------------------------------------------

// S2S_Player_Offline

// required sint64 role_index = 1;
inline bool S2S_Player_Offline::has_role_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2S_Player_Offline::set_has_role_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2S_Player_Offline::clear_has_role_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2S_Player_Offline::clear_role_index() {
  role_index_ = GOOGLE_LONGLONG(0);
  clear_has_role_index();
}
inline ::google::protobuf::int64 S2S_Player_Offline::role_index() const {
  return role_index_;
}
inline void S2S_Player_Offline::set_role_index(::google::protobuf::int64 value) {
  set_has_role_index();
  role_index_ = value;
}

// required bytes kick_reason = 2;
inline bool S2S_Player_Offline::has_kick_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2S_Player_Offline::set_has_kick_reason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2S_Player_Offline::clear_has_kick_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2S_Player_Offline::clear_kick_reason() {
  if (kick_reason_ != &::google::protobuf::internal::kEmptyString) {
    kick_reason_->clear();
  }
  clear_has_kick_reason();
}
inline const ::std::string& S2S_Player_Offline::kick_reason() const {
  return *kick_reason_;
}
inline void S2S_Player_Offline::set_kick_reason(const ::std::string& value) {
  set_has_kick_reason();
  if (kick_reason_ == &::google::protobuf::internal::kEmptyString) {
    kick_reason_ = new ::std::string;
  }
  kick_reason_->assign(value);
}
inline void S2S_Player_Offline::set_kick_reason(const char* value) {
  set_has_kick_reason();
  if (kick_reason_ == &::google::protobuf::internal::kEmptyString) {
    kick_reason_ = new ::std::string;
  }
  kick_reason_->assign(value);
}
inline void S2S_Player_Offline::set_kick_reason(const void* value, size_t size) {
  set_has_kick_reason();
  if (kick_reason_ == &::google::protobuf::internal::kEmptyString) {
    kick_reason_ = new ::std::string;
  }
  kick_reason_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2S_Player_Offline::mutable_kick_reason() {
  set_has_kick_reason();
  if (kick_reason_ == &::google::protobuf::internal::kEmptyString) {
    kick_reason_ = new ::std::string;
  }
  return kick_reason_;
}
inline ::std::string* S2S_Player_Offline::release_kick_reason() {
  clear_has_kick_reason();
  if (kick_reason_ == &::google::protobuf::internal::kEmptyString) {
    return nullptr;
  } else {
    ::std::string* temp = kick_reason_;
    kick_reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2S_Player_Offline::set_allocated_kick_reason(::std::string* kick_reason) {
  if (kick_reason_ != &::google::protobuf::internal::kEmptyString) {
    delete kick_reason_;
  }
  if (kick_reason) {
    set_has_kick_reason();
    kick_reason_ = kick_reason;
  } else {
    clear_has_kick_reason();
    kick_reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// S2S_Ask_Role_Save

// required .universal_data role_info = 1;
inline bool S2S_Ask_Role_Save::has_role_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2S_Ask_Role_Save::set_has_role_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2S_Ask_Role_Save::clear_has_role_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2S_Ask_Role_Save::clear_role_info() {
  if (role_info_ != nullptr) role_info_->::universal_data::Clear();
  clear_has_role_info();
}
inline const ::universal_data& S2S_Ask_Role_Save::role_info() const {
  return role_info_ != nullptr ? *role_info_ : *default_instance_->role_info_;
}
inline ::universal_data* S2S_Ask_Role_Save::mutable_role_info() {
  set_has_role_info();
  if (role_info_ == nullptr) role_info_ = new ::universal_data;
  return role_info_;
}
inline ::universal_data* S2S_Ask_Role_Save::release_role_info() {
  clear_has_role_info();
  ::universal_data* temp = role_info_;
  role_info_ = nullptr;
  return temp;
}
inline void S2S_Ask_Role_Save::set_allocated_role_info(::universal_data* role_info) {
  delete role_info_;
  role_info_ = role_info;
  if (role_info) {
    set_has_role_info();
  } else {
    clear_has_role_info();
  }
}

// -------------------------------------------------------------------

// S2S_Ask_Role_Leave_Login

// required sint64 role_index = 1;
inline bool S2S_Ask_Role_Leave_Login::has_role_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2S_Ask_Role_Leave_Login::set_has_role_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2S_Ask_Role_Leave_Login::clear_has_role_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2S_Ask_Role_Leave_Login::clear_role_index() {
  role_index_ = GOOGLE_LONGLONG(0);
  clear_has_role_index();
}
inline ::google::protobuf::int64 S2S_Ask_Role_Leave_Login::role_index() const {
  return role_index_;
}
inline void S2S_Ask_Role_Leave_Login::set_role_index(::google::protobuf::int64 value) {
  set_has_role_index();
  role_index_ = value;
}

// required bytes account = 2;
inline bool S2S_Ask_Role_Leave_Login::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2S_Ask_Role_Leave_Login::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2S_Ask_Role_Leave_Login::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2S_Ask_Role_Leave_Login::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& S2S_Ask_Role_Leave_Login::account() const {
  return *account_;
}
inline void S2S_Ask_Role_Leave_Login::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void S2S_Ask_Role_Leave_Login::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void S2S_Ask_Role_Leave_Login::set_account(const void* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2S_Ask_Role_Leave_Login::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* S2S_Ask_Role_Leave_Login::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return nullptr;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2S_Ask_Role_Leave_Login::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes sid = 3;
inline bool S2S_Ask_Role_Leave_Login::has_sid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2S_Ask_Role_Leave_Login::set_has_sid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2S_Ask_Role_Leave_Login::clear_has_sid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2S_Ask_Role_Leave_Login::clear_sid() {
  if (sid_ != &::google::protobuf::internal::kEmptyString) {
    sid_->clear();
  }
  clear_has_sid();
}
inline const ::std::string& S2S_Ask_Role_Leave_Login::sid() const {
  return *sid_;
}
inline void S2S_Ask_Role_Leave_Login::set_sid(const ::std::string& value) {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::kEmptyString) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void S2S_Ask_Role_Leave_Login::set_sid(const char* value) {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::kEmptyString) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void S2S_Ask_Role_Leave_Login::set_sid(const void* value, size_t size) {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::kEmptyString) {
    sid_ = new ::std::string;
  }
  sid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2S_Ask_Role_Leave_Login::mutable_sid() {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::kEmptyString) {
    sid_ = new ::std::string;
  }
  return sid_;
}
inline ::std::string* S2S_Ask_Role_Leave_Login::release_sid() {
  clear_has_sid();
  if (sid_ == &::google::protobuf::internal::kEmptyString) {
    return nullptr;
  } else {
    ::std::string* temp = sid_;
    sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2S_Ask_Role_Leave_Login::set_allocated_sid(::std::string* sid) {
  if (sid_ != &::google::protobuf::internal::kEmptyString) {
    delete sid_;
  }
  if (sid) {
    set_has_sid();
    sid_ = sid;
  } else {
    clear_has_sid();
    sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes ip = 4;
inline bool S2S_Ask_Role_Leave_Login::has_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2S_Ask_Role_Leave_Login::set_has_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2S_Ask_Role_Leave_Login::clear_has_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2S_Ask_Role_Leave_Login::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& S2S_Ask_Role_Leave_Login::ip() const {
  return *ip_;
}
inline void S2S_Ask_Role_Leave_Login::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void S2S_Ask_Role_Leave_Login::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void S2S_Ask_Role_Leave_Login::set_ip(const void* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2S_Ask_Role_Leave_Login::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* S2S_Ask_Role_Leave_Login::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return nullptr;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2S_Ask_Role_Leave_Login::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// S2S_Ask_Role_Enter_Scene

// required sint64 role_index = 1;
inline bool S2S_Ask_Role_Enter_Scene::has_role_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2S_Ask_Role_Enter_Scene::set_has_role_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2S_Ask_Role_Enter_Scene::clear_has_role_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2S_Ask_Role_Enter_Scene::clear_role_index() {
  role_index_ = GOOGLE_LONGLONG(0);
  clear_has_role_index();
}
inline ::google::protobuf::int64 S2S_Ask_Role_Enter_Scene::role_index() const {
  return role_index_;
}
inline void S2S_Ask_Role_Enter_Scene::set_role_index(::google::protobuf::int64 value) {
  set_has_role_index();
  role_index_ = value;
}

// required sint64 role_intaddr = 2;
inline bool S2S_Ask_Role_Enter_Scene::has_role_intaddr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2S_Ask_Role_Enter_Scene::set_has_role_intaddr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2S_Ask_Role_Enter_Scene::clear_has_role_intaddr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2S_Ask_Role_Enter_Scene::clear_role_intaddr() {
  role_intaddr_ = GOOGLE_LONGLONG(0);
  clear_has_role_intaddr();
}
inline ::google::protobuf::int64 S2S_Ask_Role_Enter_Scene::role_intaddr() const {
  return role_intaddr_;
}
inline void S2S_Ask_Role_Enter_Scene::set_role_intaddr(::google::protobuf::int64 value) {
  set_has_role_intaddr();
  role_intaddr_ = value;
}

// required sint64 scene_instance_id = 3;
inline bool S2S_Ask_Role_Enter_Scene::has_scene_instance_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2S_Ask_Role_Enter_Scene::set_has_scene_instance_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2S_Ask_Role_Enter_Scene::clear_has_scene_instance_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2S_Ask_Role_Enter_Scene::clear_scene_instance_id() {
  scene_instance_id_ = GOOGLE_LONGLONG(0);
  clear_has_scene_instance_id();
}
inline ::google::protobuf::int64 S2S_Ask_Role_Enter_Scene::scene_instance_id() const {
  return scene_instance_id_;
}
inline void S2S_Ask_Role_Enter_Scene::set_scene_instance_id(::google::protobuf::int64 value) {
  set_has_scene_instance_id();
  scene_instance_id_ = value;
}

// -------------------------------------------------------------------

// S2S_Ask_Role_Leave_Scene

// required sint64 role_index = 1;
inline bool S2S_Ask_Role_Leave_Scene::has_role_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2S_Ask_Role_Leave_Scene::set_has_role_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2S_Ask_Role_Leave_Scene::clear_has_role_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2S_Ask_Role_Leave_Scene::clear_role_index() {
  role_index_ = GOOGLE_LONGLONG(0);
  clear_has_role_index();
}
inline ::google::protobuf::int64 S2S_Ask_Role_Leave_Scene::role_index() const {
  return role_index_;
}
inline void S2S_Ask_Role_Leave_Scene::set_role_index(::google::protobuf::int64 value) {
  set_has_role_index();
  role_index_ = value;
}

// required sint64 role_intaddr = 2;
inline bool S2S_Ask_Role_Leave_Scene::has_role_intaddr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2S_Ask_Role_Leave_Scene::set_has_role_intaddr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2S_Ask_Role_Leave_Scene::clear_has_role_intaddr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2S_Ask_Role_Leave_Scene::clear_role_intaddr() {
  role_intaddr_ = GOOGLE_LONGLONG(0);
  clear_has_role_intaddr();
}
inline ::google::protobuf::int64 S2S_Ask_Role_Leave_Scene::role_intaddr() const {
  return role_intaddr_;
}
inline void S2S_Ask_Role_Leave_Scene::set_role_intaddr(::google::protobuf::int64 value) {
  set_has_role_intaddr();
  role_intaddr_ = value;
}

// required sint64 scene_instance_id = 3;
inline bool S2S_Ask_Role_Leave_Scene::has_scene_instance_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2S_Ask_Role_Leave_Scene::set_has_scene_instance_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2S_Ask_Role_Leave_Scene::clear_has_scene_instance_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2S_Ask_Role_Leave_Scene::clear_scene_instance_id() {
  scene_instance_id_ = GOOGLE_LONGLONG(0);
  clear_has_scene_instance_id();
}
inline ::google::protobuf::int64 S2S_Ask_Role_Leave_Scene::scene_instance_id() const {
  return scene_instance_id_;
}
inline void S2S_Ask_Role_Leave_Scene::set_scene_instance_id(::google::protobuf::int64 value) {
  set_has_scene_instance_id();
  scene_instance_id_ = value;
}

// -------------------------------------------------------------------

// S2S_Ret_Register_ClusterNode

// required sint32 node_index = 1;
inline bool S2S_Ret_Register_ClusterNode::has_node_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2S_Ret_Register_ClusterNode::set_has_node_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2S_Ret_Register_ClusterNode::clear_has_node_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2S_Ret_Register_ClusterNode::clear_node_index() {
  node_index_ = 0;
  clear_has_node_index();
}
inline ::google::protobuf::int32 S2S_Ret_Register_ClusterNode::node_index() const {
  return node_index_;
}
inline void S2S_Ret_Register_ClusterNode::set_node_index(::google::protobuf::int32 value) {
  set_has_node_index();
  node_index_ = value;
}

// required sint64 unit_next_index = 2;
inline bool S2S_Ret_Register_ClusterNode::has_unit_next_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2S_Ret_Register_ClusterNode::set_has_unit_next_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2S_Ret_Register_ClusterNode::clear_has_unit_next_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2S_Ret_Register_ClusterNode::clear_unit_next_index() {
  unit_next_index_ = GOOGLE_LONGLONG(0);
  clear_has_unit_next_index();
}
inline ::google::protobuf::int64 S2S_Ret_Register_ClusterNode::unit_next_index() const {
  return unit_next_index_;
}
inline void S2S_Ret_Register_ClusterNode::set_unit_next_index(::google::protobuf::int64 value) {
  set_has_unit_next_index();
  unit_next_index_ = value;
}

// -------------------------------------------------------------------

// S2S_Ret_Select_ClusterNode

// repeated sint64 list_intaddr = 1;
inline int S2S_Ret_Select_ClusterNode::list_intaddr_size() const {
  return list_intaddr_.size();
}
inline void S2S_Ret_Select_ClusterNode::clear_list_intaddr() {
  list_intaddr_.Clear();
}
inline ::google::protobuf::int64 S2S_Ret_Select_ClusterNode::list_intaddr(int index) const {
  return list_intaddr_.Get(index);
}
inline void S2S_Ret_Select_ClusterNode::set_list_intaddr(int index, ::google::protobuf::int64 value) {
  list_intaddr_.Set(index, value);
}
inline void S2S_Ret_Select_ClusterNode::add_list_intaddr(::google::protobuf::int64 value) {
  list_intaddr_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
S2S_Ret_Select_ClusterNode::list_intaddr() const {
  return list_intaddr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
S2S_Ret_Select_ClusterNode::mutable_list_intaddr() {
  return &list_intaddr_;
}

// repeated sint32 list_node_index = 2;
inline int S2S_Ret_Select_ClusterNode::list_node_index_size() const {
  return list_node_index_.size();
}
inline void S2S_Ret_Select_ClusterNode::clear_list_node_index() {
  list_node_index_.Clear();
}
inline ::google::protobuf::int32 S2S_Ret_Select_ClusterNode::list_node_index(int index) const {
  return list_node_index_.Get(index);
}
inline void S2S_Ret_Select_ClusterNode::set_list_node_index(int index, ::google::protobuf::int32 value) {
  list_node_index_.Set(index, value);
}
inline void S2S_Ret_Select_ClusterNode::add_list_node_index(::google::protobuf::int32 value) {
  list_node_index_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
S2S_Ret_Select_ClusterNode::list_node_index() const {
  return list_node_index_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
S2S_Ret_Select_ClusterNode::mutable_list_node_index() {
  return &list_node_index_;
}

// repeated sint64 list_pressure = 3;
inline int S2S_Ret_Select_ClusterNode::list_pressure_size() const {
  return list_pressure_.size();
}
inline void S2S_Ret_Select_ClusterNode::clear_list_pressure() {
  list_pressure_.Clear();
}
inline ::google::protobuf::int64 S2S_Ret_Select_ClusterNode::list_pressure(int index) const {
  return list_pressure_.Get(index);
}
inline void S2S_Ret_Select_ClusterNode::set_list_pressure(int index, ::google::protobuf::int64 value) {
  list_pressure_.Set(index, value);
}
inline void S2S_Ret_Select_ClusterNode::add_list_pressure(::google::protobuf::int64 value) {
  list_pressure_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
S2S_Ret_Select_ClusterNode::list_pressure() const {
  return list_pressure_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
S2S_Ret_Select_ClusterNode::mutable_list_pressure() {
  return &list_pressure_;
}

// repeated sint64 list_last_time = 4;
inline int S2S_Ret_Select_ClusterNode::list_last_time_size() const {
  return list_last_time_.size();
}
inline void S2S_Ret_Select_ClusterNode::clear_list_last_time() {
  list_last_time_.Clear();
}
inline ::google::protobuf::int64 S2S_Ret_Select_ClusterNode::list_last_time(int index) const {
  return list_last_time_.Get(index);
}
inline void S2S_Ret_Select_ClusterNode::set_list_last_time(int index, ::google::protobuf::int64 value) {
  list_last_time_.Set(index, value);
}
inline void S2S_Ret_Select_ClusterNode::add_list_last_time(::google::protobuf::int64 value) {
  list_last_time_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
S2S_Ret_Select_ClusterNode::list_last_time() const {
  return list_last_time_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
S2S_Ret_Select_ClusterNode::mutable_list_last_time() {
  return &list_last_time_;
}

// -------------------------------------------------------------------

// S2S_Ret_Update_ClusterNode

// required sint64 intaddr = 1;
inline bool S2S_Ret_Update_ClusterNode::has_intaddr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2S_Ret_Update_ClusterNode::set_has_intaddr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2S_Ret_Update_ClusterNode::clear_has_intaddr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2S_Ret_Update_ClusterNode::clear_intaddr() {
  intaddr_ = GOOGLE_LONGLONG(0);
  clear_has_intaddr();
}
inline ::google::protobuf::int64 S2S_Ret_Update_ClusterNode::intaddr() const {
  return intaddr_;
}
inline void S2S_Ret_Update_ClusterNode::set_intaddr(::google::protobuf::int64 value) {
  set_has_intaddr();
  intaddr_ = value;
}

// required sint32 node_index = 2;
inline bool S2S_Ret_Update_ClusterNode::has_node_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2S_Ret_Update_ClusterNode::set_has_node_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2S_Ret_Update_ClusterNode::clear_has_node_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2S_Ret_Update_ClusterNode::clear_node_index() {
  node_index_ = 0;
  clear_has_node_index();
}
inline ::google::protobuf::int32 S2S_Ret_Update_ClusterNode::node_index() const {
  return node_index_;
}
inline void S2S_Ret_Update_ClusterNode::set_node_index(::google::protobuf::int32 value) {
  set_has_node_index();
  node_index_ = value;
}

// -------------------------------------------------------------------

// S2S_Ask_ClusterInfo

// required sint64 node_index = 1;
inline bool S2S_Ask_ClusterInfo::has_node_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2S_Ask_ClusterInfo::set_has_node_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2S_Ask_ClusterInfo::clear_has_node_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2S_Ask_ClusterInfo::clear_node_index() {
  node_index_ = GOOGLE_LONGLONG(0);
  clear_has_node_index();
}
inline ::google::protobuf::int64 S2S_Ask_ClusterInfo::node_index() const {
  return node_index_;
}
inline void S2S_Ask_ClusterInfo::set_node_index(::google::protobuf::int64 value) {
  set_has_node_index();
  node_index_ = value;
}

// -------------------------------------------------------------------

// S2S_Ret_ClusterInfo

// repeated bytes list_addr = 1;
inline int S2S_Ret_ClusterInfo::list_addr_size() const {
  return list_addr_.size();
}
inline void S2S_Ret_ClusterInfo::clear_list_addr() {
  list_addr_.Clear();
}
inline const ::std::string& S2S_Ret_ClusterInfo::list_addr(int index) const {
  return list_addr_.Get(index);
}
inline ::std::string* S2S_Ret_ClusterInfo::mutable_list_addr(int index) {
  return list_addr_.Mutable(index);
}
inline void S2S_Ret_ClusterInfo::set_list_addr(int index, const ::std::string& value) {
  list_addr_.Mutable(index)->assign(value);
}
inline void S2S_Ret_ClusterInfo::set_list_addr(int index, const char* value) {
  list_addr_.Mutable(index)->assign(value);
}
inline void S2S_Ret_ClusterInfo::set_list_addr(int index, const void* value, size_t size) {
  list_addr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2S_Ret_ClusterInfo::add_list_addr() {
  return list_addr_.Add();
}
inline void S2S_Ret_ClusterInfo::add_list_addr(const ::std::string& value) {
  list_addr_.Add()->assign(value);
}
inline void S2S_Ret_ClusterInfo::add_list_addr(const char* value) {
  list_addr_.Add()->assign(value);
}
inline void S2S_Ret_ClusterInfo::add_list_addr(const void* value, size_t size) {
  list_addr_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
S2S_Ret_ClusterInfo::list_addr() const {
  return list_addr_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
S2S_Ret_ClusterInfo::mutable_list_addr() {
  return &list_addr_;
}

// repeated sint32 list_port = 2;
inline int S2S_Ret_ClusterInfo::list_port_size() const {
  return list_port_.size();
}
inline void S2S_Ret_ClusterInfo::clear_list_port() {
  list_port_.Clear();
}
inline ::google::protobuf::int32 S2S_Ret_ClusterInfo::list_port(int index) const {
  return list_port_.Get(index);
}
inline void S2S_Ret_ClusterInfo::set_list_port(int index, ::google::protobuf::int32 value) {
  list_port_.Set(index, value);
}
inline void S2S_Ret_ClusterInfo::add_list_port(::google::protobuf::int32 value) {
  list_port_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
S2S_Ret_ClusterInfo::list_port() const {
  return list_port_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
S2S_Ret_ClusterInfo::mutable_list_port() {
  return &list_port_;
}

// repeated sint64 list_pressure = 3;
inline int S2S_Ret_ClusterInfo::list_pressure_size() const {
  return list_pressure_.size();
}
inline void S2S_Ret_ClusterInfo::clear_list_pressure() {
  list_pressure_.Clear();
}
inline ::google::protobuf::int64 S2S_Ret_ClusterInfo::list_pressure(int index) const {
  return list_pressure_.Get(index);
}
inline void S2S_Ret_ClusterInfo::set_list_pressure(int index, ::google::protobuf::int64 value) {
  list_pressure_.Set(index, value);
}
inline void S2S_Ret_ClusterInfo::add_list_pressure(::google::protobuf::int64 value) {
  list_pressure_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
S2S_Ret_ClusterInfo::list_pressure() const {
  return list_pressure_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
S2S_Ret_ClusterInfo::mutable_list_pressure() {
  return &list_pressure_;
}

// repeated sint32 list_node_index = 4;
inline int S2S_Ret_ClusterInfo::list_node_index_size() const {
  return list_node_index_.size();
}
inline void S2S_Ret_ClusterInfo::clear_list_node_index() {
  list_node_index_.Clear();
}
inline ::google::protobuf::int32 S2S_Ret_ClusterInfo::list_node_index(int index) const {
  return list_node_index_.Get(index);
}
inline void S2S_Ret_ClusterInfo::set_list_node_index(int index, ::google::protobuf::int32 value) {
  list_node_index_.Set(index, value);
}
inline void S2S_Ret_ClusterInfo::add_list_node_index(::google::protobuf::int32 value) {
  list_node_index_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
S2S_Ret_ClusterInfo::list_node_index() const {
  return list_node_index_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
S2S_Ret_ClusterInfo::mutable_list_node_index() {
  return &list_node_index_;
}

// -------------------------------------------------------------------

// S2S_Ret_Update_OnlineUnit

// required .E_ONLINE_UNIT_RET ret = 1 [default = EOUR_OK];
inline bool S2S_Ret_Update_OnlineUnit::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2S_Ret_Update_OnlineUnit::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2S_Ret_Update_OnlineUnit::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2S_Ret_Update_OnlineUnit::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::E_ONLINE_UNIT_RET S2S_Ret_Update_OnlineUnit::ret() const {
  return static_cast< ::E_ONLINE_UNIT_RET >(ret_);
}
inline void S2S_Ret_Update_OnlineUnit::set_ret(::E_ONLINE_UNIT_RET value) {
  assert(::E_ONLINE_UNIT_RET_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// S2S_Delete_OnlineUnitInfo

// required sint32 unit_type = 1;
inline bool S2S_Delete_OnlineUnitInfo::has_unit_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2S_Delete_OnlineUnitInfo::set_has_unit_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2S_Delete_OnlineUnitInfo::clear_has_unit_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2S_Delete_OnlineUnitInfo::clear_unit_type() {
  unit_type_ = 0;
  clear_has_unit_type();
}
inline ::google::protobuf::int32 S2S_Delete_OnlineUnitInfo::unit_type() const {
  return unit_type_;
}
inline void S2S_Delete_OnlineUnitInfo::set_unit_type(::google::protobuf::int32 value) {
  set_has_unit_type();
  unit_type_ = value;
}

// required sint64 unit_index = 2;
inline bool S2S_Delete_OnlineUnitInfo::has_unit_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2S_Delete_OnlineUnitInfo::set_has_unit_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2S_Delete_OnlineUnitInfo::clear_has_unit_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2S_Delete_OnlineUnitInfo::clear_unit_index() {
  unit_index_ = GOOGLE_LONGLONG(0);
  clear_has_unit_index();
}
inline ::google::protobuf::int64 S2S_Delete_OnlineUnitInfo::unit_index() const {
  return unit_index_;
}
inline void S2S_Delete_OnlineUnitInfo::set_unit_index(::google::protobuf::int64 value) {
  set_has_unit_index();
  unit_index_ = value;
}

// -------------------------------------------------------------------

// S2S_Suspend_OnlineUnitInfo

// required sint32 unit_type = 1;
inline bool S2S_Suspend_OnlineUnitInfo::has_unit_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2S_Suspend_OnlineUnitInfo::set_has_unit_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2S_Suspend_OnlineUnitInfo::clear_has_unit_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2S_Suspend_OnlineUnitInfo::clear_unit_type() {
  unit_type_ = 0;
  clear_has_unit_type();
}
inline ::google::protobuf::int32 S2S_Suspend_OnlineUnitInfo::unit_type() const {
  return unit_type_;
}
inline void S2S_Suspend_OnlineUnitInfo::set_unit_type(::google::protobuf::int32 value) {
  set_has_unit_type();
  unit_type_ = value;
}

// required sint64 unit_index = 2;
inline bool S2S_Suspend_OnlineUnitInfo::has_unit_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2S_Suspend_OnlineUnitInfo::set_has_unit_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2S_Suspend_OnlineUnitInfo::clear_has_unit_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2S_Suspend_OnlineUnitInfo::clear_unit_index() {
  unit_index_ = GOOGLE_LONGLONG(0);
  clear_has_unit_index();
}
inline ::google::protobuf::int64 S2S_Suspend_OnlineUnitInfo::unit_index() const {
  return unit_index_;
}
inline void S2S_Suspend_OnlineUnitInfo::set_unit_index(::google::protobuf::int64 value) {
  set_has_unit_index();
  unit_index_ = value;
}

// -------------------------------------------------------------------

// S2S_Resume_OnlineUnitInfo

// required sint32 unit_type = 1;
inline bool S2S_Resume_OnlineUnitInfo::has_unit_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2S_Resume_OnlineUnitInfo::set_has_unit_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2S_Resume_OnlineUnitInfo::clear_has_unit_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2S_Resume_OnlineUnitInfo::clear_unit_type() {
  unit_type_ = 0;
  clear_has_unit_type();
}
inline ::google::protobuf::int32 S2S_Resume_OnlineUnitInfo::unit_type() const {
  return unit_type_;
}
inline void S2S_Resume_OnlineUnitInfo::set_unit_type(::google::protobuf::int32 value) {
  set_has_unit_type();
  unit_type_ = value;
}

// required sint64 unit_index = 2;
inline bool S2S_Resume_OnlineUnitInfo::has_unit_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2S_Resume_OnlineUnitInfo::set_has_unit_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2S_Resume_OnlineUnitInfo::clear_has_unit_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2S_Resume_OnlineUnitInfo::clear_unit_index() {
  unit_index_ = GOOGLE_LONGLONG(0);
  clear_has_unit_index();
}
inline ::google::protobuf::int64 S2S_Resume_OnlineUnitInfo::unit_index() const {
  return unit_index_;
}
inline void S2S_Resume_OnlineUnitInfo::set_unit_index(::google::protobuf::int64 value) {
  set_has_unit_index();
  unit_index_ = value;
}

// -------------------------------------------------------------------

// S2S_Select_OnlineUnitInfo

// required sint32 unit_type = 1;
inline bool S2S_Select_OnlineUnitInfo::has_unit_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2S_Select_OnlineUnitInfo::set_has_unit_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2S_Select_OnlineUnitInfo::clear_has_unit_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2S_Select_OnlineUnitInfo::clear_unit_type() {
  unit_type_ = 0;
  clear_has_unit_type();
}
inline ::google::protobuf::int32 S2S_Select_OnlineUnitInfo::unit_type() const {
  return unit_type_;
}
inline void S2S_Select_OnlineUnitInfo::set_unit_type(::google::protobuf::int32 value) {
  set_has_unit_type();
  unit_type_ = value;
}

// required sint64 unit_index = 2;
inline bool S2S_Select_OnlineUnitInfo::has_unit_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2S_Select_OnlineUnitInfo::set_has_unit_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2S_Select_OnlineUnitInfo::clear_has_unit_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2S_Select_OnlineUnitInfo::clear_unit_index() {
  unit_index_ = GOOGLE_LONGLONG(0);
  clear_has_unit_index();
}
inline ::google::protobuf::int64 S2S_Select_OnlineUnitInfo::unit_index() const {
  return unit_index_;
}
inline void S2S_Select_OnlineUnitInfo::set_unit_index(::google::protobuf::int64 value) {
  set_has_unit_index();
  unit_index_ = value;
}

// required bytes addr = 3;
inline bool S2S_Select_OnlineUnitInfo::has_addr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2S_Select_OnlineUnitInfo::set_has_addr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2S_Select_OnlineUnitInfo::clear_has_addr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2S_Select_OnlineUnitInfo::clear_addr() {
  if (addr_ != &::google::protobuf::internal::kEmptyString) {
    addr_->clear();
  }
  clear_has_addr();
}
inline const ::std::string& S2S_Select_OnlineUnitInfo::addr() const {
  return *addr_;
}
inline void S2S_Select_OnlineUnitInfo::set_addr(const ::std::string& value) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::kEmptyString) {
    addr_ = new ::std::string;
  }
  addr_->assign(value);
}
inline void S2S_Select_OnlineUnitInfo::set_addr(const char* value) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::kEmptyString) {
    addr_ = new ::std::string;
  }
  addr_->assign(value);
}
inline void S2S_Select_OnlineUnitInfo::set_addr(const void* value, size_t size) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::kEmptyString) {
    addr_ = new ::std::string;
  }
  addr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2S_Select_OnlineUnitInfo::mutable_addr() {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::kEmptyString) {
    addr_ = new ::std::string;
  }
  return addr_;
}
inline ::std::string* S2S_Select_OnlineUnitInfo::release_addr() {
  clear_has_addr();
  if (addr_ == &::google::protobuf::internal::kEmptyString) {
    return nullptr;
  } else {
    ::std::string* temp = addr_;
    addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2S_Select_OnlineUnitInfo::set_allocated_addr(::std::string* addr) {
  if (addr_ != &::google::protobuf::internal::kEmptyString) {
    delete addr_;
  }
  if (addr) {
    set_has_addr();
    addr_ = addr;
  } else {
    clear_has_addr();
    addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required sint32 port = 4;
inline bool S2S_Select_OnlineUnitInfo::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2S_Select_OnlineUnitInfo::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2S_Select_OnlineUnitInfo::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2S_Select_OnlineUnitInfo::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 S2S_Select_OnlineUnitInfo::port() const {
  return port_;
}
inline void S2S_Select_OnlineUnitInfo::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// S2S_Ret_Select_OnlineUnitInfo

// required sint32 unit_type = 1;
inline bool S2S_Ret_Select_OnlineUnitInfo::has_unit_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2S_Ret_Select_OnlineUnitInfo::set_has_unit_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2S_Ret_Select_OnlineUnitInfo::clear_has_unit_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2S_Ret_Select_OnlineUnitInfo::clear_unit_type() {
  unit_type_ = 0;
  clear_has_unit_type();
}
inline ::google::protobuf::int32 S2S_Ret_Select_OnlineUnitInfo::unit_type() const {
  return unit_type_;
}
inline void S2S_Ret_Select_OnlineUnitInfo::set_unit_type(::google::protobuf::int32 value) {
  set_has_unit_type();
  unit_type_ = value;
}

// required sint64 unit_index = 2;
inline bool S2S_Ret_Select_OnlineUnitInfo::has_unit_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2S_Ret_Select_OnlineUnitInfo::set_has_unit_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2S_Ret_Select_OnlineUnitInfo::clear_has_unit_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2S_Ret_Select_OnlineUnitInfo::clear_unit_index() {
  unit_index_ = GOOGLE_LONGLONG(0);
  clear_has_unit_index();
}
inline ::google::protobuf::int64 S2S_Ret_Select_OnlineUnitInfo::unit_index() const {
  return unit_index_;
}
inline void S2S_Ret_Select_OnlineUnitInfo::set_unit_index(::google::protobuf::int64 value) {
  set_has_unit_index();
  unit_index_ = value;
}

// required bytes addr = 3;
inline bool S2S_Ret_Select_OnlineUnitInfo::has_addr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2S_Ret_Select_OnlineUnitInfo::set_has_addr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2S_Ret_Select_OnlineUnitInfo::clear_has_addr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2S_Ret_Select_OnlineUnitInfo::clear_addr() {
  if (addr_ != &::google::protobuf::internal::kEmptyString) {
    addr_->clear();
  }
  clear_has_addr();
}
inline const ::std::string& S2S_Ret_Select_OnlineUnitInfo::addr() const {
  return *addr_;
}
inline void S2S_Ret_Select_OnlineUnitInfo::set_addr(const ::std::string& value) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::kEmptyString) {
    addr_ = new ::std::string;
  }
  addr_->assign(value);
}
inline void S2S_Ret_Select_OnlineUnitInfo::set_addr(const char* value) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::kEmptyString) {
    addr_ = new ::std::string;
  }
  addr_->assign(value);
}
inline void S2S_Ret_Select_OnlineUnitInfo::set_addr(const void* value, size_t size) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::kEmptyString) {
    addr_ = new ::std::string;
  }
  addr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2S_Ret_Select_OnlineUnitInfo::mutable_addr() {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::kEmptyString) {
    addr_ = new ::std::string;
  }
  return addr_;
}
inline ::std::string* S2S_Ret_Select_OnlineUnitInfo::release_addr() {
  clear_has_addr();
  if (addr_ == &::google::protobuf::internal::kEmptyString) {
    return nullptr;
  } else {
    ::std::string* temp = addr_;
    addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2S_Ret_Select_OnlineUnitInfo::set_allocated_addr(::std::string* addr) {
  if (addr_ != &::google::protobuf::internal::kEmptyString) {
    delete addr_;
  }
  if (addr) {
    set_has_addr();
    addr_ = addr;
  } else {
    clear_has_addr();
    addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required sint32 port = 4;
inline bool S2S_Ret_Select_OnlineUnitInfo::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2S_Ret_Select_OnlineUnitInfo::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2S_Ret_Select_OnlineUnitInfo::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2S_Ret_Select_OnlineUnitInfo::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 S2S_Ret_Select_OnlineUnitInfo::port() const {
  return port_;
}
inline void S2S_Ret_Select_OnlineUnitInfo::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// S2S_RetReadyChangeScene

// required bytes ret_code = 1;
inline bool S2S_RetReadyChangeScene::has_ret_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2S_RetReadyChangeScene::set_has_ret_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2S_RetReadyChangeScene::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2S_RetReadyChangeScene::clear_ret_code() {
  if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
    ret_code_->clear();
  }
  clear_has_ret_code();
}
inline const ::std::string& S2S_RetReadyChangeScene::ret_code() const {
  return *ret_code_;
}
inline void S2S_RetReadyChangeScene::set_ret_code(const ::std::string& value) {
  set_has_ret_code();
  if (ret_code_ == &::google::protobuf::internal::kEmptyString) {
    ret_code_ = new ::std::string;
  }
  ret_code_->assign(value);
}
inline void S2S_RetReadyChangeScene::set_ret_code(const char* value) {
  set_has_ret_code();
  if (ret_code_ == &::google::protobuf::internal::kEmptyString) {
    ret_code_ = new ::std::string;
  }
  ret_code_->assign(value);
}
inline void S2S_RetReadyChangeScene::set_ret_code(const void* value, size_t size) {
  set_has_ret_code();
  if (ret_code_ == &::google::protobuf::internal::kEmptyString) {
    ret_code_ = new ::std::string;
  }
  ret_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2S_RetReadyChangeScene::mutable_ret_code() {
  set_has_ret_code();
  if (ret_code_ == &::google::protobuf::internal::kEmptyString) {
    ret_code_ = new ::std::string;
  }
  return ret_code_;
}
inline ::std::string* S2S_RetReadyChangeScene::release_ret_code() {
  clear_has_ret_code();
  if (ret_code_ == &::google::protobuf::internal::kEmptyString) {
    return nullptr;
  } else {
    ::std::string* temp = ret_code_;
    ret_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2S_RetReadyChangeScene::set_allocated_ret_code(::std::string* ret_code) {
  if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
    delete ret_code_;
  }
  if (ret_code) {
    set_has_ret_code();
    ret_code_ = ret_code;
  } else {
    clear_has_ret_code();
    ret_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required sint64 role_index = 2;
inline bool S2S_RetReadyChangeScene::has_role_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2S_RetReadyChangeScene::set_has_role_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2S_RetReadyChangeScene::clear_has_role_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2S_RetReadyChangeScene::clear_role_index() {
  role_index_ = GOOGLE_LONGLONG(0);
  clear_has_role_index();
}
inline ::google::protobuf::int64 S2S_RetReadyChangeScene::role_index() const {
  return role_index_;
}
inline void S2S_RetReadyChangeScene::set_role_index(::google::protobuf::int64 value) {
  set_has_role_index();
  role_index_ = value;
}

// required sint32 scene_id = 5;
inline bool S2S_RetReadyChangeScene::has_scene_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2S_RetReadyChangeScene::set_has_scene_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2S_RetReadyChangeScene::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2S_RetReadyChangeScene::clear_scene_id() {
  scene_id_ = 0;
  clear_has_scene_id();
}
inline ::google::protobuf::int32 S2S_RetReadyChangeScene::scene_id() const {
  return scene_id_;
}
inline void S2S_RetReadyChangeScene::set_scene_id(::google::protobuf::int32 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// required sint64 scene_instance_id = 6;
inline bool S2S_RetReadyChangeScene::has_scene_instance_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2S_RetReadyChangeScene::set_has_scene_instance_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2S_RetReadyChangeScene::clear_has_scene_instance_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2S_RetReadyChangeScene::clear_scene_instance_id() {
  scene_instance_id_ = GOOGLE_LONGLONG(0);
  clear_has_scene_instance_id();
}
inline ::google::protobuf::int64 S2S_RetReadyChangeScene::scene_instance_id() const {
  return scene_instance_id_;
}
inline void S2S_RetReadyChangeScene::set_scene_instance_id(::google::protobuf::int64 value) {
  set_has_scene_instance_id();
  scene_instance_id_ = value;
}

// required sint64 login_intaddr = 7;
inline bool S2S_RetReadyChangeScene::has_login_intaddr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void S2S_RetReadyChangeScene::set_has_login_intaddr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void S2S_RetReadyChangeScene::clear_has_login_intaddr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void S2S_RetReadyChangeScene::clear_login_intaddr() {
  login_intaddr_ = GOOGLE_LONGLONG(0);
  clear_has_login_intaddr();
}
inline ::google::protobuf::int64 S2S_RetReadyChangeScene::login_intaddr() const {
  return login_intaddr_;
}
inline void S2S_RetReadyChangeScene::set_login_intaddr(::google::protobuf::int64 value) {
  set_has_login_intaddr();
  login_intaddr_ = value;
}

// -------------------------------------------------------------------

// S2S_Request_Add_Friend

// required sint64 role_index = 1;
inline bool S2S_Request_Add_Friend::has_role_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2S_Request_Add_Friend::set_has_role_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2S_Request_Add_Friend::clear_has_role_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2S_Request_Add_Friend::clear_role_index() {
  role_index_ = GOOGLE_LONGLONG(0);
  clear_has_role_index();
}
inline ::google::protobuf::int64 S2S_Request_Add_Friend::role_index() const {
  return role_index_;
}
inline void S2S_Request_Add_Friend::set_role_index(::google::protobuf::int64 value) {
  set_has_role_index();
  role_index_ = value;
}

// required sint64 src_role_index = 2;
inline bool S2S_Request_Add_Friend::has_src_role_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2S_Request_Add_Friend::set_has_src_role_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2S_Request_Add_Friend::clear_has_src_role_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2S_Request_Add_Friend::clear_src_role_index() {
  src_role_index_ = GOOGLE_LONGLONG(0);
  clear_has_src_role_index();
}
inline ::google::protobuf::int64 S2S_Request_Add_Friend::src_role_index() const {
  return src_role_index_;
}
inline void S2S_Request_Add_Friend::set_src_role_index(::google::protobuf::int64 value) {
  set_has_src_role_index();
  src_role_index_ = value;
}

// required bool is_refuse = 3;
inline bool S2S_Request_Add_Friend::has_is_refuse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2S_Request_Add_Friend::set_has_is_refuse() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2S_Request_Add_Friend::clear_has_is_refuse() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2S_Request_Add_Friend::clear_is_refuse() {
  is_refuse_ = false;
  clear_has_is_refuse();
}
inline bool S2S_Request_Add_Friend::is_refuse() const {
  return is_refuse_;
}
inline void S2S_Request_Add_Friend::set_is_refuse(bool value) {
  set_has_is_refuse();
  is_refuse_ = value;
}

// -------------------------------------------------------------------

// S2S_Friends_List

// repeated sint64 list_friend_role_index = 1;
inline int S2S_Friends_List::list_friend_role_index_size() const {
  return list_friend_role_index_.size();
}
inline void S2S_Friends_List::clear_list_friend_role_index() {
  list_friend_role_index_.Clear();
}
inline ::google::protobuf::int64 S2S_Friends_List::list_friend_role_index(int index) const {
  return list_friend_role_index_.Get(index);
}
inline void S2S_Friends_List::set_list_friend_role_index(int index, ::google::protobuf::int64 value) {
  list_friend_role_index_.Set(index, value);
}
inline void S2S_Friends_List::add_list_friend_role_index(::google::protobuf::int64 value) {
  list_friend_role_index_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
S2S_Friends_List::list_friend_role_index() const {
  return list_friend_role_index_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
S2S_Friends_List::mutable_list_friend_role_index() {
  return &list_friend_role_index_;
}

// -------------------------------------------------------------------

// S2S_AskCheckPlayerInLogin

// required sint64 role_index = 1;
inline bool S2S_AskCheckPlayerInLogin::has_role_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2S_AskCheckPlayerInLogin::set_has_role_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2S_AskCheckPlayerInLogin::clear_has_role_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2S_AskCheckPlayerInLogin::clear_role_index() {
  role_index_ = GOOGLE_LONGLONG(0);
  clear_has_role_index();
}
inline ::google::protobuf::int64 S2S_AskCheckPlayerInLogin::role_index() const {
  return role_index_;
}
inline void S2S_AskCheckPlayerInLogin::set_role_index(::google::protobuf::int64 value) {
  set_has_role_index();
  role_index_ = value;
}

// required sint64 src_temp_unit_index = 2;
inline bool S2S_AskCheckPlayerInLogin::has_src_temp_unit_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2S_AskCheckPlayerInLogin::set_has_src_temp_unit_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2S_AskCheckPlayerInLogin::clear_has_src_temp_unit_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2S_AskCheckPlayerInLogin::clear_src_temp_unit_index() {
  src_temp_unit_index_ = GOOGLE_LONGLONG(0);
  clear_has_src_temp_unit_index();
}
inline ::google::protobuf::int64 S2S_AskCheckPlayerInLogin::src_temp_unit_index() const {
  return src_temp_unit_index_;
}
inline void S2S_AskCheckPlayerInLogin::set_src_temp_unit_index(::google::protobuf::int64 value) {
  set_has_src_temp_unit_index();
  src_temp_unit_index_ = value;
}

// required sint64 src_intaddr = 3;
inline bool S2S_AskCheckPlayerInLogin::has_src_intaddr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2S_AskCheckPlayerInLogin::set_has_src_intaddr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2S_AskCheckPlayerInLogin::clear_has_src_intaddr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2S_AskCheckPlayerInLogin::clear_src_intaddr() {
  src_intaddr_ = GOOGLE_LONGLONG(0);
  clear_has_src_intaddr();
}
inline ::google::protobuf::int64 S2S_AskCheckPlayerInLogin::src_intaddr() const {
  return src_intaddr_;
}
inline void S2S_AskCheckPlayerInLogin::set_src_intaddr(::google::protobuf::int64 value) {
  set_has_src_intaddr();
  src_intaddr_ = value;
}

// required sint64 intaddr = 4;
inline bool S2S_AskCheckPlayerInLogin::has_intaddr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2S_AskCheckPlayerInLogin::set_has_intaddr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2S_AskCheckPlayerInLogin::clear_has_intaddr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2S_AskCheckPlayerInLogin::clear_intaddr() {
  intaddr_ = GOOGLE_LONGLONG(0);
  clear_has_intaddr();
}
inline ::google::protobuf::int64 S2S_AskCheckPlayerInLogin::intaddr() const {
  return intaddr_;
}
inline void S2S_AskCheckPlayerInLogin::set_intaddr(::google::protobuf::int64 value) {
  set_has_intaddr();
  intaddr_ = value;
}

// -------------------------------------------------------------------

// S2S_RetCheckPlayerInLogin

// required sint64 role_index = 1;
inline bool S2S_RetCheckPlayerInLogin::has_role_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2S_RetCheckPlayerInLogin::set_has_role_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2S_RetCheckPlayerInLogin::clear_has_role_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2S_RetCheckPlayerInLogin::clear_role_index() {
  role_index_ = GOOGLE_LONGLONG(0);
  clear_has_role_index();
}
inline ::google::protobuf::int64 S2S_RetCheckPlayerInLogin::role_index() const {
  return role_index_;
}
inline void S2S_RetCheckPlayerInLogin::set_role_index(::google::protobuf::int64 value) {
  set_has_role_index();
  role_index_ = value;
}

// required bool in_login = 2;
inline bool S2S_RetCheckPlayerInLogin::has_in_login() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2S_RetCheckPlayerInLogin::set_has_in_login() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2S_RetCheckPlayerInLogin::clear_has_in_login() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2S_RetCheckPlayerInLogin::clear_in_login() {
  in_login_ = false;
  clear_has_in_login();
}
inline bool S2S_RetCheckPlayerInLogin::in_login() const {
  return in_login_;
}
inline void S2S_RetCheckPlayerInLogin::set_in_login(bool value) {
  set_has_in_login();
  in_login_ = value;
}

// required sint64 intaddr = 3;
inline bool S2S_RetCheckPlayerInLogin::has_intaddr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2S_RetCheckPlayerInLogin::set_has_intaddr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2S_RetCheckPlayerInLogin::clear_has_intaddr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2S_RetCheckPlayerInLogin::clear_intaddr() {
  intaddr_ = GOOGLE_LONGLONG(0);
  clear_has_intaddr();
}
inline ::google::protobuf::int64 S2S_RetCheckPlayerInLogin::intaddr() const {
  return intaddr_;
}
inline void S2S_RetCheckPlayerInLogin::set_intaddr(::google::protobuf::int64 value) {
  set_has_intaddr();
  intaddr_ = value;
}

// -------------------------------------------------------------------

// S2S_AskEnterScene

// required sint32 scene_id = 1;
inline bool S2S_AskEnterScene::has_scene_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2S_AskEnterScene::set_has_scene_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2S_AskEnterScene::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2S_AskEnterScene::clear_scene_id() {
  scene_id_ = 0;
  clear_has_scene_id();
}
inline ::google::protobuf::int32 S2S_AskEnterScene::scene_id() const {
  return scene_id_;
}
inline void S2S_AskEnterScene::set_scene_id(::google::protobuf::int32 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// required sint32 map_id = 2;
inline bool S2S_AskEnterScene::has_map_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2S_AskEnterScene::set_has_map_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2S_AskEnterScene::clear_has_map_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2S_AskEnterScene::clear_map_id() {
  map_id_ = 0;
  clear_has_map_id();
}
inline ::google::protobuf::int32 S2S_AskEnterScene::map_id() const {
  return map_id_;
}
inline void S2S_AskEnterScene::set_map_id(::google::protobuf::int32 value) {
  set_has_map_id();
  map_id_ = value;
}

// optional .universal_data team_info = 3;
inline bool S2S_AskEnterScene::has_team_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2S_AskEnterScene::set_has_team_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2S_AskEnterScene::clear_has_team_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2S_AskEnterScene::clear_team_info() {
  if (team_info_ != nullptr) team_info_->::universal_data::Clear();
  clear_has_team_info();
}
inline const ::universal_data& S2S_AskEnterScene::team_info() const {
  return team_info_ != nullptr ? *team_info_ : *default_instance_->team_info_;
}
inline ::universal_data* S2S_AskEnterScene::mutable_team_info() {
  set_has_team_info();
  if (team_info_ == nullptr) team_info_ = new ::universal_data;
  return team_info_;
}
inline ::universal_data* S2S_AskEnterScene::release_team_info() {
  clear_has_team_info();
  ::universal_data* temp = team_info_;
  team_info_ = nullptr;
  return temp;
}
inline void S2S_AskEnterScene::set_allocated_team_info(::universal_data* team_info) {
  delete team_info_;
  team_info_ = team_info;
  if (team_info) {
    set_has_team_info();
  } else {
    clear_has_team_info();
  }
}

// repeated .universal_data list_role_info = 4;
inline int S2S_AskEnterScene::list_role_info_size() const {
  return list_role_info_.size();
}
inline void S2S_AskEnterScene::clear_list_role_info() {
  list_role_info_.Clear();
}
inline const ::universal_data& S2S_AskEnterScene::list_role_info(int index) const {
  return list_role_info_.Get(index);
}
inline ::universal_data* S2S_AskEnterScene::mutable_list_role_info(int index) {
  return list_role_info_.Mutable(index);
}
inline ::universal_data* S2S_AskEnterScene::add_list_role_info() {
  return list_role_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::universal_data >&
S2S_AskEnterScene::list_role_info() const {
  return list_role_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::universal_data >*
S2S_AskEnterScene::mutable_list_role_info() {
  return &list_role_info_;
}

// repeated .ServerBattleUnitInfo list_monster_info = 5;
inline int S2S_AskEnterScene::list_monster_info_size() const {
  return list_monster_info_.size();
}
inline void S2S_AskEnterScene::clear_list_monster_info() {
  list_monster_info_.Clear();
}
inline const ::ServerBattleUnitInfo& S2S_AskEnterScene::list_monster_info(int index) const {
  return list_monster_info_.Get(index);
}
inline ::ServerBattleUnitInfo* S2S_AskEnterScene::mutable_list_monster_info(int index) {
  return list_monster_info_.Mutable(index);
}
inline ::ServerBattleUnitInfo* S2S_AskEnterScene::add_list_monster_info() {
  return list_monster_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerBattleUnitInfo >&
S2S_AskEnterScene::list_monster_info() const {
  return list_monster_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::ServerBattleUnitInfo >*
S2S_AskEnterScene::mutable_list_monster_info() {
  return &list_monster_info_;
}

// repeated sint64 list_login_intaddr = 6;
inline int S2S_AskEnterScene::list_login_intaddr_size() const {
  return list_login_intaddr_.size();
}
inline void S2S_AskEnterScene::clear_list_login_intaddr() {
  list_login_intaddr_.Clear();
}
inline ::google::protobuf::int64 S2S_AskEnterScene::list_login_intaddr(int index) const {
  return list_login_intaddr_.Get(index);
}
inline void S2S_AskEnterScene::set_list_login_intaddr(int index, ::google::protobuf::int64 value) {
  list_login_intaddr_.Set(index, value);
}
inline void S2S_AskEnterScene::add_list_login_intaddr(::google::protobuf::int64 value) {
  list_login_intaddr_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
S2S_AskEnterScene::list_login_intaddr() const {
  return list_login_intaddr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
S2S_AskEnterScene::mutable_list_login_intaddr() {
  return &list_login_intaddr_;
}

// -------------------------------------------------------------------

// S2S_RetEnterScene

// required sint32 scene_id = 1;
inline bool S2S_RetEnterScene::has_scene_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2S_RetEnterScene::set_has_scene_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2S_RetEnterScene::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2S_RetEnterScene::clear_scene_id() {
  scene_id_ = 0;
  clear_has_scene_id();
}
inline ::google::protobuf::int32 S2S_RetEnterScene::scene_id() const {
  return scene_id_;
}
inline void S2S_RetEnterScene::set_scene_id(::google::protobuf::int32 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// required sint64 role_index = 2;
inline bool S2S_RetEnterScene::has_role_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2S_RetEnterScene::set_has_role_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2S_RetEnterScene::clear_has_role_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2S_RetEnterScene::clear_role_index() {
  role_index_ = GOOGLE_LONGLONG(0);
  clear_has_role_index();
}
inline ::google::protobuf::int64 S2S_RetEnterScene::role_index() const {
  return role_index_;
}
inline void S2S_RetEnterScene::set_role_index(::google::protobuf::int64 value) {
  set_has_role_index();
  role_index_ = value;
}

// required sint64 login_intaddr = 3;
inline bool S2S_RetEnterScene::has_login_intaddr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2S_RetEnterScene::set_has_login_intaddr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2S_RetEnterScene::clear_has_login_intaddr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2S_RetEnterScene::clear_login_intaddr() {
  login_intaddr_ = GOOGLE_LONGLONG(0);
  clear_has_login_intaddr();
}
inline ::google::protobuf::int64 S2S_RetEnterScene::login_intaddr() const {
  return login_intaddr_;
}
inline void S2S_RetEnterScene::set_login_intaddr(::google::protobuf::int64 value) {
  set_has_login_intaddr();
  login_intaddr_ = value;
}

// required bool is_ok = 4;
inline bool S2S_RetEnterScene::has_is_ok() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2S_RetEnterScene::set_has_is_ok() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2S_RetEnterScene::clear_has_is_ok() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2S_RetEnterScene::clear_is_ok() {
  is_ok_ = false;
  clear_has_is_ok();
}
inline bool S2S_RetEnterScene::is_ok() const {
  return is_ok_;
}
inline void S2S_RetEnterScene::set_is_ok(bool value) {
  set_has_is_ok();
  is_ok_ = value;
}

// -------------------------------------------------------------------

// S2S_ReadyEnterScene

// required sint32 scene_id = 1;
inline bool S2S_ReadyEnterScene::has_scene_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2S_ReadyEnterScene::set_has_scene_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2S_ReadyEnterScene::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2S_ReadyEnterScene::clear_scene_id() {
  scene_id_ = 0;
  clear_has_scene_id();
}
inline ::google::protobuf::int32 S2S_ReadyEnterScene::scene_id() const {
  return scene_id_;
}
inline void S2S_ReadyEnterScene::set_scene_id(::google::protobuf::int32 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// required sint64 scene_instance_id = 2;
inline bool S2S_ReadyEnterScene::has_scene_instance_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2S_ReadyEnterScene::set_has_scene_instance_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2S_ReadyEnterScene::clear_has_scene_instance_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2S_ReadyEnterScene::clear_scene_instance_id() {
  scene_instance_id_ = GOOGLE_LONGLONG(0);
  clear_has_scene_instance_id();
}
inline ::google::protobuf::int64 S2S_ReadyEnterScene::scene_instance_id() const {
  return scene_instance_id_;
}
inline void S2S_ReadyEnterScene::set_scene_instance_id(::google::protobuf::int64 value) {
  set_has_scene_instance_id();
  scene_instance_id_ = value;
}

// required sint64 role_index = 3;
inline bool S2S_ReadyEnterScene::has_role_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2S_ReadyEnterScene::set_has_role_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2S_ReadyEnterScene::clear_has_role_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2S_ReadyEnterScene::clear_role_index() {
  role_index_ = GOOGLE_LONGLONG(0);
  clear_has_role_index();
}
inline ::google::protobuf::int64 S2S_ReadyEnterScene::role_index() const {
  return role_index_;
}
inline void S2S_ReadyEnterScene::set_role_index(::google::protobuf::int64 value) {
  set_has_role_index();
  role_index_ = value;
}

// required bytes account = 4;
inline bool S2S_ReadyEnterScene::has_account() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2S_ReadyEnterScene::set_has_account() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2S_ReadyEnterScene::clear_has_account() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2S_ReadyEnterScene::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& S2S_ReadyEnterScene::account() const {
  return *account_;
}
inline void S2S_ReadyEnterScene::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void S2S_ReadyEnterScene::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void S2S_ReadyEnterScene::set_account(const void* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2S_ReadyEnterScene::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* S2S_ReadyEnterScene::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return nullptr;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2S_ReadyEnterScene::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes nick_name = 5;
inline bool S2S_ReadyEnterScene::has_nick_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void S2S_ReadyEnterScene::set_has_nick_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void S2S_ReadyEnterScene::clear_has_nick_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void S2S_ReadyEnterScene::clear_nick_name() {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    nick_name_->clear();
  }
  clear_has_nick_name();
}
inline const ::std::string& S2S_ReadyEnterScene::nick_name() const {
  return *nick_name_;
}
inline void S2S_ReadyEnterScene::set_nick_name(const ::std::string& value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
}
inline void S2S_ReadyEnterScene::set_nick_name(const char* value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
}
inline void S2S_ReadyEnterScene::set_nick_name(const void* value, size_t size) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2S_ReadyEnterScene::mutable_nick_name() {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  return nick_name_;
}
inline ::std::string* S2S_ReadyEnterScene::release_nick_name() {
  clear_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    return nullptr;
  } else {
    ::std::string* temp = nick_name_;
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2S_ReadyEnterScene::set_allocated_nick_name(::std::string* nick_name) {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (nick_name) {
    set_has_nick_name();
    nick_name_ = nick_name;
  } else {
    clear_has_nick_name();
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .universal_data role_info = 6;
inline bool S2S_ReadyEnterScene::has_role_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void S2S_ReadyEnterScene::set_has_role_info() {
  _has_bits_[0] |= 0x00000020u;
}
inline void S2S_ReadyEnterScene::clear_has_role_info() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void S2S_ReadyEnterScene::clear_role_info() {
  if (role_info_ != nullptr) role_info_->::universal_data::Clear();
  clear_has_role_info();
}
inline const ::universal_data& S2S_ReadyEnterScene::role_info() const {
  return role_info_ != nullptr ? *role_info_ : *default_instance_->role_info_;
}
inline ::universal_data* S2S_ReadyEnterScene::mutable_role_info() {
  set_has_role_info();
  if (role_info_ == nullptr) role_info_ = new ::universal_data;
  return role_info_;
}
inline ::universal_data* S2S_ReadyEnterScene::release_role_info() {
  clear_has_role_info();
  ::universal_data* temp = role_info_;
  role_info_ = nullptr;
  return temp;
}
inline void S2S_ReadyEnterScene::set_allocated_role_info(::universal_data* role_info) {
  delete role_info_;
  role_info_ = role_info;
  if (role_info) {
    set_has_role_info();
  } else {
    clear_has_role_info();
  }
}

// required sint64 login_intaddr = 7;
inline bool S2S_ReadyEnterScene::has_login_intaddr() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void S2S_ReadyEnterScene::set_has_login_intaddr() {
  _has_bits_[0] |= 0x00000040u;
}
inline void S2S_ReadyEnterScene::clear_has_login_intaddr() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void S2S_ReadyEnterScene::clear_login_intaddr() {
  login_intaddr_ = GOOGLE_LONGLONG(0);
  clear_has_login_intaddr();
}
inline ::google::protobuf::int64 S2S_ReadyEnterScene::login_intaddr() const {
  return login_intaddr_;
}
inline void S2S_ReadyEnterScene::set_login_intaddr(::google::protobuf::int64 value) {
  set_has_login_intaddr();
  login_intaddr_ = value;
}

// -------------------------------------------------------------------

// S2S_TeamReadyEnterScene

// required sint32 scene_id = 1;
inline bool S2S_TeamReadyEnterScene::has_scene_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2S_TeamReadyEnterScene::set_has_scene_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2S_TeamReadyEnterScene::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2S_TeamReadyEnterScene::clear_scene_id() {
  scene_id_ = 0;
  clear_has_scene_id();
}
inline ::google::protobuf::int32 S2S_TeamReadyEnterScene::scene_id() const {
  return scene_id_;
}
inline void S2S_TeamReadyEnterScene::set_scene_id(::google::protobuf::int32 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// required sint64 scene_instance_id = 2;
inline bool S2S_TeamReadyEnterScene::has_scene_instance_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2S_TeamReadyEnterScene::set_has_scene_instance_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2S_TeamReadyEnterScene::clear_has_scene_instance_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2S_TeamReadyEnterScene::clear_scene_instance_id() {
  scene_instance_id_ = GOOGLE_LONGLONG(0);
  clear_has_scene_instance_id();
}
inline ::google::protobuf::int64 S2S_TeamReadyEnterScene::scene_instance_id() const {
  return scene_instance_id_;
}
inline void S2S_TeamReadyEnterScene::set_scene_instance_id(::google::protobuf::int64 value) {
  set_has_scene_instance_id();
  scene_instance_id_ = value;
}

// required .universal_data team_info = 3;
inline bool S2S_TeamReadyEnterScene::has_team_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2S_TeamReadyEnterScene::set_has_team_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2S_TeamReadyEnterScene::clear_has_team_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2S_TeamReadyEnterScene::clear_team_info() {
  if (team_info_ != nullptr) team_info_->::universal_data::Clear();
  clear_has_team_info();
}
inline const ::universal_data& S2S_TeamReadyEnterScene::team_info() const {
  return team_info_ != nullptr ? *team_info_ : *default_instance_->team_info_;
}
inline ::universal_data* S2S_TeamReadyEnterScene::mutable_team_info() {
  set_has_team_info();
  if (team_info_ == nullptr) team_info_ = new ::universal_data;
  return team_info_;
}
inline ::universal_data* S2S_TeamReadyEnterScene::release_team_info() {
  clear_has_team_info();
  ::universal_data* temp = team_info_;
  team_info_ = nullptr;
  return temp;
}
inline void S2S_TeamReadyEnterScene::set_allocated_team_info(::universal_data* team_info) {
  delete team_info_;
  team_info_ = team_info;
  if (team_info) {
    set_has_team_info();
  } else {
    clear_has_team_info();
  }
}

// repeated .universal_data list_role_info = 4;
inline int S2S_TeamReadyEnterScene::list_role_info_size() const {
  return list_role_info_.size();
}
inline void S2S_TeamReadyEnterScene::clear_list_role_info() {
  list_role_info_.Clear();
}
inline const ::universal_data& S2S_TeamReadyEnterScene::list_role_info(int index) const {
  return list_role_info_.Get(index);
}
inline ::universal_data* S2S_TeamReadyEnterScene::mutable_list_role_info(int index) {
  return list_role_info_.Mutable(index);
}
inline ::universal_data* S2S_TeamReadyEnterScene::add_list_role_info() {
  return list_role_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::universal_data >&
S2S_TeamReadyEnterScene::list_role_info() const {
  return list_role_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::universal_data >*
S2S_TeamReadyEnterScene::mutable_list_role_info() {
  return &list_role_info_;
}

// repeated .ServerBattleUnitInfo list_monster_info = 5;
inline int S2S_TeamReadyEnterScene::list_monster_info_size() const {
  return list_monster_info_.size();
}
inline void S2S_TeamReadyEnterScene::clear_list_monster_info() {
  list_monster_info_.Clear();
}
inline const ::ServerBattleUnitInfo& S2S_TeamReadyEnterScene::list_monster_info(int index) const {
  return list_monster_info_.Get(index);
}
inline ::ServerBattleUnitInfo* S2S_TeamReadyEnterScene::mutable_list_monster_info(int index) {
  return list_monster_info_.Mutable(index);
}
inline ::ServerBattleUnitInfo* S2S_TeamReadyEnterScene::add_list_monster_info() {
  return list_monster_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerBattleUnitInfo >&
S2S_TeamReadyEnterScene::list_monster_info() const {
  return list_monster_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::ServerBattleUnitInfo >*
S2S_TeamReadyEnterScene::mutable_list_monster_info() {
  return &list_monster_info_;
}

// repeated sint64 list_login_intaddr = 6;
inline int S2S_TeamReadyEnterScene::list_login_intaddr_size() const {
  return list_login_intaddr_.size();
}
inline void S2S_TeamReadyEnterScene::clear_list_login_intaddr() {
  list_login_intaddr_.Clear();
}
inline ::google::protobuf::int64 S2S_TeamReadyEnterScene::list_login_intaddr(int index) const {
  return list_login_intaddr_.Get(index);
}
inline void S2S_TeamReadyEnterScene::set_list_login_intaddr(int index, ::google::protobuf::int64 value) {
  list_login_intaddr_.Set(index, value);
}
inline void S2S_TeamReadyEnterScene::add_list_login_intaddr(::google::protobuf::int64 value) {
  list_login_intaddr_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
S2S_TeamReadyEnterScene::list_login_intaddr() const {
  return list_login_intaddr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
S2S_TeamReadyEnterScene::mutable_list_login_intaddr() {
  return &list_login_intaddr_;
}

// -------------------------------------------------------------------

// S2S_BroadcastHaveNewScene

// required sint64 center_scene_manager_intaddr = 1;
inline bool S2S_BroadcastHaveNewScene::has_center_scene_manager_intaddr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2S_BroadcastHaveNewScene::set_has_center_scene_manager_intaddr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2S_BroadcastHaveNewScene::clear_has_center_scene_manager_intaddr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2S_BroadcastHaveNewScene::clear_center_scene_manager_intaddr() {
  center_scene_manager_intaddr_ = GOOGLE_LONGLONG(0);
  clear_has_center_scene_manager_intaddr();
}
inline ::google::protobuf::int64 S2S_BroadcastHaveNewScene::center_scene_manager_intaddr() const {
  return center_scene_manager_intaddr_;
}
inline void S2S_BroadcastHaveNewScene::set_center_scene_manager_intaddr(::google::protobuf::int64 value) {
  set_has_center_scene_manager_intaddr();
  center_scene_manager_intaddr_ = value;
}

// -------------------------------------------------------------------

// S2S_AskLoadNewScene

// required sint64 scene_manager_intaddr = 1;
inline bool S2S_AskLoadNewScene::has_scene_manager_intaddr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2S_AskLoadNewScene::set_has_scene_manager_intaddr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2S_AskLoadNewScene::clear_has_scene_manager_intaddr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2S_AskLoadNewScene::clear_scene_manager_intaddr() {
  scene_manager_intaddr_ = GOOGLE_LONGLONG(0);
  clear_has_scene_manager_intaddr();
}
inline ::google::protobuf::int64 S2S_AskLoadNewScene::scene_manager_intaddr() const {
  return scene_manager_intaddr_;
}
inline void S2S_AskLoadNewScene::set_scene_manager_intaddr(::google::protobuf::int64 value) {
  set_has_scene_manager_intaddr();
  scene_manager_intaddr_ = value;
}

// -------------------------------------------------------------------

// S2S_RetLoadNewScene

// required sint32 scene_id = 1;
inline bool S2S_RetLoadNewScene::has_scene_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2S_RetLoadNewScene::set_has_scene_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2S_RetLoadNewScene::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2S_RetLoadNewScene::clear_scene_id() {
  scene_id_ = 0;
  clear_has_scene_id();
}
inline ::google::protobuf::int32 S2S_RetLoadNewScene::scene_id() const {
  return scene_id_;
}
inline void S2S_RetLoadNewScene::set_scene_id(::google::protobuf::int32 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// required sint32 scene_index = 2;
inline bool S2S_RetLoadNewScene::has_scene_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2S_RetLoadNewScene::set_has_scene_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2S_RetLoadNewScene::clear_has_scene_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2S_RetLoadNewScene::clear_scene_index() {
  scene_index_ = 0;
  clear_has_scene_index();
}
inline ::google::protobuf::int32 S2S_RetLoadNewScene::scene_index() const {
  return scene_index_;
}
inline void S2S_RetLoadNewScene::set_scene_index(::google::protobuf::int32 value) {
  set_has_scene_index();
  scene_index_ = value;
}

// required sint32 map_id = 3;
inline bool S2S_RetLoadNewScene::has_map_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2S_RetLoadNewScene::set_has_map_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2S_RetLoadNewScene::clear_has_map_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2S_RetLoadNewScene::clear_map_id() {
  map_id_ = 0;
  clear_has_map_id();
}
inline ::google::protobuf::int32 S2S_RetLoadNewScene::map_id() const {
  return map_id_;
}
inline void S2S_RetLoadNewScene::set_map_id(::google::protobuf::int32 value) {
  set_has_map_id();
  map_id_ = value;
}

// required .E_SCENE_TYPE scene_type = 4 [default = EST_INVALID];
inline bool S2S_RetLoadNewScene::has_scene_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2S_RetLoadNewScene::set_has_scene_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2S_RetLoadNewScene::clear_has_scene_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2S_RetLoadNewScene::clear_scene_type() {
  scene_type_ = 0;
  clear_has_scene_type();
}
inline ::E_SCENE_TYPE S2S_RetLoadNewScene::scene_type() const {
  return static_cast< ::E_SCENE_TYPE >(scene_type_);
}
inline void S2S_RetLoadNewScene::set_scene_type(::E_SCENE_TYPE value) {
  assert(::E_SCENE_TYPE_IsValid(value));
  set_has_scene_type();
  scene_type_ = value;
}

// repeated .universal_data list_role_info = 5;
inline int S2S_RetLoadNewScene::list_role_info_size() const {
  return list_role_info_.size();
}
inline void S2S_RetLoadNewScene::clear_list_role_info() {
  list_role_info_.Clear();
}
inline const ::universal_data& S2S_RetLoadNewScene::list_role_info(int index) const {
  return list_role_info_.Get(index);
}
inline ::universal_data* S2S_RetLoadNewScene::mutable_list_role_info(int index) {
  return list_role_info_.Mutable(index);
}
inline ::universal_data* S2S_RetLoadNewScene::add_list_role_info() {
  return list_role_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::universal_data >&
S2S_RetLoadNewScene::list_role_info() const {
  return list_role_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::universal_data >*
S2S_RetLoadNewScene::mutable_list_role_info() {
  return &list_role_info_;
}

// repeated .universal_data list_team_info = 6;
inline int S2S_RetLoadNewScene::list_team_info_size() const {
  return list_team_info_.size();
}
inline void S2S_RetLoadNewScene::clear_list_team_info() {
  list_team_info_.Clear();
}
inline const ::universal_data& S2S_RetLoadNewScene::list_team_info(int index) const {
  return list_team_info_.Get(index);
}
inline ::universal_data* S2S_RetLoadNewScene::mutable_list_team_info(int index) {
  return list_team_info_.Mutable(index);
}
inline ::universal_data* S2S_RetLoadNewScene::add_list_team_info() {
  return list_team_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::universal_data >&
S2S_RetLoadNewScene::list_team_info() const {
  return list_team_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::universal_data >*
S2S_RetLoadNewScene::mutable_list_team_info() {
  return &list_team_info_;
}

// repeated .ServerBattleUnitInfo list_monster_info = 7;
inline int S2S_RetLoadNewScene::list_monster_info_size() const {
  return list_monster_info_.size();
}
inline void S2S_RetLoadNewScene::clear_list_monster_info() {
  list_monster_info_.Clear();
}
inline const ::ServerBattleUnitInfo& S2S_RetLoadNewScene::list_monster_info(int index) const {
  return list_monster_info_.Get(index);
}
inline ::ServerBattleUnitInfo* S2S_RetLoadNewScene::mutable_list_monster_info(int index) {
  return list_monster_info_.Mutable(index);
}
inline ::ServerBattleUnitInfo* S2S_RetLoadNewScene::add_list_monster_info() {
  return list_monster_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerBattleUnitInfo >&
S2S_RetLoadNewScene::list_monster_info() const {
  return list_monster_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::ServerBattleUnitInfo >*
S2S_RetLoadNewScene::mutable_list_monster_info() {
  return &list_monster_info_;
}

// repeated sint64 list_login_intaddr = 8;
inline int S2S_RetLoadNewScene::list_login_intaddr_size() const {
  return list_login_intaddr_.size();
}
inline void S2S_RetLoadNewScene::clear_list_login_intaddr() {
  list_login_intaddr_.Clear();
}
inline ::google::protobuf::int64 S2S_RetLoadNewScene::list_login_intaddr(int index) const {
  return list_login_intaddr_.Get(index);
}
inline void S2S_RetLoadNewScene::set_list_login_intaddr(int index, ::google::protobuf::int64 value) {
  list_login_intaddr_.Set(index, value);
}
inline void S2S_RetLoadNewScene::add_list_login_intaddr(::google::protobuf::int64 value) {
  list_login_intaddr_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
S2S_RetLoadNewScene::list_login_intaddr() const {
  return list_login_intaddr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
S2S_RetLoadNewScene::mutable_list_login_intaddr() {
  return &list_login_intaddr_;
}

// -------------------------------------------------------------------

// S2S_AskRegRunningSceneInfo

// required .RunningSceneInfo scene_info = 1;
inline bool S2S_AskRegRunningSceneInfo::has_scene_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2S_AskRegRunningSceneInfo::set_has_scene_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2S_AskRegRunningSceneInfo::clear_has_scene_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2S_AskRegRunningSceneInfo::clear_scene_info() {
  if (scene_info_ != nullptr) scene_info_->::RunningSceneInfo::Clear();
  clear_has_scene_info();
}
inline const ::RunningSceneInfo& S2S_AskRegRunningSceneInfo::scene_info() const {
  return scene_info_ != nullptr ? *scene_info_ : *default_instance_->scene_info_;
}
inline ::RunningSceneInfo* S2S_AskRegRunningSceneInfo::mutable_scene_info() {
  set_has_scene_info();
  if (scene_info_ == nullptr) scene_info_ = new ::RunningSceneInfo;
  return scene_info_;
}
inline ::RunningSceneInfo* S2S_AskRegRunningSceneInfo::release_scene_info() {
  clear_has_scene_info();
  ::RunningSceneInfo* temp = scene_info_;
  scene_info_ = nullptr;
  return temp;
}
inline void S2S_AskRegRunningSceneInfo::set_allocated_scene_info(::RunningSceneInfo* scene_info) {
  delete scene_info_;
  scene_info_ = scene_info;
  if (scene_info) {
    set_has_scene_info();
  } else {
    clear_has_scene_info();
  }
}

// -------------------------------------------------------------------

// S2S_AskUnRegRunningSceneInfo

// required .RunningSceneInfo scene_info = 1;
inline bool S2S_AskUnRegRunningSceneInfo::has_scene_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2S_AskUnRegRunningSceneInfo::set_has_scene_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2S_AskUnRegRunningSceneInfo::clear_has_scene_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2S_AskUnRegRunningSceneInfo::clear_scene_info() {
  if (scene_info_ != nullptr) scene_info_->::RunningSceneInfo::Clear();
  clear_has_scene_info();
}
inline const ::RunningSceneInfo& S2S_AskUnRegRunningSceneInfo::scene_info() const {
  return scene_info_ != nullptr ? *scene_info_ : *default_instance_->scene_info_;
}
inline ::RunningSceneInfo* S2S_AskUnRegRunningSceneInfo::mutable_scene_info() {
  set_has_scene_info();
  if (scene_info_ == nullptr) scene_info_ = new ::RunningSceneInfo;
  return scene_info_;
}
inline ::RunningSceneInfo* S2S_AskUnRegRunningSceneInfo::release_scene_info() {
  clear_has_scene_info();
  ::RunningSceneInfo* temp = scene_info_;
  scene_info_ = nullptr;
  return temp;
}
inline void S2S_AskUnRegRunningSceneInfo::set_allocated_scene_info(::RunningSceneInfo* scene_info) {
  delete scene_info_;
  scene_info_ = scene_info;
  if (scene_info) {
    set_has_scene_info();
  } else {
    clear_has_scene_info();
  }
}

// -------------------------------------------------------------------

// GM2S_AskLogin

// required bytes account = 1;
inline bool GM2S_AskLogin::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM2S_AskLogin::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM2S_AskLogin::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM2S_AskLogin::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& GM2S_AskLogin::account() const {
  return *account_;
}
inline void GM2S_AskLogin::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void GM2S_AskLogin::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void GM2S_AskLogin::set_account(const void* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM2S_AskLogin::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* GM2S_AskLogin::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return nullptr;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM2S_AskLogin::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes password = 2;
inline bool GM2S_AskLogin::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM2S_AskLogin::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM2S_AskLogin::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM2S_AskLogin::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& GM2S_AskLogin::password() const {
  return *password_;
}
inline void GM2S_AskLogin::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void GM2S_AskLogin::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void GM2S_AskLogin::set_password(const void* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM2S_AskLogin::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* GM2S_AskLogin::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return nullptr;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM2S_AskLogin::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// S2GM_RetLogin

// required bytes ret_code = 1;
inline bool S2GM_RetLogin::has_ret_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2GM_RetLogin::set_has_ret_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2GM_RetLogin::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2GM_RetLogin::clear_ret_code() {
  if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
    ret_code_->clear();
  }
  clear_has_ret_code();
}
inline const ::std::string& S2GM_RetLogin::ret_code() const {
  return *ret_code_;
}
inline void S2GM_RetLogin::set_ret_code(const ::std::string& value) {
  set_has_ret_code();
  if (ret_code_ == &::google::protobuf::internal::kEmptyString) {
    ret_code_ = new ::std::string;
  }
  ret_code_->assign(value);
}
inline void S2GM_RetLogin::set_ret_code(const char* value) {
  set_has_ret_code();
  if (ret_code_ == &::google::protobuf::internal::kEmptyString) {
    ret_code_ = new ::std::string;
  }
  ret_code_->assign(value);
}
inline void S2GM_RetLogin::set_ret_code(const void* value, size_t size) {
  set_has_ret_code();
  if (ret_code_ == &::google::protobuf::internal::kEmptyString) {
    ret_code_ = new ::std::string;
  }
  ret_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2GM_RetLogin::mutable_ret_code() {
  set_has_ret_code();
  if (ret_code_ == &::google::protobuf::internal::kEmptyString) {
    ret_code_ = new ::std::string;
  }
  return ret_code_;
}
inline ::std::string* S2GM_RetLogin::release_ret_code() {
  clear_has_ret_code();
  if (ret_code_ == &::google::protobuf::internal::kEmptyString) {
    return nullptr;
  } else {
    ::std::string* temp = ret_code_;
    ret_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2GM_RetLogin::set_allocated_ret_code(::std::string* ret_code) {
  if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
    delete ret_code_;
  }
  if (ret_code) {
    set_has_ret_code();
    ret_code_ = ret_code;
  } else {
    clear_has_ret_code();
    ret_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes account = 2;
inline bool S2GM_RetLogin::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2GM_RetLogin::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2GM_RetLogin::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2GM_RetLogin::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& S2GM_RetLogin::account() const {
  return *account_;
}
inline void S2GM_RetLogin::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void S2GM_RetLogin::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void S2GM_RetLogin::set_account(const void* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2GM_RetLogin::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* S2GM_RetLogin::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return nullptr;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2GM_RetLogin::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// S2S_RegNodeInfo

// required .sql_ret_cluster_node_info cluster_node_info = 1;
inline bool S2S_RegNodeInfo::has_cluster_node_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2S_RegNodeInfo::set_has_cluster_node_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2S_RegNodeInfo::clear_has_cluster_node_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2S_RegNodeInfo::clear_cluster_node_info() {
  if (cluster_node_info_ != nullptr) cluster_node_info_->::sql_ret_cluster_node_info::Clear();
  clear_has_cluster_node_info();
}
inline const ::sql_ret_cluster_node_info& S2S_RegNodeInfo::cluster_node_info() const {
  return cluster_node_info_ != nullptr ? *cluster_node_info_ : *default_instance_->cluster_node_info_;
}
inline ::sql_ret_cluster_node_info* S2S_RegNodeInfo::mutable_cluster_node_info() {
  set_has_cluster_node_info();
  if (cluster_node_info_ == nullptr) cluster_node_info_ = new ::sql_ret_cluster_node_info;
  return cluster_node_info_;
}
inline ::sql_ret_cluster_node_info* S2S_RegNodeInfo::release_cluster_node_info() {
  clear_has_cluster_node_info();
  ::sql_ret_cluster_node_info* temp = cluster_node_info_;
  cluster_node_info_ = nullptr;
  return temp;
}
inline void S2S_RegNodeInfo::set_allocated_cluster_node_info(::sql_ret_cluster_node_info* cluster_node_info) {
  delete cluster_node_info_;
  cluster_node_info_ = cluster_node_info;
  if (cluster_node_info) {
    set_has_cluster_node_info();
  } else {
    clear_has_cluster_node_info();
  }
}

// -------------------------------------------------------------------

// GM2S_AskNodeInfo

// required bytes request_node_name = 1;
inline bool GM2S_AskNodeInfo::has_request_node_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM2S_AskNodeInfo::set_has_request_node_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM2S_AskNodeInfo::clear_has_request_node_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM2S_AskNodeInfo::clear_request_node_name() {
  if (request_node_name_ != &::google::protobuf::internal::kEmptyString) {
    request_node_name_->clear();
  }
  clear_has_request_node_name();
}
inline const ::std::string& GM2S_AskNodeInfo::request_node_name() const {
  return *request_node_name_;
}
inline void GM2S_AskNodeInfo::set_request_node_name(const ::std::string& value) {
  set_has_request_node_name();
  if (request_node_name_ == &::google::protobuf::internal::kEmptyString) {
    request_node_name_ = new ::std::string;
  }
  request_node_name_->assign(value);
}
inline void GM2S_AskNodeInfo::set_request_node_name(const char* value) {
  set_has_request_node_name();
  if (request_node_name_ == &::google::protobuf::internal::kEmptyString) {
    request_node_name_ = new ::std::string;
  }
  request_node_name_->assign(value);
}
inline void GM2S_AskNodeInfo::set_request_node_name(const void* value, size_t size) {
  set_has_request_node_name();
  if (request_node_name_ == &::google::protobuf::internal::kEmptyString) {
    request_node_name_ = new ::std::string;
  }
  request_node_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM2S_AskNodeInfo::mutable_request_node_name() {
  set_has_request_node_name();
  if (request_node_name_ == &::google::protobuf::internal::kEmptyString) {
    request_node_name_ = new ::std::string;
  }
  return request_node_name_;
}
inline ::std::string* GM2S_AskNodeInfo::release_request_node_name() {
  clear_has_request_node_name();
  if (request_node_name_ == &::google::protobuf::internal::kEmptyString) {
    return nullptr;
  } else {
    ::std::string* temp = request_node_name_;
    request_node_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM2S_AskNodeInfo::set_allocated_request_node_name(::std::string* request_node_name) {
  if (request_node_name_ != &::google::protobuf::internal::kEmptyString) {
    delete request_node_name_;
  }
  if (request_node_name) {
    set_has_request_node_name();
    request_node_name_ = request_node_name;
  } else {
    clear_has_request_node_name();
    request_node_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bool is_online = 2;
inline bool GM2S_AskNodeInfo::has_is_online() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM2S_AskNodeInfo::set_has_is_online() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM2S_AskNodeInfo::clear_has_is_online() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM2S_AskNodeInfo::clear_is_online() {
  is_online_ = false;
  clear_has_is_online();
}
inline bool GM2S_AskNodeInfo::is_online() const {
  return is_online_;
}
inline void GM2S_AskNodeInfo::set_is_online(bool value) {
  set_has_is_online();
  is_online_ = value;
}

// -------------------------------------------------------------------

// S2GM_RetNodeInfo

// required bytes request_node_name = 1;
inline bool S2GM_RetNodeInfo::has_request_node_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2GM_RetNodeInfo::set_has_request_node_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2GM_RetNodeInfo::clear_has_request_node_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2GM_RetNodeInfo::clear_request_node_name() {
  if (request_node_name_ != &::google::protobuf::internal::kEmptyString) {
    request_node_name_->clear();
  }
  clear_has_request_node_name();
}
inline const ::std::string& S2GM_RetNodeInfo::request_node_name() const {
  return *request_node_name_;
}
inline void S2GM_RetNodeInfo::set_request_node_name(const ::std::string& value) {
  set_has_request_node_name();
  if (request_node_name_ == &::google::protobuf::internal::kEmptyString) {
    request_node_name_ = new ::std::string;
  }
  request_node_name_->assign(value);
}
inline void S2GM_RetNodeInfo::set_request_node_name(const char* value) {
  set_has_request_node_name();
  if (request_node_name_ == &::google::protobuf::internal::kEmptyString) {
    request_node_name_ = new ::std::string;
  }
  request_node_name_->assign(value);
}
inline void S2GM_RetNodeInfo::set_request_node_name(const void* value, size_t size) {
  set_has_request_node_name();
  if (request_node_name_ == &::google::protobuf::internal::kEmptyString) {
    request_node_name_ = new ::std::string;
  }
  request_node_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2GM_RetNodeInfo::mutable_request_node_name() {
  set_has_request_node_name();
  if (request_node_name_ == &::google::protobuf::internal::kEmptyString) {
    request_node_name_ = new ::std::string;
  }
  return request_node_name_;
}
inline ::std::string* S2GM_RetNodeInfo::release_request_node_name() {
  clear_has_request_node_name();
  if (request_node_name_ == &::google::protobuf::internal::kEmptyString) {
    return nullptr;
  } else {
    ::std::string* temp = request_node_name_;
    request_node_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2GM_RetNodeInfo::set_allocated_request_node_name(::std::string* request_node_name) {
  if (request_node_name_ != &::google::protobuf::internal::kEmptyString) {
    delete request_node_name_;
  }
  if (request_node_name) {
    set_has_request_node_name();
    request_node_name_ = request_node_name;
  } else {
    clear_has_request_node_name();
    request_node_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .sql_ret_cluster_node_info list_cluster_node_info = 2;
inline int S2GM_RetNodeInfo::list_cluster_node_info_size() const {
  return list_cluster_node_info_.size();
}
inline void S2GM_RetNodeInfo::clear_list_cluster_node_info() {
  list_cluster_node_info_.Clear();
}
inline const ::sql_ret_cluster_node_info& S2GM_RetNodeInfo::list_cluster_node_info(int index) const {
  return list_cluster_node_info_.Get(index);
}
inline ::sql_ret_cluster_node_info* S2GM_RetNodeInfo::mutable_list_cluster_node_info(int index) {
  return list_cluster_node_info_.Mutable(index);
}
inline ::sql_ret_cluster_node_info* S2GM_RetNodeInfo::add_list_cluster_node_info() {
  return list_cluster_node_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sql_ret_cluster_node_info >&
S2GM_RetNodeInfo::list_cluster_node_info() const {
  return list_cluster_node_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::sql_ret_cluster_node_info >*
S2GM_RetNodeInfo::mutable_list_cluster_node_info() {
  return &list_cluster_node_info_;
}

// -------------------------------------------------------------------

// GM2S_AskPlayerInfo

// required bytes request_node_name = 1;
inline bool GM2S_AskPlayerInfo::has_request_node_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM2S_AskPlayerInfo::set_has_request_node_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM2S_AskPlayerInfo::clear_has_request_node_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM2S_AskPlayerInfo::clear_request_node_name() {
  if (request_node_name_ != &::google::protobuf::internal::kEmptyString) {
    request_node_name_->clear();
  }
  clear_has_request_node_name();
}
inline const ::std::string& GM2S_AskPlayerInfo::request_node_name() const {
  return *request_node_name_;
}
inline void GM2S_AskPlayerInfo::set_request_node_name(const ::std::string& value) {
  set_has_request_node_name();
  if (request_node_name_ == &::google::protobuf::internal::kEmptyString) {
    request_node_name_ = new ::std::string;
  }
  request_node_name_->assign(value);
}
inline void GM2S_AskPlayerInfo::set_request_node_name(const char* value) {
  set_has_request_node_name();
  if (request_node_name_ == &::google::protobuf::internal::kEmptyString) {
    request_node_name_ = new ::std::string;
  }
  request_node_name_->assign(value);
}
inline void GM2S_AskPlayerInfo::set_request_node_name(const void* value, size_t size) {
  set_has_request_node_name();
  if (request_node_name_ == &::google::protobuf::internal::kEmptyString) {
    request_node_name_ = new ::std::string;
  }
  request_node_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GM2S_AskPlayerInfo::mutable_request_node_name() {
  set_has_request_node_name();
  if (request_node_name_ == &::google::protobuf::internal::kEmptyString) {
    request_node_name_ = new ::std::string;
  }
  return request_node_name_;
}
inline ::std::string* GM2S_AskPlayerInfo::release_request_node_name() {
  clear_has_request_node_name();
  if (request_node_name_ == &::google::protobuf::internal::kEmptyString) {
    return nullptr;
  } else {
    ::std::string* temp = request_node_name_;
    request_node_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GM2S_AskPlayerInfo::set_allocated_request_node_name(::std::string* request_node_name) {
  if (request_node_name_ != &::google::protobuf::internal::kEmptyString) {
    delete request_node_name_;
  }
  if (request_node_name) {
    set_has_request_node_name();
    request_node_name_ = request_node_name;
  } else {
    clear_has_request_node_name();
    request_node_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bool is_online = 2;
inline bool GM2S_AskPlayerInfo::has_is_online() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GM2S_AskPlayerInfo::set_has_is_online() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GM2S_AskPlayerInfo::clear_has_is_online() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GM2S_AskPlayerInfo::clear_is_online() {
  is_online_ = false;
  clear_has_is_online();
}
inline bool GM2S_AskPlayerInfo::is_online() const {
  return is_online_;
}
inline void GM2S_AskPlayerInfo::set_is_online(bool value) {
  set_has_is_online();
  is_online_ = value;
}

// -------------------------------------------------------------------

// S2GM_RetPlayerInfo

// required bytes request_node_name = 1;
inline bool S2GM_RetPlayerInfo::has_request_node_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2GM_RetPlayerInfo::set_has_request_node_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2GM_RetPlayerInfo::clear_has_request_node_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2GM_RetPlayerInfo::clear_request_node_name() {
  if (request_node_name_ != &::google::protobuf::internal::kEmptyString) {
    request_node_name_->clear();
  }
  clear_has_request_node_name();
}
inline const ::std::string& S2GM_RetPlayerInfo::request_node_name() const {
  return *request_node_name_;
}
inline void S2GM_RetPlayerInfo::set_request_node_name(const ::std::string& value) {
  set_has_request_node_name();
  if (request_node_name_ == &::google::protobuf::internal::kEmptyString) {
    request_node_name_ = new ::std::string;
  }
  request_node_name_->assign(value);
}
inline void S2GM_RetPlayerInfo::set_request_node_name(const char* value) {
  set_has_request_node_name();
  if (request_node_name_ == &::google::protobuf::internal::kEmptyString) {
    request_node_name_ = new ::std::string;
  }
  request_node_name_->assign(value);
}
inline void S2GM_RetPlayerInfo::set_request_node_name(const void* value, size_t size) {
  set_has_request_node_name();
  if (request_node_name_ == &::google::protobuf::internal::kEmptyString) {
    request_node_name_ = new ::std::string;
  }
  request_node_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2GM_RetPlayerInfo::mutable_request_node_name() {
  set_has_request_node_name();
  if (request_node_name_ == &::google::protobuf::internal::kEmptyString) {
    request_node_name_ = new ::std::string;
  }
  return request_node_name_;
}
inline ::std::string* S2GM_RetPlayerInfo::release_request_node_name() {
  clear_has_request_node_name();
  if (request_node_name_ == &::google::protobuf::internal::kEmptyString) {
    return nullptr;
  } else {
    ::std::string* temp = request_node_name_;
    request_node_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2GM_RetPlayerInfo::set_allocated_request_node_name(::std::string* request_node_name) {
  if (request_node_name_ != &::google::protobuf::internal::kEmptyString) {
    delete request_node_name_;
  }
  if (request_node_name) {
    set_has_request_node_name();
    request_node_name_ = request_node_name;
  } else {
    clear_has_request_node_name();
    request_node_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .universal_data list_roleinfo = 2;
inline int S2GM_RetPlayerInfo::list_roleinfo_size() const {
  return list_roleinfo_.size();
}
inline void S2GM_RetPlayerInfo::clear_list_roleinfo() {
  list_roleinfo_.Clear();
}
inline const ::universal_data& S2GM_RetPlayerInfo::list_roleinfo(int index) const {
  return list_roleinfo_.Get(index);
}
inline ::universal_data* S2GM_RetPlayerInfo::mutable_list_roleinfo(int index) {
  return list_roleinfo_.Mutable(index);
}
inline ::universal_data* S2GM_RetPlayerInfo::add_list_roleinfo() {
  return list_roleinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::universal_data >&
S2GM_RetPlayerInfo::list_roleinfo() const {
  return list_roleinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::universal_data >*
S2GM_RetPlayerInfo::mutable_list_roleinfo() {
  return &list_roleinfo_;
}

// -------------------------------------------------------------------

// GM2S_AskSceneInfo

// required bool is_online = 1;
inline bool GM2S_AskSceneInfo::has_is_online() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM2S_AskSceneInfo::set_has_is_online() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM2S_AskSceneInfo::clear_has_is_online() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM2S_AskSceneInfo::clear_is_online() {
  is_online_ = false;
  clear_has_is_online();
}
inline bool GM2S_AskSceneInfo::is_online() const {
  return is_online_;
}
inline void GM2S_AskSceneInfo::set_is_online(bool value) {
  set_has_is_online();
  is_online_ = value;
}

// -------------------------------------------------------------------

// S2GM_RetSceneInfo

// repeated .sql_ret_cluster_node_info list_cluster_node_info = 1;
inline int S2GM_RetSceneInfo::list_cluster_node_info_size() const {
  return list_cluster_node_info_.size();
}
inline void S2GM_RetSceneInfo::clear_list_cluster_node_info() {
  list_cluster_node_info_.Clear();
}
inline const ::sql_ret_cluster_node_info& S2GM_RetSceneInfo::list_cluster_node_info(int index) const {
  return list_cluster_node_info_.Get(index);
}
inline ::sql_ret_cluster_node_info* S2GM_RetSceneInfo::mutable_list_cluster_node_info(int index) {
  return list_cluster_node_info_.Mutable(index);
}
inline ::sql_ret_cluster_node_info* S2GM_RetSceneInfo::add_list_cluster_node_info() {
  return list_cluster_node_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sql_ret_cluster_node_info >&
S2GM_RetSceneInfo::list_cluster_node_info() const {
  return list_cluster_node_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::sql_ret_cluster_node_info >*
S2GM_RetSceneInfo::mutable_list_cluster_node_info() {
  return &list_cluster_node_info_;
}

// -------------------------------------------------------------------

// GM2S_KickPlayer

// required sint64 role_index = 1;
inline bool GM2S_KickPlayer::has_role_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM2S_KickPlayer::set_has_role_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM2S_KickPlayer::clear_has_role_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM2S_KickPlayer::clear_role_index() {
  role_index_ = GOOGLE_LONGLONG(0);
  clear_has_role_index();
}
inline ::google::protobuf::int64 GM2S_KickPlayer::role_index() const {
  return role_index_;
}
inline void GM2S_KickPlayer::set_role_index(::google::protobuf::int64 value) {
  set_has_role_index();
  role_index_ = value;
}

// -------------------------------------------------------------------

// GM2S_Close

// required sint64 role_index = 1;
inline bool GM2S_Close::has_role_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GM2S_Close::set_has_role_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GM2S_Close::clear_has_role_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GM2S_Close::clear_role_index() {
  role_index_ = GOOGLE_LONGLONG(0);
  clear_has_role_index();
}
inline ::google::protobuf::int64 GM2S_Close::role_index() const {
  return role_index_;
}
inline void GM2S_Close::set_role_index(::google::protobuf::int64 value) {
  set_has_role_index();
  role_index_ = value;
}

// -------------------------------------------------------------------

// S2S_Ask_CheckAccount

// required bytes account = 1;
inline bool S2S_Ask_CheckAccount::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2S_Ask_CheckAccount::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2S_Ask_CheckAccount::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2S_Ask_CheckAccount::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& S2S_Ask_CheckAccount::account() const {
  return *account_;
}
inline void S2S_Ask_CheckAccount::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void S2S_Ask_CheckAccount::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void S2S_Ask_CheckAccount::set_account(const void* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2S_Ask_CheckAccount::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* S2S_Ask_CheckAccount::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return nullptr;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2S_Ask_CheckAccount::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 ret_unitindex = 2;
inline bool S2S_Ask_CheckAccount::has_ret_unitindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2S_Ask_CheckAccount::set_has_ret_unitindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2S_Ask_CheckAccount::clear_has_ret_unitindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2S_Ask_CheckAccount::clear_ret_unitindex() {
  ret_unitindex_ = GOOGLE_LONGLONG(0);
  clear_has_ret_unitindex();
}
inline ::google::protobuf::int64 S2S_Ask_CheckAccount::ret_unitindex() const {
  return ret_unitindex_;
}
inline void S2S_Ask_CheckAccount::set_ret_unitindex(::google::protobuf::int64 value) {
  set_has_ret_unitindex();
  ret_unitindex_ = value;
}

// optional int64 ret_intaddr = 3;
inline bool S2S_Ask_CheckAccount::has_ret_intaddr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2S_Ask_CheckAccount::set_has_ret_intaddr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2S_Ask_CheckAccount::clear_has_ret_intaddr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2S_Ask_CheckAccount::clear_ret_intaddr() {
  ret_intaddr_ = GOOGLE_LONGLONG(0);
  clear_has_ret_intaddr();
}
inline ::google::protobuf::int64 S2S_Ask_CheckAccount::ret_intaddr() const {
  return ret_intaddr_;
}
inline void S2S_Ask_CheckAccount::set_ret_intaddr(::google::protobuf::int64 value) {
  set_has_ret_intaddr();
  ret_intaddr_ = value;
}

// -------------------------------------------------------------------

// S2S_Ret_CheckAccount

// required bytes ret_code = 1;
inline bool S2S_Ret_CheckAccount::has_ret_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2S_Ret_CheckAccount::set_has_ret_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2S_Ret_CheckAccount::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2S_Ret_CheckAccount::clear_ret_code() {
  if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
    ret_code_->clear();
  }
  clear_has_ret_code();
}
inline const ::std::string& S2S_Ret_CheckAccount::ret_code() const {
  return *ret_code_;
}
inline void S2S_Ret_CheckAccount::set_ret_code(const ::std::string& value) {
  set_has_ret_code();
  if (ret_code_ == &::google::protobuf::internal::kEmptyString) {
    ret_code_ = new ::std::string;
  }
  ret_code_->assign(value);
}
inline void S2S_Ret_CheckAccount::set_ret_code(const char* value) {
  set_has_ret_code();
  if (ret_code_ == &::google::protobuf::internal::kEmptyString) {
    ret_code_ = new ::std::string;
  }
  ret_code_->assign(value);
}
inline void S2S_Ret_CheckAccount::set_ret_code(const void* value, size_t size) {
  set_has_ret_code();
  if (ret_code_ == &::google::protobuf::internal::kEmptyString) {
    ret_code_ = new ::std::string;
  }
  ret_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2S_Ret_CheckAccount::mutable_ret_code() {
  set_has_ret_code();
  if (ret_code_ == &::google::protobuf::internal::kEmptyString) {
    ret_code_ = new ::std::string;
  }
  return ret_code_;
}
inline ::std::string* S2S_Ret_CheckAccount::release_ret_code() {
  clear_has_ret_code();
  if (ret_code_ == &::google::protobuf::internal::kEmptyString) {
    return nullptr;
  } else {
    ::std::string* temp = ret_code_;
    ret_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2S_Ret_CheckAccount::set_allocated_ret_code(::std::string* ret_code) {
  if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
    delete ret_code_;
  }
  if (ret_code) {
    set_has_ret_code();
    ret_code_ = ret_code;
  } else {
    clear_has_ret_code();
    ret_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes account = 2;
inline bool S2S_Ret_CheckAccount::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2S_Ret_CheckAccount::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2S_Ret_CheckAccount::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2S_Ret_CheckAccount::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& S2S_Ret_CheckAccount::account() const {
  return *account_;
}
inline void S2S_Ret_CheckAccount::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void S2S_Ret_CheckAccount::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void S2S_Ret_CheckAccount::set_account(const void* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2S_Ret_CheckAccount::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* S2S_Ret_CheckAccount::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return nullptr;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2S_Ret_CheckAccount::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 account_key = 3;
inline bool S2S_Ret_CheckAccount::has_account_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2S_Ret_CheckAccount::set_has_account_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2S_Ret_CheckAccount::clear_has_account_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2S_Ret_CheckAccount::clear_account_key() {
  account_key_ = GOOGLE_LONGLONG(0);
  clear_has_account_key();
}
inline ::google::protobuf::int64 S2S_Ret_CheckAccount::account_key() const {
  return account_key_;
}
inline void S2S_Ret_CheckAccount::set_account_key(::google::protobuf::int64 value) {
  set_has_account_key();
  account_key_ = value;
}

// -------------------------------------------------------------------

// S2S_Ask_Login

// required bytes account = 1;
inline bool S2S_Ask_Login::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2S_Ask_Login::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2S_Ask_Login::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2S_Ask_Login::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& S2S_Ask_Login::account() const {
  return *account_;
}
inline void S2S_Ask_Login::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void S2S_Ask_Login::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void S2S_Ask_Login::set_account(const void* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2S_Ask_Login::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* S2S_Ask_Login::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return nullptr;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2S_Ask_Login::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes password = 2;
inline bool S2S_Ask_Login::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2S_Ask_Login::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2S_Ask_Login::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2S_Ask_Login::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& S2S_Ask_Login::password() const {
  return *password_;
}
inline void S2S_Ask_Login::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void S2S_Ask_Login::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void S2S_Ask_Login::set_password(const void* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2S_Ask_Login::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* S2S_Ask_Login::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return nullptr;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2S_Ask_Login::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes sid = 3;
inline bool S2S_Ask_Login::has_sid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2S_Ask_Login::set_has_sid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2S_Ask_Login::clear_has_sid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2S_Ask_Login::clear_sid() {
  if (sid_ != &::google::protobuf::internal::kEmptyString) {
    sid_->clear();
  }
  clear_has_sid();
}
inline const ::std::string& S2S_Ask_Login::sid() const {
  return *sid_;
}
inline void S2S_Ask_Login::set_sid(const ::std::string& value) {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::kEmptyString) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void S2S_Ask_Login::set_sid(const char* value) {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::kEmptyString) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void S2S_Ask_Login::set_sid(const void* value, size_t size) {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::kEmptyString) {
    sid_ = new ::std::string;
  }
  sid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2S_Ask_Login::mutable_sid() {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::kEmptyString) {
    sid_ = new ::std::string;
  }
  return sid_;
}
inline ::std::string* S2S_Ask_Login::release_sid() {
  clear_has_sid();
  if (sid_ == &::google::protobuf::internal::kEmptyString) {
    return nullptr;
  } else {
    ::std::string* temp = sid_;
    sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2S_Ask_Login::set_allocated_sid(::std::string* sid) {
  if (sid_ != &::google::protobuf::internal::kEmptyString) {
    delete sid_;
  }
  if (sid) {
    set_has_sid();
    sid_ = sid;
  } else {
    clear_has_sid();
    sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes ip = 4;
inline bool S2S_Ask_Login::has_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2S_Ask_Login::set_has_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2S_Ask_Login::clear_has_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2S_Ask_Login::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& S2S_Ask_Login::ip() const {
  return *ip_;
}
inline void S2S_Ask_Login::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void S2S_Ask_Login::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void S2S_Ask_Login::set_ip(const void* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2S_Ask_Login::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* S2S_Ask_Login::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return nullptr;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2S_Ask_Login::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 ret_unitindex = 5;
inline bool S2S_Ask_Login::has_ret_unitindex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void S2S_Ask_Login::set_has_ret_unitindex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void S2S_Ask_Login::clear_has_ret_unitindex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void S2S_Ask_Login::clear_ret_unitindex() {
  ret_unitindex_ = GOOGLE_LONGLONG(0);
  clear_has_ret_unitindex();
}
inline ::google::protobuf::int64 S2S_Ask_Login::ret_unitindex() const {
  return ret_unitindex_;
}
inline void S2S_Ask_Login::set_ret_unitindex(::google::protobuf::int64 value) {
  set_has_ret_unitindex();
  ret_unitindex_ = value;
}

// optional int64 ret_intaddr = 6;
inline bool S2S_Ask_Login::has_ret_intaddr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void S2S_Ask_Login::set_has_ret_intaddr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void S2S_Ask_Login::clear_has_ret_intaddr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void S2S_Ask_Login::clear_ret_intaddr() {
  ret_intaddr_ = GOOGLE_LONGLONG(0);
  clear_has_ret_intaddr();
}
inline ::google::protobuf::int64 S2S_Ask_Login::ret_intaddr() const {
  return ret_intaddr_;
}
inline void S2S_Ask_Login::set_ret_intaddr(::google::protobuf::int64 value) {
  set_has_ret_intaddr();
  ret_intaddr_ = value;
}

// optional int64 account_key = 7;
inline bool S2S_Ask_Login::has_account_key() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void S2S_Ask_Login::set_has_account_key() {
  _has_bits_[0] |= 0x00000040u;
}
inline void S2S_Ask_Login::clear_has_account_key() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void S2S_Ask_Login::clear_account_key() {
  account_key_ = GOOGLE_LONGLONG(0);
  clear_has_account_key();
}
inline ::google::protobuf::int64 S2S_Ask_Login::account_key() const {
  return account_key_;
}
inline void S2S_Ask_Login::set_account_key(::google::protobuf::int64 value) {
  set_has_account_key();
  account_key_ = value;
}

// -------------------------------------------------------------------

// S2S_Ret_Login

// required bytes ret_code = 1;
inline bool S2S_Ret_Login::has_ret_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2S_Ret_Login::set_has_ret_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2S_Ret_Login::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2S_Ret_Login::clear_ret_code() {
  if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
    ret_code_->clear();
  }
  clear_has_ret_code();
}
inline const ::std::string& S2S_Ret_Login::ret_code() const {
  return *ret_code_;
}
inline void S2S_Ret_Login::set_ret_code(const ::std::string& value) {
  set_has_ret_code();
  if (ret_code_ == &::google::protobuf::internal::kEmptyString) {
    ret_code_ = new ::std::string;
  }
  ret_code_->assign(value);
}
inline void S2S_Ret_Login::set_ret_code(const char* value) {
  set_has_ret_code();
  if (ret_code_ == &::google::protobuf::internal::kEmptyString) {
    ret_code_ = new ::std::string;
  }
  ret_code_->assign(value);
}
inline void S2S_Ret_Login::set_ret_code(const void* value, size_t size) {
  set_has_ret_code();
  if (ret_code_ == &::google::protobuf::internal::kEmptyString) {
    ret_code_ = new ::std::string;
  }
  ret_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2S_Ret_Login::mutable_ret_code() {
  set_has_ret_code();
  if (ret_code_ == &::google::protobuf::internal::kEmptyString) {
    ret_code_ = new ::std::string;
  }
  return ret_code_;
}
inline ::std::string* S2S_Ret_Login::release_ret_code() {
  clear_has_ret_code();
  if (ret_code_ == &::google::protobuf::internal::kEmptyString) {
    return nullptr;
  } else {
    ::std::string* temp = ret_code_;
    ret_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2S_Ret_Login::set_allocated_ret_code(::std::string* ret_code) {
  if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
    delete ret_code_;
  }
  if (ret_code) {
    set_has_ret_code();
    ret_code_ = ret_code;
  } else {
    clear_has_ret_code();
    ret_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bool re_login = 2;
inline bool S2S_Ret_Login::has_re_login() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2S_Ret_Login::set_has_re_login() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2S_Ret_Login::clear_has_re_login() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2S_Ret_Login::clear_re_login() {
  re_login_ = false;
  clear_has_re_login();
}
inline bool S2S_Ret_Login::re_login() const {
  return re_login_;
}
inline void S2S_Ret_Login::set_re_login(bool value) {
  set_has_re_login();
  re_login_ = value;
}

// required bytes account = 3;
inline bool S2S_Ret_Login::has_account() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2S_Ret_Login::set_has_account() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2S_Ret_Login::clear_has_account() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2S_Ret_Login::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& S2S_Ret_Login::account() const {
  return *account_;
}
inline void S2S_Ret_Login::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void S2S_Ret_Login::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void S2S_Ret_Login::set_account(const void* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2S_Ret_Login::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* S2S_Ret_Login::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return nullptr;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2S_Ret_Login::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 account_key = 4;
inline bool S2S_Ret_Login::has_account_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2S_Ret_Login::set_has_account_key() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2S_Ret_Login::clear_has_account_key() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2S_Ret_Login::clear_account_key() {
  account_key_ = GOOGLE_LONGLONG(0);
  clear_has_account_key();
}
inline ::google::protobuf::int64 S2S_Ret_Login::account_key() const {
  return account_key_;
}
inline void S2S_Ret_Login::set_account_key(::google::protobuf::int64 value) {
  set_has_account_key();
  account_key_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Server_2eproto__INCLUDED
