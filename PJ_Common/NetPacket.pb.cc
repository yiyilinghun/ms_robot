// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NetPacket.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "NetPacket.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* C2S_Ask_Login_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Ask_Login_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Ret_Login_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Ret_Login_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_Ask_Register_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Ask_Register_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Ret_Register_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Ret_Register_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_Ask_RoleSum_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Ask_RoleSum_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Ret_RoleSum_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Ret_RoleSum_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_ClearRole_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_ClearRole_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Response_ClearRole_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Response_ClearRole_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_RandNickName_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_RandNickName_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_RandNickName_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_RandNickName_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_Ask_RoleCreate_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Ask_RoleCreate_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Ret_RoleCreate_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Ret_RoleCreate_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_Ask_RoleInfo_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Ask_RoleInfo_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Ret_RoleInfo_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Ret_RoleInfo_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_Sync_RoleConfig_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Sync_RoleConfig_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Sync_RoleConfig_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Sync_RoleConfig_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_Ask_Ready_EnterScene_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Ask_Ready_EnterScene_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Ret_Ready_EnterScene_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Ret_Ready_EnterScene_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_Ask_EnterScene_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Ask_EnterScene_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_RefreshScene_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_RefreshScene_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Notice_OffLine_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Notice_OffLine_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_Ask_Charset_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Ask_Charset_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_Heartbeat_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Heartbeat_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Heartbeat_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Heartbeat_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_GameCoin_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_GameCoin_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Sync_Role_GameCoin_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Sync_Role_GameCoin_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_DiamondCoin_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_DiamondCoin_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_DiamondCoin_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_DiamondCoin_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_Stamina_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Stamina_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Stamina_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Stamina_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_Exp_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Exp_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Sync_Role_Exp_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Sync_Role_Exp_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Notice_Role_EnterScene_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Notice_Role_EnterScene_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Notice_Role_LeaveScene_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Notice_Role_LeaveScene_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Sync_Role_PublicInfo_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Sync_Role_PublicInfo_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Sync_Role_PrivateInfo_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Sync_Role_PrivateInfo_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Sync_RoleInfo_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Sync_RoleInfo_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Sync_RoleAttr_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Sync_RoleAttr_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_Sync_Dir_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Sync_Dir_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Sync_Dir_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Sync_Dir_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_Sync_RoleMove_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Sync_RoleMove_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Sync_RoleMove_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Sync_RoleMove_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Sync_RoleStopMove_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Sync_RoleStopMove_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Notice_Role_LevelUp_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Notice_Role_LevelUp_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_Ask_Comrade_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Ask_Comrade_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Ret_Comrade_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Ret_Comrade_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_Ask_Chat_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Ask_Chat_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Ret_Chat_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Ret_Chat_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_Change_Scene_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Change_Scene_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_TransPortChangeScene_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_TransPortChangeScene_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_TransPortChangeScene_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_TransPortChangeScene_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_NPC_ChangeScene_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_NPC_ChangeScene_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_NPC_ChangeScene_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_NPC_ChangeScene_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_Qiecuo_Battle_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Qiecuo_Battle_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Qiecuo_Battle_Refuse_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Qiecuo_Battle_Refuse_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Qiecuo_Battle_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Qiecuo_Battle_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Qiecuo_Confirm_Battle_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Qiecuo_Confirm_Battle_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_Qiecuo_Confirm_Battle_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Qiecuo_Confirm_Battle_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_Battle_Info_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Battle_Info_reflection_ = nullptr;
const ::google::protobuf::Descriptor* Battle_Role_Info_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle_Role_Info_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Battle_Info_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Battle_Info_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_Battle_Frame_Info_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Battle_Frame_Info_reflection_ = nullptr;
const ::google::protobuf::Descriptor* Battle_Frame_Info_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Battle_Frame_Info_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Battle_Frame_Info_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Battle_Frame_Info_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Avatar_Goods_List_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Avatar_Goods_List_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_Buy_Avatar_Goods_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Buy_Avatar_Goods_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Buy_Avatar_Goods_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Buy_Avatar_Goods_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_Bag_Item_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Bag_Item_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Sync_Role_Bag_Item_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Sync_Role_Bag_Item_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_Bag_MoveItem_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Bag_MoveItem_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_Use_Item_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Use_Item_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Use_Item_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Use_Item_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_Role_Equip_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Role_Equip_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Role_Equip_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Role_Equip_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_TakeOff_Equip_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_TakeOff_Equip_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_TakeOff_Equip_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_TakeOff_Equip_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Bag_Item_Insert_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Bag_Item_Insert_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Bag_Item_Remove_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Bag_Item_Remove_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_SuitShopInfo_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_SuitShopInfo_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_SuitShopInfo_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_SuitShopInfo_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_BuySuitInShop_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_BuySuitInShop_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_BuySuitInShop_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_BuySuitInShop_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_RoleSuitInfo_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_RoleSuitInfo_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_RoleSuitInfo_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_RoleSuitInfo_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_DressSuit_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_DressSuit_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_DressSuit_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_DressSuit_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_TakeOffSuit_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_TakeOffSuit_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_TakeOffSuit_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_TakeOffSuit_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_AskRewardList_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_AskRewardList_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Sync_Role_RewardList_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Sync_Role_RewardList_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_FaceShopInfo_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_FaceShopInfo_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_FaceShopInfo_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_FaceShopInfo_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_BuyFaceInShop_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_BuyFaceInShop_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_BuyFaceInShop_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_BuyFaceInShop_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_RoleFaceInfo_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_RoleFaceInfo_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_RoleFaceInfo_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_RoleFaceInfo_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_DressFace_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_DressFace_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_DressFace_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_DressFace_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_TakeOffFace_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_TakeOffFace_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_TakeOffFace_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_TakeOffFace_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_ManualUpdateFaceShop_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_ManualUpdateFaceShop_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_ManualUpdateFaceShop_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_ManualUpdateFaceShop_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_PassRisk_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_PassRisk_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_PassRisk_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_PassRisk_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_ReadyEnterRisk_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_ReadyEnterRisk_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_ReadyEnterRisk_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_ReadyEnterRisk_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_NPC_Add_RecordQueue_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_NPC_Add_RecordQueue_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_NPC_Go_RecordQueue_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_NPC_Go_RecordQueue_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_Select_Recommend_Friends_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Select_Recommend_Friends_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Select_Recommend_Friends_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Select_Recommend_Friends_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_FindFriend_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_FindFriend_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_FindFriend_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_FindFriend_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_Add_Friend_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Add_Friend_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Add_Friend_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Add_Friend_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_Remove_Friend_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Remove_Friend_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Remove_Friend_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Remove_Friend_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Request_Add_Friend_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Request_Add_Friend_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_Request_Add_Friend_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Request_Add_Friend_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Friend_Online_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Friend_Online_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Friend_Offline_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Friend_Offline_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_Skill_Study_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Skill_Study_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Skill_Study_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Skill_Study_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_Skill_LevelUp_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Skill_LevelUp_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Skill_LevelUp_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Skill_LevelUp_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_Skill_DressTalent_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Skill_DressTalent_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Skill_DressTalent_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Skill_DressTalent_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_Skill_TakeOffTalent_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Skill_TakeOffTalent_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Skill_TakeOffTalent_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Skill_TakeOffTalent_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_Skill_DressBook_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Skill_DressBook_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Skill_DressBook_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Skill_DressBook_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_Skill_TakeOffBook_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Skill_TakeOffBook_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Skill_TakeOffBook_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Skill_TakeOffBook_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_Ask_ChangeAttrPoint_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Ask_ChangeAttrPoint_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_Ask_SummonpetChangeAttrPoint_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Ask_SummonpetChangeAttrPoint_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_Ask_CreateTeam_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Ask_CreateTeam_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Ret_CreateTeam_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Ret_CreateTeam_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_Ask_DestroyTeam_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Ask_DestroyTeam_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Ret_DestroyTeam_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Ret_DestroyTeam_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_Ask_InviteEnterTeam_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Ask_InviteEnterTeam_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Ret_InviteEnterTeam_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Ret_InviteEnterTeam_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_Ask_ApplyEnterTeam_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Ask_ApplyEnterTeam_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Ret_ApplyEnterTeam_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Ret_ApplyEnterTeam_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_Ask_ApplyLeaveTeam_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Ask_ApplyLeaveTeam_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Ret_ApplyLeaveTeam_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Ret_ApplyLeaveTeam_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_Ask_AgreeEnterTeam_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Ask_AgreeEnterTeam_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Ret_AgreeEnterTeam_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Ret_AgreeEnterTeam_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_Ask_RefuseEnterTeam_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Ask_RefuseEnterTeam_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Ret_RefuseEnterTeam_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Ret_RefuseEnterTeam_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_Ask_KickLeaveTeam_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Ask_KickLeaveTeam_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Ret_KickLeaveTeam_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Ret_KickLeaveTeam_reflection_ = nullptr;
const ::google::protobuf::Descriptor* C2S_Ask_TeamInfo_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Ask_TeamInfo_reflection_ = nullptr;
const ::google::protobuf::Descriptor* S2C_Ret_TeamInfo_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Ret_TeamInfo_reflection_ = nullptr;

}  // namespace


void protobuf_AssignDesc_NetPacket_2eproto() {
  protobuf_AddDesc_NetPacket_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "NetPacket.proto");
  GOOGLE_CHECK(file != nullptr);
  C2S_Ask_Login_descriptor_ = file->message_type(0);
  static const int C2S_Ask_Login_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_Login, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_Login, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_Login, sid_),
  };
  C2S_Ask_Login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Ask_Login_descriptor_,
      C2S_Ask_Login::default_instance_,
      C2S_Ask_Login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_Login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_Login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Ask_Login));
  S2C_Ret_Login_descriptor_ = file->message_type(1);
  static const int S2C_Ret_Login_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_Login, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_Login, re_login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_Login, account_),
  };
  S2C_Ret_Login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Ret_Login_descriptor_,
      S2C_Ret_Login::default_instance_,
      S2C_Ret_Login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_Login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_Login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Ret_Login));
  C2S_Ask_Register_descriptor_ = file->message_type(2);
  static const int C2S_Ask_Register_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_Register, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_Register, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_Register, new_unit_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_Register, ret_unitindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_Register, ret_intaddr_),
  };
  C2S_Ask_Register_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Ask_Register_descriptor_,
      C2S_Ask_Register::default_instance_,
      C2S_Ask_Register_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_Register, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_Register, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Ask_Register));
  S2C_Ret_Register_descriptor_ = file->message_type(3);
  static const int S2C_Ret_Register_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_Register, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_Register, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_Register, account_key_),
  };
  S2C_Ret_Register_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Ret_Register_descriptor_,
      S2C_Ret_Register::default_instance_,
      S2C_Ret_Register_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_Register, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_Register, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Ret_Register));
  C2S_Ask_RoleSum_descriptor_ = file->message_type(4);
  static const int C2S_Ask_RoleSum_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_RoleSum, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_RoleSum, ret_unitindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_RoleSum, ret_intaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_RoleSum, account_key_),
  };
  C2S_Ask_RoleSum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Ask_RoleSum_descriptor_,
      C2S_Ask_RoleSum::default_instance_,
      C2S_Ask_RoleSum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_RoleSum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_RoleSum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Ask_RoleSum));
  S2C_Ret_RoleSum_descriptor_ = file->message_type(5);
  static const int S2C_Ret_RoleSum_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_RoleSum, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_RoleSum, list_role_index_),
  };
  S2C_Ret_RoleSum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Ret_RoleSum_descriptor_,
      S2C_Ret_RoleSum::default_instance_,
      S2C_Ret_RoleSum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_RoleSum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_RoleSum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Ret_RoleSum));
  C2S_ClearRole_descriptor_ = file->message_type(6);
  static const int C2S_ClearRole_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_ClearRole, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_ClearRole, ret_unitindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_ClearRole, ret_intaddr_),
  };
  C2S_ClearRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_ClearRole_descriptor_,
      C2S_ClearRole::default_instance_,
      C2S_ClearRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_ClearRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_ClearRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_ClearRole));
  S2C_Response_ClearRole_descriptor_ = file->message_type(7);
  static const int S2C_Response_ClearRole_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Response_ClearRole, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Response_ClearRole, is_ok_),
  };
  S2C_Response_ClearRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Response_ClearRole_descriptor_,
      S2C_Response_ClearRole::default_instance_,
      S2C_Response_ClearRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Response_ClearRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Response_ClearRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Response_ClearRole));
  C2S_RandNickName_descriptor_ = file->message_type(8);
  static const int C2S_RandNickName_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_RandNickName, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_RandNickName, ret_unitindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_RandNickName, ret_intaddr_),
  };
  C2S_RandNickName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_RandNickName_descriptor_,
      C2S_RandNickName::default_instance_,
      C2S_RandNickName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_RandNickName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_RandNickName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_RandNickName));
  S2C_RandNickName_descriptor_ = file->message_type(9);
  static const int S2C_RandNickName_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_RandNickName, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_RandNickName, list_nick_name_),
  };
  S2C_RandNickName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_RandNickName_descriptor_,
      S2C_RandNickName::default_instance_,
      S2C_RandNickName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_RandNickName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_RandNickName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_RandNickName));
  C2S_Ask_RoleCreate_descriptor_ = file->message_type(10);
  static const int C2S_Ask_RoleCreate_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_RoleCreate, nick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_RoleCreate, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_RoleCreate, device_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_RoleCreate, device_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_RoleCreate, device_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_RoleCreate, platform_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_RoleCreate, role_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_RoleCreate, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_RoleCreate, role_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_RoleCreate, ret_unitindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_RoleCreate, ret_intaddr_),
  };
  C2S_Ask_RoleCreate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Ask_RoleCreate_descriptor_,
      C2S_Ask_RoleCreate::default_instance_,
      C2S_Ask_RoleCreate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_RoleCreate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_RoleCreate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Ask_RoleCreate));
  S2C_Ret_RoleCreate_descriptor_ = file->message_type(11);
  static const int S2C_Ret_RoleCreate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_RoleCreate, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_RoleCreate, nick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_RoleCreate, account_),
  };
  S2C_Ret_RoleCreate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Ret_RoleCreate_descriptor_,
      S2C_Ret_RoleCreate::default_instance_,
      S2C_Ret_RoleCreate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_RoleCreate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_RoleCreate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Ret_RoleCreate));
  C2S_Ask_RoleInfo_descriptor_ = file->message_type(12);
  static const int C2S_Ask_RoleInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_RoleInfo, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_RoleInfo, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_RoleInfo, ret_unitindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_RoleInfo, ret_intaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_RoleInfo, force_apply_role_info_),
  };
  C2S_Ask_RoleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Ask_RoleInfo_descriptor_,
      C2S_Ask_RoleInfo::default_instance_,
      C2S_Ask_RoleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_RoleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_RoleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Ask_RoleInfo));
  S2C_Ret_RoleInfo_descriptor_ = file->message_type(13);
  static const int S2C_Ret_RoleInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_RoleInfo, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_RoleInfo, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_RoleInfo, role_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_RoleInfo, login_intaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_RoleInfo, scene_intaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_RoleInfo, scene_instance_id_),
  };
  S2C_Ret_RoleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Ret_RoleInfo_descriptor_,
      S2C_Ret_RoleInfo::default_instance_,
      S2C_Ret_RoleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_RoleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_RoleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Ret_RoleInfo));
  C2S_Sync_RoleConfig_descriptor_ = file->message_type(14);
  static const int C2S_Sync_RoleConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Sync_RoleConfig, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Sync_RoleConfig, role_config_),
  };
  C2S_Sync_RoleConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Sync_RoleConfig_descriptor_,
      C2S_Sync_RoleConfig::default_instance_,
      C2S_Sync_RoleConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Sync_RoleConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Sync_RoleConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Sync_RoleConfig));
  S2C_Sync_RoleConfig_descriptor_ = file->message_type(15);
  static const int S2C_Sync_RoleConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_RoleConfig, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_RoleConfig, role_config_),
  };
  S2C_Sync_RoleConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Sync_RoleConfig_descriptor_,
      S2C_Sync_RoleConfig::default_instance_,
      S2C_Sync_RoleConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_RoleConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_RoleConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Sync_RoleConfig));
  C2S_Ask_Ready_EnterScene_descriptor_ = file->message_type(16);
  static const int C2S_Ask_Ready_EnterScene_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_Ready_EnterScene, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_Ready_EnterScene, login_intaddr_),
  };
  C2S_Ask_Ready_EnterScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Ask_Ready_EnterScene_descriptor_,
      C2S_Ask_Ready_EnterScene::default_instance_,
      C2S_Ask_Ready_EnterScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_Ready_EnterScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_Ready_EnterScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Ask_Ready_EnterScene));
  S2C_Ret_Ready_EnterScene_descriptor_ = file->message_type(17);
  static const int S2C_Ret_Ready_EnterScene_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_Ready_EnterScene, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_Ready_EnterScene, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_Ready_EnterScene, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_Ready_EnterScene, scene_intaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_Ready_EnterScene, scene_instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_Ready_EnterScene, scene_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_Ready_EnterScene, is_refresh_),
  };
  S2C_Ret_Ready_EnterScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Ret_Ready_EnterScene_descriptor_,
      S2C_Ret_Ready_EnterScene::default_instance_,
      S2C_Ret_Ready_EnterScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_Ready_EnterScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_Ready_EnterScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Ret_Ready_EnterScene));
  C2S_Ask_EnterScene_descriptor_ = file->message_type(18);
  static const int C2S_Ask_EnterScene_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_EnterScene, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_EnterScene, scene_instance_id_),
  };
  C2S_Ask_EnterScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Ask_EnterScene_descriptor_,
      C2S_Ask_EnterScene::default_instance_,
      C2S_Ask_EnterScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_EnterScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_EnterScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Ask_EnterScene));
  C2S_RefreshScene_descriptor_ = file->message_type(19);
  static const int C2S_RefreshScene_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_RefreshScene, role_index_),
  };
  C2S_RefreshScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_RefreshScene_descriptor_,
      C2S_RefreshScene::default_instance_,
      C2S_RefreshScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_RefreshScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_RefreshScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_RefreshScene));
  S2C_Notice_OffLine_descriptor_ = file->message_type(20);
  static const int S2C_Notice_OffLine_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Notice_OffLine, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Notice_OffLine, reason_),
  };
  S2C_Notice_OffLine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Notice_OffLine_descriptor_,
      S2C_Notice_OffLine::default_instance_,
      S2C_Notice_OffLine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Notice_OffLine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Notice_OffLine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Notice_OffLine));
  C2S_Ask_Charset_descriptor_ = file->message_type(21);
  static const int C2S_Ask_Charset_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_Charset, utf_8_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_Charset, msg_version_),
  };
  C2S_Ask_Charset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Ask_Charset_descriptor_,
      C2S_Ask_Charset::default_instance_,
      C2S_Ask_Charset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_Charset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_Charset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Ask_Charset));
  C2S_Heartbeat_descriptor_ = file->message_type(22);
  static const int C2S_Heartbeat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Heartbeat, time_),
  };
  C2S_Heartbeat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Heartbeat_descriptor_,
      C2S_Heartbeat::default_instance_,
      C2S_Heartbeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Heartbeat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Heartbeat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Heartbeat));
  S2C_Heartbeat_descriptor_ = file->message_type(23);
  static const int S2C_Heartbeat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Heartbeat, time_),
  };
  S2C_Heartbeat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Heartbeat_descriptor_,
      S2C_Heartbeat::default_instance_,
      S2C_Heartbeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Heartbeat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Heartbeat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Heartbeat));
  C2S_GameCoin_descriptor_ = file->message_type(24);
  static const int C2S_GameCoin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_GameCoin, role_index_),
  };
  C2S_GameCoin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_GameCoin_descriptor_,
      C2S_GameCoin::default_instance_,
      C2S_GameCoin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_GameCoin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_GameCoin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_GameCoin));
  S2C_Sync_Role_GameCoin_descriptor_ = file->message_type(25);
  static const int S2C_Sync_Role_GameCoin_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_Role_GameCoin, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_Role_GameCoin, add_game_coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_Role_GameCoin, cur_game_coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_Role_GameCoin, is_show_),
  };
  S2C_Sync_Role_GameCoin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Sync_Role_GameCoin_descriptor_,
      S2C_Sync_Role_GameCoin::default_instance_,
      S2C_Sync_Role_GameCoin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_Role_GameCoin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_Role_GameCoin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Sync_Role_GameCoin));
  C2S_DiamondCoin_descriptor_ = file->message_type(26);
  static const int C2S_DiamondCoin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_DiamondCoin, role_index_),
  };
  C2S_DiamondCoin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_DiamondCoin_descriptor_,
      C2S_DiamondCoin::default_instance_,
      C2S_DiamondCoin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_DiamondCoin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_DiamondCoin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_DiamondCoin));
  S2C_DiamondCoin_descriptor_ = file->message_type(27);
  static const int S2C_DiamondCoin_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_DiamondCoin, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_DiamondCoin, diamond_coin_),
  };
  S2C_DiamondCoin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_DiamondCoin_descriptor_,
      S2C_DiamondCoin::default_instance_,
      S2C_DiamondCoin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_DiamondCoin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_DiamondCoin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_DiamondCoin));
  C2S_Stamina_descriptor_ = file->message_type(28);
  static const int C2S_Stamina_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Stamina, role_index_),
  };
  C2S_Stamina_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Stamina_descriptor_,
      C2S_Stamina::default_instance_,
      C2S_Stamina_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Stamina, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Stamina, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Stamina));
  S2C_Stamina_descriptor_ = file->message_type(29);
  static const int S2C_Stamina_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Stamina, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Stamina, stamina_),
  };
  S2C_Stamina_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Stamina_descriptor_,
      S2C_Stamina::default_instance_,
      S2C_Stamina_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Stamina, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Stamina, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Stamina));
  C2S_Exp_descriptor_ = file->message_type(30);
  static const int C2S_Exp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Exp, role_index_),
  };
  C2S_Exp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Exp_descriptor_,
      C2S_Exp::default_instance_,
      C2S_Exp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Exp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Exp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Exp));
  S2C_Sync_Role_Exp_descriptor_ = file->message_type(31);
  static const int S2C_Sync_Role_Exp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_Role_Exp, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_Role_Exp, is_show_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_Role_Exp, add_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_Role_Exp, cur_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_Role_Exp, max_exp_),
  };
  S2C_Sync_Role_Exp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Sync_Role_Exp_descriptor_,
      S2C_Sync_Role_Exp::default_instance_,
      S2C_Sync_Role_Exp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_Role_Exp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_Role_Exp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Sync_Role_Exp));
  S2C_Notice_Role_EnterScene_descriptor_ = file->message_type(32);
  static const int S2C_Notice_Role_EnterScene_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Notice_Role_EnterScene, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Notice_Role_EnterScene, public_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Notice_Role_EnterScene, public_memory_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Notice_Role_EnterScene, additional_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Notice_Role_EnterScene, scene_instance_id_),
  };
  S2C_Notice_Role_EnterScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Notice_Role_EnterScene_descriptor_,
      S2C_Notice_Role_EnterScene::default_instance_,
      S2C_Notice_Role_EnterScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Notice_Role_EnterScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Notice_Role_EnterScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Notice_Role_EnterScene));
  S2C_Notice_Role_LeaveScene_descriptor_ = file->message_type(33);
  static const int S2C_Notice_Role_LeaveScene_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Notice_Role_LeaveScene, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Notice_Role_LeaveScene, scene_instance_id_),
  };
  S2C_Notice_Role_LeaveScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Notice_Role_LeaveScene_descriptor_,
      S2C_Notice_Role_LeaveScene::default_instance_,
      S2C_Notice_Role_LeaveScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Notice_Role_LeaveScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Notice_Role_LeaveScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Notice_Role_LeaveScene));
  S2C_Sync_Role_PublicInfo_descriptor_ = file->message_type(34);
  static const int S2C_Sync_Role_PublicInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_Role_PublicInfo, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_Role_PublicInfo, public_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_Role_PublicInfo, public_memory_info_),
  };
  S2C_Sync_Role_PublicInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Sync_Role_PublicInfo_descriptor_,
      S2C_Sync_Role_PublicInfo::default_instance_,
      S2C_Sync_Role_PublicInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_Role_PublicInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_Role_PublicInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Sync_Role_PublicInfo));
  S2C_Sync_Role_PrivateInfo_descriptor_ = file->message_type(35);
  static const int S2C_Sync_Role_PrivateInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_Role_PrivateInfo, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_Role_PrivateInfo, private_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_Role_PrivateInfo, private_memory_info_),
  };
  S2C_Sync_Role_PrivateInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Sync_Role_PrivateInfo_descriptor_,
      S2C_Sync_Role_PrivateInfo::default_instance_,
      S2C_Sync_Role_PrivateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_Role_PrivateInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_Role_PrivateInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Sync_Role_PrivateInfo));
  S2C_Sync_RoleInfo_descriptor_ = file->message_type(36);
  static const int S2C_Sync_RoleInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_RoleInfo, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_RoleInfo, universal_role_info_),
  };
  S2C_Sync_RoleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Sync_RoleInfo_descriptor_,
      S2C_Sync_RoleInfo::default_instance_,
      S2C_Sync_RoleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_RoleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_RoleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Sync_RoleInfo));
  S2C_Sync_RoleAttr_descriptor_ = file->message_type(37);
  static const int S2C_Sync_RoleAttr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_RoleAttr, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_RoleAttr, new_role_attr_),
  };
  S2C_Sync_RoleAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Sync_RoleAttr_descriptor_,
      S2C_Sync_RoleAttr::default_instance_,
      S2C_Sync_RoleAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_RoleAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_RoleAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Sync_RoleAttr));
  C2S_Sync_Dir_descriptor_ = file->message_type(38);
  static const int C2S_Sync_Dir_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Sync_Dir, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Sync_Dir, dir_),
  };
  C2S_Sync_Dir_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Sync_Dir_descriptor_,
      C2S_Sync_Dir::default_instance_,
      C2S_Sync_Dir_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Sync_Dir, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Sync_Dir, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Sync_Dir));
  S2C_Sync_Dir_descriptor_ = file->message_type(39);
  static const int S2C_Sync_Dir_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_Dir, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_Dir, dir_),
  };
  S2C_Sync_Dir_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Sync_Dir_descriptor_,
      S2C_Sync_Dir::default_instance_,
      S2C_Sync_Dir_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_Dir, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_Dir, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Sync_Dir));
  C2S_Sync_RoleMove_descriptor_ = file->message_type(40);
  static const int C2S_Sync_RoleMove_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Sync_RoleMove, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Sync_RoleMove, begin_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Sync_RoleMove, begin_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Sync_RoleMove, end_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Sync_RoleMove, end_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Sync_RoleMove, is_run_),
  };
  C2S_Sync_RoleMove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Sync_RoleMove_descriptor_,
      C2S_Sync_RoleMove::default_instance_,
      C2S_Sync_RoleMove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Sync_RoleMove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Sync_RoleMove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Sync_RoleMove));
  S2C_Sync_RoleMove_descriptor_ = file->message_type(41);
  static const int S2C_Sync_RoleMove_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_RoleMove, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_RoleMove, begin_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_RoleMove, begin_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_RoleMove, end_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_RoleMove, end_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_RoleMove, is_run_),
  };
  S2C_Sync_RoleMove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Sync_RoleMove_descriptor_,
      S2C_Sync_RoleMove::default_instance_,
      S2C_Sync_RoleMove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_RoleMove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_RoleMove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Sync_RoleMove));
  S2C_Sync_RoleStopMove_descriptor_ = file->message_type(42);
  static const int S2C_Sync_RoleStopMove_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_RoleStopMove, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_RoleStopMove, end_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_RoleStopMove, end_y_),
  };
  S2C_Sync_RoleStopMove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Sync_RoleStopMove_descriptor_,
      S2C_Sync_RoleStopMove::default_instance_,
      S2C_Sync_RoleStopMove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_RoleStopMove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_RoleStopMove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Sync_RoleStopMove));
  S2C_Notice_Role_LevelUp_descriptor_ = file->message_type(43);
  static const int S2C_Notice_Role_LevelUp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Notice_Role_LevelUp, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Notice_Role_LevelUp, new_role_attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Notice_Role_LevelUp, new_level_),
  };
  S2C_Notice_Role_LevelUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Notice_Role_LevelUp_descriptor_,
      S2C_Notice_Role_LevelUp::default_instance_,
      S2C_Notice_Role_LevelUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Notice_Role_LevelUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Notice_Role_LevelUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Notice_Role_LevelUp));
  C2S_Ask_Comrade_descriptor_ = file->message_type(44);
  static const int C2S_Ask_Comrade_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_Comrade, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_Comrade, comrade_role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_Comrade, team_pos_index_),
  };
  C2S_Ask_Comrade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Ask_Comrade_descriptor_,
      C2S_Ask_Comrade::default_instance_,
      C2S_Ask_Comrade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_Comrade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_Comrade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Ask_Comrade));
  S2C_Ret_Comrade_descriptor_ = file->message_type(45);
  static const int S2C_Ret_Comrade_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_Comrade, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_Comrade, team_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_Comrade, comrade_role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_Comrade, team_pos_index_),
  };
  S2C_Ret_Comrade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Ret_Comrade_descriptor_,
      S2C_Ret_Comrade::default_instance_,
      S2C_Ret_Comrade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_Comrade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_Comrade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Ret_Comrade));
  C2S_Ask_Chat_descriptor_ = file->message_type(46);
  static const int C2S_Ask_Chat_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_Chat, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_Chat, chat_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_Chat, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_Chat, backcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_Chat, boxcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_Chat, shadowcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_Chat, msgcolor_),
  };
  C2S_Ask_Chat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Ask_Chat_descriptor_,
      C2S_Ask_Chat::default_instance_,
      C2S_Ask_Chat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_Chat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_Chat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Ask_Chat));
  S2C_Ret_Chat_descriptor_ = file->message_type(47);
  static const int S2C_Ret_Chat_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_Chat, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_Chat, scene_instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_Chat, chat_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_Chat, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_Chat, backcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_Chat, boxcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_Chat, shadowcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_Chat, msgcolor_),
  };
  S2C_Ret_Chat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Ret_Chat_descriptor_,
      S2C_Ret_Chat::default_instance_,
      S2C_Ret_Chat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_Chat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_Chat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Ret_Chat));
  C2S_Change_Scene_descriptor_ = file->message_type(48);
  static const int C2S_Change_Scene_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Change_Scene, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Change_Scene, tar_scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Change_Scene, pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Change_Scene, pos_y_),
  };
  C2S_Change_Scene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Change_Scene_descriptor_,
      C2S_Change_Scene::default_instance_,
      C2S_Change_Scene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Change_Scene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Change_Scene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Change_Scene));
  C2S_TransPortChangeScene_descriptor_ = file->message_type(49);
  static const int C2S_TransPortChangeScene_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_TransPortChangeScene, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_TransPortChangeScene, transport_id_),
  };
  C2S_TransPortChangeScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_TransPortChangeScene_descriptor_,
      C2S_TransPortChangeScene::default_instance_,
      C2S_TransPortChangeScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_TransPortChangeScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_TransPortChangeScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_TransPortChangeScene));
  S2C_TransPortChangeScene_descriptor_ = file->message_type(50);
  static const int S2C_TransPortChangeScene_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_TransPortChangeScene, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_TransPortChangeScene, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_TransPortChangeScene, transport_id_),
  };
  S2C_TransPortChangeScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_TransPortChangeScene_descriptor_,
      S2C_TransPortChangeScene::default_instance_,
      S2C_TransPortChangeScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_TransPortChangeScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_TransPortChangeScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_TransPortChangeScene));
  C2S_NPC_ChangeScene_descriptor_ = file->message_type(51);
  static const int C2S_NPC_ChangeScene_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_NPC_ChangeScene, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_NPC_ChangeScene, npc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_NPC_ChangeScene, scene_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_NPC_ChangeScene, trans_info_id_),
  };
  C2S_NPC_ChangeScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_NPC_ChangeScene_descriptor_,
      C2S_NPC_ChangeScene::default_instance_,
      C2S_NPC_ChangeScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_NPC_ChangeScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_NPC_ChangeScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_NPC_ChangeScene));
  S2C_NPC_ChangeScene_descriptor_ = file->message_type(52);
  static const int S2C_NPC_ChangeScene_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_NPC_ChangeScene, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_NPC_ChangeScene, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_NPC_ChangeScene, npc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_NPC_ChangeScene, scene_type_),
  };
  S2C_NPC_ChangeScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_NPC_ChangeScene_descriptor_,
      S2C_NPC_ChangeScene::default_instance_,
      S2C_NPC_ChangeScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_NPC_ChangeScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_NPC_ChangeScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_NPC_ChangeScene));
  C2S_Qiecuo_Battle_descriptor_ = file->message_type(53);
  static const int C2S_Qiecuo_Battle_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Qiecuo_Battle, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Qiecuo_Battle, tar_role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Qiecuo_Battle, scene_instance_id_),
  };
  C2S_Qiecuo_Battle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Qiecuo_Battle_descriptor_,
      C2S_Qiecuo_Battle::default_instance_,
      C2S_Qiecuo_Battle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Qiecuo_Battle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Qiecuo_Battle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Qiecuo_Battle));
  S2C_Qiecuo_Battle_Refuse_descriptor_ = file->message_type(54);
  static const int S2C_Qiecuo_Battle_Refuse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Qiecuo_Battle_Refuse, src_role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Qiecuo_Battle_Refuse, tar_role_index_),
  };
  S2C_Qiecuo_Battle_Refuse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Qiecuo_Battle_Refuse_descriptor_,
      S2C_Qiecuo_Battle_Refuse::default_instance_,
      S2C_Qiecuo_Battle_Refuse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Qiecuo_Battle_Refuse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Qiecuo_Battle_Refuse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Qiecuo_Battle_Refuse));
  S2C_Qiecuo_Battle_descriptor_ = file->message_type(55);
  static const int S2C_Qiecuo_Battle_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Qiecuo_Battle, src_role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Qiecuo_Battle, tar_role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Qiecuo_Battle, scene_instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Qiecuo_Battle, new_battle_scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Qiecuo_Battle, battle_team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Qiecuo_Battle, battle_pos_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Qiecuo_Battle, battle_index_),
  };
  S2C_Qiecuo_Battle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Qiecuo_Battle_descriptor_,
      S2C_Qiecuo_Battle::default_instance_,
      S2C_Qiecuo_Battle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Qiecuo_Battle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Qiecuo_Battle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Qiecuo_Battle));
  S2C_Qiecuo_Confirm_Battle_descriptor_ = file->message_type(56);
  static const int S2C_Qiecuo_Confirm_Battle_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Qiecuo_Confirm_Battle, src_role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Qiecuo_Confirm_Battle, tar_role_index_),
  };
  S2C_Qiecuo_Confirm_Battle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Qiecuo_Confirm_Battle_descriptor_,
      S2C_Qiecuo_Confirm_Battle::default_instance_,
      S2C_Qiecuo_Confirm_Battle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Qiecuo_Confirm_Battle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Qiecuo_Confirm_Battle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Qiecuo_Confirm_Battle));
  C2S_Qiecuo_Confirm_Battle_descriptor_ = file->message_type(57);
  static const int C2S_Qiecuo_Confirm_Battle_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Qiecuo_Confirm_Battle, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Qiecuo_Confirm_Battle, src_role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Qiecuo_Confirm_Battle, agree_),
  };
  C2S_Qiecuo_Confirm_Battle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Qiecuo_Confirm_Battle_descriptor_,
      C2S_Qiecuo_Confirm_Battle::default_instance_,
      C2S_Qiecuo_Confirm_Battle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Qiecuo_Confirm_Battle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Qiecuo_Confirm_Battle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Qiecuo_Confirm_Battle));
  C2S_Battle_Info_descriptor_ = file->message_type(58);
  static const int C2S_Battle_Info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Battle_Info, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Battle_Info, battle_index_),
  };
  C2S_Battle_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Battle_Info_descriptor_,
      C2S_Battle_Info::default_instance_,
      C2S_Battle_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Battle_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Battle_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Battle_Info));
  Battle_Role_Info_descriptor_ = file->message_type(59);
  static const int Battle_Role_Info_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle_Role_Info, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle_Role_Info, battle_pos_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle_Role_Info, role_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle_Role_Info, racial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle_Role_Info, nick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle_Role_Info, level_),
  };
  Battle_Role_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle_Role_Info_descriptor_,
      Battle_Role_Info::default_instance_,
      Battle_Role_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle_Role_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle_Role_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle_Role_Info));
  S2C_Battle_Info_descriptor_ = file->message_type(60);
  static const int S2C_Battle_Info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Battle_Info, battle_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Battle_Info, list_battle_role_infos_),
  };
  S2C_Battle_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Battle_Info_descriptor_,
      S2C_Battle_Info::default_instance_,
      S2C_Battle_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Battle_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Battle_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Battle_Info));
  C2S_Battle_Frame_Info_descriptor_ = file->message_type(61);
  static const int C2S_Battle_Frame_Info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Battle_Frame_Info, battle_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Battle_Frame_Info, battle_frame_index_),
  };
  C2S_Battle_Frame_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Battle_Frame_Info_descriptor_,
      C2S_Battle_Frame_Info::default_instance_,
      C2S_Battle_Frame_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Battle_Frame_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Battle_Frame_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Battle_Frame_Info));
  Battle_Frame_Info_descriptor_ = file->message_type(62);
  static const int Battle_Frame_Info_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle_Frame_Info, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle_Frame_Info, battle_pos_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle_Frame_Info, role_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle_Frame_Info, racial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle_Frame_Info, nick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle_Frame_Info, level_),
  };
  Battle_Frame_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Battle_Frame_Info_descriptor_,
      Battle_Frame_Info::default_instance_,
      Battle_Frame_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle_Frame_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Battle_Frame_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Battle_Frame_Info));
  S2C_Battle_Frame_Info_descriptor_ = file->message_type(63);
  static const int S2C_Battle_Frame_Info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Battle_Frame_Info, battle_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Battle_Frame_Info, battle_frame_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Battle_Frame_Info, battle_frame_info_),
  };
  S2C_Battle_Frame_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Battle_Frame_Info_descriptor_,
      S2C_Battle_Frame_Info::default_instance_,
      S2C_Battle_Frame_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Battle_Frame_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Battle_Frame_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Battle_Frame_Info));
  S2C_Avatar_Goods_List_descriptor_ = file->message_type(64);
  static const int S2C_Avatar_Goods_List_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Avatar_Goods_List, list_avatar_info_),
  };
  S2C_Avatar_Goods_List_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Avatar_Goods_List_descriptor_,
      S2C_Avatar_Goods_List::default_instance_,
      S2C_Avatar_Goods_List_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Avatar_Goods_List, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Avatar_Goods_List, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Avatar_Goods_List));
  C2S_Buy_Avatar_Goods_descriptor_ = file->message_type(65);
  static const int C2S_Buy_Avatar_Goods_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Buy_Avatar_Goods, list_avatar_info_),
  };
  C2S_Buy_Avatar_Goods_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Buy_Avatar_Goods_descriptor_,
      C2S_Buy_Avatar_Goods::default_instance_,
      C2S_Buy_Avatar_Goods_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Buy_Avatar_Goods, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Buy_Avatar_Goods, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Buy_Avatar_Goods));
  S2C_Buy_Avatar_Goods_descriptor_ = file->message_type(66);
  static const int S2C_Buy_Avatar_Goods_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Buy_Avatar_Goods, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Buy_Avatar_Goods, list_avatar_info_),
  };
  S2C_Buy_Avatar_Goods_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Buy_Avatar_Goods_descriptor_,
      S2C_Buy_Avatar_Goods::default_instance_,
      S2C_Buy_Avatar_Goods_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Buy_Avatar_Goods, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Buy_Avatar_Goods, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Buy_Avatar_Goods));
  C2S_Bag_Item_descriptor_ = file->message_type(67);
  static const int C2S_Bag_Item_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Bag_Item, role_index_),
  };
  C2S_Bag_Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Bag_Item_descriptor_,
      C2S_Bag_Item::default_instance_,
      C2S_Bag_Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Bag_Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Bag_Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Bag_Item));
  S2C_Sync_Role_Bag_Item_descriptor_ = file->message_type(68);
  static const int S2C_Sync_Role_Bag_Item_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_Role_Bag_Item, game_coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_Role_Bag_Item, game_deposit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_Role_Bag_Item, game_bag_),
  };
  S2C_Sync_Role_Bag_Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Sync_Role_Bag_Item_descriptor_,
      S2C_Sync_Role_Bag_Item::default_instance_,
      S2C_Sync_Role_Bag_Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_Role_Bag_Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_Role_Bag_Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Sync_Role_Bag_Item));
  C2S_Bag_MoveItem_descriptor_ = file->message_type(69);
  static const int C2S_Bag_MoveItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Bag_MoveItem, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Bag_MoveItem, src_item_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Bag_MoveItem, src_item_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Bag_MoveItem, tar_item_pos_),
  };
  C2S_Bag_MoveItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Bag_MoveItem_descriptor_,
      C2S_Bag_MoveItem::default_instance_,
      C2S_Bag_MoveItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Bag_MoveItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Bag_MoveItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Bag_MoveItem));
  C2S_Use_Item_descriptor_ = file->message_type(70);
  static const int C2S_Use_Item_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Use_Item, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Use_Item, bag_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Use_Item, item_index_),
  };
  C2S_Use_Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Use_Item_descriptor_,
      C2S_Use_Item::default_instance_,
      C2S_Use_Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Use_Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Use_Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Use_Item));
  S2C_Use_Item_descriptor_ = file->message_type(71);
  static const int S2C_Use_Item_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Use_Item, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Use_Item, bag_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Use_Item, item_index_),
  };
  S2C_Use_Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Use_Item_descriptor_,
      S2C_Use_Item::default_instance_,
      S2C_Use_Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Use_Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Use_Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Use_Item));
  C2S_Role_Equip_descriptor_ = file->message_type(72);
  static const int C2S_Role_Equip_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Role_Equip, role_index_),
  };
  C2S_Role_Equip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Role_Equip_descriptor_,
      C2S_Role_Equip::default_instance_,
      C2S_Role_Equip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Role_Equip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Role_Equip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Role_Equip));
  S2C_Role_Equip_descriptor_ = file->message_type(73);
  static const int S2C_Role_Equip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Role_Equip, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Role_Equip, equips_),
  };
  S2C_Role_Equip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Role_Equip_descriptor_,
      S2C_Role_Equip::default_instance_,
      S2C_Role_Equip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Role_Equip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Role_Equip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Role_Equip));
  C2S_TakeOff_Equip_descriptor_ = file->message_type(74);
  static const int C2S_TakeOff_Equip_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_TakeOff_Equip, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_TakeOff_Equip, equip_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_TakeOff_Equip, equip_pos_type_),
  };
  C2S_TakeOff_Equip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_TakeOff_Equip_descriptor_,
      C2S_TakeOff_Equip::default_instance_,
      C2S_TakeOff_Equip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_TakeOff_Equip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_TakeOff_Equip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_TakeOff_Equip));
  S2C_TakeOff_Equip_descriptor_ = file->message_type(75);
  static const int S2C_TakeOff_Equip_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_TakeOff_Equip, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_TakeOff_Equip, equip_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_TakeOff_Equip, equip_pos_type_),
  };
  S2C_TakeOff_Equip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_TakeOff_Equip_descriptor_,
      S2C_TakeOff_Equip::default_instance_,
      S2C_TakeOff_Equip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_TakeOff_Equip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_TakeOff_Equip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_TakeOff_Equip));
  S2C_Bag_Item_Insert_descriptor_ = file->message_type(76);
  static const int S2C_Bag_Item_Insert_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Bag_Item_Insert, item_info_),
  };
  S2C_Bag_Item_Insert_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Bag_Item_Insert_descriptor_,
      S2C_Bag_Item_Insert::default_instance_,
      S2C_Bag_Item_Insert_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Bag_Item_Insert, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Bag_Item_Insert, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Bag_Item_Insert));
  S2C_Bag_Item_Remove_descriptor_ = file->message_type(77);
  static const int S2C_Bag_Item_Remove_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Bag_Item_Remove, item_info_),
  };
  S2C_Bag_Item_Remove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Bag_Item_Remove_descriptor_,
      S2C_Bag_Item_Remove::default_instance_,
      S2C_Bag_Item_Remove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Bag_Item_Remove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Bag_Item_Remove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Bag_Item_Remove));
  C2S_SuitShopInfo_descriptor_ = file->message_type(78);
  static const int C2S_SuitShopInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_SuitShopInfo, role_index_),
  };
  C2S_SuitShopInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_SuitShopInfo_descriptor_,
      C2S_SuitShopInfo::default_instance_,
      C2S_SuitShopInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_SuitShopInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_SuitShopInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_SuitShopInfo));
  S2C_SuitShopInfo_descriptor_ = file->message_type(79);
  static const int S2C_SuitShopInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_SuitShopInfo, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_SuitShopInfo, list_buy_suit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_SuitShopInfo, suit_shop_surplus_update_time_),
  };
  S2C_SuitShopInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_SuitShopInfo_descriptor_,
      S2C_SuitShopInfo::default_instance_,
      S2C_SuitShopInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_SuitShopInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_SuitShopInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_SuitShopInfo));
  C2S_BuySuitInShop_descriptor_ = file->message_type(80);
  static const int C2S_BuySuitInShop_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_BuySuitInShop, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_BuySuitInShop, suit_shop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_BuySuitInShop, suit_duration_),
  };
  C2S_BuySuitInShop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_BuySuitInShop_descriptor_,
      C2S_BuySuitInShop::default_instance_,
      C2S_BuySuitInShop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_BuySuitInShop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_BuySuitInShop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_BuySuitInShop));
  S2C_BuySuitInShop_descriptor_ = file->message_type(81);
  static const int S2C_BuySuitInShop_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BuySuitInShop, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BuySuitInShop, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BuySuitInShop, suit_shop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BuySuitInShop, suit_duration_),
  };
  S2C_BuySuitInShop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_BuySuitInShop_descriptor_,
      S2C_BuySuitInShop::default_instance_,
      S2C_BuySuitInShop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BuySuitInShop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BuySuitInShop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_BuySuitInShop));
  C2S_RoleSuitInfo_descriptor_ = file->message_type(82);
  static const int C2S_RoleSuitInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_RoleSuitInfo, role_index_),
  };
  C2S_RoleSuitInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_RoleSuitInfo_descriptor_,
      C2S_RoleSuitInfo::default_instance_,
      C2S_RoleSuitInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_RoleSuitInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_RoleSuitInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_RoleSuitInfo));
  S2C_RoleSuitInfo_descriptor_ = file->message_type(83);
  static const int S2C_RoleSuitInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_RoleSuitInfo, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_RoleSuitInfo, role_suit_info_),
  };
  S2C_RoleSuitInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_RoleSuitInfo_descriptor_,
      S2C_RoleSuitInfo::default_instance_,
      S2C_RoleSuitInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_RoleSuitInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_RoleSuitInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_RoleSuitInfo));
  C2S_DressSuit_descriptor_ = file->message_type(84);
  static const int C2S_DressSuit_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_DressSuit, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_DressSuit, suit_id_),
  };
  C2S_DressSuit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_DressSuit_descriptor_,
      C2S_DressSuit::default_instance_,
      C2S_DressSuit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_DressSuit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_DressSuit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_DressSuit));
  S2C_DressSuit_descriptor_ = file->message_type(85);
  static const int S2C_DressSuit_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_DressSuit, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_DressSuit, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_DressSuit, suit_id_),
  };
  S2C_DressSuit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_DressSuit_descriptor_,
      S2C_DressSuit::default_instance_,
      S2C_DressSuit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_DressSuit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_DressSuit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_DressSuit));
  C2S_TakeOffSuit_descriptor_ = file->message_type(86);
  static const int C2S_TakeOffSuit_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_TakeOffSuit, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_TakeOffSuit, suit_id_),
  };
  C2S_TakeOffSuit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_TakeOffSuit_descriptor_,
      C2S_TakeOffSuit::default_instance_,
      C2S_TakeOffSuit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_TakeOffSuit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_TakeOffSuit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_TakeOffSuit));
  S2C_TakeOffSuit_descriptor_ = file->message_type(87);
  static const int S2C_TakeOffSuit_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_TakeOffSuit, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_TakeOffSuit, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_TakeOffSuit, suit_id_),
  };
  S2C_TakeOffSuit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_TakeOffSuit_descriptor_,
      S2C_TakeOffSuit::default_instance_,
      S2C_TakeOffSuit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_TakeOffSuit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_TakeOffSuit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_TakeOffSuit));
  C2S_AskRewardList_descriptor_ = file->message_type(88);
  static const int C2S_AskRewardList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_AskRewardList, role_index_),
  };
  C2S_AskRewardList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_AskRewardList_descriptor_,
      C2S_AskRewardList::default_instance_,
      C2S_AskRewardList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_AskRewardList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_AskRewardList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_AskRewardList));
  S2C_Sync_Role_RewardList_descriptor_ = file->message_type(89);
  static const int S2C_Sync_Role_RewardList_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_Role_RewardList, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_Role_RewardList, list_reward_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_Role_RewardList, list_reward_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_Role_RewardList, list_reward_item_),
  };
  S2C_Sync_Role_RewardList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Sync_Role_RewardList_descriptor_,
      S2C_Sync_Role_RewardList::default_instance_,
      S2C_Sync_Role_RewardList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_Role_RewardList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Sync_Role_RewardList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Sync_Role_RewardList));
  C2S_FaceShopInfo_descriptor_ = file->message_type(90);
  static const int C2S_FaceShopInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_FaceShopInfo, role_index_),
  };
  C2S_FaceShopInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_FaceShopInfo_descriptor_,
      C2S_FaceShopInfo::default_instance_,
      C2S_FaceShopInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_FaceShopInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_FaceShopInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_FaceShopInfo));
  S2C_FaceShopInfo_descriptor_ = file->message_type(91);
  static const int S2C_FaceShopInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_FaceShopInfo, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_FaceShopInfo, list_original_buy_face_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_FaceShopInfo, list_discount_buy_face_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_FaceShopInfo, face_shop_surplus_update_time_),
  };
  S2C_FaceShopInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_FaceShopInfo_descriptor_,
      S2C_FaceShopInfo::default_instance_,
      S2C_FaceShopInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_FaceShopInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_FaceShopInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_FaceShopInfo));
  C2S_BuyFaceInShop_descriptor_ = file->message_type(92);
  static const int C2S_BuyFaceInShop_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_BuyFaceInShop, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_BuyFaceInShop, face_shop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_BuyFaceInShop, face_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_BuyFaceInShop, face_isdiscount_),
  };
  C2S_BuyFaceInShop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_BuyFaceInShop_descriptor_,
      C2S_BuyFaceInShop::default_instance_,
      C2S_BuyFaceInShop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_BuyFaceInShop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_BuyFaceInShop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_BuyFaceInShop));
  S2C_BuyFaceInShop_descriptor_ = file->message_type(93);
  static const int S2C_BuyFaceInShop_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BuyFaceInShop, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BuyFaceInShop, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BuyFaceInShop, face_shop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BuyFaceInShop, face_duration_),
  };
  S2C_BuyFaceInShop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_BuyFaceInShop_descriptor_,
      S2C_BuyFaceInShop::default_instance_,
      S2C_BuyFaceInShop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BuyFaceInShop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_BuyFaceInShop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_BuyFaceInShop));
  C2S_RoleFaceInfo_descriptor_ = file->message_type(94);
  static const int C2S_RoleFaceInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_RoleFaceInfo, role_index_),
  };
  C2S_RoleFaceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_RoleFaceInfo_descriptor_,
      C2S_RoleFaceInfo::default_instance_,
      C2S_RoleFaceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_RoleFaceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_RoleFaceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_RoleFaceInfo));
  S2C_RoleFaceInfo_descriptor_ = file->message_type(95);
  static const int S2C_RoleFaceInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_RoleFaceInfo, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_RoleFaceInfo, role_face_info_),
  };
  S2C_RoleFaceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_RoleFaceInfo_descriptor_,
      S2C_RoleFaceInfo::default_instance_,
      S2C_RoleFaceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_RoleFaceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_RoleFaceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_RoleFaceInfo));
  C2S_DressFace_descriptor_ = file->message_type(96);
  static const int C2S_DressFace_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_DressFace, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_DressFace, face_id_),
  };
  C2S_DressFace_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_DressFace_descriptor_,
      C2S_DressFace::default_instance_,
      C2S_DressFace_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_DressFace, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_DressFace, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_DressFace));
  S2C_DressFace_descriptor_ = file->message_type(97);
  static const int S2C_DressFace_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_DressFace, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_DressFace, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_DressFace, face_id_),
  };
  S2C_DressFace_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_DressFace_descriptor_,
      S2C_DressFace::default_instance_,
      S2C_DressFace_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_DressFace, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_DressFace, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_DressFace));
  C2S_TakeOffFace_descriptor_ = file->message_type(98);
  static const int C2S_TakeOffFace_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_TakeOffFace, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_TakeOffFace, face_id_),
  };
  C2S_TakeOffFace_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_TakeOffFace_descriptor_,
      C2S_TakeOffFace::default_instance_,
      C2S_TakeOffFace_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_TakeOffFace, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_TakeOffFace, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_TakeOffFace));
  S2C_TakeOffFace_descriptor_ = file->message_type(99);
  static const int S2C_TakeOffFace_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_TakeOffFace, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_TakeOffFace, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_TakeOffFace, face_id_),
  };
  S2C_TakeOffFace_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_TakeOffFace_descriptor_,
      S2C_TakeOffFace::default_instance_,
      S2C_TakeOffFace_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_TakeOffFace, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_TakeOffFace, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_TakeOffFace));
  C2S_ManualUpdateFaceShop_descriptor_ = file->message_type(100);
  static const int C2S_ManualUpdateFaceShop_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_ManualUpdateFaceShop, role_index_),
  };
  C2S_ManualUpdateFaceShop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_ManualUpdateFaceShop_descriptor_,
      C2S_ManualUpdateFaceShop::default_instance_,
      C2S_ManualUpdateFaceShop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_ManualUpdateFaceShop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_ManualUpdateFaceShop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_ManualUpdateFaceShop));
  S2C_ManualUpdateFaceShop_descriptor_ = file->message_type(101);
  static const int S2C_ManualUpdateFaceShop_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_ManualUpdateFaceShop, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_ManualUpdateFaceShop, role_index_),
  };
  S2C_ManualUpdateFaceShop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_ManualUpdateFaceShop_descriptor_,
      S2C_ManualUpdateFaceShop::default_instance_,
      S2C_ManualUpdateFaceShop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_ManualUpdateFaceShop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_ManualUpdateFaceShop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_ManualUpdateFaceShop));
  C2S_PassRisk_descriptor_ = file->message_type(102);
  static const int C2S_PassRisk_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_PassRisk, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_PassRisk, passed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_PassRisk, chap_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_PassRisk, level_id_),
  };
  C2S_PassRisk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_PassRisk_descriptor_,
      C2S_PassRisk::default_instance_,
      C2S_PassRisk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_PassRisk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_PassRisk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_PassRisk));
  S2C_PassRisk_descriptor_ = file->message_type(103);
  static const int S2C_PassRisk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_PassRisk, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_PassRisk, list_reward_),
  };
  S2C_PassRisk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_PassRisk_descriptor_,
      S2C_PassRisk::default_instance_,
      S2C_PassRisk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_PassRisk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_PassRisk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_PassRisk));
  C2S_ReadyEnterRisk_descriptor_ = file->message_type(104);
  static const int C2S_ReadyEnterRisk_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_ReadyEnterRisk, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_ReadyEnterRisk, risk_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_ReadyEnterRisk, npc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_ReadyEnterRisk, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_ReadyEnterRisk, scene_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_ReadyEnterRisk, trans_info_id_),
  };
  C2S_ReadyEnterRisk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_ReadyEnterRisk_descriptor_,
      C2S_ReadyEnterRisk::default_instance_,
      C2S_ReadyEnterRisk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_ReadyEnterRisk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_ReadyEnterRisk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_ReadyEnterRisk));
  S2C_ReadyEnterRisk_descriptor_ = file->message_type(105);
  static const int S2C_ReadyEnterRisk_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_ReadyEnterRisk, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_ReadyEnterRisk, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_ReadyEnterRisk, risk_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_ReadyEnterRisk, npc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_ReadyEnterRisk, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_ReadyEnterRisk, trans_info_id_),
  };
  S2C_ReadyEnterRisk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_ReadyEnterRisk_descriptor_,
      S2C_ReadyEnterRisk::default_instance_,
      S2C_ReadyEnterRisk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_ReadyEnterRisk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_ReadyEnterRisk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_ReadyEnterRisk));
  S2C_NPC_Add_RecordQueue_descriptor_ = file->message_type(106);
  static const int S2C_NPC_Add_RecordQueue_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_NPC_Add_RecordQueue, npc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_NPC_Add_RecordQueue, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_NPC_Add_RecordQueue, suit_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_NPC_Add_RecordQueue, face_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_NPC_Add_RecordQueue, weapon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_NPC_Add_RecordQueue, helmet_id_),
  };
  S2C_NPC_Add_RecordQueue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_NPC_Add_RecordQueue_descriptor_,
      S2C_NPC_Add_RecordQueue::default_instance_,
      S2C_NPC_Add_RecordQueue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_NPC_Add_RecordQueue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_NPC_Add_RecordQueue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_NPC_Add_RecordQueue));
  S2C_NPC_Go_RecordQueue_descriptor_ = file->message_type(107);
  static const int S2C_NPC_Go_RecordQueue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_NPC_Go_RecordQueue, npc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_NPC_Go_RecordQueue, role_index_),
  };
  S2C_NPC_Go_RecordQueue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_NPC_Go_RecordQueue_descriptor_,
      S2C_NPC_Go_RecordQueue::default_instance_,
      S2C_NPC_Go_RecordQueue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_NPC_Go_RecordQueue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_NPC_Go_RecordQueue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_NPC_Go_RecordQueue));
  C2S_Select_Recommend_Friends_descriptor_ = file->message_type(108);
  static const int C2S_Select_Recommend_Friends_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Select_Recommend_Friends, role_index_),
  };
  C2S_Select_Recommend_Friends_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Select_Recommend_Friends_descriptor_,
      C2S_Select_Recommend_Friends::default_instance_,
      C2S_Select_Recommend_Friends_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Select_Recommend_Friends, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Select_Recommend_Friends, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Select_Recommend_Friends));
  S2C_Select_Recommend_Friends_descriptor_ = file->message_type(109);
  static const int S2C_Select_Recommend_Friends_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Select_Recommend_Friends, list_friend_infos_),
  };
  S2C_Select_Recommend_Friends_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Select_Recommend_Friends_descriptor_,
      S2C_Select_Recommend_Friends::default_instance_,
      S2C_Select_Recommend_Friends_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Select_Recommend_Friends, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Select_Recommend_Friends, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Select_Recommend_Friends));
  C2S_FindFriend_descriptor_ = file->message_type(110);
  static const int C2S_FindFriend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_FindFriend, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_FindFriend, nick_name_),
  };
  C2S_FindFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_FindFriend_descriptor_,
      C2S_FindFriend::default_instance_,
      C2S_FindFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_FindFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_FindFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_FindFriend));
  S2C_FindFriend_descriptor_ = file->message_type(111);
  static const int S2C_FindFriend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_FindFriend, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_FindFriend, friend_info_),
  };
  S2C_FindFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_FindFriend_descriptor_,
      S2C_FindFriend::default_instance_,
      S2C_FindFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_FindFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_FindFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_FindFriend));
  C2S_Add_Friend_descriptor_ = file->message_type(112);
  static const int C2S_Add_Friend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Add_Friend, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Add_Friend, tar_role_index_),
  };
  C2S_Add_Friend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Add_Friend_descriptor_,
      C2S_Add_Friend::default_instance_,
      C2S_Add_Friend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Add_Friend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Add_Friend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Add_Friend));
  S2C_Add_Friend_descriptor_ = file->message_type(113);
  static const int S2C_Add_Friend_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Add_Friend, tar_role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Add_Friend, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Add_Friend, tar_friend_info_),
  };
  S2C_Add_Friend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Add_Friend_descriptor_,
      S2C_Add_Friend::default_instance_,
      S2C_Add_Friend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Add_Friend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Add_Friend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Add_Friend));
  C2S_Remove_Friend_descriptor_ = file->message_type(114);
  static const int C2S_Remove_Friend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Remove_Friend, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Remove_Friend, tar_role_index_),
  };
  C2S_Remove_Friend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Remove_Friend_descriptor_,
      C2S_Remove_Friend::default_instance_,
      C2S_Remove_Friend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Remove_Friend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Remove_Friend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Remove_Friend));
  S2C_Remove_Friend_descriptor_ = file->message_type(115);
  static const int S2C_Remove_Friend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Remove_Friend, tar_role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Remove_Friend, ret_code_),
  };
  S2C_Remove_Friend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Remove_Friend_descriptor_,
      S2C_Remove_Friend::default_instance_,
      S2C_Remove_Friend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Remove_Friend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Remove_Friend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Remove_Friend));
  S2C_Request_Add_Friend_descriptor_ = file->message_type(116);
  static const int S2C_Request_Add_Friend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Request_Add_Friend, src_role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Request_Add_Friend, src_friend_info_),
  };
  S2C_Request_Add_Friend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Request_Add_Friend_descriptor_,
      S2C_Request_Add_Friend::default_instance_,
      S2C_Request_Add_Friend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Request_Add_Friend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Request_Add_Friend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Request_Add_Friend));
  C2S_Request_Add_Friend_descriptor_ = file->message_type(117);
  static const int C2S_Request_Add_Friend_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Request_Add_Friend, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Request_Add_Friend, src_role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Request_Add_Friend, is_refuse_),
  };
  C2S_Request_Add_Friend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Request_Add_Friend_descriptor_,
      C2S_Request_Add_Friend::default_instance_,
      C2S_Request_Add_Friend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Request_Add_Friend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Request_Add_Friend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Request_Add_Friend));
  S2C_Friend_Online_descriptor_ = file->message_type(118);
  static const int S2C_Friend_Online_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Friend_Online, friend_role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Friend_Online, src_friend_info_),
  };
  S2C_Friend_Online_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Friend_Online_descriptor_,
      S2C_Friend_Online::default_instance_,
      S2C_Friend_Online_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Friend_Online, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Friend_Online, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Friend_Online));
  S2C_Friend_Offline_descriptor_ = file->message_type(119);
  static const int S2C_Friend_Offline_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Friend_Offline, friend_role_index_),
  };
  S2C_Friend_Offline_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Friend_Offline_descriptor_,
      S2C_Friend_Offline::default_instance_,
      S2C_Friend_Offline_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Friend_Offline, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Friend_Offline, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Friend_Offline));
  C2S_Skill_Study_descriptor_ = file->message_type(120);
  static const int C2S_Skill_Study_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Skill_Study, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Skill_Study, skill_id_),
  };
  C2S_Skill_Study_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Skill_Study_descriptor_,
      C2S_Skill_Study::default_instance_,
      C2S_Skill_Study_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Skill_Study, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Skill_Study, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Skill_Study));
  S2C_Skill_Study_descriptor_ = file->message_type(121);
  static const int S2C_Skill_Study_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Skill_Study, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Skill_Study, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Skill_Study, ret_code_),
  };
  S2C_Skill_Study_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Skill_Study_descriptor_,
      S2C_Skill_Study::default_instance_,
      S2C_Skill_Study_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Skill_Study, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Skill_Study, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Skill_Study));
  C2S_Skill_LevelUp_descriptor_ = file->message_type(122);
  static const int C2S_Skill_LevelUp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Skill_LevelUp, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Skill_LevelUp, skill_id_),
  };
  C2S_Skill_LevelUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Skill_LevelUp_descriptor_,
      C2S_Skill_LevelUp::default_instance_,
      C2S_Skill_LevelUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Skill_LevelUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Skill_LevelUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Skill_LevelUp));
  S2C_Skill_LevelUp_descriptor_ = file->message_type(123);
  static const int S2C_Skill_LevelUp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Skill_LevelUp, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Skill_LevelUp, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Skill_LevelUp, ret_code_),
  };
  S2C_Skill_LevelUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Skill_LevelUp_descriptor_,
      S2C_Skill_LevelUp::default_instance_,
      S2C_Skill_LevelUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Skill_LevelUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Skill_LevelUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Skill_LevelUp));
  C2S_Skill_DressTalent_descriptor_ = file->message_type(124);
  static const int C2S_Skill_DressTalent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Skill_DressTalent, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Skill_DressTalent, skill_id_),
  };
  C2S_Skill_DressTalent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Skill_DressTalent_descriptor_,
      C2S_Skill_DressTalent::default_instance_,
      C2S_Skill_DressTalent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Skill_DressTalent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Skill_DressTalent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Skill_DressTalent));
  S2C_Skill_DressTalent_descriptor_ = file->message_type(125);
  static const int S2C_Skill_DressTalent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Skill_DressTalent, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Skill_DressTalent, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Skill_DressTalent, ret_code_),
  };
  S2C_Skill_DressTalent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Skill_DressTalent_descriptor_,
      S2C_Skill_DressTalent::default_instance_,
      S2C_Skill_DressTalent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Skill_DressTalent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Skill_DressTalent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Skill_DressTalent));
  C2S_Skill_TakeOffTalent_descriptor_ = file->message_type(126);
  static const int C2S_Skill_TakeOffTalent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Skill_TakeOffTalent, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Skill_TakeOffTalent, skill_id_),
  };
  C2S_Skill_TakeOffTalent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Skill_TakeOffTalent_descriptor_,
      C2S_Skill_TakeOffTalent::default_instance_,
      C2S_Skill_TakeOffTalent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Skill_TakeOffTalent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Skill_TakeOffTalent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Skill_TakeOffTalent));
  S2C_Skill_TakeOffTalent_descriptor_ = file->message_type(127);
  static const int S2C_Skill_TakeOffTalent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Skill_TakeOffTalent, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Skill_TakeOffTalent, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Skill_TakeOffTalent, ret_code_),
  };
  S2C_Skill_TakeOffTalent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Skill_TakeOffTalent_descriptor_,
      S2C_Skill_TakeOffTalent::default_instance_,
      S2C_Skill_TakeOffTalent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Skill_TakeOffTalent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Skill_TakeOffTalent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Skill_TakeOffTalent));
  C2S_Skill_DressBook_descriptor_ = file->message_type(128);
  static const int C2S_Skill_DressBook_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Skill_DressBook, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Skill_DressBook, skill_id_),
  };
  C2S_Skill_DressBook_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Skill_DressBook_descriptor_,
      C2S_Skill_DressBook::default_instance_,
      C2S_Skill_DressBook_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Skill_DressBook, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Skill_DressBook, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Skill_DressBook));
  S2C_Skill_DressBook_descriptor_ = file->message_type(129);
  static const int S2C_Skill_DressBook_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Skill_DressBook, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Skill_DressBook, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Skill_DressBook, ret_code_),
  };
  S2C_Skill_DressBook_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Skill_DressBook_descriptor_,
      S2C_Skill_DressBook::default_instance_,
      S2C_Skill_DressBook_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Skill_DressBook, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Skill_DressBook, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Skill_DressBook));
  C2S_Skill_TakeOffBook_descriptor_ = file->message_type(130);
  static const int C2S_Skill_TakeOffBook_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Skill_TakeOffBook, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Skill_TakeOffBook, skill_id_),
  };
  C2S_Skill_TakeOffBook_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Skill_TakeOffBook_descriptor_,
      C2S_Skill_TakeOffBook::default_instance_,
      C2S_Skill_TakeOffBook_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Skill_TakeOffBook, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Skill_TakeOffBook, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Skill_TakeOffBook));
  S2C_Skill_TakeOffBook_descriptor_ = file->message_type(131);
  static const int S2C_Skill_TakeOffBook_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Skill_TakeOffBook, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Skill_TakeOffBook, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Skill_TakeOffBook, ret_code_),
  };
  S2C_Skill_TakeOffBook_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Skill_TakeOffBook_descriptor_,
      S2C_Skill_TakeOffBook::default_instance_,
      S2C_Skill_TakeOffBook_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Skill_TakeOffBook, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Skill_TakeOffBook, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Skill_TakeOffBook));
  C2S_Ask_ChangeAttrPoint_descriptor_ = file->message_type(132);
  static const int C2S_Ask_ChangeAttrPoint_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_ChangeAttrPoint, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_ChangeAttrPoint, hp_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_ChangeAttrPoint, mp_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_ChangeAttrPoint, ap_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_ChangeAttrPoint, sp_point_),
  };
  C2S_Ask_ChangeAttrPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Ask_ChangeAttrPoint_descriptor_,
      C2S_Ask_ChangeAttrPoint::default_instance_,
      C2S_Ask_ChangeAttrPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_ChangeAttrPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_ChangeAttrPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Ask_ChangeAttrPoint));
  C2S_Ask_SummonpetChangeAttrPoint_descriptor_ = file->message_type(133);
  static const int C2S_Ask_SummonpetChangeAttrPoint_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_SummonpetChangeAttrPoint, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_SummonpetChangeAttrPoint, summonpet_role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_SummonpetChangeAttrPoint, hp_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_SummonpetChangeAttrPoint, mp_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_SummonpetChangeAttrPoint, ap_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_SummonpetChangeAttrPoint, sp_point_),
  };
  C2S_Ask_SummonpetChangeAttrPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Ask_SummonpetChangeAttrPoint_descriptor_,
      C2S_Ask_SummonpetChangeAttrPoint::default_instance_,
      C2S_Ask_SummonpetChangeAttrPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_SummonpetChangeAttrPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_SummonpetChangeAttrPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Ask_SummonpetChangeAttrPoint));
  C2S_Ask_CreateTeam_descriptor_ = file->message_type(134);
  static const int C2S_Ask_CreateTeam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_CreateTeam, role_index_),
  };
  C2S_Ask_CreateTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Ask_CreateTeam_descriptor_,
      C2S_Ask_CreateTeam::default_instance_,
      C2S_Ask_CreateTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_CreateTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_CreateTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Ask_CreateTeam));
  S2C_Ret_CreateTeam_descriptor_ = file->message_type(135);
  static const int S2C_Ret_CreateTeam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_CreateTeam, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_CreateTeam, ret_code_),
  };
  S2C_Ret_CreateTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Ret_CreateTeam_descriptor_,
      S2C_Ret_CreateTeam::default_instance_,
      S2C_Ret_CreateTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_CreateTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_CreateTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Ret_CreateTeam));
  C2S_Ask_DestroyTeam_descriptor_ = file->message_type(136);
  static const int C2S_Ask_DestroyTeam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_DestroyTeam, role_index_),
  };
  C2S_Ask_DestroyTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Ask_DestroyTeam_descriptor_,
      C2S_Ask_DestroyTeam::default_instance_,
      C2S_Ask_DestroyTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_DestroyTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_DestroyTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Ask_DestroyTeam));
  S2C_Ret_DestroyTeam_descriptor_ = file->message_type(137);
  static const int S2C_Ret_DestroyTeam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_DestroyTeam, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_DestroyTeam, ret_code_),
  };
  S2C_Ret_DestroyTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Ret_DestroyTeam_descriptor_,
      S2C_Ret_DestroyTeam::default_instance_,
      S2C_Ret_DestroyTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_DestroyTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_DestroyTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Ret_DestroyTeam));
  C2S_Ask_InviteEnterTeam_descriptor_ = file->message_type(138);
  static const int C2S_Ask_InviteEnterTeam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_InviteEnterTeam, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_InviteEnterTeam, tar_role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_InviteEnterTeam, team_index_),
  };
  C2S_Ask_InviteEnterTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Ask_InviteEnterTeam_descriptor_,
      C2S_Ask_InviteEnterTeam::default_instance_,
      C2S_Ask_InviteEnterTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_InviteEnterTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_InviteEnterTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Ask_InviteEnterTeam));
  S2C_Ret_InviteEnterTeam_descriptor_ = file->message_type(139);
  static const int S2C_Ret_InviteEnterTeam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_InviteEnterTeam, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_InviteEnterTeam, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_InviteEnterTeam, team_index_),
  };
  S2C_Ret_InviteEnterTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Ret_InviteEnterTeam_descriptor_,
      S2C_Ret_InviteEnterTeam::default_instance_,
      S2C_Ret_InviteEnterTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_InviteEnterTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_InviteEnterTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Ret_InviteEnterTeam));
  C2S_Ask_ApplyEnterTeam_descriptor_ = file->message_type(140);
  static const int C2S_Ask_ApplyEnterTeam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_ApplyEnterTeam, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_ApplyEnterTeam, team_index_),
  };
  C2S_Ask_ApplyEnterTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Ask_ApplyEnterTeam_descriptor_,
      C2S_Ask_ApplyEnterTeam::default_instance_,
      C2S_Ask_ApplyEnterTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_ApplyEnterTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_ApplyEnterTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Ask_ApplyEnterTeam));
  S2C_Ret_ApplyEnterTeam_descriptor_ = file->message_type(141);
  static const int S2C_Ret_ApplyEnterTeam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_ApplyEnterTeam, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_ApplyEnterTeam, ret_code_),
  };
  S2C_Ret_ApplyEnterTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Ret_ApplyEnterTeam_descriptor_,
      S2C_Ret_ApplyEnterTeam::default_instance_,
      S2C_Ret_ApplyEnterTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_ApplyEnterTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_ApplyEnterTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Ret_ApplyEnterTeam));
  C2S_Ask_ApplyLeaveTeam_descriptor_ = file->message_type(142);
  static const int C2S_Ask_ApplyLeaveTeam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_ApplyLeaveTeam, role_index_),
  };
  C2S_Ask_ApplyLeaveTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Ask_ApplyLeaveTeam_descriptor_,
      C2S_Ask_ApplyLeaveTeam::default_instance_,
      C2S_Ask_ApplyLeaveTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_ApplyLeaveTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_ApplyLeaveTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Ask_ApplyLeaveTeam));
  S2C_Ret_ApplyLeaveTeam_descriptor_ = file->message_type(143);
  static const int S2C_Ret_ApplyLeaveTeam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_ApplyLeaveTeam, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_ApplyLeaveTeam, ret_code_),
  };
  S2C_Ret_ApplyLeaveTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Ret_ApplyLeaveTeam_descriptor_,
      S2C_Ret_ApplyLeaveTeam::default_instance_,
      S2C_Ret_ApplyLeaveTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_ApplyLeaveTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_ApplyLeaveTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Ret_ApplyLeaveTeam));
  C2S_Ask_AgreeEnterTeam_descriptor_ = file->message_type(144);
  static const int C2S_Ask_AgreeEnterTeam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_AgreeEnterTeam, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_AgreeEnterTeam, tar_index_),
  };
  C2S_Ask_AgreeEnterTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Ask_AgreeEnterTeam_descriptor_,
      C2S_Ask_AgreeEnterTeam::default_instance_,
      C2S_Ask_AgreeEnterTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_AgreeEnterTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_AgreeEnterTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Ask_AgreeEnterTeam));
  S2C_Ret_AgreeEnterTeam_descriptor_ = file->message_type(145);
  static const int S2C_Ret_AgreeEnterTeam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_AgreeEnterTeam, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_AgreeEnterTeam, tar_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_AgreeEnterTeam, ret_code_),
  };
  S2C_Ret_AgreeEnterTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Ret_AgreeEnterTeam_descriptor_,
      S2C_Ret_AgreeEnterTeam::default_instance_,
      S2C_Ret_AgreeEnterTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_AgreeEnterTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_AgreeEnterTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Ret_AgreeEnterTeam));
  C2S_Ask_RefuseEnterTeam_descriptor_ = file->message_type(146);
  static const int C2S_Ask_RefuseEnterTeam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_RefuseEnterTeam, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_RefuseEnterTeam, tar_index_),
  };
  C2S_Ask_RefuseEnterTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Ask_RefuseEnterTeam_descriptor_,
      C2S_Ask_RefuseEnterTeam::default_instance_,
      C2S_Ask_RefuseEnterTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_RefuseEnterTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_RefuseEnterTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Ask_RefuseEnterTeam));
  S2C_Ret_RefuseEnterTeam_descriptor_ = file->message_type(147);
  static const int S2C_Ret_RefuseEnterTeam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_RefuseEnterTeam, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_RefuseEnterTeam, tar_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_RefuseEnterTeam, ret_code_),
  };
  S2C_Ret_RefuseEnterTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Ret_RefuseEnterTeam_descriptor_,
      S2C_Ret_RefuseEnterTeam::default_instance_,
      S2C_Ret_RefuseEnterTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_RefuseEnterTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_RefuseEnterTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Ret_RefuseEnterTeam));
  C2S_Ask_KickLeaveTeam_descriptor_ = file->message_type(148);
  static const int C2S_Ask_KickLeaveTeam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_KickLeaveTeam, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_KickLeaveTeam, tar_index_),
  };
  C2S_Ask_KickLeaveTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Ask_KickLeaveTeam_descriptor_,
      C2S_Ask_KickLeaveTeam::default_instance_,
      C2S_Ask_KickLeaveTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_KickLeaveTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_KickLeaveTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Ask_KickLeaveTeam));
  S2C_Ret_KickLeaveTeam_descriptor_ = file->message_type(149);
  static const int S2C_Ret_KickLeaveTeam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_KickLeaveTeam, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_KickLeaveTeam, tar_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_KickLeaveTeam, ret_code_),
  };
  S2C_Ret_KickLeaveTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Ret_KickLeaveTeam_descriptor_,
      S2C_Ret_KickLeaveTeam::default_instance_,
      S2C_Ret_KickLeaveTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_KickLeaveTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_KickLeaveTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Ret_KickLeaveTeam));
  C2S_Ask_TeamInfo_descriptor_ = file->message_type(150);
  static const int C2S_Ask_TeamInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_TeamInfo, role_index_),
  };
  C2S_Ask_TeamInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Ask_TeamInfo_descriptor_,
      C2S_Ask_TeamInfo::default_instance_,
      C2S_Ask_TeamInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_TeamInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ask_TeamInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Ask_TeamInfo));
  S2C_Ret_TeamInfo_descriptor_ = file->message_type(151);
  static const int S2C_Ret_TeamInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_TeamInfo, teams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_TeamInfo, destroy_teams_),
  };
  S2C_Ret_TeamInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Ret_TeamInfo_descriptor_,
      S2C_Ret_TeamInfo::default_instance_,
      S2C_Ret_TeamInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_TeamInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ret_TeamInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Ret_TeamInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_NetPacket_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Ask_Login_descriptor_, &C2S_Ask_Login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Ret_Login_descriptor_, &S2C_Ret_Login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Ask_Register_descriptor_, &C2S_Ask_Register::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Ret_Register_descriptor_, &S2C_Ret_Register::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Ask_RoleSum_descriptor_, &C2S_Ask_RoleSum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Ret_RoleSum_descriptor_, &S2C_Ret_RoleSum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_ClearRole_descriptor_, &C2S_ClearRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Response_ClearRole_descriptor_, &S2C_Response_ClearRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_RandNickName_descriptor_, &C2S_RandNickName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_RandNickName_descriptor_, &S2C_RandNickName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Ask_RoleCreate_descriptor_, &C2S_Ask_RoleCreate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Ret_RoleCreate_descriptor_, &S2C_Ret_RoleCreate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Ask_RoleInfo_descriptor_, &C2S_Ask_RoleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Ret_RoleInfo_descriptor_, &S2C_Ret_RoleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Sync_RoleConfig_descriptor_, &C2S_Sync_RoleConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Sync_RoleConfig_descriptor_, &S2C_Sync_RoleConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Ask_Ready_EnterScene_descriptor_, &C2S_Ask_Ready_EnterScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Ret_Ready_EnterScene_descriptor_, &S2C_Ret_Ready_EnterScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Ask_EnterScene_descriptor_, &C2S_Ask_EnterScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_RefreshScene_descriptor_, &C2S_RefreshScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Notice_OffLine_descriptor_, &S2C_Notice_OffLine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Ask_Charset_descriptor_, &C2S_Ask_Charset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Heartbeat_descriptor_, &C2S_Heartbeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Heartbeat_descriptor_, &S2C_Heartbeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_GameCoin_descriptor_, &C2S_GameCoin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Sync_Role_GameCoin_descriptor_, &S2C_Sync_Role_GameCoin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_DiamondCoin_descriptor_, &C2S_DiamondCoin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_DiamondCoin_descriptor_, &S2C_DiamondCoin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Stamina_descriptor_, &C2S_Stamina::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Stamina_descriptor_, &S2C_Stamina::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Exp_descriptor_, &C2S_Exp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Sync_Role_Exp_descriptor_, &S2C_Sync_Role_Exp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Notice_Role_EnterScene_descriptor_, &S2C_Notice_Role_EnterScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Notice_Role_LeaveScene_descriptor_, &S2C_Notice_Role_LeaveScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Sync_Role_PublicInfo_descriptor_, &S2C_Sync_Role_PublicInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Sync_Role_PrivateInfo_descriptor_, &S2C_Sync_Role_PrivateInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Sync_RoleInfo_descriptor_, &S2C_Sync_RoleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Sync_RoleAttr_descriptor_, &S2C_Sync_RoleAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Sync_Dir_descriptor_, &C2S_Sync_Dir::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Sync_Dir_descriptor_, &S2C_Sync_Dir::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Sync_RoleMove_descriptor_, &C2S_Sync_RoleMove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Sync_RoleMove_descriptor_, &S2C_Sync_RoleMove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Sync_RoleStopMove_descriptor_, &S2C_Sync_RoleStopMove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Notice_Role_LevelUp_descriptor_, &S2C_Notice_Role_LevelUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Ask_Comrade_descriptor_, &C2S_Ask_Comrade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Ret_Comrade_descriptor_, &S2C_Ret_Comrade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Ask_Chat_descriptor_, &C2S_Ask_Chat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Ret_Chat_descriptor_, &S2C_Ret_Chat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Change_Scene_descriptor_, &C2S_Change_Scene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_TransPortChangeScene_descriptor_, &C2S_TransPortChangeScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_TransPortChangeScene_descriptor_, &S2C_TransPortChangeScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_NPC_ChangeScene_descriptor_, &C2S_NPC_ChangeScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_NPC_ChangeScene_descriptor_, &S2C_NPC_ChangeScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Qiecuo_Battle_descriptor_, &C2S_Qiecuo_Battle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Qiecuo_Battle_Refuse_descriptor_, &S2C_Qiecuo_Battle_Refuse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Qiecuo_Battle_descriptor_, &S2C_Qiecuo_Battle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Qiecuo_Confirm_Battle_descriptor_, &S2C_Qiecuo_Confirm_Battle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Qiecuo_Confirm_Battle_descriptor_, &C2S_Qiecuo_Confirm_Battle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Battle_Info_descriptor_, &C2S_Battle_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle_Role_Info_descriptor_, &Battle_Role_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Battle_Info_descriptor_, &S2C_Battle_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Battle_Frame_Info_descriptor_, &C2S_Battle_Frame_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Battle_Frame_Info_descriptor_, &Battle_Frame_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Battle_Frame_Info_descriptor_, &S2C_Battle_Frame_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Avatar_Goods_List_descriptor_, &S2C_Avatar_Goods_List::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Buy_Avatar_Goods_descriptor_, &C2S_Buy_Avatar_Goods::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Buy_Avatar_Goods_descriptor_, &S2C_Buy_Avatar_Goods::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Bag_Item_descriptor_, &C2S_Bag_Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Sync_Role_Bag_Item_descriptor_, &S2C_Sync_Role_Bag_Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Bag_MoveItem_descriptor_, &C2S_Bag_MoveItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Use_Item_descriptor_, &C2S_Use_Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Use_Item_descriptor_, &S2C_Use_Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Role_Equip_descriptor_, &C2S_Role_Equip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Role_Equip_descriptor_, &S2C_Role_Equip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_TakeOff_Equip_descriptor_, &C2S_TakeOff_Equip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_TakeOff_Equip_descriptor_, &S2C_TakeOff_Equip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Bag_Item_Insert_descriptor_, &S2C_Bag_Item_Insert::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Bag_Item_Remove_descriptor_, &S2C_Bag_Item_Remove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_SuitShopInfo_descriptor_, &C2S_SuitShopInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_SuitShopInfo_descriptor_, &S2C_SuitShopInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_BuySuitInShop_descriptor_, &C2S_BuySuitInShop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_BuySuitInShop_descriptor_, &S2C_BuySuitInShop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_RoleSuitInfo_descriptor_, &C2S_RoleSuitInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_RoleSuitInfo_descriptor_, &S2C_RoleSuitInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_DressSuit_descriptor_, &C2S_DressSuit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_DressSuit_descriptor_, &S2C_DressSuit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_TakeOffSuit_descriptor_, &C2S_TakeOffSuit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_TakeOffSuit_descriptor_, &S2C_TakeOffSuit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_AskRewardList_descriptor_, &C2S_AskRewardList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Sync_Role_RewardList_descriptor_, &S2C_Sync_Role_RewardList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_FaceShopInfo_descriptor_, &C2S_FaceShopInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_FaceShopInfo_descriptor_, &S2C_FaceShopInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_BuyFaceInShop_descriptor_, &C2S_BuyFaceInShop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_BuyFaceInShop_descriptor_, &S2C_BuyFaceInShop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_RoleFaceInfo_descriptor_, &C2S_RoleFaceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_RoleFaceInfo_descriptor_, &S2C_RoleFaceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_DressFace_descriptor_, &C2S_DressFace::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_DressFace_descriptor_, &S2C_DressFace::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_TakeOffFace_descriptor_, &C2S_TakeOffFace::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_TakeOffFace_descriptor_, &S2C_TakeOffFace::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_ManualUpdateFaceShop_descriptor_, &C2S_ManualUpdateFaceShop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_ManualUpdateFaceShop_descriptor_, &S2C_ManualUpdateFaceShop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_PassRisk_descriptor_, &C2S_PassRisk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_PassRisk_descriptor_, &S2C_PassRisk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_ReadyEnterRisk_descriptor_, &C2S_ReadyEnterRisk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_ReadyEnterRisk_descriptor_, &S2C_ReadyEnterRisk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_NPC_Add_RecordQueue_descriptor_, &S2C_NPC_Add_RecordQueue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_NPC_Go_RecordQueue_descriptor_, &S2C_NPC_Go_RecordQueue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Select_Recommend_Friends_descriptor_, &C2S_Select_Recommend_Friends::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Select_Recommend_Friends_descriptor_, &S2C_Select_Recommend_Friends::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_FindFriend_descriptor_, &C2S_FindFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_FindFriend_descriptor_, &S2C_FindFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Add_Friend_descriptor_, &C2S_Add_Friend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Add_Friend_descriptor_, &S2C_Add_Friend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Remove_Friend_descriptor_, &C2S_Remove_Friend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Remove_Friend_descriptor_, &S2C_Remove_Friend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Request_Add_Friend_descriptor_, &S2C_Request_Add_Friend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Request_Add_Friend_descriptor_, &C2S_Request_Add_Friend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Friend_Online_descriptor_, &S2C_Friend_Online::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Friend_Offline_descriptor_, &S2C_Friend_Offline::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Skill_Study_descriptor_, &C2S_Skill_Study::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Skill_Study_descriptor_, &S2C_Skill_Study::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Skill_LevelUp_descriptor_, &C2S_Skill_LevelUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Skill_LevelUp_descriptor_, &S2C_Skill_LevelUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Skill_DressTalent_descriptor_, &C2S_Skill_DressTalent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Skill_DressTalent_descriptor_, &S2C_Skill_DressTalent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Skill_TakeOffTalent_descriptor_, &C2S_Skill_TakeOffTalent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Skill_TakeOffTalent_descriptor_, &S2C_Skill_TakeOffTalent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Skill_DressBook_descriptor_, &C2S_Skill_DressBook::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Skill_DressBook_descriptor_, &S2C_Skill_DressBook::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Skill_TakeOffBook_descriptor_, &C2S_Skill_TakeOffBook::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Skill_TakeOffBook_descriptor_, &S2C_Skill_TakeOffBook::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Ask_ChangeAttrPoint_descriptor_, &C2S_Ask_ChangeAttrPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Ask_SummonpetChangeAttrPoint_descriptor_, &C2S_Ask_SummonpetChangeAttrPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Ask_CreateTeam_descriptor_, &C2S_Ask_CreateTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Ret_CreateTeam_descriptor_, &S2C_Ret_CreateTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Ask_DestroyTeam_descriptor_, &C2S_Ask_DestroyTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Ret_DestroyTeam_descriptor_, &S2C_Ret_DestroyTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Ask_InviteEnterTeam_descriptor_, &C2S_Ask_InviteEnterTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Ret_InviteEnterTeam_descriptor_, &S2C_Ret_InviteEnterTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Ask_ApplyEnterTeam_descriptor_, &C2S_Ask_ApplyEnterTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Ret_ApplyEnterTeam_descriptor_, &S2C_Ret_ApplyEnterTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Ask_ApplyLeaveTeam_descriptor_, &C2S_Ask_ApplyLeaveTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Ret_ApplyLeaveTeam_descriptor_, &S2C_Ret_ApplyLeaveTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Ask_AgreeEnterTeam_descriptor_, &C2S_Ask_AgreeEnterTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Ret_AgreeEnterTeam_descriptor_, &S2C_Ret_AgreeEnterTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Ask_RefuseEnterTeam_descriptor_, &C2S_Ask_RefuseEnterTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Ret_RefuseEnterTeam_descriptor_, &S2C_Ret_RefuseEnterTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Ask_KickLeaveTeam_descriptor_, &C2S_Ask_KickLeaveTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Ret_KickLeaveTeam_descriptor_, &S2C_Ret_KickLeaveTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Ask_TeamInfo_descriptor_, &C2S_Ask_TeamInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Ret_TeamInfo_descriptor_, &S2C_Ret_TeamInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_NetPacket_2eproto() {
  delete C2S_Ask_Login::default_instance_;
  delete C2S_Ask_Login_reflection_;
  delete S2C_Ret_Login::default_instance_;
  delete S2C_Ret_Login_reflection_;
  delete C2S_Ask_Register::default_instance_;
  delete C2S_Ask_Register_reflection_;
  delete S2C_Ret_Register::default_instance_;
  delete S2C_Ret_Register_reflection_;
  delete C2S_Ask_RoleSum::default_instance_;
  delete C2S_Ask_RoleSum_reflection_;
  delete S2C_Ret_RoleSum::default_instance_;
  delete S2C_Ret_RoleSum_reflection_;
  delete C2S_ClearRole::default_instance_;
  delete C2S_ClearRole_reflection_;
  delete S2C_Response_ClearRole::default_instance_;
  delete S2C_Response_ClearRole_reflection_;
  delete C2S_RandNickName::default_instance_;
  delete C2S_RandNickName_reflection_;
  delete S2C_RandNickName::default_instance_;
  delete S2C_RandNickName_reflection_;
  delete C2S_Ask_RoleCreate::default_instance_;
  delete C2S_Ask_RoleCreate_reflection_;
  delete S2C_Ret_RoleCreate::default_instance_;
  delete S2C_Ret_RoleCreate_reflection_;
  delete C2S_Ask_RoleInfo::default_instance_;
  delete C2S_Ask_RoleInfo_reflection_;
  delete S2C_Ret_RoleInfo::default_instance_;
  delete S2C_Ret_RoleInfo_reflection_;
  delete C2S_Sync_RoleConfig::default_instance_;
  delete C2S_Sync_RoleConfig_reflection_;
  delete S2C_Sync_RoleConfig::default_instance_;
  delete S2C_Sync_RoleConfig_reflection_;
  delete C2S_Ask_Ready_EnterScene::default_instance_;
  delete C2S_Ask_Ready_EnterScene_reflection_;
  delete S2C_Ret_Ready_EnterScene::default_instance_;
  delete S2C_Ret_Ready_EnterScene_reflection_;
  delete C2S_Ask_EnterScene::default_instance_;
  delete C2S_Ask_EnterScene_reflection_;
  delete C2S_RefreshScene::default_instance_;
  delete C2S_RefreshScene_reflection_;
  delete S2C_Notice_OffLine::default_instance_;
  delete S2C_Notice_OffLine_reflection_;
  delete C2S_Ask_Charset::default_instance_;
  delete C2S_Ask_Charset_reflection_;
  delete C2S_Heartbeat::default_instance_;
  delete C2S_Heartbeat_reflection_;
  delete S2C_Heartbeat::default_instance_;
  delete S2C_Heartbeat_reflection_;
  delete C2S_GameCoin::default_instance_;
  delete C2S_GameCoin_reflection_;
  delete S2C_Sync_Role_GameCoin::default_instance_;
  delete S2C_Sync_Role_GameCoin_reflection_;
  delete C2S_DiamondCoin::default_instance_;
  delete C2S_DiamondCoin_reflection_;
  delete S2C_DiamondCoin::default_instance_;
  delete S2C_DiamondCoin_reflection_;
  delete C2S_Stamina::default_instance_;
  delete C2S_Stamina_reflection_;
  delete S2C_Stamina::default_instance_;
  delete S2C_Stamina_reflection_;
  delete C2S_Exp::default_instance_;
  delete C2S_Exp_reflection_;
  delete S2C_Sync_Role_Exp::default_instance_;
  delete S2C_Sync_Role_Exp_reflection_;
  delete S2C_Notice_Role_EnterScene::default_instance_;
  delete S2C_Notice_Role_EnterScene_reflection_;
  delete S2C_Notice_Role_LeaveScene::default_instance_;
  delete S2C_Notice_Role_LeaveScene_reflection_;
  delete S2C_Sync_Role_PublicInfo::default_instance_;
  delete S2C_Sync_Role_PublicInfo_reflection_;
  delete S2C_Sync_Role_PrivateInfo::default_instance_;
  delete S2C_Sync_Role_PrivateInfo_reflection_;
  delete S2C_Sync_RoleInfo::default_instance_;
  delete S2C_Sync_RoleInfo_reflection_;
  delete S2C_Sync_RoleAttr::default_instance_;
  delete S2C_Sync_RoleAttr_reflection_;
  delete C2S_Sync_Dir::default_instance_;
  delete C2S_Sync_Dir_reflection_;
  delete S2C_Sync_Dir::default_instance_;
  delete S2C_Sync_Dir_reflection_;
  delete C2S_Sync_RoleMove::default_instance_;
  delete C2S_Sync_RoleMove_reflection_;
  delete S2C_Sync_RoleMove::default_instance_;
  delete S2C_Sync_RoleMove_reflection_;
  delete S2C_Sync_RoleStopMove::default_instance_;
  delete S2C_Sync_RoleStopMove_reflection_;
  delete S2C_Notice_Role_LevelUp::default_instance_;
  delete S2C_Notice_Role_LevelUp_reflection_;
  delete C2S_Ask_Comrade::default_instance_;
  delete C2S_Ask_Comrade_reflection_;
  delete S2C_Ret_Comrade::default_instance_;
  delete S2C_Ret_Comrade_reflection_;
  delete C2S_Ask_Chat::default_instance_;
  delete C2S_Ask_Chat_reflection_;
  delete S2C_Ret_Chat::default_instance_;
  delete S2C_Ret_Chat_reflection_;
  delete C2S_Change_Scene::default_instance_;
  delete C2S_Change_Scene_reflection_;
  delete C2S_TransPortChangeScene::default_instance_;
  delete C2S_TransPortChangeScene_reflection_;
  delete S2C_TransPortChangeScene::default_instance_;
  delete S2C_TransPortChangeScene_reflection_;
  delete C2S_NPC_ChangeScene::default_instance_;
  delete C2S_NPC_ChangeScene_reflection_;
  delete S2C_NPC_ChangeScene::default_instance_;
  delete S2C_NPC_ChangeScene_reflection_;
  delete C2S_Qiecuo_Battle::default_instance_;
  delete C2S_Qiecuo_Battle_reflection_;
  delete S2C_Qiecuo_Battle_Refuse::default_instance_;
  delete S2C_Qiecuo_Battle_Refuse_reflection_;
  delete S2C_Qiecuo_Battle::default_instance_;
  delete S2C_Qiecuo_Battle_reflection_;
  delete S2C_Qiecuo_Confirm_Battle::default_instance_;
  delete S2C_Qiecuo_Confirm_Battle_reflection_;
  delete C2S_Qiecuo_Confirm_Battle::default_instance_;
  delete C2S_Qiecuo_Confirm_Battle_reflection_;
  delete C2S_Battle_Info::default_instance_;
  delete C2S_Battle_Info_reflection_;
  delete Battle_Role_Info::default_instance_;
  delete Battle_Role_Info_reflection_;
  delete S2C_Battle_Info::default_instance_;
  delete S2C_Battle_Info_reflection_;
  delete C2S_Battle_Frame_Info::default_instance_;
  delete C2S_Battle_Frame_Info_reflection_;
  delete Battle_Frame_Info::default_instance_;
  delete Battle_Frame_Info_reflection_;
  delete S2C_Battle_Frame_Info::default_instance_;
  delete S2C_Battle_Frame_Info_reflection_;
  delete S2C_Avatar_Goods_List::default_instance_;
  delete S2C_Avatar_Goods_List_reflection_;
  delete C2S_Buy_Avatar_Goods::default_instance_;
  delete C2S_Buy_Avatar_Goods_reflection_;
  delete S2C_Buy_Avatar_Goods::default_instance_;
  delete S2C_Buy_Avatar_Goods_reflection_;
  delete C2S_Bag_Item::default_instance_;
  delete C2S_Bag_Item_reflection_;
  delete S2C_Sync_Role_Bag_Item::default_instance_;
  delete S2C_Sync_Role_Bag_Item_reflection_;
  delete C2S_Bag_MoveItem::default_instance_;
  delete C2S_Bag_MoveItem_reflection_;
  delete C2S_Use_Item::default_instance_;
  delete C2S_Use_Item_reflection_;
  delete S2C_Use_Item::default_instance_;
  delete S2C_Use_Item_reflection_;
  delete C2S_Role_Equip::default_instance_;
  delete C2S_Role_Equip_reflection_;
  delete S2C_Role_Equip::default_instance_;
  delete S2C_Role_Equip_reflection_;
  delete C2S_TakeOff_Equip::default_instance_;
  delete C2S_TakeOff_Equip_reflection_;
  delete S2C_TakeOff_Equip::default_instance_;
  delete S2C_TakeOff_Equip_reflection_;
  delete S2C_Bag_Item_Insert::default_instance_;
  delete S2C_Bag_Item_Insert_reflection_;
  delete S2C_Bag_Item_Remove::default_instance_;
  delete S2C_Bag_Item_Remove_reflection_;
  delete C2S_SuitShopInfo::default_instance_;
  delete C2S_SuitShopInfo_reflection_;
  delete S2C_SuitShopInfo::default_instance_;
  delete S2C_SuitShopInfo_reflection_;
  delete C2S_BuySuitInShop::default_instance_;
  delete C2S_BuySuitInShop_reflection_;
  delete S2C_BuySuitInShop::default_instance_;
  delete S2C_BuySuitInShop_reflection_;
  delete C2S_RoleSuitInfo::default_instance_;
  delete C2S_RoleSuitInfo_reflection_;
  delete S2C_RoleSuitInfo::default_instance_;
  delete S2C_RoleSuitInfo_reflection_;
  delete C2S_DressSuit::default_instance_;
  delete C2S_DressSuit_reflection_;
  delete S2C_DressSuit::default_instance_;
  delete S2C_DressSuit_reflection_;
  delete C2S_TakeOffSuit::default_instance_;
  delete C2S_TakeOffSuit_reflection_;
  delete S2C_TakeOffSuit::default_instance_;
  delete S2C_TakeOffSuit_reflection_;
  delete C2S_AskRewardList::default_instance_;
  delete C2S_AskRewardList_reflection_;
  delete S2C_Sync_Role_RewardList::default_instance_;
  delete S2C_Sync_Role_RewardList_reflection_;
  delete C2S_FaceShopInfo::default_instance_;
  delete C2S_FaceShopInfo_reflection_;
  delete S2C_FaceShopInfo::default_instance_;
  delete S2C_FaceShopInfo_reflection_;
  delete C2S_BuyFaceInShop::default_instance_;
  delete C2S_BuyFaceInShop_reflection_;
  delete S2C_BuyFaceInShop::default_instance_;
  delete S2C_BuyFaceInShop_reflection_;
  delete C2S_RoleFaceInfo::default_instance_;
  delete C2S_RoleFaceInfo_reflection_;
  delete S2C_RoleFaceInfo::default_instance_;
  delete S2C_RoleFaceInfo_reflection_;
  delete C2S_DressFace::default_instance_;
  delete C2S_DressFace_reflection_;
  delete S2C_DressFace::default_instance_;
  delete S2C_DressFace_reflection_;
  delete C2S_TakeOffFace::default_instance_;
  delete C2S_TakeOffFace_reflection_;
  delete S2C_TakeOffFace::default_instance_;
  delete S2C_TakeOffFace_reflection_;
  delete C2S_ManualUpdateFaceShop::default_instance_;
  delete C2S_ManualUpdateFaceShop_reflection_;
  delete S2C_ManualUpdateFaceShop::default_instance_;
  delete S2C_ManualUpdateFaceShop_reflection_;
  delete C2S_PassRisk::default_instance_;
  delete C2S_PassRisk_reflection_;
  delete S2C_PassRisk::default_instance_;
  delete S2C_PassRisk_reflection_;
  delete C2S_ReadyEnterRisk::default_instance_;
  delete C2S_ReadyEnterRisk_reflection_;
  delete S2C_ReadyEnterRisk::default_instance_;
  delete S2C_ReadyEnterRisk_reflection_;
  delete S2C_NPC_Add_RecordQueue::default_instance_;
  delete S2C_NPC_Add_RecordQueue_reflection_;
  delete S2C_NPC_Go_RecordQueue::default_instance_;
  delete S2C_NPC_Go_RecordQueue_reflection_;
  delete C2S_Select_Recommend_Friends::default_instance_;
  delete C2S_Select_Recommend_Friends_reflection_;
  delete S2C_Select_Recommend_Friends::default_instance_;
  delete S2C_Select_Recommend_Friends_reflection_;
  delete C2S_FindFriend::default_instance_;
  delete C2S_FindFriend_reflection_;
  delete S2C_FindFriend::default_instance_;
  delete S2C_FindFriend_reflection_;
  delete C2S_Add_Friend::default_instance_;
  delete C2S_Add_Friend_reflection_;
  delete S2C_Add_Friend::default_instance_;
  delete S2C_Add_Friend_reflection_;
  delete C2S_Remove_Friend::default_instance_;
  delete C2S_Remove_Friend_reflection_;
  delete S2C_Remove_Friend::default_instance_;
  delete S2C_Remove_Friend_reflection_;
  delete S2C_Request_Add_Friend::default_instance_;
  delete S2C_Request_Add_Friend_reflection_;
  delete C2S_Request_Add_Friend::default_instance_;
  delete C2S_Request_Add_Friend_reflection_;
  delete S2C_Friend_Online::default_instance_;
  delete S2C_Friend_Online_reflection_;
  delete S2C_Friend_Offline::default_instance_;
  delete S2C_Friend_Offline_reflection_;
  delete C2S_Skill_Study::default_instance_;
  delete C2S_Skill_Study_reflection_;
  delete S2C_Skill_Study::default_instance_;
  delete S2C_Skill_Study_reflection_;
  delete C2S_Skill_LevelUp::default_instance_;
  delete C2S_Skill_LevelUp_reflection_;
  delete S2C_Skill_LevelUp::default_instance_;
  delete S2C_Skill_LevelUp_reflection_;
  delete C2S_Skill_DressTalent::default_instance_;
  delete C2S_Skill_DressTalent_reflection_;
  delete S2C_Skill_DressTalent::default_instance_;
  delete S2C_Skill_DressTalent_reflection_;
  delete C2S_Skill_TakeOffTalent::default_instance_;
  delete C2S_Skill_TakeOffTalent_reflection_;
  delete S2C_Skill_TakeOffTalent::default_instance_;
  delete S2C_Skill_TakeOffTalent_reflection_;
  delete C2S_Skill_DressBook::default_instance_;
  delete C2S_Skill_DressBook_reflection_;
  delete S2C_Skill_DressBook::default_instance_;
  delete S2C_Skill_DressBook_reflection_;
  delete C2S_Skill_TakeOffBook::default_instance_;
  delete C2S_Skill_TakeOffBook_reflection_;
  delete S2C_Skill_TakeOffBook::default_instance_;
  delete S2C_Skill_TakeOffBook_reflection_;
  delete C2S_Ask_ChangeAttrPoint::default_instance_;
  delete C2S_Ask_ChangeAttrPoint_reflection_;
  delete C2S_Ask_SummonpetChangeAttrPoint::default_instance_;
  delete C2S_Ask_SummonpetChangeAttrPoint_reflection_;
  delete C2S_Ask_CreateTeam::default_instance_;
  delete C2S_Ask_CreateTeam_reflection_;
  delete S2C_Ret_CreateTeam::default_instance_;
  delete S2C_Ret_CreateTeam_reflection_;
  delete C2S_Ask_DestroyTeam::default_instance_;
  delete C2S_Ask_DestroyTeam_reflection_;
  delete S2C_Ret_DestroyTeam::default_instance_;
  delete S2C_Ret_DestroyTeam_reflection_;
  delete C2S_Ask_InviteEnterTeam::default_instance_;
  delete C2S_Ask_InviteEnterTeam_reflection_;
  delete S2C_Ret_InviteEnterTeam::default_instance_;
  delete S2C_Ret_InviteEnterTeam_reflection_;
  delete C2S_Ask_ApplyEnterTeam::default_instance_;
  delete C2S_Ask_ApplyEnterTeam_reflection_;
  delete S2C_Ret_ApplyEnterTeam::default_instance_;
  delete S2C_Ret_ApplyEnterTeam_reflection_;
  delete C2S_Ask_ApplyLeaveTeam::default_instance_;
  delete C2S_Ask_ApplyLeaveTeam_reflection_;
  delete S2C_Ret_ApplyLeaveTeam::default_instance_;
  delete S2C_Ret_ApplyLeaveTeam_reflection_;
  delete C2S_Ask_AgreeEnterTeam::default_instance_;
  delete C2S_Ask_AgreeEnterTeam_reflection_;
  delete S2C_Ret_AgreeEnterTeam::default_instance_;
  delete S2C_Ret_AgreeEnterTeam_reflection_;
  delete C2S_Ask_RefuseEnterTeam::default_instance_;
  delete C2S_Ask_RefuseEnterTeam_reflection_;
  delete S2C_Ret_RefuseEnterTeam::default_instance_;
  delete S2C_Ret_RefuseEnterTeam_reflection_;
  delete C2S_Ask_KickLeaveTeam::default_instance_;
  delete C2S_Ask_KickLeaveTeam_reflection_;
  delete S2C_Ret_KickLeaveTeam::default_instance_;
  delete S2C_Ret_KickLeaveTeam_reflection_;
  delete C2S_Ask_TeamInfo::default_instance_;
  delete C2S_Ask_TeamInfo_reflection_;
  delete S2C_Ret_TeamInfo::default_instance_;
  delete S2C_Ret_TeamInfo_reflection_;
}

void protobuf_AddDesc_NetPacket_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_EnumDef_2eproto();
  ::protobuf_AddDesc_Common_2eproto();
  ::protobuf_AddDesc_Database_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017NetPacket.proto\032\rEnumDef.proto\032\014Common"
    ".proto\032\016Database.proto\"\?\n\rC2S_Ask_Login\022"
    "\017\n\007account\030\001 \002(\014\022\020\n\010password\030\002 \002(\014\022\013\n\003si"
    "d\030\003 \002(\014\"D\n\rS2C_Ret_Login\022\020\n\010ret_code\030\001 \002"
    "(\014\022\020\n\010re_login\030\002 \002(\010\022\017\n\007account\030\003 \002(\014\"y\n"
    "\020C2S_Ask_Register\022\017\n\007account\030\001 \002(\014\022\020\n\010pa"
    "ssword\030\002 \002(\014\022\026\n\016new_unit_index\030\003 \002(\003\022\025\n\r"
    "ret_unitindex\030\004 \001(\003\022\023\n\013ret_intaddr\030\005 \001(\003"
    "\"J\n\020S2C_Ret_Register\022\020\n\010ret_code\030\001 \002(\014\022\017"
    "\n\007account\030\002 \002(\014\022\023\n\013account_key\030\003 \001(\003\"c\n\017"
    "C2S_Ask_RoleSum\022\017\n\007account\030\001 \002(\014\022\025\n\rret_"
    "unitindex\030\002 \001(\003\022\023\n\013ret_intaddr\030\003 \001(\003\022\023\n\013"
    "account_key\030\004 \001(\003\";\n\017S2C_Ret_RoleSum\022\017\n\007"
    "account\030\001 \002(\014\022\027\n\017list_role_index\030\002 \003(\003\"L"
    "\n\rC2S_ClearRole\022\017\n\007account\030\001 \002(\014\022\025\n\rret_"
    "unitindex\030\002 \001(\003\022\023\n\013ret_intaddr\030\003 \001(\003\"8\n\026"
    "S2C_Response_ClearRole\022\017\n\007account\030\001 \002(\014\022"
    "\r\n\005is_ok\030\002 \002(\010\"O\n\020C2S_RandNickName\022\017\n\007ac"
    "count\030\001 \002(\014\022\025\n\rret_unitindex\030\002 \001(\003\022\023\n\013re"
    "t_intaddr\030\003 \001(\003\";\n\020S2C_RandNickName\022\017\n\007a"
    "ccount\030\001 \002(\014\022\026\n\016list_nick_name\030\002 \003(\014\"\203\002\n"
    "\022C2S_Ask_RoleCreate\022\021\n\tnick_name\030\001 \002(\014\022\017"
    "\n\007account\030\002 \002(\014\022\022\n\ndevice_key\030\003 \002(\014\022\024\n\014d"
    "evice_token\030\004 \002(\014\022\023\n\013device_type\030\005 \002(\014\022\025"
    "\n\rplatform_type\030\006 \002(\014\022\021\n\trole_type\030\007 \002(\014"
    "\022\020\n\010password\030\010 \001(\014\022\"\n\trole_info\030\t \001(\0132\017."
    "universal_data\022\025\n\rret_unitindex\030\n \001(\003\022\023\n"
    "\013ret_intaddr\030\013 \001(\003\"J\n\022S2C_Ret_RoleCreate"
    "\022\020\n\010ret_code\030\001 \002(\014\022\021\n\tnick_name\030\002 \002(\014\022\017\n"
    "\007account\030\003 \002(\014\"\202\001\n\020C2S_Ask_RoleInfo\022\017\n\007a"
    "ccount\030\001 \002(\014\022\022\n\nrole_index\030\002 \002(\003\022\025\n\rret_"
    "unitindex\030\003 \001(\003\022\023\n\013ret_intaddr\030\004 \001(\003\022\035\n\025"
    "force_apply_role_info\030\005 \001(\010\"\244\001\n\020S2C_Ret_"
    "RoleInfo\022\017\n\007account\030\001 \002(\014\022\022\n\nrole_index\030"
    "\002 \002(\003\022\"\n\trole_info\030\003 \001(\0132\017.universal_dat"
    "a\022\025\n\rlogin_intaddr\030\004 \001(\003\022\025\n\rscene_intadd"
    "r\030\005 \001(\003\022\031\n\021scene_instance_id\030\006 \001(\003\"O\n\023C2"
    "S_Sync_RoleConfig\022\022\n\nrole_index\030\001 \002(\003\022$\n"
    "\013role_config\030\002 \002(\0132\017.universal_data\"O\n\023S"
    "2C_Sync_RoleConfig\022\022\n\nrole_index\030\001 \002(\003\022$"
    "\n\013role_config\030\002 \002(\0132\017.universal_data\"E\n\030"
    "C2S_Ask_Ready_EnterScene\022\022\n\nrole_index\030\001"
    " \002(\003\022\025\n\rlogin_intaddr\030\002 \001(\003\"\310\001\n\030S2C_Ret_"
    "Ready_EnterScene\022\020\n\010ret_code\030\001 \002(\014\022\022\n\nro"
    "le_index\030\002 \002(\003\022\020\n\010scene_id\030\005 \002(\021\022\025\n\rscen"
    "e_intaddr\030\006 \002(\003\022\031\n\021scene_instance_id\030\007 \002"
    "(\003\022.\n\nscene_type\030\010 \002(\0162\r.E_SCENE_TYPE:\013E"
    "ST_INVALID\022\022\n\nis_refresh\030\t \002(\010\"C\n\022C2S_As"
    "k_EnterScene\022\022\n\nrole_index\030\001 \002(\003\022\031\n\021scen"
    "e_instance_id\030\002 \002(\003\"&\n\020C2S_RefreshScene\022"
    "\022\n\nrole_index\030\001 \002(\003\"5\n\022S2C_Notice_OffLin"
    "e\022\017\n\007account\030\001 \002(\014\022\016\n\006reason\030\002 \002(\014\"5\n\017C2"
    "S_Ask_Charset\022\r\n\005utf_8\030\001 \002(\010\022\023\n\013msg_vers"
    "ion\030\002 \002(\021\"\035\n\rC2S_Heartbeat\022\014\n\004time\030\001 \002(\003"
    "\"\035\n\rS2C_Heartbeat\022\014\n\004time\030\001 \002(\003\"\"\n\014C2S_G"
    "ameCoin\022\022\n\nrole_index\030\001 \002(\003\"k\n\026S2C_Sync_"
    "Role_GameCoin\022\022\n\nrole_index\030\001 \002(\003\022\025\n\radd"
    "_game_coin\030\002 \002(\003\022\025\n\rcur_game_coin\030\003 \002(\003\022"
    "\017\n\007is_show\030\004 \002(\010\"%\n\017C2S_DiamondCoin\022\022\n\nr"
    "ole_index\030\001 \002(\003\";\n\017S2C_DiamondCoin\022\022\n\nro"
    "le_index\030\001 \002(\003\022\024\n\014diamond_coin\030\002 \002(\003\"!\n\013"
    "C2S_Stamina\022\022\n\nrole_index\030\001 \002(\003\"2\n\013S2C_S"
    "tamina\022\022\n\nrole_index\030\001 \002(\003\022\017\n\007stamina\030\002 "
    "\002(\021\"\035\n\007C2S_Exp\022\022\n\nrole_index\030\001 \002(\003\"k\n\021S2"
    "C_Sync_Role_Exp\022\022\n\nrole_index\030\001 \002(\003\022\017\n\007i"
    "s_show\030\002 \002(\010\022\017\n\007add_exp\030\003 \002(\003\022\017\n\007cur_exp"
    "\030\004 \002(\003\022\017\n\007max_exp\030\005 \002(\003\"\310\001\n\032S2C_Notice_R"
    "ole_EnterScene\022\022\n\nrole_index\030\001 \002(\003\022$\n\013pu"
    "blic_info\030\002 \002(\0132\017.universal_data\022+\n\022publ"
    "ic_memory_info\030\003 \002(\0132\017.universal_data\022(\n"
    "\017additional_info\030\004 \001(\0132\017.universal_data\022"
    "\031\n\021scene_instance_id\030\005 \002(\003\"K\n\032S2C_Notice"
    "_Role_LeaveScene\022\022\n\nrole_index\030\001 \002(\003\022\031\n\021"
    "scene_instance_id\030\002 \002(\003\"\201\001\n\030S2C_Sync_Rol"
    "e_PublicInfo\022\022\n\nrole_index\030\001 \002(\003\022$\n\013publ"
    "ic_info\030\002 \002(\0132\017.universal_data\022+\n\022public"
    "_memory_info\030\003 \002(\0132\017.universal_data\"\204\001\n\031"
    "S2C_Sync_Role_PrivateInfo\022\022\n\nrole_index\030"
    "\001 \002(\003\022%\n\014private_info\030\002 \002(\0132\017.universal_"
    "data\022,\n\023private_memory_info\030\003 \002(\0132\017.univ"
    "ersal_data\"U\n\021S2C_Sync_RoleInfo\022\022\n\nrole_"
    "index\030\001 \002(\003\022,\n\023universal_role_info\030\002 \003(\013"
    "2\017.universal_data\"O\n\021S2C_Sync_RoleAttr\022\022"
    "\n\nrole_index\030\001 \002(\003\022&\n\rnew_role_attr\030\002 \002("
    "\0132\017.universal_data\"/\n\014C2S_Sync_Dir\022\022\n\nro"
    "le_index\030\001 \002(\003\022\013\n\003dir\030\002 \002(\021\"/\n\014S2C_Sync_"
    "Dir\022\022\n\nrole_index\030\001 \002(\003\022\013\n\003dir\030\002 \002(\021\"w\n\021"
    "C2S_Sync_RoleMove\022\022\n\nrole_index\030\001 \002(\003\022\017\n"
    "\007begin_x\030\003 \002(\002\022\017\n\007begin_y\030\004 \002(\002\022\r\n\005end_x"
    "\030\005 \002(\002\022\r\n\005end_y\030\006 \002(\002\022\016\n\006is_run\030\007 \002(\010\"w\n"
    "\021S2C_Sync_RoleMove\022\022\n\nrole_index\030\001 \002(\003\022\017"
    "\n\007begin_x\030\003 \002(\002\022\017\n\007begin_y\030\004 \002(\002\022\r\n\005end_"
    "x\030\005 \002(\002\022\r\n\005end_y\030\006 \002(\002\022\016\n\006is_run\030\007 \002(\010\"I"
    "\n\025S2C_Sync_RoleStopMove\022\022\n\nrole_index\030\001 "
    "\002(\003\022\r\n\005end_x\030\003 \002(\002\022\r\n\005end_y\030\004 \002(\002\"h\n\027S2C"
    "_Notice_Role_LevelUp\022\022\n\nrole_index\030\001 \002(\003"
    "\022&\n\rnew_role_attr\030\002 \002(\0132\017.universal_data"
    "\022\021\n\tnew_level\030\003 \002(\003\"Y\n\017C2S_Ask_Comrade\022\022"
    "\n\nrole_index\030\001 \002(\003\022\032\n\022comrade_role_index"
    "\030\002 \002(\003\022\026\n\016team_pos_index\030\003 \002(\021\"m\n\017S2C_Re"
    "t_Comrade\022\022\n\nrole_index\030\001 \002(\003\022\022\n\nteam_in"
    "dex\030\002 \002(\003\022\032\n\022comrade_role_index\030\003 \002(\003\022\026\n"
    "\016team_pos_index\030\004 \002(\021\"\251\001\n\014C2S_Ask_Chat\022\022"
    "\n\nrole_index\030\001 \002(\003\022,\n\tchat_type\030\002 \002(\0162\014."
    "E_CHAT_TYPE:\013ECT_CURRENT\022\013\n\003msg\030\003 \002(\014\022\021\n"
    "\tbackcolor\030\004 \002(\r\022\020\n\010boxcolor\030\005 \002(\r\022\023\n\013sh"
    "adowcolor\030\006 \002(\r\022\020\n\010msgcolor\030\007 \002(\r\"\304\001\n\014S2"
    "C_Ret_Chat\022\022\n\nrole_index\030\001 \002(\003\022\031\n\021scene_"
    "instance_id\030\002 \002(\003\022,\n\tchat_type\030\005 \002(\0162\014.E"
    "_CHAT_TYPE:\013ECT_CURRENT\022\013\n\003msg\030\006 \002(\014\022\021\n\t"
    "backcolor\030\007 \002(\r\022\020\n\010boxcolor\030\010 \002(\r\022\023\n\013sha"
    "dowcolor\030\n \002(\r\022\020\n\010msgcolor\030\013 \002(\r\"Z\n\020C2S_"
    "Change_Scene\022\022\n\nrole_index\030\001 \002(\003\022\024\n\014tar_"
    "scene_id\030\002 \002(\r\022\r\n\005pos_x\030\003 \002(\002\022\r\n\005pos_y\030\004"
    " \002(\002\"D\n\030C2S_TransPortChangeScene\022\022\n\nrole"
    "_index\030\001 \002(\003\022\024\n\014transport_id\030\002 \002(\021\"Q\n\030S2"
    "C_TransPortChangeScene\022\013\n\003ret\030\001 \002(\014\022\022\n\nr"
    "ole_index\030\002 \002(\003\022\024\n\014transport_id\030\003 \002(\021\"d\n"
    "\023C2S_NPC_ChangeScene\022\022\n\nrole_index\030\001 \002(\003"
    "\022\016\n\006npc_id\030\002 \002(\021\022\022\n\nscene_type\030\003 \002(\021\022\025\n\r"
    "trans_info_id\030\004 \002(\021\"Z\n\023S2C_NPC_ChangeSce"
    "ne\022\013\n\003ret\030\001 \002(\014\022\022\n\nrole_index\030\002 \002(\003\022\016\n\006n"
    "pc_id\030\003 \002(\021\022\022\n\nscene_type\030\004 \002(\021\"Z\n\021C2S_Q"
    "iecuo_Battle\022\022\n\nrole_index\030\001 \002(\003\022\026\n\016tar_"
    "role_index\030\002 \002(\003\022\031\n\021scene_instance_id\030\003 "
    "\002(\003\"J\n\030S2C_Qiecuo_Battle_Refuse\022\026\n\016src_r"
    "ole_index\030\001 \002(\003\022\026\n\016tar_role_index\030\002 \002(\003\""
    "\300\001\n\021S2C_Qiecuo_Battle\022\026\n\016src_role_index\030"
    "\001 \002(\003\022\026\n\016tar_role_index\030\002 \002(\003\022\031\n\021scene_i"
    "nstance_id\030\003 \002(\003\022\033\n\023new_battle_scene_id\030"
    "\006 \002(\002\022\026\n\016battle_team_id\030\007 \002(\021\022\025\n\rbattle_"
    "pos_id\030\010 \002(\021\022\024\n\014battle_index\030\t \002(\003\"K\n\031S2"
    "C_Qiecuo_Confirm_Battle\022\026\n\016src_role_inde"
    "x\030\001 \002(\003\022\026\n\016tar_role_index\030\002 \002(\003\"V\n\031C2S_Q"
    "iecuo_Confirm_Battle\022\022\n\nrole_index\030\001 \002(\003"
    "\022\026\n\016src_role_index\030\002 \002(\003\022\r\n\005agree\030\003 \002(\010\""
    ";\n\017C2S_Battle_Info\022\022\n\nrole_index\030\001 \002(\003\022\024"
    "\n\014battle_index\030\002 \002(\003\"\202\001\n\020Battle_Role_Inf"
    "o\022\022\n\nrole_index\030\001 \002(\003\022\025\n\rbattle_pos_id\030\002"
    " \002(\003\022\021\n\trole_type\030\003 \002(\014\022\016\n\006racial\030\004 \002(\014\022"
    "\021\n\tnick_name\030\005 \002(\014\022\r\n\005level\030\006 \002(\014\"Z\n\017S2C"
    "_Battle_Info\022\024\n\014battle_index\030\001 \002(\003\0221\n\026li"
    "st_battle_role_infos\030\002 \003(\0132\021.Battle_Role"
    "_Info\"I\n\025C2S_Battle_Frame_Info\022\024\n\014battle"
    "_index\030\001 \002(\003\022\032\n\022battle_frame_index\030\002 \002(\021"
    "\"\203\001\n\021Battle_Frame_Info\022\022\n\nrole_index\030\001 \002"
    "(\003\022\025\n\rbattle_pos_id\030\002 \002(\003\022\021\n\trole_type\030\003"
    " \002(\014\022\016\n\006racial\030\004 \002(\014\022\021\n\tnick_name\030\005 \002(\014\022"
    "\r\n\005level\030\006 \002(\014\"x\n\025S2C_Battle_Frame_Info\022"
    "\024\n\014battle_index\030\001 \002(\003\022\032\n\022battle_frame_in"
    "dex\030\002 \002(\021\022-\n\021battle_frame_info\030\003 \002(\0132\022.B"
    "attle_Frame_Info\"F\n\025S2C_Avatar_Goods_Lis"
    "t\022-\n\020list_avatar_info\030\001 \003(\0132\023.GameShopAv"
    "atarInfo\"E\n\024C2S_Buy_Avatar_Goods\022-\n\020list"
    "_avatar_info\030\001 \002(\0132\023.GameShopAvatarInfo\""
    "W\n\024S2C_Buy_Avatar_Goods\022\020\n\010ret_code\030\001 \002("
    "\014\022-\n\020list_avatar_info\030\002 \002(\0132\023.GameShopAv"
    "atarInfo\"\"\n\014C2S_Bag_Item\022\022\n\nrole_index\030\001"
    " \002(\003\"d\n\026S2C_Sync_Role_Bag_Item\022\021\n\tgame_c"
    "oin\030\001 \002(\003\022\024\n\014game_Deposit\030\002 \002(\003\022!\n\010game_"
    "bag\030\003 \002(\0132\017.universal_data\"j\n\020C2S_Bag_Mo"
    "veItem\022\022\n\nrole_index\030\001 \002(\003\022\026\n\016src_item_i"
    "ndex\030\002 \002(\003\022\024\n\014src_item_pos\030\003 \002(\021\022\024\n\014tar_"
    "item_pos\030\004 \002(\021\"G\n\014C2S_Use_Item\022\022\n\nrole_i"
    "ndex\030\001 \002(\003\022\017\n\007bag_pos\030\002 \002(\021\022\022\n\nitem_inde"
    "x\030\003 \002(\003\"E\n\014S2C_Use_Item\022\020\n\010ret_code\030\001 \002("
    "\014\022\017\n\007bag_pos\030\002 \002(\021\022\022\n\nitem_index\030\003 \002(\003\"$"
    "\n\016C2S_Role_Equip\022\022\n\nrole_index\030\001 \002(\003\"@\n\016"
    "S2C_Role_Equip\022\022\n\nrole_index\030\001 \002(\003\022\032\n\006eq"
    "uips\030\002 \002(\0132\n.dict_item\"T\n\021C2S_TakeOff_Eq"
    "uip\022\022\n\nrole_index\030\001 \002(\003\022\023\n\013equip_index\030\002"
    " \002(\003\022\026\n\016equip_pos_type\030\003 \002(\021\"R\n\021S2C_Take"
    "Off_Equip\022\020\n\010ret_code\030\001 \002(\014\022\023\n\013equip_ind"
    "ex\030\002 \002(\003\022\026\n\016equip_pos_type\030\003 \002(\021\"/\n\023S2C_"
    "Bag_Item_Insert\022\030\n\titem_info\030\001 \002(\0132\005.ite"
    "m\"/\n\023S2C_Bag_Item_Remove\022\030\n\titem_info\030\001 "
    "\002(\0132\005.item\"&\n\020C2S_SuitShopInfo\022\022\n\nrole_i"
    "ndex\030\001 \002(\003\"v\n\020S2C_SuitShopInfo\022\022\n\nrole_i"
    "ndex\030\001 \002(\003\022\'\n\rlist_buy_suit\030\002 \003(\0132\020.suit"
    "_goods_info\022%\n\035suit_shop_surplus_update_"
    "time\030\003 \002(\003\"T\n\021C2S_BuySuitInShop\022\022\n\nrole_"
    "index\030\001 \002(\003\022\024\n\014suit_shop_id\030\002 \002(\021\022\025\n\rsui"
    "t_duration\030\003 \002(\021\"f\n\021S2C_BuySuitInShop\022\020\n"
    "\010ret_code\030\001 \002(\014\022\022\n\nrole_index\030\002 \002(\003\022\024\n\014s"
    "uit_shop_id\030\003 \002(\021\022\025\n\rsuit_duration\030\004 \002(\021"
    "\"&\n\020C2S_RoleSuitInfo\022\022\n\nrole_index\030\001 \002(\003"
    "\"T\n\020S2C_RoleSuitInfo\022\022\n\nrole_index\030\001 \002(\003"
    "\022,\n\016role_suit_info\030\003 \002(\0132\024.list_role_sui"
    "t_info\"4\n\rC2S_DressSuit\022\022\n\nrole_index\030\001 "
    "\002(\003\022\017\n\007suit_id\030\002 \002(\021\"F\n\rS2C_DressSuit\022\020\n"
    "\010ret_code\030\001 \002(\014\022\022\n\nrole_index\030\002 \002(\003\022\017\n\007s"
    "uit_id\030\003 \002(\021\"6\n\017C2S_TakeOffSuit\022\022\n\nrole_"
    "index\030\001 \002(\003\022\017\n\007suit_id\030\002 \002(\021\"H\n\017S2C_Take"
    "OffSuit\022\020\n\010ret_code\030\001 \002(\014\022\022\n\nrole_index\030"
    "\002 \002(\003\022\017\n\007suit_id\030\003 \002(\021\"\'\n\021C2S_AskRewardL"
    "ist\022\022\n\nrole_index\030\001 \002(\003\"\203\001\n\030S2C_Sync_Rol"
    "e_RewardList\022\022\n\nrole_index\030\001 \002(\003\022\027\n\017list"
    "_reward_exp\030\002 \003(\003\022\031\n\021list_reward_money\030\003"
    " \003(\003\022\037\n\020list_reward_item\030\004 \003(\0132\005.item\"&\n"
    "\020C2S_FaceShopInfo\022\022\n\nrole_index\030\001 \002(\003\"\261\001"
    "\n\020S2C_FaceShopInfo\022\022\n\nrole_index\030\001 \002(\003\0220"
    "\n\026list_original_buy_face\030\002 \003(\0132\020.face_go"
    "ods_info\0220\n\026list_discount_buy_face\030\003 \003(\013"
    "2\020.face_goods_info\022%\n\035face_shop_surplus_"
    "update_time\030\004 \002(\021\"m\n\021C2S_BuyFaceInShop\022\022"
    "\n\nrole_index\030\001 \002(\003\022\024\n\014face_shop_id\030\002 \002(\021"
    "\022\025\n\rface_duration\030\003 \002(\021\022\027\n\017face_isdiscou"
    "nt\030\004 \002(\010\"f\n\021S2C_BuyFaceInShop\022\020\n\010ret_cod"
    "e\030\001 \002(\014\022\022\n\nrole_index\030\002 \002(\003\022\024\n\014face_shop"
    "_id\030\003 \002(\021\022\025\n\rface_duration\030\004 \002(\021\"&\n\020C2S_"
    "RoleFaceInfo\022\022\n\nrole_index\030\001 \002(\003\"T\n\020S2C_"
    "RoleFaceInfo\022\022\n\nrole_index\030\001 \002(\003\022,\n\016role"
    "_face_info\030\003 \002(\0132\024.list_role_face_info\"4"
    "\n\rC2S_DressFace\022\022\n\nrole_index\030\001 \002(\003\022\017\n\007f"
    "ace_id\030\002 \002(\021\"F\n\rS2C_DressFace\022\020\n\010ret_cod"
    "e\030\001 \002(\014\022\022\n\nrole_index\030\002 \002(\003\022\017\n\007face_id\030\003"
    " \002(\021\"6\n\017C2S_TakeOffFace\022\022\n\nrole_index\030\001 "
    "\002(\003\022\017\n\007face_id\030\002 \002(\021\"H\n\017S2C_TakeOffFace\022"
    "\020\n\010ret_code\030\001 \002(\014\022\022\n\nrole_index\030\002 \002(\003\022\017\n"
    "\007face_id\030\003 \002(\021\".\n\030C2S_ManualUpdateFaceSh"
    "op\022\022\n\nrole_index\030\001 \002(\003\"@\n\030S2C_ManualUpda"
    "teFaceShop\022\020\n\010ret_code\030\001 \002(\014\022\022\n\nrole_ind"
    "ex\030\002 \002(\003\"U\n\014C2S_PassRisk\022\022\n\nrole_index\030\001"
    " \002(\003\022\016\n\006passed\030\002 \002(\021\022\017\n\007chap_id\030\003 \002(\021\022\020\n"
    "\010level_id\030\004 \002(\021\"C\n\014S2C_PassRisk\022\020\n\010ret_c"
    "ode\030\001 \002(\014\022!\n\013list_reward\030\002 \003(\0132\014.reward_"
    "info\"\206\001\n\022C2S_ReadyEnterRisk\022\022\n\nrole_inde"
    "x\030\001 \002(\003\022\017\n\007risk_id\030\002 \002(\021\022\016\n\006npc_id\030\003 \002(\021"
    "\022\020\n\010scene_id\030\004 \002(\021\022\022\n\nscene_type\030\005 \002(\021\022\025"
    "\n\rtrans_info_id\030\006 \002(\021\"\204\001\n\022S2C_ReadyEnter"
    "Risk\022\020\n\010ret_code\030\001 \002(\014\022\022\n\nrole_index\030\002 \002"
    "(\003\022\017\n\007risk_id\030\003 \002(\021\022\016\n\006npc_id\030\004 \002(\021\022\020\n\010s"
    "cene_id\030\005 \002(\021\022\025\n\rtrans_info_id\030\006 \002(\021\"\205\001\n"
    "\027S2C_NPC_Add_RecordQueue\022\016\n\006npc_id\030\001 \002(\021"
    "\022\022\n\nrole_index\030\002 \002(\003\022\017\n\007suit_id\030\003 \002(\021\022\017\n"
    "\007face_id\030\004 \002(\021\022\021\n\tweapon_id\030\005 \002(\021\022\021\n\thel"
    "met_id\030\006 \002(\021\"<\n\026S2C_NPC_Go_RecordQueue\022\016"
    "\n\006npc_id\030\001 \002(\021\022\022\n\nrole_index\030\002 \002(\003\"2\n\034C2"
    "S_Select_Recommend_Friends\022\022\n\nrole_index"
    "\030\001 \002(\003\"G\n\034S2C_Select_Recommend_Friends\022\'"
    "\n\021list_friend_infos\030\001 \003(\0132\014.game_friend\""
    "7\n\016C2S_FindFriend\022\022\n\nrole_index\030\001 \002(\003\022\021\n"
    "\tnick_name\030\002 \002(\014\"E\n\016S2C_FindFriend\022\020\n\010re"
    "t_code\030\001 \002(\014\022!\n\013friend_info\030\002 \001(\0132\014.game"
    "_friend\"<\n\016C2S_Add_Friend\022\022\n\nrole_index\030"
    "\001 \002(\003\022\026\n\016tar_role_index\030\002 \002(\003\"a\n\016S2C_Add"
    "_Friend\022\026\n\016tar_role_index\030\001 \002(\003\022\020\n\010ret_c"
    "ode\030\002 \002(\014\022%\n\017tar_friend_info\030\003 \001(\0132\014.gam"
    "e_friend\"\?\n\021C2S_Remove_Friend\022\022\n\nrole_in"
    "dex\030\001 \002(\003\022\026\n\016tar_role_index\030\002 \002(\003\"=\n\021S2C"
    "_Remove_Friend\022\026\n\016tar_role_index\030\001 \002(\003\022\020"
    "\n\010ret_code\030\002 \002(\014\"W\n\026S2C_Request_Add_Frie"
    "nd\022\026\n\016src_role_index\030\001 \002(\003\022%\n\017src_friend"
    "_info\030\002 \002(\0132\014.game_friend\"W\n\026C2S_Request"
    "_Add_Friend\022\022\n\nrole_index\030\001 \002(\003\022\026\n\016src_r"
    "ole_index\030\002 \002(\003\022\021\n\tis_refuse\030\003 \002(\010\"U\n\021S2"
    "C_Friend_Online\022\031\n\021friend_role_index\030\001 \002"
    "(\003\022%\n\017src_friend_info\030\002 \002(\0132\014.game_frien"
    "d\"/\n\022S2C_Friend_Offline\022\031\n\021friend_role_i"
    "ndex\030\001 \002(\003\"7\n\017C2S_Skill_Study\022\022\n\nrole_in"
    "dex\030\001 \002(\003\022\020\n\010skill_id\030\002 \002(\021\"I\n\017S2C_Skill"
    "_Study\022\022\n\nrole_index\030\001 \002(\003\022\020\n\010skill_id\030\002"
    " \002(\021\022\020\n\010ret_code\030\003 \002(\014\"9\n\021C2S_Skill_Leve"
    "lUp\022\022\n\nrole_index\030\001 \002(\003\022\020\n\010skill_id\030\002 \002("
    "\021\"K\n\021S2C_Skill_LevelUp\022\022\n\nrole_index\030\001 \002"
    "(\003\022\020\n\010skill_id\030\002 \002(\021\022\020\n\010ret_code\030\003 \002(\014\"="
    "\n\025C2S_Skill_DressTalent\022\022\n\nrole_index\030\001 "
    "\002(\003\022\020\n\010skill_id\030\002 \002(\021\"O\n\025S2C_Skill_Dress"
    "Talent\022\022\n\nrole_index\030\001 \002(\003\022\020\n\010skill_id\030\002"
    " \002(\021\022\020\n\010ret_code\030\003 \002(\014\"\?\n\027C2S_Skill_Take"
    "OffTalent\022\022\n\nrole_index\030\001 \002(\003\022\020\n\010skill_i"
    "d\030\002 \002(\021\"Q\n\027S2C_Skill_TakeOffTalent\022\022\n\nro"
    "le_index\030\001 \002(\003\022\020\n\010skill_id\030\002 \002(\021\022\020\n\010ret_"
    "code\030\003 \002(\014\";\n\023C2S_Skill_DressBook\022\022\n\nrol"
    "e_index\030\001 \002(\003\022\020\n\010skill_id\030\002 \002(\021\"M\n\023S2C_S"
    "kill_DressBook\022\022\n\nrole_index\030\001 \002(\003\022\020\n\010sk"
    "ill_id\030\002 \002(\021\022\020\n\010ret_code\030\003 \002(\014\"=\n\025C2S_Sk"
    "ill_TakeOffBook\022\022\n\nrole_index\030\001 \002(\003\022\020\n\010s"
    "kill_id\030\002 \002(\021\"O\n\025S2C_Skill_TakeOffBook\022\022"
    "\n\nrole_index\030\001 \002(\003\022\020\n\010skill_id\030\002 \002(\021\022\020\n\010"
    "ret_code\030\003 \002(\014\"u\n\027C2S_Ask_ChangeAttrPoin"
    "t\022\022\n\nrole_index\030\001 \002(\003\022\020\n\010hp_point\030\002 \002(\005\022"
    "\020\n\010mp_point\030\003 \002(\005\022\020\n\010ap_point\030\004 \002(\005\022\020\n\010s"
    "p_point\030\005 \002(\005\"\234\001\n C2S_Ask_SummonpetChang"
    "eAttrPoint\022\022\n\nrole_index\030\001 \002(\003\022\034\n\024summon"
    "pet_role_index\030\002 \002(\003\022\020\n\010hp_point\030\003 \002(\005\022\020"
    "\n\010mp_point\030\004 \002(\005\022\020\n\010ap_point\030\005 \002(\005\022\020\n\010sp"
    "_point\030\006 \002(\005\"(\n\022C2S_Ask_CreateTeam\022\022\n\nro"
    "le_index\030\001 \002(\003\":\n\022S2C_Ret_CreateTeam\022\022\n\n"
    "role_index\030\001 \002(\003\022\020\n\010ret_code\030\002 \002(\014\")\n\023C2"
    "S_Ask_DestroyTeam\022\022\n\nrole_index\030\001 \002(\003\";\n"
    "\023S2C_Ret_DestroyTeam\022\022\n\nrole_index\030\001 \002(\003"
    "\022\020\n\010ret_code\030\002 \002(\014\"Y\n\027C2S_Ask_InviteEnte"
    "rTeam\022\022\n\nrole_index\030\001 \002(\003\022\026\n\016tar_role_in"
    "dex\030\002 \002(\003\022\022\n\nteam_index\030\003 \002(\003\"S\n\027S2C_Ret"
    "_InviteEnterTeam\022\022\n\nrole_index\030\001 \002(\003\022\020\n\010"
    "ret_code\030\002 \002(\014\022\022\n\nteam_index\030\003 \002(\003\"@\n\026C2"
    "S_Ask_ApplyEnterTeam\022\022\n\nrole_index\030\001 \002(\003"
    "\022\022\n\nteam_index\030\002 \002(\003\">\n\026S2C_Ret_ApplyEnt"
    "erTeam\022\022\n\nrole_index\030\001 \002(\003\022\020\n\010ret_code\030\002"
    " \002(\014\",\n\026C2S_Ask_ApplyLeaveTeam\022\022\n\nrole_i"
    "ndex\030\001 \002(\003\">\n\026S2C_Ret_ApplyLeaveTeam\022\022\n\n"
    "role_index\030\001 \002(\003\022\020\n\010ret_code\030\002 \002(\014\"\?\n\026C2"
    "S_Ask_AgreeEnterTeam\022\022\n\nrole_index\030\001 \002(\003"
    "\022\021\n\ttar_index\030\002 \002(\003\"Q\n\026S2C_Ret_AgreeEnte"
    "rTeam\022\022\n\nrole_index\030\001 \002(\003\022\021\n\ttar_index\030\002"
    " \002(\003\022\020\n\010ret_code\030\003 \002(\014\"@\n\027C2S_Ask_Refuse"
    "EnterTeam\022\022\n\nrole_index\030\001 \002(\003\022\021\n\ttar_ind"
    "ex\030\002 \002(\003\"R\n\027S2C_Ret_RefuseEnterTeam\022\022\n\nr"
    "ole_index\030\001 \002(\003\022\021\n\ttar_index\030\002 \002(\003\022\020\n\010re"
    "t_code\030\003 \002(\014\">\n\025C2S_Ask_KickLeaveTeam\022\022\n"
    "\nrole_index\030\001 \002(\003\022\021\n\ttar_index\030\002 \002(\003\"P\n\025"
    "S2C_Ret_KickLeaveTeam\022\022\n\nrole_index\030\001 \002("
    "\003\022\021\n\ttar_index\030\002 \002(\003\022\020\n\010ret_code\030\003 \002(\014\"&"
    "\n\020C2S_Ask_TeamInfo\022\022\n\nrole_index\030\001 \002(\003\"I"
    "\n\020S2C_Ret_TeamInfo\022\036\n\005teams\030\001 \003(\0132\017.univ"
    "ersal_data\022\025\n\rdestroy_teams\030\002 \003(\003", 12673);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "NetPacket.proto", &protobuf_RegisterTypes);
  C2S_Ask_Login::default_instance_ = new C2S_Ask_Login();
  S2C_Ret_Login::default_instance_ = new S2C_Ret_Login();
  C2S_Ask_Register::default_instance_ = new C2S_Ask_Register();
  S2C_Ret_Register::default_instance_ = new S2C_Ret_Register();
  C2S_Ask_RoleSum::default_instance_ = new C2S_Ask_RoleSum();
  S2C_Ret_RoleSum::default_instance_ = new S2C_Ret_RoleSum();
  C2S_ClearRole::default_instance_ = new C2S_ClearRole();
  S2C_Response_ClearRole::default_instance_ = new S2C_Response_ClearRole();
  C2S_RandNickName::default_instance_ = new C2S_RandNickName();
  S2C_RandNickName::default_instance_ = new S2C_RandNickName();
  C2S_Ask_RoleCreate::default_instance_ = new C2S_Ask_RoleCreate();
  S2C_Ret_RoleCreate::default_instance_ = new S2C_Ret_RoleCreate();
  C2S_Ask_RoleInfo::default_instance_ = new C2S_Ask_RoleInfo();
  S2C_Ret_RoleInfo::default_instance_ = new S2C_Ret_RoleInfo();
  C2S_Sync_RoleConfig::default_instance_ = new C2S_Sync_RoleConfig();
  S2C_Sync_RoleConfig::default_instance_ = new S2C_Sync_RoleConfig();
  C2S_Ask_Ready_EnterScene::default_instance_ = new C2S_Ask_Ready_EnterScene();
  S2C_Ret_Ready_EnterScene::default_instance_ = new S2C_Ret_Ready_EnterScene();
  C2S_Ask_EnterScene::default_instance_ = new C2S_Ask_EnterScene();
  C2S_RefreshScene::default_instance_ = new C2S_RefreshScene();
  S2C_Notice_OffLine::default_instance_ = new S2C_Notice_OffLine();
  C2S_Ask_Charset::default_instance_ = new C2S_Ask_Charset();
  C2S_Heartbeat::default_instance_ = new C2S_Heartbeat();
  S2C_Heartbeat::default_instance_ = new S2C_Heartbeat();
  C2S_GameCoin::default_instance_ = new C2S_GameCoin();
  S2C_Sync_Role_GameCoin::default_instance_ = new S2C_Sync_Role_GameCoin();
  C2S_DiamondCoin::default_instance_ = new C2S_DiamondCoin();
  S2C_DiamondCoin::default_instance_ = new S2C_DiamondCoin();
  C2S_Stamina::default_instance_ = new C2S_Stamina();
  S2C_Stamina::default_instance_ = new S2C_Stamina();
  C2S_Exp::default_instance_ = new C2S_Exp();
  S2C_Sync_Role_Exp::default_instance_ = new S2C_Sync_Role_Exp();
  S2C_Notice_Role_EnterScene::default_instance_ = new S2C_Notice_Role_EnterScene();
  S2C_Notice_Role_LeaveScene::default_instance_ = new S2C_Notice_Role_LeaveScene();
  S2C_Sync_Role_PublicInfo::default_instance_ = new S2C_Sync_Role_PublicInfo();
  S2C_Sync_Role_PrivateInfo::default_instance_ = new S2C_Sync_Role_PrivateInfo();
  S2C_Sync_RoleInfo::default_instance_ = new S2C_Sync_RoleInfo();
  S2C_Sync_RoleAttr::default_instance_ = new S2C_Sync_RoleAttr();
  C2S_Sync_Dir::default_instance_ = new C2S_Sync_Dir();
  S2C_Sync_Dir::default_instance_ = new S2C_Sync_Dir();
  C2S_Sync_RoleMove::default_instance_ = new C2S_Sync_RoleMove();
  S2C_Sync_RoleMove::default_instance_ = new S2C_Sync_RoleMove();
  S2C_Sync_RoleStopMove::default_instance_ = new S2C_Sync_RoleStopMove();
  S2C_Notice_Role_LevelUp::default_instance_ = new S2C_Notice_Role_LevelUp();
  C2S_Ask_Comrade::default_instance_ = new C2S_Ask_Comrade();
  S2C_Ret_Comrade::default_instance_ = new S2C_Ret_Comrade();
  C2S_Ask_Chat::default_instance_ = new C2S_Ask_Chat();
  S2C_Ret_Chat::default_instance_ = new S2C_Ret_Chat();
  C2S_Change_Scene::default_instance_ = new C2S_Change_Scene();
  C2S_TransPortChangeScene::default_instance_ = new C2S_TransPortChangeScene();
  S2C_TransPortChangeScene::default_instance_ = new S2C_TransPortChangeScene();
  C2S_NPC_ChangeScene::default_instance_ = new C2S_NPC_ChangeScene();
  S2C_NPC_ChangeScene::default_instance_ = new S2C_NPC_ChangeScene();
  C2S_Qiecuo_Battle::default_instance_ = new C2S_Qiecuo_Battle();
  S2C_Qiecuo_Battle_Refuse::default_instance_ = new S2C_Qiecuo_Battle_Refuse();
  S2C_Qiecuo_Battle::default_instance_ = new S2C_Qiecuo_Battle();
  S2C_Qiecuo_Confirm_Battle::default_instance_ = new S2C_Qiecuo_Confirm_Battle();
  C2S_Qiecuo_Confirm_Battle::default_instance_ = new C2S_Qiecuo_Confirm_Battle();
  C2S_Battle_Info::default_instance_ = new C2S_Battle_Info();
  Battle_Role_Info::default_instance_ = new Battle_Role_Info();
  S2C_Battle_Info::default_instance_ = new S2C_Battle_Info();
  C2S_Battle_Frame_Info::default_instance_ = new C2S_Battle_Frame_Info();
  Battle_Frame_Info::default_instance_ = new Battle_Frame_Info();
  S2C_Battle_Frame_Info::default_instance_ = new S2C_Battle_Frame_Info();
  S2C_Avatar_Goods_List::default_instance_ = new S2C_Avatar_Goods_List();
  C2S_Buy_Avatar_Goods::default_instance_ = new C2S_Buy_Avatar_Goods();
  S2C_Buy_Avatar_Goods::default_instance_ = new S2C_Buy_Avatar_Goods();
  C2S_Bag_Item::default_instance_ = new C2S_Bag_Item();
  S2C_Sync_Role_Bag_Item::default_instance_ = new S2C_Sync_Role_Bag_Item();
  C2S_Bag_MoveItem::default_instance_ = new C2S_Bag_MoveItem();
  C2S_Use_Item::default_instance_ = new C2S_Use_Item();
  S2C_Use_Item::default_instance_ = new S2C_Use_Item();
  C2S_Role_Equip::default_instance_ = new C2S_Role_Equip();
  S2C_Role_Equip::default_instance_ = new S2C_Role_Equip();
  C2S_TakeOff_Equip::default_instance_ = new C2S_TakeOff_Equip();
  S2C_TakeOff_Equip::default_instance_ = new S2C_TakeOff_Equip();
  S2C_Bag_Item_Insert::default_instance_ = new S2C_Bag_Item_Insert();
  S2C_Bag_Item_Remove::default_instance_ = new S2C_Bag_Item_Remove();
  C2S_SuitShopInfo::default_instance_ = new C2S_SuitShopInfo();
  S2C_SuitShopInfo::default_instance_ = new S2C_SuitShopInfo();
  C2S_BuySuitInShop::default_instance_ = new C2S_BuySuitInShop();
  S2C_BuySuitInShop::default_instance_ = new S2C_BuySuitInShop();
  C2S_RoleSuitInfo::default_instance_ = new C2S_RoleSuitInfo();
  S2C_RoleSuitInfo::default_instance_ = new S2C_RoleSuitInfo();
  C2S_DressSuit::default_instance_ = new C2S_DressSuit();
  S2C_DressSuit::default_instance_ = new S2C_DressSuit();
  C2S_TakeOffSuit::default_instance_ = new C2S_TakeOffSuit();
  S2C_TakeOffSuit::default_instance_ = new S2C_TakeOffSuit();
  C2S_AskRewardList::default_instance_ = new C2S_AskRewardList();
  S2C_Sync_Role_RewardList::default_instance_ = new S2C_Sync_Role_RewardList();
  C2S_FaceShopInfo::default_instance_ = new C2S_FaceShopInfo();
  S2C_FaceShopInfo::default_instance_ = new S2C_FaceShopInfo();
  C2S_BuyFaceInShop::default_instance_ = new C2S_BuyFaceInShop();
  S2C_BuyFaceInShop::default_instance_ = new S2C_BuyFaceInShop();
  C2S_RoleFaceInfo::default_instance_ = new C2S_RoleFaceInfo();
  S2C_RoleFaceInfo::default_instance_ = new S2C_RoleFaceInfo();
  C2S_DressFace::default_instance_ = new C2S_DressFace();
  S2C_DressFace::default_instance_ = new S2C_DressFace();
  C2S_TakeOffFace::default_instance_ = new C2S_TakeOffFace();
  S2C_TakeOffFace::default_instance_ = new S2C_TakeOffFace();
  C2S_ManualUpdateFaceShop::default_instance_ = new C2S_ManualUpdateFaceShop();
  S2C_ManualUpdateFaceShop::default_instance_ = new S2C_ManualUpdateFaceShop();
  C2S_PassRisk::default_instance_ = new C2S_PassRisk();
  S2C_PassRisk::default_instance_ = new S2C_PassRisk();
  C2S_ReadyEnterRisk::default_instance_ = new C2S_ReadyEnterRisk();
  S2C_ReadyEnterRisk::default_instance_ = new S2C_ReadyEnterRisk();
  S2C_NPC_Add_RecordQueue::default_instance_ = new S2C_NPC_Add_RecordQueue();
  S2C_NPC_Go_RecordQueue::default_instance_ = new S2C_NPC_Go_RecordQueue();
  C2S_Select_Recommend_Friends::default_instance_ = new C2S_Select_Recommend_Friends();
  S2C_Select_Recommend_Friends::default_instance_ = new S2C_Select_Recommend_Friends();
  C2S_FindFriend::default_instance_ = new C2S_FindFriend();
  S2C_FindFriend::default_instance_ = new S2C_FindFriend();
  C2S_Add_Friend::default_instance_ = new C2S_Add_Friend();
  S2C_Add_Friend::default_instance_ = new S2C_Add_Friend();
  C2S_Remove_Friend::default_instance_ = new C2S_Remove_Friend();
  S2C_Remove_Friend::default_instance_ = new S2C_Remove_Friend();
  S2C_Request_Add_Friend::default_instance_ = new S2C_Request_Add_Friend();
  C2S_Request_Add_Friend::default_instance_ = new C2S_Request_Add_Friend();
  S2C_Friend_Online::default_instance_ = new S2C_Friend_Online();
  S2C_Friend_Offline::default_instance_ = new S2C_Friend_Offline();
  C2S_Skill_Study::default_instance_ = new C2S_Skill_Study();
  S2C_Skill_Study::default_instance_ = new S2C_Skill_Study();
  C2S_Skill_LevelUp::default_instance_ = new C2S_Skill_LevelUp();
  S2C_Skill_LevelUp::default_instance_ = new S2C_Skill_LevelUp();
  C2S_Skill_DressTalent::default_instance_ = new C2S_Skill_DressTalent();
  S2C_Skill_DressTalent::default_instance_ = new S2C_Skill_DressTalent();
  C2S_Skill_TakeOffTalent::default_instance_ = new C2S_Skill_TakeOffTalent();
  S2C_Skill_TakeOffTalent::default_instance_ = new S2C_Skill_TakeOffTalent();
  C2S_Skill_DressBook::default_instance_ = new C2S_Skill_DressBook();
  S2C_Skill_DressBook::default_instance_ = new S2C_Skill_DressBook();
  C2S_Skill_TakeOffBook::default_instance_ = new C2S_Skill_TakeOffBook();
  S2C_Skill_TakeOffBook::default_instance_ = new S2C_Skill_TakeOffBook();
  C2S_Ask_ChangeAttrPoint::default_instance_ = new C2S_Ask_ChangeAttrPoint();
  C2S_Ask_SummonpetChangeAttrPoint::default_instance_ = new C2S_Ask_SummonpetChangeAttrPoint();
  C2S_Ask_CreateTeam::default_instance_ = new C2S_Ask_CreateTeam();
  S2C_Ret_CreateTeam::default_instance_ = new S2C_Ret_CreateTeam();
  C2S_Ask_DestroyTeam::default_instance_ = new C2S_Ask_DestroyTeam();
  S2C_Ret_DestroyTeam::default_instance_ = new S2C_Ret_DestroyTeam();
  C2S_Ask_InviteEnterTeam::default_instance_ = new C2S_Ask_InviteEnterTeam();
  S2C_Ret_InviteEnterTeam::default_instance_ = new S2C_Ret_InviteEnterTeam();
  C2S_Ask_ApplyEnterTeam::default_instance_ = new C2S_Ask_ApplyEnterTeam();
  S2C_Ret_ApplyEnterTeam::default_instance_ = new S2C_Ret_ApplyEnterTeam();
  C2S_Ask_ApplyLeaveTeam::default_instance_ = new C2S_Ask_ApplyLeaveTeam();
  S2C_Ret_ApplyLeaveTeam::default_instance_ = new S2C_Ret_ApplyLeaveTeam();
  C2S_Ask_AgreeEnterTeam::default_instance_ = new C2S_Ask_AgreeEnterTeam();
  S2C_Ret_AgreeEnterTeam::default_instance_ = new S2C_Ret_AgreeEnterTeam();
  C2S_Ask_RefuseEnterTeam::default_instance_ = new C2S_Ask_RefuseEnterTeam();
  S2C_Ret_RefuseEnterTeam::default_instance_ = new S2C_Ret_RefuseEnterTeam();
  C2S_Ask_KickLeaveTeam::default_instance_ = new C2S_Ask_KickLeaveTeam();
  S2C_Ret_KickLeaveTeam::default_instance_ = new S2C_Ret_KickLeaveTeam();
  C2S_Ask_TeamInfo::default_instance_ = new C2S_Ask_TeamInfo();
  S2C_Ret_TeamInfo::default_instance_ = new S2C_Ret_TeamInfo();
  C2S_Ask_Login::default_instance_->InitAsDefaultInstance();
  S2C_Ret_Login::default_instance_->InitAsDefaultInstance();
  C2S_Ask_Register::default_instance_->InitAsDefaultInstance();
  S2C_Ret_Register::default_instance_->InitAsDefaultInstance();
  C2S_Ask_RoleSum::default_instance_->InitAsDefaultInstance();
  S2C_Ret_RoleSum::default_instance_->InitAsDefaultInstance();
  C2S_ClearRole::default_instance_->InitAsDefaultInstance();
  S2C_Response_ClearRole::default_instance_->InitAsDefaultInstance();
  C2S_RandNickName::default_instance_->InitAsDefaultInstance();
  S2C_RandNickName::default_instance_->InitAsDefaultInstance();
  C2S_Ask_RoleCreate::default_instance_->InitAsDefaultInstance();
  S2C_Ret_RoleCreate::default_instance_->InitAsDefaultInstance();
  C2S_Ask_RoleInfo::default_instance_->InitAsDefaultInstance();
  S2C_Ret_RoleInfo::default_instance_->InitAsDefaultInstance();
  C2S_Sync_RoleConfig::default_instance_->InitAsDefaultInstance();
  S2C_Sync_RoleConfig::default_instance_->InitAsDefaultInstance();
  C2S_Ask_Ready_EnterScene::default_instance_->InitAsDefaultInstance();
  S2C_Ret_Ready_EnterScene::default_instance_->InitAsDefaultInstance();
  C2S_Ask_EnterScene::default_instance_->InitAsDefaultInstance();
  C2S_RefreshScene::default_instance_->InitAsDefaultInstance();
  S2C_Notice_OffLine::default_instance_->InitAsDefaultInstance();
  C2S_Ask_Charset::default_instance_->InitAsDefaultInstance();
  C2S_Heartbeat::default_instance_->InitAsDefaultInstance();
  S2C_Heartbeat::default_instance_->InitAsDefaultInstance();
  C2S_GameCoin::default_instance_->InitAsDefaultInstance();
  S2C_Sync_Role_GameCoin::default_instance_->InitAsDefaultInstance();
  C2S_DiamondCoin::default_instance_->InitAsDefaultInstance();
  S2C_DiamondCoin::default_instance_->InitAsDefaultInstance();
  C2S_Stamina::default_instance_->InitAsDefaultInstance();
  S2C_Stamina::default_instance_->InitAsDefaultInstance();
  C2S_Exp::default_instance_->InitAsDefaultInstance();
  S2C_Sync_Role_Exp::default_instance_->InitAsDefaultInstance();
  S2C_Notice_Role_EnterScene::default_instance_->InitAsDefaultInstance();
  S2C_Notice_Role_LeaveScene::default_instance_->InitAsDefaultInstance();
  S2C_Sync_Role_PublicInfo::default_instance_->InitAsDefaultInstance();
  S2C_Sync_Role_PrivateInfo::default_instance_->InitAsDefaultInstance();
  S2C_Sync_RoleInfo::default_instance_->InitAsDefaultInstance();
  S2C_Sync_RoleAttr::default_instance_->InitAsDefaultInstance();
  C2S_Sync_Dir::default_instance_->InitAsDefaultInstance();
  S2C_Sync_Dir::default_instance_->InitAsDefaultInstance();
  C2S_Sync_RoleMove::default_instance_->InitAsDefaultInstance();
  S2C_Sync_RoleMove::default_instance_->InitAsDefaultInstance();
  S2C_Sync_RoleStopMove::default_instance_->InitAsDefaultInstance();
  S2C_Notice_Role_LevelUp::default_instance_->InitAsDefaultInstance();
  C2S_Ask_Comrade::default_instance_->InitAsDefaultInstance();
  S2C_Ret_Comrade::default_instance_->InitAsDefaultInstance();
  C2S_Ask_Chat::default_instance_->InitAsDefaultInstance();
  S2C_Ret_Chat::default_instance_->InitAsDefaultInstance();
  C2S_Change_Scene::default_instance_->InitAsDefaultInstance();
  C2S_TransPortChangeScene::default_instance_->InitAsDefaultInstance();
  S2C_TransPortChangeScene::default_instance_->InitAsDefaultInstance();
  C2S_NPC_ChangeScene::default_instance_->InitAsDefaultInstance();
  S2C_NPC_ChangeScene::default_instance_->InitAsDefaultInstance();
  C2S_Qiecuo_Battle::default_instance_->InitAsDefaultInstance();
  S2C_Qiecuo_Battle_Refuse::default_instance_->InitAsDefaultInstance();
  S2C_Qiecuo_Battle::default_instance_->InitAsDefaultInstance();
  S2C_Qiecuo_Confirm_Battle::default_instance_->InitAsDefaultInstance();
  C2S_Qiecuo_Confirm_Battle::default_instance_->InitAsDefaultInstance();
  C2S_Battle_Info::default_instance_->InitAsDefaultInstance();
  Battle_Role_Info::default_instance_->InitAsDefaultInstance();
  S2C_Battle_Info::default_instance_->InitAsDefaultInstance();
  C2S_Battle_Frame_Info::default_instance_->InitAsDefaultInstance();
  Battle_Frame_Info::default_instance_->InitAsDefaultInstance();
  S2C_Battle_Frame_Info::default_instance_->InitAsDefaultInstance();
  S2C_Avatar_Goods_List::default_instance_->InitAsDefaultInstance();
  C2S_Buy_Avatar_Goods::default_instance_->InitAsDefaultInstance();
  S2C_Buy_Avatar_Goods::default_instance_->InitAsDefaultInstance();
  C2S_Bag_Item::default_instance_->InitAsDefaultInstance();
  S2C_Sync_Role_Bag_Item::default_instance_->InitAsDefaultInstance();
  C2S_Bag_MoveItem::default_instance_->InitAsDefaultInstance();
  C2S_Use_Item::default_instance_->InitAsDefaultInstance();
  S2C_Use_Item::default_instance_->InitAsDefaultInstance();
  C2S_Role_Equip::default_instance_->InitAsDefaultInstance();
  S2C_Role_Equip::default_instance_->InitAsDefaultInstance();
  C2S_TakeOff_Equip::default_instance_->InitAsDefaultInstance();
  S2C_TakeOff_Equip::default_instance_->InitAsDefaultInstance();
  S2C_Bag_Item_Insert::default_instance_->InitAsDefaultInstance();
  S2C_Bag_Item_Remove::default_instance_->InitAsDefaultInstance();
  C2S_SuitShopInfo::default_instance_->InitAsDefaultInstance();
  S2C_SuitShopInfo::default_instance_->InitAsDefaultInstance();
  C2S_BuySuitInShop::default_instance_->InitAsDefaultInstance();
  S2C_BuySuitInShop::default_instance_->InitAsDefaultInstance();
  C2S_RoleSuitInfo::default_instance_->InitAsDefaultInstance();
  S2C_RoleSuitInfo::default_instance_->InitAsDefaultInstance();
  C2S_DressSuit::default_instance_->InitAsDefaultInstance();
  S2C_DressSuit::default_instance_->InitAsDefaultInstance();
  C2S_TakeOffSuit::default_instance_->InitAsDefaultInstance();
  S2C_TakeOffSuit::default_instance_->InitAsDefaultInstance();
  C2S_AskRewardList::default_instance_->InitAsDefaultInstance();
  S2C_Sync_Role_RewardList::default_instance_->InitAsDefaultInstance();
  C2S_FaceShopInfo::default_instance_->InitAsDefaultInstance();
  S2C_FaceShopInfo::default_instance_->InitAsDefaultInstance();
  C2S_BuyFaceInShop::default_instance_->InitAsDefaultInstance();
  S2C_BuyFaceInShop::default_instance_->InitAsDefaultInstance();
  C2S_RoleFaceInfo::default_instance_->InitAsDefaultInstance();
  S2C_RoleFaceInfo::default_instance_->InitAsDefaultInstance();
  C2S_DressFace::default_instance_->InitAsDefaultInstance();
  S2C_DressFace::default_instance_->InitAsDefaultInstance();
  C2S_TakeOffFace::default_instance_->InitAsDefaultInstance();
  S2C_TakeOffFace::default_instance_->InitAsDefaultInstance();
  C2S_ManualUpdateFaceShop::default_instance_->InitAsDefaultInstance();
  S2C_ManualUpdateFaceShop::default_instance_->InitAsDefaultInstance();
  C2S_PassRisk::default_instance_->InitAsDefaultInstance();
  S2C_PassRisk::default_instance_->InitAsDefaultInstance();
  C2S_ReadyEnterRisk::default_instance_->InitAsDefaultInstance();
  S2C_ReadyEnterRisk::default_instance_->InitAsDefaultInstance();
  S2C_NPC_Add_RecordQueue::default_instance_->InitAsDefaultInstance();
  S2C_NPC_Go_RecordQueue::default_instance_->InitAsDefaultInstance();
  C2S_Select_Recommend_Friends::default_instance_->InitAsDefaultInstance();
  S2C_Select_Recommend_Friends::default_instance_->InitAsDefaultInstance();
  C2S_FindFriend::default_instance_->InitAsDefaultInstance();
  S2C_FindFriend::default_instance_->InitAsDefaultInstance();
  C2S_Add_Friend::default_instance_->InitAsDefaultInstance();
  S2C_Add_Friend::default_instance_->InitAsDefaultInstance();
  C2S_Remove_Friend::default_instance_->InitAsDefaultInstance();
  S2C_Remove_Friend::default_instance_->InitAsDefaultInstance();
  S2C_Request_Add_Friend::default_instance_->InitAsDefaultInstance();
  C2S_Request_Add_Friend::default_instance_->InitAsDefaultInstance();
  S2C_Friend_Online::default_instance_->InitAsDefaultInstance();
  S2C_Friend_Offline::default_instance_->InitAsDefaultInstance();
  C2S_Skill_Study::default_instance_->InitAsDefaultInstance();
  S2C_Skill_Study::default_instance_->InitAsDefaultInstance();
  C2S_Skill_LevelUp::default_instance_->InitAsDefaultInstance();
  S2C_Skill_LevelUp::default_instance_->InitAsDefaultInstance();
  C2S_Skill_DressTalent::default_instance_->InitAsDefaultInstance();
  S2C_Skill_DressTalent::default_instance_->InitAsDefaultInstance();
  C2S_Skill_TakeOffTalent::default_instance_->InitAsDefaultInstance();
  S2C_Skill_TakeOffTalent::default_instance_->InitAsDefaultInstance();
  C2S_Skill_DressBook::default_instance_->InitAsDefaultInstance();
  S2C_Skill_DressBook::default_instance_->InitAsDefaultInstance();
  C2S_Skill_TakeOffBook::default_instance_->InitAsDefaultInstance();
  S2C_Skill_TakeOffBook::default_instance_->InitAsDefaultInstance();
  C2S_Ask_ChangeAttrPoint::default_instance_->InitAsDefaultInstance();
  C2S_Ask_SummonpetChangeAttrPoint::default_instance_->InitAsDefaultInstance();
  C2S_Ask_CreateTeam::default_instance_->InitAsDefaultInstance();
  S2C_Ret_CreateTeam::default_instance_->InitAsDefaultInstance();
  C2S_Ask_DestroyTeam::default_instance_->InitAsDefaultInstance();
  S2C_Ret_DestroyTeam::default_instance_->InitAsDefaultInstance();
  C2S_Ask_InviteEnterTeam::default_instance_->InitAsDefaultInstance();
  S2C_Ret_InviteEnterTeam::default_instance_->InitAsDefaultInstance();
  C2S_Ask_ApplyEnterTeam::default_instance_->InitAsDefaultInstance();
  S2C_Ret_ApplyEnterTeam::default_instance_->InitAsDefaultInstance();
  C2S_Ask_ApplyLeaveTeam::default_instance_->InitAsDefaultInstance();
  S2C_Ret_ApplyLeaveTeam::default_instance_->InitAsDefaultInstance();
  C2S_Ask_AgreeEnterTeam::default_instance_->InitAsDefaultInstance();
  S2C_Ret_AgreeEnterTeam::default_instance_->InitAsDefaultInstance();
  C2S_Ask_RefuseEnterTeam::default_instance_->InitAsDefaultInstance();
  S2C_Ret_RefuseEnterTeam::default_instance_->InitAsDefaultInstance();
  C2S_Ask_KickLeaveTeam::default_instance_->InitAsDefaultInstance();
  S2C_Ret_KickLeaveTeam::default_instance_->InitAsDefaultInstance();
  C2S_Ask_TeamInfo::default_instance_->InitAsDefaultInstance();
  S2C_Ret_TeamInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_NetPacket_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_NetPacket_2eproto {
  StaticDescriptorInitializer_NetPacket_2eproto() {
    protobuf_AddDesc_NetPacket_2eproto();
  }
} static_descriptor_initializer_NetPacket_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int C2S_Ask_Login::kAccountFieldNumber;
const int C2S_Ask_Login::kPasswordFieldNumber;
const int C2S_Ask_Login::kSidFieldNumber;
#endif  // !_MSC_VER

C2S_Ask_Login::C2S_Ask_Login()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Ask_Login::InitAsDefaultInstance() {
}

C2S_Ask_Login::C2S_Ask_Login(const C2S_Ask_Login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Ask_Login::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Ask_Login::~C2S_Ask_Login() {
  SharedDtor();
}

void C2S_Ask_Login::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (sid_ != &::google::protobuf::internal::kEmptyString) {
    delete sid_;
  }
  if (this != default_instance_) {
  }
}

void C2S_Ask_Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Ask_Login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Ask_Login_descriptor_;
}

const C2S_Ask_Login& C2S_Ask_Login::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_Ask_Login* C2S_Ask_Login::default_instance_ = nullptr;

C2S_Ask_Login* C2S_Ask_Login::New() const {
  return new C2S_Ask_Login;
}

void C2S_Ask_Login::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_sid()) {
      if (sid_ != &::google::protobuf::internal::kEmptyString) {
        sid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Ask_Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // required bytes password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_password()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sid;
        break;
      }

      // required bytes sid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Ask_Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->account(), output);
  }

  // required bytes password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->password(), output);
  }

  // required bytes sid = 3;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->sid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Ask_Login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes account = 1;
  if (has_account()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->account(), target);
  }

  // required bytes password = 2;
  if (has_password()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->password(), target);
  }

  // required bytes sid = 3;
  if (has_sid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->sid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Ask_Login::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

    // required bytes password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->password());
    }

    // required bytes sid = 3;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Ask_Login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Ask_Login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Ask_Login*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Ask_Login::MergeFrom(const C2S_Ask_Login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Ask_Login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Ask_Login::CopyFrom(const C2S_Ask_Login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Ask_Login::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void C2S_Ask_Login::Swap(C2S_Ask_Login* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(password_, other->password_);
    std::swap(sid_, other->sid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Ask_Login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Ask_Login_descriptor_;
  metadata.reflection = C2S_Ask_Login_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Ret_Login::kRetCodeFieldNumber;
const int S2C_Ret_Login::kReLoginFieldNumber;
const int S2C_Ret_Login::kAccountFieldNumber;
#endif  // !_MSC_VER

S2C_Ret_Login::S2C_Ret_Login()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Ret_Login::InitAsDefaultInstance() {
}

S2C_Ret_Login::S2C_Ret_Login(const S2C_Ret_Login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Ret_Login::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  re_login_ = false;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Ret_Login::~S2C_Ret_Login() {
  SharedDtor();
}

void S2C_Ret_Login::SharedDtor() {
  if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
    delete ret_code_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void S2C_Ret_Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Ret_Login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Ret_Login_descriptor_;
}

const S2C_Ret_Login& S2C_Ret_Login::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Ret_Login* S2C_Ret_Login::default_instance_ = nullptr;

S2C_Ret_Login* S2C_Ret_Login::New() const {
  return new S2C_Ret_Login;
}

void S2C_Ret_Login::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret_code()) {
      if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
        ret_code_->clear();
      }
    }
    re_login_ = false;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Ret_Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ret_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_re_login;
        break;
      }

      // required bool re_login = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_re_login:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &re_login_)));
          set_has_re_login();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_account;
        break;
      }

      // required bytes account = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Ret_Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->ret_code(), output);
  }

  // required bool re_login = 2;
  if (has_re_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->re_login(), output);
  }

  // required bytes account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->account(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Ret_Login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes ret_code = 1;
  if (has_ret_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ret_code(), target);
  }

  // required bool re_login = 2;
  if (has_re_login()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->re_login(), target);
  }

  // required bytes account = 3;
  if (has_account()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->account(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Ret_Login::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ret_code());
    }

    // required bool re_login = 2;
    if (has_re_login()) {
      total_size += 1 + 1;
    }

    // required bytes account = 3;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Ret_Login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Ret_Login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Ret_Login*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Ret_Login::MergeFrom(const S2C_Ret_Login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_re_login()) {
      set_re_login(from.re_login());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Ret_Login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Ret_Login::CopyFrom(const S2C_Ret_Login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Ret_Login::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2C_Ret_Login::Swap(S2C_Ret_Login* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(re_login_, other->re_login_);
    std::swap(account_, other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Ret_Login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Ret_Login_descriptor_;
  metadata.reflection = S2C_Ret_Login_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Ask_Register::kAccountFieldNumber;
const int C2S_Ask_Register::kPasswordFieldNumber;
const int C2S_Ask_Register::kNewUnitIndexFieldNumber;
const int C2S_Ask_Register::kRetUnitindexFieldNumber;
const int C2S_Ask_Register::kRetIntaddrFieldNumber;
#endif  // !_MSC_VER

C2S_Ask_Register::C2S_Ask_Register()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Ask_Register::InitAsDefaultInstance() {
}

C2S_Ask_Register::C2S_Ask_Register(const C2S_Ask_Register& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Ask_Register::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  new_unit_index_ = GOOGLE_LONGLONG(0);
  ret_unitindex_ = GOOGLE_LONGLONG(0);
  ret_intaddr_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Ask_Register::~C2S_Ask_Register() {
  SharedDtor();
}

void C2S_Ask_Register::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void C2S_Ask_Register::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Ask_Register::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Ask_Register_descriptor_;
}

const C2S_Ask_Register& C2S_Ask_Register::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_Ask_Register* C2S_Ask_Register::default_instance_ = nullptr;

C2S_Ask_Register* C2S_Ask_Register::New() const {
  return new C2S_Ask_Register;
}

void C2S_Ask_Register::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    new_unit_index_ = GOOGLE_LONGLONG(0);
    ret_unitindex_ = GOOGLE_LONGLONG(0);
    ret_intaddr_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Ask_Register::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // required bytes password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_password()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_new_unit_index;
        break;
      }

      // required int64 new_unit_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_unit_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &new_unit_index_)));
          set_has_new_unit_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ret_unitindex;
        break;
      }

      // optional int64 ret_unitindex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret_unitindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ret_unitindex_)));
          set_has_ret_unitindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ret_intaddr;
        break;
      }

      // optional int64 ret_intaddr = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret_intaddr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ret_intaddr_)));
          set_has_ret_intaddr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Ask_Register::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->account(), output);
  }

  // required bytes password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->password(), output);
  }

  // required int64 new_unit_index = 3;
  if (has_new_unit_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->new_unit_index(), output);
  }

  // optional int64 ret_unitindex = 4;
  if (has_ret_unitindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->ret_unitindex(), output);
  }

  // optional int64 ret_intaddr = 5;
  if (has_ret_intaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->ret_intaddr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Ask_Register::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes account = 1;
  if (has_account()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->account(), target);
  }

  // required bytes password = 2;
  if (has_password()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->password(), target);
  }

  // required int64 new_unit_index = 3;
  if (has_new_unit_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->new_unit_index(), target);
  }

  // optional int64 ret_unitindex = 4;
  if (has_ret_unitindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->ret_unitindex(), target);
  }

  // optional int64 ret_intaddr = 5;
  if (has_ret_intaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->ret_intaddr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Ask_Register::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

    // required bytes password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->password());
    }

    // required int64 new_unit_index = 3;
    if (has_new_unit_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->new_unit_index());
    }

    // optional int64 ret_unitindex = 4;
    if (has_ret_unitindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ret_unitindex());
    }

    // optional int64 ret_intaddr = 5;
    if (has_ret_intaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ret_intaddr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Ask_Register::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Ask_Register* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Ask_Register*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Ask_Register::MergeFrom(const C2S_Ask_Register& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_new_unit_index()) {
      set_new_unit_index(from.new_unit_index());
    }
    if (from.has_ret_unitindex()) {
      set_ret_unitindex(from.ret_unitindex());
    }
    if (from.has_ret_intaddr()) {
      set_ret_intaddr(from.ret_intaddr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Ask_Register::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Ask_Register::CopyFrom(const C2S_Ask_Register& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Ask_Register::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void C2S_Ask_Register::Swap(C2S_Ask_Register* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(password_, other->password_);
    std::swap(new_unit_index_, other->new_unit_index_);
    std::swap(ret_unitindex_, other->ret_unitindex_);
    std::swap(ret_intaddr_, other->ret_intaddr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Ask_Register::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Ask_Register_descriptor_;
  metadata.reflection = C2S_Ask_Register_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Ret_Register::kRetCodeFieldNumber;
const int S2C_Ret_Register::kAccountFieldNumber;
const int S2C_Ret_Register::kAccountKeyFieldNumber;
#endif  // !_MSC_VER

S2C_Ret_Register::S2C_Ret_Register()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Ret_Register::InitAsDefaultInstance() {
}

S2C_Ret_Register::S2C_Ret_Register(const S2C_Ret_Register& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Ret_Register::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_key_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Ret_Register::~S2C_Ret_Register() {
  SharedDtor();
}

void S2C_Ret_Register::SharedDtor() {
  if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
    delete ret_code_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void S2C_Ret_Register::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Ret_Register::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Ret_Register_descriptor_;
}

const S2C_Ret_Register& S2C_Ret_Register::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Ret_Register* S2C_Ret_Register::default_instance_ = nullptr;

S2C_Ret_Register* S2C_Ret_Register::New() const {
  return new S2C_Ret_Register;
}

void S2C_Ret_Register::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret_code()) {
      if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
        ret_code_->clear();
      }
    }
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    account_key_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Ret_Register::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ret_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // required bytes account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_account_key;
        break;
      }

      // optional int64 account_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &account_key_)));
          set_has_account_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Ret_Register::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->ret_code(), output);
  }

  // required bytes account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->account(), output);
  }

  // optional int64 account_key = 3;
  if (has_account_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->account_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Ret_Register::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes ret_code = 1;
  if (has_ret_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ret_code(), target);
  }

  // required bytes account = 2;
  if (has_account()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->account(), target);
  }

  // optional int64 account_key = 3;
  if (has_account_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->account_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Ret_Register::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ret_code());
    }

    // required bytes account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

    // optional int64 account_key = 3;
    if (has_account_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->account_key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Ret_Register::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Ret_Register* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Ret_Register*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Ret_Register::MergeFrom(const S2C_Ret_Register& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_account_key()) {
      set_account_key(from.account_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Ret_Register::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Ret_Register::CopyFrom(const S2C_Ret_Register& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Ret_Register::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2C_Ret_Register::Swap(S2C_Ret_Register* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(account_, other->account_);
    std::swap(account_key_, other->account_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Ret_Register::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Ret_Register_descriptor_;
  metadata.reflection = S2C_Ret_Register_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Ask_RoleSum::kAccountFieldNumber;
const int C2S_Ask_RoleSum::kRetUnitindexFieldNumber;
const int C2S_Ask_RoleSum::kRetIntaddrFieldNumber;
const int C2S_Ask_RoleSum::kAccountKeyFieldNumber;
#endif  // !_MSC_VER

C2S_Ask_RoleSum::C2S_Ask_RoleSum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Ask_RoleSum::InitAsDefaultInstance() {
}

C2S_Ask_RoleSum::C2S_Ask_RoleSum(const C2S_Ask_RoleSum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Ask_RoleSum::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ret_unitindex_ = GOOGLE_LONGLONG(0);
  ret_intaddr_ = GOOGLE_LONGLONG(0);
  account_key_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Ask_RoleSum::~C2S_Ask_RoleSum() {
  SharedDtor();
}

void C2S_Ask_RoleSum::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void C2S_Ask_RoleSum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Ask_RoleSum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Ask_RoleSum_descriptor_;
}

const C2S_Ask_RoleSum& C2S_Ask_RoleSum::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_Ask_RoleSum* C2S_Ask_RoleSum::default_instance_ = nullptr;

C2S_Ask_RoleSum* C2S_Ask_RoleSum::New() const {
  return new C2S_Ask_RoleSum;
}

void C2S_Ask_RoleSum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    ret_unitindex_ = GOOGLE_LONGLONG(0);
    ret_intaddr_ = GOOGLE_LONGLONG(0);
    account_key_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Ask_RoleSum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret_unitindex;
        break;
      }

      // optional int64 ret_unitindex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret_unitindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ret_unitindex_)));
          set_has_ret_unitindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret_intaddr;
        break;
      }

      // optional int64 ret_intaddr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret_intaddr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ret_intaddr_)));
          set_has_ret_intaddr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_account_key;
        break;
      }

      // optional int64 account_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &account_key_)));
          set_has_account_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Ask_RoleSum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->account(), output);
  }

  // optional int64 ret_unitindex = 2;
  if (has_ret_unitindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->ret_unitindex(), output);
  }

  // optional int64 ret_intaddr = 3;
  if (has_ret_intaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->ret_intaddr(), output);
  }

  // optional int64 account_key = 4;
  if (has_account_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->account_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Ask_RoleSum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes account = 1;
  if (has_account()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->account(), target);
  }

  // optional int64 ret_unitindex = 2;
  if (has_ret_unitindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->ret_unitindex(), target);
  }

  // optional int64 ret_intaddr = 3;
  if (has_ret_intaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->ret_intaddr(), target);
  }

  // optional int64 account_key = 4;
  if (has_account_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->account_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Ask_RoleSum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

    // optional int64 ret_unitindex = 2;
    if (has_ret_unitindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ret_unitindex());
    }

    // optional int64 ret_intaddr = 3;
    if (has_ret_intaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ret_intaddr());
    }

    // optional int64 account_key = 4;
    if (has_account_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->account_key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Ask_RoleSum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Ask_RoleSum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Ask_RoleSum*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Ask_RoleSum::MergeFrom(const C2S_Ask_RoleSum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_ret_unitindex()) {
      set_ret_unitindex(from.ret_unitindex());
    }
    if (from.has_ret_intaddr()) {
      set_ret_intaddr(from.ret_intaddr());
    }
    if (from.has_account_key()) {
      set_account_key(from.account_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Ask_RoleSum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Ask_RoleSum::CopyFrom(const C2S_Ask_RoleSum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Ask_RoleSum::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2S_Ask_RoleSum::Swap(C2S_Ask_RoleSum* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(ret_unitindex_, other->ret_unitindex_);
    std::swap(ret_intaddr_, other->ret_intaddr_);
    std::swap(account_key_, other->account_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Ask_RoleSum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Ask_RoleSum_descriptor_;
  metadata.reflection = C2S_Ask_RoleSum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Ret_RoleSum::kAccountFieldNumber;
const int S2C_Ret_RoleSum::kListRoleIndexFieldNumber;
#endif  // !_MSC_VER

S2C_Ret_RoleSum::S2C_Ret_RoleSum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Ret_RoleSum::InitAsDefaultInstance() {
}

S2C_Ret_RoleSum::S2C_Ret_RoleSum(const S2C_Ret_RoleSum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Ret_RoleSum::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Ret_RoleSum::~S2C_Ret_RoleSum() {
  SharedDtor();
}

void S2C_Ret_RoleSum::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void S2C_Ret_RoleSum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Ret_RoleSum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Ret_RoleSum_descriptor_;
}

const S2C_Ret_RoleSum& S2C_Ret_RoleSum::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Ret_RoleSum* S2C_Ret_RoleSum::default_instance_ = nullptr;

S2C_Ret_RoleSum* S2C_Ret_RoleSum::New() const {
  return new S2C_Ret_RoleSum;
}

void S2C_Ret_RoleSum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
  }
  list_role_index_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Ret_RoleSum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_list_role_index;
        break;
      }

      // repeated int64 list_role_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_list_role_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_list_role_index())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_list_role_index())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_list_role_index;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Ret_RoleSum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->account(), output);
  }

  // repeated int64 list_role_index = 2;
  for (int i = 0; i < this->list_role_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->list_role_index(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Ret_RoleSum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes account = 1;
  if (has_account()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->account(), target);
  }

  // repeated int64 list_role_index = 2;
  for (int i = 0; i < this->list_role_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->list_role_index(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Ret_RoleSum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

  }
  // repeated int64 list_role_index = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->list_role_index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->list_role_index(i));
    }
    total_size += 1 * this->list_role_index_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Ret_RoleSum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Ret_RoleSum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Ret_RoleSum*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Ret_RoleSum::MergeFrom(const S2C_Ret_RoleSum& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_role_index_.MergeFrom(from.list_role_index_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Ret_RoleSum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Ret_RoleSum::CopyFrom(const S2C_Ret_RoleSum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Ret_RoleSum::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void S2C_Ret_RoleSum::Swap(S2C_Ret_RoleSum* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    list_role_index_.Swap(&other->list_role_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Ret_RoleSum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Ret_RoleSum_descriptor_;
  metadata.reflection = S2C_Ret_RoleSum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_ClearRole::kAccountFieldNumber;
const int C2S_ClearRole::kRetUnitindexFieldNumber;
const int C2S_ClearRole::kRetIntaddrFieldNumber;
#endif  // !_MSC_VER

C2S_ClearRole::C2S_ClearRole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_ClearRole::InitAsDefaultInstance() {
}

C2S_ClearRole::C2S_ClearRole(const C2S_ClearRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_ClearRole::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ret_unitindex_ = GOOGLE_LONGLONG(0);
  ret_intaddr_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_ClearRole::~C2S_ClearRole() {
  SharedDtor();
}

void C2S_ClearRole::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void C2S_ClearRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_ClearRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_ClearRole_descriptor_;
}

const C2S_ClearRole& C2S_ClearRole::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_ClearRole* C2S_ClearRole::default_instance_ = nullptr;

C2S_ClearRole* C2S_ClearRole::New() const {
  return new C2S_ClearRole;
}

void C2S_ClearRole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    ret_unitindex_ = GOOGLE_LONGLONG(0);
    ret_intaddr_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_ClearRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret_unitindex;
        break;
      }

      // optional int64 ret_unitindex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret_unitindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ret_unitindex_)));
          set_has_ret_unitindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret_intaddr;
        break;
      }

      // optional int64 ret_intaddr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret_intaddr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ret_intaddr_)));
          set_has_ret_intaddr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_ClearRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->account(), output);
  }

  // optional int64 ret_unitindex = 2;
  if (has_ret_unitindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->ret_unitindex(), output);
  }

  // optional int64 ret_intaddr = 3;
  if (has_ret_intaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->ret_intaddr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_ClearRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes account = 1;
  if (has_account()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->account(), target);
  }

  // optional int64 ret_unitindex = 2;
  if (has_ret_unitindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->ret_unitindex(), target);
  }

  // optional int64 ret_intaddr = 3;
  if (has_ret_intaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->ret_intaddr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_ClearRole::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

    // optional int64 ret_unitindex = 2;
    if (has_ret_unitindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ret_unitindex());
    }

    // optional int64 ret_intaddr = 3;
    if (has_ret_intaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ret_intaddr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_ClearRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_ClearRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_ClearRole*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_ClearRole::MergeFrom(const C2S_ClearRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_ret_unitindex()) {
      set_ret_unitindex(from.ret_unitindex());
    }
    if (from.has_ret_intaddr()) {
      set_ret_intaddr(from.ret_intaddr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_ClearRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_ClearRole::CopyFrom(const C2S_ClearRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_ClearRole::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2S_ClearRole::Swap(C2S_ClearRole* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(ret_unitindex_, other->ret_unitindex_);
    std::swap(ret_intaddr_, other->ret_intaddr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_ClearRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_ClearRole_descriptor_;
  metadata.reflection = C2S_ClearRole_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Response_ClearRole::kAccountFieldNumber;
const int S2C_Response_ClearRole::kIsOkFieldNumber;
#endif  // !_MSC_VER

S2C_Response_ClearRole::S2C_Response_ClearRole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Response_ClearRole::InitAsDefaultInstance() {
}

S2C_Response_ClearRole::S2C_Response_ClearRole(const S2C_Response_ClearRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Response_ClearRole::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_ok_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Response_ClearRole::~S2C_Response_ClearRole() {
  SharedDtor();
}

void S2C_Response_ClearRole::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void S2C_Response_ClearRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Response_ClearRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Response_ClearRole_descriptor_;
}

const S2C_Response_ClearRole& S2C_Response_ClearRole::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Response_ClearRole* S2C_Response_ClearRole::default_instance_ = nullptr;

S2C_Response_ClearRole* S2C_Response_ClearRole::New() const {
  return new S2C_Response_ClearRole;
}

void S2C_Response_ClearRole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    is_ok_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Response_ClearRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_ok;
        break;
      }

      // required bool is_ok = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_ok:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ok_)));
          set_has_is_ok();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Response_ClearRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->account(), output);
  }

  // required bool is_ok = 2;
  if (has_is_ok()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_ok(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Response_ClearRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes account = 1;
  if (has_account()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->account(), target);
  }

  // required bool is_ok = 2;
  if (has_is_ok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_ok(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Response_ClearRole::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

    // required bool is_ok = 2;
    if (has_is_ok()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Response_ClearRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Response_ClearRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Response_ClearRole*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Response_ClearRole::MergeFrom(const S2C_Response_ClearRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_is_ok()) {
      set_is_ok(from.is_ok());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Response_ClearRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Response_ClearRole::CopyFrom(const S2C_Response_ClearRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Response_ClearRole::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2C_Response_ClearRole::Swap(S2C_Response_ClearRole* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(is_ok_, other->is_ok_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Response_ClearRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Response_ClearRole_descriptor_;
  metadata.reflection = S2C_Response_ClearRole_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_RandNickName::kAccountFieldNumber;
const int C2S_RandNickName::kRetUnitindexFieldNumber;
const int C2S_RandNickName::kRetIntaddrFieldNumber;
#endif  // !_MSC_VER

C2S_RandNickName::C2S_RandNickName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_RandNickName::InitAsDefaultInstance() {
}

C2S_RandNickName::C2S_RandNickName(const C2S_RandNickName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_RandNickName::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ret_unitindex_ = GOOGLE_LONGLONG(0);
  ret_intaddr_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_RandNickName::~C2S_RandNickName() {
  SharedDtor();
}

void C2S_RandNickName::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void C2S_RandNickName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_RandNickName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_RandNickName_descriptor_;
}

const C2S_RandNickName& C2S_RandNickName::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_RandNickName* C2S_RandNickName::default_instance_ = nullptr;

C2S_RandNickName* C2S_RandNickName::New() const {
  return new C2S_RandNickName;
}

void C2S_RandNickName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    ret_unitindex_ = GOOGLE_LONGLONG(0);
    ret_intaddr_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_RandNickName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret_unitindex;
        break;
      }

      // optional int64 ret_unitindex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret_unitindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ret_unitindex_)));
          set_has_ret_unitindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret_intaddr;
        break;
      }

      // optional int64 ret_intaddr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret_intaddr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ret_intaddr_)));
          set_has_ret_intaddr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_RandNickName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->account(), output);
  }

  // optional int64 ret_unitindex = 2;
  if (has_ret_unitindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->ret_unitindex(), output);
  }

  // optional int64 ret_intaddr = 3;
  if (has_ret_intaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->ret_intaddr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_RandNickName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes account = 1;
  if (has_account()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->account(), target);
  }

  // optional int64 ret_unitindex = 2;
  if (has_ret_unitindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->ret_unitindex(), target);
  }

  // optional int64 ret_intaddr = 3;
  if (has_ret_intaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->ret_intaddr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_RandNickName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

    // optional int64 ret_unitindex = 2;
    if (has_ret_unitindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ret_unitindex());
    }

    // optional int64 ret_intaddr = 3;
    if (has_ret_intaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ret_intaddr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_RandNickName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_RandNickName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_RandNickName*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_RandNickName::MergeFrom(const C2S_RandNickName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_ret_unitindex()) {
      set_ret_unitindex(from.ret_unitindex());
    }
    if (from.has_ret_intaddr()) {
      set_ret_intaddr(from.ret_intaddr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_RandNickName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_RandNickName::CopyFrom(const C2S_RandNickName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_RandNickName::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2S_RandNickName::Swap(C2S_RandNickName* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(ret_unitindex_, other->ret_unitindex_);
    std::swap(ret_intaddr_, other->ret_intaddr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_RandNickName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_RandNickName_descriptor_;
  metadata.reflection = C2S_RandNickName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_RandNickName::kAccountFieldNumber;
const int S2C_RandNickName::kListNickNameFieldNumber;
#endif  // !_MSC_VER

S2C_RandNickName::S2C_RandNickName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_RandNickName::InitAsDefaultInstance() {
}

S2C_RandNickName::S2C_RandNickName(const S2C_RandNickName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_RandNickName::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_RandNickName::~S2C_RandNickName() {
  SharedDtor();
}

void S2C_RandNickName::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void S2C_RandNickName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_RandNickName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_RandNickName_descriptor_;
}

const S2C_RandNickName& S2C_RandNickName::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_RandNickName* S2C_RandNickName::default_instance_ = nullptr;

S2C_RandNickName* S2C_RandNickName::New() const {
  return new S2C_RandNickName;
}

void S2C_RandNickName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
  }
  list_nick_name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_RandNickName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list_nick_name;
        break;
      }

      // repeated bytes list_nick_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_list_nick_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list_nick_name;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_RandNickName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->account(), output);
  }

  // repeated bytes list_nick_name = 2;
  for (int i = 0; i < this->list_nick_name_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->list_nick_name(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_RandNickName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes account = 1;
  if (has_account()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->account(), target);
  }

  // repeated bytes list_nick_name = 2;
  for (int i = 0; i < this->list_nick_name_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->list_nick_name(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_RandNickName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

  }
  // repeated bytes list_nick_name = 2;
  total_size += 1 * this->list_nick_name_size();
  for (int i = 0; i < this->list_nick_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->list_nick_name(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_RandNickName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_RandNickName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_RandNickName*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_RandNickName::MergeFrom(const S2C_RandNickName& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_nick_name_.MergeFrom(from.list_nick_name_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_RandNickName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_RandNickName::CopyFrom(const S2C_RandNickName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_RandNickName::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void S2C_RandNickName::Swap(S2C_RandNickName* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    list_nick_name_.Swap(&other->list_nick_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_RandNickName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_RandNickName_descriptor_;
  metadata.reflection = S2C_RandNickName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Ask_RoleCreate::kNickNameFieldNumber;
const int C2S_Ask_RoleCreate::kAccountFieldNumber;
const int C2S_Ask_RoleCreate::kDeviceKeyFieldNumber;
const int C2S_Ask_RoleCreate::kDeviceTokenFieldNumber;
const int C2S_Ask_RoleCreate::kDeviceTypeFieldNumber;
const int C2S_Ask_RoleCreate::kPlatformTypeFieldNumber;
const int C2S_Ask_RoleCreate::kRoleTypeFieldNumber;
const int C2S_Ask_RoleCreate::kPasswordFieldNumber;
const int C2S_Ask_RoleCreate::kRoleInfoFieldNumber;
const int C2S_Ask_RoleCreate::kRetUnitindexFieldNumber;
const int C2S_Ask_RoleCreate::kRetIntaddrFieldNumber;
#endif  // !_MSC_VER

C2S_Ask_RoleCreate::C2S_Ask_RoleCreate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Ask_RoleCreate::InitAsDefaultInstance() {
  role_info_ = const_cast< ::universal_data*>(&::universal_data::default_instance());
}

C2S_Ask_RoleCreate::C2S_Ask_RoleCreate(const C2S_Ask_RoleCreate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Ask_RoleCreate::SharedCtor() {
  _cached_size_ = 0;
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platform_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_info_ = nullptr;
  ret_unitindex_ = GOOGLE_LONGLONG(0);
  ret_intaddr_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Ask_RoleCreate::~C2S_Ask_RoleCreate() {
  SharedDtor();
}

void C2S_Ask_RoleCreate::SharedDtor() {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (device_key_ != &::google::protobuf::internal::kEmptyString) {
    delete device_key_;
  }
  if (device_token_ != &::google::protobuf::internal::kEmptyString) {
    delete device_token_;
  }
  if (device_type_ != &::google::protobuf::internal::kEmptyString) {
    delete device_type_;
  }
  if (platform_type_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_type_;
  }
  if (role_type_ != &::google::protobuf::internal::kEmptyString) {
    delete role_type_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
    delete role_info_;
  }
}

void C2S_Ask_RoleCreate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Ask_RoleCreate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Ask_RoleCreate_descriptor_;
}

const C2S_Ask_RoleCreate& C2S_Ask_RoleCreate::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_Ask_RoleCreate* C2S_Ask_RoleCreate::default_instance_ = nullptr;

C2S_Ask_RoleCreate* C2S_Ask_RoleCreate::New() const {
  return new C2S_Ask_RoleCreate;
}

void C2S_Ask_RoleCreate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
        nick_name_->clear();
      }
    }
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_device_key()) {
      if (device_key_ != &::google::protobuf::internal::kEmptyString) {
        device_key_->clear();
      }
    }
    if (has_device_token()) {
      if (device_token_ != &::google::protobuf::internal::kEmptyString) {
        device_token_->clear();
      }
    }
    if (has_device_type()) {
      if (device_type_ != &::google::protobuf::internal::kEmptyString) {
        device_type_->clear();
      }
    }
    if (has_platform_type()) {
      if (platform_type_ != &::google::protobuf::internal::kEmptyString) {
        platform_type_->clear();
      }
    }
    if (has_role_type()) {
      if (role_type_ != &::google::protobuf::internal::kEmptyString) {
        role_type_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_role_info()) {
      if (role_info_ != nullptr) role_info_->::universal_data::Clear();
    }
    ret_unitindex_ = GOOGLE_LONGLONG(0);
    ret_intaddr_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Ask_RoleCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes nick_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nick_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // required bytes account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_device_key;
        break;
      }

      // required bytes device_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_device_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_device_token;
        break;
      }

      // required bytes device_token = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_device_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_device_type;
        break;
      }

      // required bytes device_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_device_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_platform_type;
        break;
      }

      // required bytes platform_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platform_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_platform_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_role_type;
        break;
      }

      // required bytes role_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_role_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_password;
        break;
      }

      // optional bytes password = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_password()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_role_info;
        break;
      }

      // optional .universal_data role_info = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_ret_unitindex;
        break;
      }

      // optional int64 ret_unitindex = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret_unitindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ret_unitindex_)));
          set_has_ret_unitindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_ret_intaddr;
        break;
      }

      // optional int64 ret_intaddr = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret_intaddr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ret_intaddr_)));
          set_has_ret_intaddr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Ask_RoleCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes nick_name = 1;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->nick_name(), output);
  }

  // required bytes account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->account(), output);
  }

  // required bytes device_key = 3;
  if (has_device_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->device_key(), output);
  }

  // required bytes device_token = 4;
  if (has_device_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->device_token(), output);
  }

  // required bytes device_type = 5;
  if (has_device_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->device_type(), output);
  }

  // required bytes platform_type = 6;
  if (has_platform_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->platform_type(), output);
  }

  // required bytes role_type = 7;
  if (has_role_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->role_type(), output);
  }

  // optional bytes password = 8;
  if (has_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->password(), output);
  }

  // optional .universal_data role_info = 9;
  if (has_role_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->role_info(), output);
  }

  // optional int64 ret_unitindex = 10;
  if (has_ret_unitindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->ret_unitindex(), output);
  }

  // optional int64 ret_intaddr = 11;
  if (has_ret_intaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->ret_intaddr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Ask_RoleCreate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes nick_name = 1;
  if (has_nick_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->nick_name(), target);
  }

  // required bytes account = 2;
  if (has_account()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->account(), target);
  }

  // required bytes device_key = 3;
  if (has_device_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->device_key(), target);
  }

  // required bytes device_token = 4;
  if (has_device_token()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->device_token(), target);
  }

  // required bytes device_type = 5;
  if (has_device_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->device_type(), target);
  }

  // required bytes platform_type = 6;
  if (has_platform_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->platform_type(), target);
  }

  // required bytes role_type = 7;
  if (has_role_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->role_type(), target);
  }

  // optional bytes password = 8;
  if (has_password()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->password(), target);
  }

  // optional .universal_data role_info = 9;
  if (has_role_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->role_info(), target);
  }

  // optional int64 ret_unitindex = 10;
  if (has_ret_unitindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->ret_unitindex(), target);
  }

  // optional int64 ret_intaddr = 11;
  if (has_ret_intaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->ret_intaddr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Ask_RoleCreate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes nick_name = 1;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nick_name());
    }

    // required bytes account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

    // required bytes device_key = 3;
    if (has_device_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->device_key());
    }

    // required bytes device_token = 4;
    if (has_device_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->device_token());
    }

    // required bytes device_type = 5;
    if (has_device_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->device_type());
    }

    // required bytes platform_type = 6;
    if (has_platform_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->platform_type());
    }

    // required bytes role_type = 7;
    if (has_role_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->role_type());
    }

    // optional bytes password = 8;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->password());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .universal_data role_info = 9;
    if (has_role_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_info());
    }

    // optional int64 ret_unitindex = 10;
    if (has_ret_unitindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ret_unitindex());
    }

    // optional int64 ret_intaddr = 11;
    if (has_ret_intaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ret_intaddr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Ask_RoleCreate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Ask_RoleCreate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Ask_RoleCreate*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Ask_RoleCreate::MergeFrom(const C2S_Ask_RoleCreate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_device_key()) {
      set_device_key(from.device_key());
    }
    if (from.has_device_token()) {
      set_device_token(from.device_token());
    }
    if (from.has_device_type()) {
      set_device_type(from.device_type());
    }
    if (from.has_platform_type()) {
      set_platform_type(from.platform_type());
    }
    if (from.has_role_type()) {
      set_role_type(from.role_type());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_role_info()) {
      mutable_role_info()->::universal_data::MergeFrom(from.role_info());
    }
    if (from.has_ret_unitindex()) {
      set_ret_unitindex(from.ret_unitindex());
    }
    if (from.has_ret_intaddr()) {
      set_ret_intaddr(from.ret_intaddr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Ask_RoleCreate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Ask_RoleCreate::CopyFrom(const C2S_Ask_RoleCreate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Ask_RoleCreate::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void C2S_Ask_RoleCreate::Swap(C2S_Ask_RoleCreate* other) {
  if (other != this) {
    std::swap(nick_name_, other->nick_name_);
    std::swap(account_, other->account_);
    std::swap(device_key_, other->device_key_);
    std::swap(device_token_, other->device_token_);
    std::swap(device_type_, other->device_type_);
    std::swap(platform_type_, other->platform_type_);
    std::swap(role_type_, other->role_type_);
    std::swap(password_, other->password_);
    std::swap(role_info_, other->role_info_);
    std::swap(ret_unitindex_, other->ret_unitindex_);
    std::swap(ret_intaddr_, other->ret_intaddr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Ask_RoleCreate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Ask_RoleCreate_descriptor_;
  metadata.reflection = C2S_Ask_RoleCreate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Ret_RoleCreate::kRetCodeFieldNumber;
const int S2C_Ret_RoleCreate::kNickNameFieldNumber;
const int S2C_Ret_RoleCreate::kAccountFieldNumber;
#endif  // !_MSC_VER

S2C_Ret_RoleCreate::S2C_Ret_RoleCreate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Ret_RoleCreate::InitAsDefaultInstance() {
}

S2C_Ret_RoleCreate::S2C_Ret_RoleCreate(const S2C_Ret_RoleCreate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Ret_RoleCreate::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Ret_RoleCreate::~S2C_Ret_RoleCreate() {
  SharedDtor();
}

void S2C_Ret_RoleCreate::SharedDtor() {
  if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
    delete ret_code_;
  }
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void S2C_Ret_RoleCreate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Ret_RoleCreate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Ret_RoleCreate_descriptor_;
}

const S2C_Ret_RoleCreate& S2C_Ret_RoleCreate::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Ret_RoleCreate* S2C_Ret_RoleCreate::default_instance_ = nullptr;

S2C_Ret_RoleCreate* S2C_Ret_RoleCreate::New() const {
  return new S2C_Ret_RoleCreate;
}

void S2C_Ret_RoleCreate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret_code()) {
      if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
        ret_code_->clear();
      }
    }
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
        nick_name_->clear();
      }
    }
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Ret_RoleCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ret_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nick_name;
        break;
      }

      // required bytes nick_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nick_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_account;
        break;
      }

      // required bytes account = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Ret_RoleCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->ret_code(), output);
  }

  // required bytes nick_name = 2;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->nick_name(), output);
  }

  // required bytes account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->account(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Ret_RoleCreate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes ret_code = 1;
  if (has_ret_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ret_code(), target);
  }

  // required bytes nick_name = 2;
  if (has_nick_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->nick_name(), target);
  }

  // required bytes account = 3;
  if (has_account()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->account(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Ret_RoleCreate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ret_code());
    }

    // required bytes nick_name = 2;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nick_name());
    }

    // required bytes account = 3;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Ret_RoleCreate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Ret_RoleCreate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Ret_RoleCreate*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Ret_RoleCreate::MergeFrom(const S2C_Ret_RoleCreate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Ret_RoleCreate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Ret_RoleCreate::CopyFrom(const S2C_Ret_RoleCreate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Ret_RoleCreate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2C_Ret_RoleCreate::Swap(S2C_Ret_RoleCreate* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(account_, other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Ret_RoleCreate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Ret_RoleCreate_descriptor_;
  metadata.reflection = S2C_Ret_RoleCreate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Ask_RoleInfo::kAccountFieldNumber;
const int C2S_Ask_RoleInfo::kRoleIndexFieldNumber;
const int C2S_Ask_RoleInfo::kRetUnitindexFieldNumber;
const int C2S_Ask_RoleInfo::kRetIntaddrFieldNumber;
const int C2S_Ask_RoleInfo::kForceApplyRoleInfoFieldNumber;
#endif  // !_MSC_VER

C2S_Ask_RoleInfo::C2S_Ask_RoleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Ask_RoleInfo::InitAsDefaultInstance() {
}

C2S_Ask_RoleInfo::C2S_Ask_RoleInfo(const C2S_Ask_RoleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Ask_RoleInfo::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_index_ = GOOGLE_LONGLONG(0);
  ret_unitindex_ = GOOGLE_LONGLONG(0);
  ret_intaddr_ = GOOGLE_LONGLONG(0);
  force_apply_role_info_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Ask_RoleInfo::~C2S_Ask_RoleInfo() {
  SharedDtor();
}

void C2S_Ask_RoleInfo::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void C2S_Ask_RoleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Ask_RoleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Ask_RoleInfo_descriptor_;
}

const C2S_Ask_RoleInfo& C2S_Ask_RoleInfo::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_Ask_RoleInfo* C2S_Ask_RoleInfo::default_instance_ = nullptr;

C2S_Ask_RoleInfo* C2S_Ask_RoleInfo::New() const {
  return new C2S_Ask_RoleInfo;
}

void C2S_Ask_RoleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    role_index_ = GOOGLE_LONGLONG(0);
    ret_unitindex_ = GOOGLE_LONGLONG(0);
    ret_intaddr_ = GOOGLE_LONGLONG(0);
    force_apply_role_info_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Ask_RoleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_index;
        break;
      }

      // required int64 role_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret_unitindex;
        break;
      }

      // optional int64 ret_unitindex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret_unitindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ret_unitindex_)));
          set_has_ret_unitindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ret_intaddr;
        break;
      }

      // optional int64 ret_intaddr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret_intaddr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ret_intaddr_)));
          set_has_ret_intaddr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_force_apply_role_info;
        break;
      }

      // optional bool force_apply_role_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_force_apply_role_info:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_apply_role_info_)));
          set_has_force_apply_role_info();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Ask_RoleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->account(), output);
  }

  // required int64 role_index = 2;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->role_index(), output);
  }

  // optional int64 ret_unitindex = 3;
  if (has_ret_unitindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->ret_unitindex(), output);
  }

  // optional int64 ret_intaddr = 4;
  if (has_ret_intaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->ret_intaddr(), output);
  }

  // optional bool force_apply_role_info = 5;
  if (has_force_apply_role_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->force_apply_role_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Ask_RoleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes account = 1;
  if (has_account()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->account(), target);
  }

  // required int64 role_index = 2;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->role_index(), target);
  }

  // optional int64 ret_unitindex = 3;
  if (has_ret_unitindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->ret_unitindex(), target);
  }

  // optional int64 ret_intaddr = 4;
  if (has_ret_intaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->ret_intaddr(), target);
  }

  // optional bool force_apply_role_info = 5;
  if (has_force_apply_role_info()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->force_apply_role_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Ask_RoleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

    // required int64 role_index = 2;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // optional int64 ret_unitindex = 3;
    if (has_ret_unitindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ret_unitindex());
    }

    // optional int64 ret_intaddr = 4;
    if (has_ret_intaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ret_intaddr());
    }

    // optional bool force_apply_role_info = 5;
    if (has_force_apply_role_info()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Ask_RoleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Ask_RoleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Ask_RoleInfo*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Ask_RoleInfo::MergeFrom(const C2S_Ask_RoleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_ret_unitindex()) {
      set_ret_unitindex(from.ret_unitindex());
    }
    if (from.has_ret_intaddr()) {
      set_ret_intaddr(from.ret_intaddr());
    }
    if (from.has_force_apply_role_info()) {
      set_force_apply_role_info(from.force_apply_role_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Ask_RoleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Ask_RoleInfo::CopyFrom(const C2S_Ask_RoleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Ask_RoleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C2S_Ask_RoleInfo::Swap(C2S_Ask_RoleInfo* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(role_index_, other->role_index_);
    std::swap(ret_unitindex_, other->ret_unitindex_);
    std::swap(ret_intaddr_, other->ret_intaddr_);
    std::swap(force_apply_role_info_, other->force_apply_role_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Ask_RoleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Ask_RoleInfo_descriptor_;
  metadata.reflection = C2S_Ask_RoleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Ret_RoleInfo::kAccountFieldNumber;
const int S2C_Ret_RoleInfo::kRoleIndexFieldNumber;
const int S2C_Ret_RoleInfo::kRoleInfoFieldNumber;
const int S2C_Ret_RoleInfo::kLoginIntaddrFieldNumber;
const int S2C_Ret_RoleInfo::kSceneIntaddrFieldNumber;
const int S2C_Ret_RoleInfo::kSceneInstanceIdFieldNumber;
#endif  // !_MSC_VER

S2C_Ret_RoleInfo::S2C_Ret_RoleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Ret_RoleInfo::InitAsDefaultInstance() {
  role_info_ = const_cast< ::universal_data*>(&::universal_data::default_instance());
}

S2C_Ret_RoleInfo::S2C_Ret_RoleInfo(const S2C_Ret_RoleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Ret_RoleInfo::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_index_ = GOOGLE_LONGLONG(0);
  role_info_ = nullptr;
  login_intaddr_ = GOOGLE_LONGLONG(0);
  scene_intaddr_ = GOOGLE_LONGLONG(0);
  scene_instance_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Ret_RoleInfo::~S2C_Ret_RoleInfo() {
  SharedDtor();
}

void S2C_Ret_RoleInfo::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
    delete role_info_;
  }
}

void S2C_Ret_RoleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Ret_RoleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Ret_RoleInfo_descriptor_;
}

const S2C_Ret_RoleInfo& S2C_Ret_RoleInfo::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Ret_RoleInfo* S2C_Ret_RoleInfo::default_instance_ = nullptr;

S2C_Ret_RoleInfo* S2C_Ret_RoleInfo::New() const {
  return new S2C_Ret_RoleInfo;
}

void S2C_Ret_RoleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    role_index_ = GOOGLE_LONGLONG(0);
    if (has_role_info()) {
      if (role_info_ != nullptr) role_info_->::universal_data::Clear();
    }
    login_intaddr_ = GOOGLE_LONGLONG(0);
    scene_intaddr_ = GOOGLE_LONGLONG(0);
    scene_instance_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Ret_RoleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_index;
        break;
      }

      // required int64 role_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role_info;
        break;
      }

      // optional .universal_data role_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_login_intaddr;
        break;
      }

      // optional int64 login_intaddr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_intaddr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &login_intaddr_)));
          set_has_login_intaddr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_scene_intaddr;
        break;
      }

      // optional int64 scene_intaddr = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_intaddr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &scene_intaddr_)));
          set_has_scene_intaddr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_scene_instance_id;
        break;
      }

      // optional int64 scene_instance_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &scene_instance_id_)));
          set_has_scene_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Ret_RoleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->account(), output);
  }

  // required int64 role_index = 2;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->role_index(), output);
  }

  // optional .universal_data role_info = 3;
  if (has_role_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->role_info(), output);
  }

  // optional int64 login_intaddr = 4;
  if (has_login_intaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->login_intaddr(), output);
  }

  // optional int64 scene_intaddr = 5;
  if (has_scene_intaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->scene_intaddr(), output);
  }

  // optional int64 scene_instance_id = 6;
  if (has_scene_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->scene_instance_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Ret_RoleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes account = 1;
  if (has_account()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->account(), target);
  }

  // required int64 role_index = 2;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->role_index(), target);
  }

  // optional .universal_data role_info = 3;
  if (has_role_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->role_info(), target);
  }

  // optional int64 login_intaddr = 4;
  if (has_login_intaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->login_intaddr(), target);
  }

  // optional int64 scene_intaddr = 5;
  if (has_scene_intaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->scene_intaddr(), target);
  }

  // optional int64 scene_instance_id = 6;
  if (has_scene_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->scene_instance_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Ret_RoleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

    // required int64 role_index = 2;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // optional .universal_data role_info = 3;
    if (has_role_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_info());
    }

    // optional int64 login_intaddr = 4;
    if (has_login_intaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->login_intaddr());
    }

    // optional int64 scene_intaddr = 5;
    if (has_scene_intaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->scene_intaddr());
    }

    // optional int64 scene_instance_id = 6;
    if (has_scene_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->scene_instance_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Ret_RoleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Ret_RoleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Ret_RoleInfo*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Ret_RoleInfo::MergeFrom(const S2C_Ret_RoleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_role_info()) {
      mutable_role_info()->::universal_data::MergeFrom(from.role_info());
    }
    if (from.has_login_intaddr()) {
      set_login_intaddr(from.login_intaddr());
    }
    if (from.has_scene_intaddr()) {
      set_scene_intaddr(from.scene_intaddr());
    }
    if (from.has_scene_instance_id()) {
      set_scene_instance_id(from.scene_instance_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Ret_RoleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Ret_RoleInfo::CopyFrom(const S2C_Ret_RoleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Ret_RoleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2C_Ret_RoleInfo::Swap(S2C_Ret_RoleInfo* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(role_index_, other->role_index_);
    std::swap(role_info_, other->role_info_);
    std::swap(login_intaddr_, other->login_intaddr_);
    std::swap(scene_intaddr_, other->scene_intaddr_);
    std::swap(scene_instance_id_, other->scene_instance_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Ret_RoleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Ret_RoleInfo_descriptor_;
  metadata.reflection = S2C_Ret_RoleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Sync_RoleConfig::kRoleIndexFieldNumber;
const int C2S_Sync_RoleConfig::kRoleConfigFieldNumber;
#endif  // !_MSC_VER

C2S_Sync_RoleConfig::C2S_Sync_RoleConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Sync_RoleConfig::InitAsDefaultInstance() {
  role_config_ = const_cast< ::universal_data*>(&::universal_data::default_instance());
}

C2S_Sync_RoleConfig::C2S_Sync_RoleConfig(const C2S_Sync_RoleConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Sync_RoleConfig::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  role_config_ = nullptr;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Sync_RoleConfig::~C2S_Sync_RoleConfig() {
  SharedDtor();
}

void C2S_Sync_RoleConfig::SharedDtor() {
  if (this != default_instance_) {
    delete role_config_;
  }
}

void C2S_Sync_RoleConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Sync_RoleConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Sync_RoleConfig_descriptor_;
}

const C2S_Sync_RoleConfig& C2S_Sync_RoleConfig::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_Sync_RoleConfig* C2S_Sync_RoleConfig::default_instance_ = nullptr;

C2S_Sync_RoleConfig* C2S_Sync_RoleConfig::New() const {
  return new C2S_Sync_RoleConfig;
}

void C2S_Sync_RoleConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    if (has_role_config()) {
      if (role_config_ != nullptr) role_config_->::universal_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Sync_RoleConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_config;
        break;
      }

      // required .universal_data role_config = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Sync_RoleConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required .universal_data role_config = 2;
  if (has_role_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->role_config(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Sync_RoleConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required .universal_data role_config = 2;
  if (has_role_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->role_config(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Sync_RoleConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required .universal_data role_config = 2;
    if (has_role_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_config());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Sync_RoleConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Sync_RoleConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Sync_RoleConfig*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Sync_RoleConfig::MergeFrom(const C2S_Sync_RoleConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_role_config()) {
      mutable_role_config()->::universal_data::MergeFrom(from.role_config());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Sync_RoleConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Sync_RoleConfig::CopyFrom(const C2S_Sync_RoleConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Sync_RoleConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C2S_Sync_RoleConfig::Swap(C2S_Sync_RoleConfig* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(role_config_, other->role_config_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Sync_RoleConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Sync_RoleConfig_descriptor_;
  metadata.reflection = C2S_Sync_RoleConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Sync_RoleConfig::kRoleIndexFieldNumber;
const int S2C_Sync_RoleConfig::kRoleConfigFieldNumber;
#endif  // !_MSC_VER

S2C_Sync_RoleConfig::S2C_Sync_RoleConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Sync_RoleConfig::InitAsDefaultInstance() {
  role_config_ = const_cast< ::universal_data*>(&::universal_data::default_instance());
}

S2C_Sync_RoleConfig::S2C_Sync_RoleConfig(const S2C_Sync_RoleConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Sync_RoleConfig::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  role_config_ = nullptr;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Sync_RoleConfig::~S2C_Sync_RoleConfig() {
  SharedDtor();
}

void S2C_Sync_RoleConfig::SharedDtor() {
  if (this != default_instance_) {
    delete role_config_;
  }
}

void S2C_Sync_RoleConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Sync_RoleConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Sync_RoleConfig_descriptor_;
}

const S2C_Sync_RoleConfig& S2C_Sync_RoleConfig::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Sync_RoleConfig* S2C_Sync_RoleConfig::default_instance_ = nullptr;

S2C_Sync_RoleConfig* S2C_Sync_RoleConfig::New() const {
  return new S2C_Sync_RoleConfig;
}

void S2C_Sync_RoleConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    if (has_role_config()) {
      if (role_config_ != nullptr) role_config_->::universal_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Sync_RoleConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_config;
        break;
      }

      // required .universal_data role_config = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Sync_RoleConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required .universal_data role_config = 2;
  if (has_role_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->role_config(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Sync_RoleConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required .universal_data role_config = 2;
  if (has_role_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->role_config(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Sync_RoleConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required .universal_data role_config = 2;
    if (has_role_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_config());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Sync_RoleConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Sync_RoleConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Sync_RoleConfig*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Sync_RoleConfig::MergeFrom(const S2C_Sync_RoleConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_role_config()) {
      mutable_role_config()->::universal_data::MergeFrom(from.role_config());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Sync_RoleConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Sync_RoleConfig::CopyFrom(const S2C_Sync_RoleConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Sync_RoleConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2C_Sync_RoleConfig::Swap(S2C_Sync_RoleConfig* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(role_config_, other->role_config_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Sync_RoleConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Sync_RoleConfig_descriptor_;
  metadata.reflection = S2C_Sync_RoleConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Ask_Ready_EnterScene::kRoleIndexFieldNumber;
const int C2S_Ask_Ready_EnterScene::kLoginIntaddrFieldNumber;
#endif  // !_MSC_VER

C2S_Ask_Ready_EnterScene::C2S_Ask_Ready_EnterScene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Ask_Ready_EnterScene::InitAsDefaultInstance() {
}

C2S_Ask_Ready_EnterScene::C2S_Ask_Ready_EnterScene(const C2S_Ask_Ready_EnterScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Ask_Ready_EnterScene::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  login_intaddr_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Ask_Ready_EnterScene::~C2S_Ask_Ready_EnterScene() {
  SharedDtor();
}

void C2S_Ask_Ready_EnterScene::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_Ask_Ready_EnterScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Ask_Ready_EnterScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Ask_Ready_EnterScene_descriptor_;
}

const C2S_Ask_Ready_EnterScene& C2S_Ask_Ready_EnterScene::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_Ask_Ready_EnterScene* C2S_Ask_Ready_EnterScene::default_instance_ = nullptr;

C2S_Ask_Ready_EnterScene* C2S_Ask_Ready_EnterScene::New() const {
  return new C2S_Ask_Ready_EnterScene;
}

void C2S_Ask_Ready_EnterScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    login_intaddr_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Ask_Ready_EnterScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_login_intaddr;
        break;
      }

      // optional int64 login_intaddr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_intaddr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &login_intaddr_)));
          set_has_login_intaddr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Ask_Ready_EnterScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // optional int64 login_intaddr = 2;
  if (has_login_intaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->login_intaddr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Ask_Ready_EnterScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // optional int64 login_intaddr = 2;
  if (has_login_intaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->login_intaddr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Ask_Ready_EnterScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // optional int64 login_intaddr = 2;
    if (has_login_intaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->login_intaddr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Ask_Ready_EnterScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Ask_Ready_EnterScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Ask_Ready_EnterScene*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Ask_Ready_EnterScene::MergeFrom(const C2S_Ask_Ready_EnterScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_login_intaddr()) {
      set_login_intaddr(from.login_intaddr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Ask_Ready_EnterScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Ask_Ready_EnterScene::CopyFrom(const C2S_Ask_Ready_EnterScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Ask_Ready_EnterScene::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2S_Ask_Ready_EnterScene::Swap(C2S_Ask_Ready_EnterScene* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(login_intaddr_, other->login_intaddr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Ask_Ready_EnterScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Ask_Ready_EnterScene_descriptor_;
  metadata.reflection = C2S_Ask_Ready_EnterScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Ret_Ready_EnterScene::kRetCodeFieldNumber;
const int S2C_Ret_Ready_EnterScene::kRoleIndexFieldNumber;
const int S2C_Ret_Ready_EnterScene::kSceneIdFieldNumber;
const int S2C_Ret_Ready_EnterScene::kSceneIntaddrFieldNumber;
const int S2C_Ret_Ready_EnterScene::kSceneInstanceIdFieldNumber;
const int S2C_Ret_Ready_EnterScene::kSceneTypeFieldNumber;
const int S2C_Ret_Ready_EnterScene::kIsRefreshFieldNumber;
#endif  // !_MSC_VER

S2C_Ret_Ready_EnterScene::S2C_Ret_Ready_EnterScene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Ret_Ready_EnterScene::InitAsDefaultInstance() {
}

S2C_Ret_Ready_EnterScene::S2C_Ret_Ready_EnterScene(const S2C_Ret_Ready_EnterScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Ret_Ready_EnterScene::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_index_ = GOOGLE_LONGLONG(0);
  scene_id_ = 0;
  scene_intaddr_ = GOOGLE_LONGLONG(0);
  scene_instance_id_ = GOOGLE_LONGLONG(0);
  scene_type_ = 0;
  is_refresh_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Ret_Ready_EnterScene::~S2C_Ret_Ready_EnterScene() {
  SharedDtor();
}

void S2C_Ret_Ready_EnterScene::SharedDtor() {
  if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
    delete ret_code_;
  }
  if (this != default_instance_) {
  }
}

void S2C_Ret_Ready_EnterScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Ret_Ready_EnterScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Ret_Ready_EnterScene_descriptor_;
}

const S2C_Ret_Ready_EnterScene& S2C_Ret_Ready_EnterScene::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Ret_Ready_EnterScene* S2C_Ret_Ready_EnterScene::default_instance_ = nullptr;

S2C_Ret_Ready_EnterScene* S2C_Ret_Ready_EnterScene::New() const {
  return new S2C_Ret_Ready_EnterScene;
}

void S2C_Ret_Ready_EnterScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret_code()) {
      if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
        ret_code_->clear();
      }
    }
    role_index_ = GOOGLE_LONGLONG(0);
    scene_id_ = 0;
    scene_intaddr_ = GOOGLE_LONGLONG(0);
    scene_instance_id_ = GOOGLE_LONGLONG(0);
    scene_type_ = 0;
    is_refresh_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Ret_Ready_EnterScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ret_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_index;
        break;
      }

      // required int64 role_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_scene_id;
        break;
      }

      // required sint32 scene_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_scene_intaddr;
        break;
      }

      // required int64 scene_intaddr = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_intaddr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &scene_intaddr_)));
          set_has_scene_intaddr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_scene_instance_id;
        break;
      }

      // required int64 scene_instance_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &scene_instance_id_)));
          set_has_scene_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_scene_type;
        break;
      }

      // required .E_SCENE_TYPE scene_type = 8 [default = EST_INVALID];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::E_SCENE_TYPE_IsValid(value)) {
            set_scene_type(static_cast< ::E_SCENE_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_is_refresh;
        break;
      }

      // required bool is_refresh = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_refresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_refresh_)));
          set_has_is_refresh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Ret_Ready_EnterScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->ret_code(), output);
  }

  // required int64 role_index = 2;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->role_index(), output);
  }

  // required sint32 scene_id = 5;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->scene_id(), output);
  }

  // required int64 scene_intaddr = 6;
  if (has_scene_intaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->scene_intaddr(), output);
  }

  // required int64 scene_instance_id = 7;
  if (has_scene_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->scene_instance_id(), output);
  }

  // required .E_SCENE_TYPE scene_type = 8 [default = EST_INVALID];
  if (has_scene_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->scene_type(), output);
  }

  // required bool is_refresh = 9;
  if (has_is_refresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_refresh(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Ret_Ready_EnterScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes ret_code = 1;
  if (has_ret_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ret_code(), target);
  }

  // required int64 role_index = 2;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->role_index(), target);
  }

  // required sint32 scene_id = 5;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->scene_id(), target);
  }

  // required int64 scene_intaddr = 6;
  if (has_scene_intaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->scene_intaddr(), target);
  }

  // required int64 scene_instance_id = 7;
  if (has_scene_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->scene_instance_id(), target);
  }

  // required .E_SCENE_TYPE scene_type = 8 [default = EST_INVALID];
  if (has_scene_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->scene_type(), target);
  }

  // required bool is_refresh = 9;
  if (has_is_refresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_refresh(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Ret_Ready_EnterScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ret_code());
    }

    // required int64 role_index = 2;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required sint32 scene_id = 5;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->scene_id());
    }

    // required int64 scene_intaddr = 6;
    if (has_scene_intaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->scene_intaddr());
    }

    // required int64 scene_instance_id = 7;
    if (has_scene_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->scene_instance_id());
    }

    // required .E_SCENE_TYPE scene_type = 8 [default = EST_INVALID];
    if (has_scene_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->scene_type());
    }

    // required bool is_refresh = 9;
    if (has_is_refresh()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Ret_Ready_EnterScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Ret_Ready_EnterScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Ret_Ready_EnterScene*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Ret_Ready_EnterScene::MergeFrom(const S2C_Ret_Ready_EnterScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_scene_intaddr()) {
      set_scene_intaddr(from.scene_intaddr());
    }
    if (from.has_scene_instance_id()) {
      set_scene_instance_id(from.scene_instance_id());
    }
    if (from.has_scene_type()) {
      set_scene_type(from.scene_type());
    }
    if (from.has_is_refresh()) {
      set_is_refresh(from.is_refresh());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Ret_Ready_EnterScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Ret_Ready_EnterScene::CopyFrom(const S2C_Ret_Ready_EnterScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Ret_Ready_EnterScene::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void S2C_Ret_Ready_EnterScene::Swap(S2C_Ret_Ready_EnterScene* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(role_index_, other->role_index_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(scene_intaddr_, other->scene_intaddr_);
    std::swap(scene_instance_id_, other->scene_instance_id_);
    std::swap(scene_type_, other->scene_type_);
    std::swap(is_refresh_, other->is_refresh_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Ret_Ready_EnterScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Ret_Ready_EnterScene_descriptor_;
  metadata.reflection = S2C_Ret_Ready_EnterScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Ask_EnterScene::kRoleIndexFieldNumber;
const int C2S_Ask_EnterScene::kSceneInstanceIdFieldNumber;
#endif  // !_MSC_VER

C2S_Ask_EnterScene::C2S_Ask_EnterScene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Ask_EnterScene::InitAsDefaultInstance() {
}

C2S_Ask_EnterScene::C2S_Ask_EnterScene(const C2S_Ask_EnterScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Ask_EnterScene::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  scene_instance_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Ask_EnterScene::~C2S_Ask_EnterScene() {
  SharedDtor();
}

void C2S_Ask_EnterScene::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_Ask_EnterScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Ask_EnterScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Ask_EnterScene_descriptor_;
}

const C2S_Ask_EnterScene& C2S_Ask_EnterScene::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_Ask_EnterScene* C2S_Ask_EnterScene::default_instance_ = nullptr;

C2S_Ask_EnterScene* C2S_Ask_EnterScene::New() const {
  return new C2S_Ask_EnterScene;
}

void C2S_Ask_EnterScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    scene_instance_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Ask_EnterScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scene_instance_id;
        break;
      }

      // required int64 scene_instance_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &scene_instance_id_)));
          set_has_scene_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Ask_EnterScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required int64 scene_instance_id = 2;
  if (has_scene_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->scene_instance_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Ask_EnterScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required int64 scene_instance_id = 2;
  if (has_scene_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->scene_instance_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Ask_EnterScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required int64 scene_instance_id = 2;
    if (has_scene_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->scene_instance_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Ask_EnterScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Ask_EnterScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Ask_EnterScene*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Ask_EnterScene::MergeFrom(const C2S_Ask_EnterScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_scene_instance_id()) {
      set_scene_instance_id(from.scene_instance_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Ask_EnterScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Ask_EnterScene::CopyFrom(const C2S_Ask_EnterScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Ask_EnterScene::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C2S_Ask_EnterScene::Swap(C2S_Ask_EnterScene* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(scene_instance_id_, other->scene_instance_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Ask_EnterScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Ask_EnterScene_descriptor_;
  metadata.reflection = C2S_Ask_EnterScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_RefreshScene::kRoleIndexFieldNumber;
#endif  // !_MSC_VER

C2S_RefreshScene::C2S_RefreshScene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_RefreshScene::InitAsDefaultInstance() {
}

C2S_RefreshScene::C2S_RefreshScene(const C2S_RefreshScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_RefreshScene::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_RefreshScene::~C2S_RefreshScene() {
  SharedDtor();
}

void C2S_RefreshScene::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_RefreshScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_RefreshScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_RefreshScene_descriptor_;
}

const C2S_RefreshScene& C2S_RefreshScene::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_RefreshScene* C2S_RefreshScene::default_instance_ = nullptr;

C2S_RefreshScene* C2S_RefreshScene::New() const {
  return new C2S_RefreshScene;
}

void C2S_RefreshScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_RefreshScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_RefreshScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_RefreshScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_RefreshScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_RefreshScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_RefreshScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_RefreshScene*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_RefreshScene::MergeFrom(const C2S_RefreshScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_RefreshScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_RefreshScene::CopyFrom(const C2S_RefreshScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_RefreshScene::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2S_RefreshScene::Swap(C2S_RefreshScene* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_RefreshScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_RefreshScene_descriptor_;
  metadata.reflection = C2S_RefreshScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Notice_OffLine::kAccountFieldNumber;
const int S2C_Notice_OffLine::kReasonFieldNumber;
#endif  // !_MSC_VER

S2C_Notice_OffLine::S2C_Notice_OffLine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Notice_OffLine::InitAsDefaultInstance() {
}

S2C_Notice_OffLine::S2C_Notice_OffLine(const S2C_Notice_OffLine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Notice_OffLine::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Notice_OffLine::~S2C_Notice_OffLine() {
  SharedDtor();
}

void S2C_Notice_OffLine::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    delete reason_;
  }
  if (this != default_instance_) {
  }
}

void S2C_Notice_OffLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Notice_OffLine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Notice_OffLine_descriptor_;
}

const S2C_Notice_OffLine& S2C_Notice_OffLine::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Notice_OffLine* S2C_Notice_OffLine::default_instance_ = nullptr;

S2C_Notice_OffLine* S2C_Notice_OffLine::New() const {
  return new S2C_Notice_OffLine;
}

void S2C_Notice_OffLine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::kEmptyString) {
        reason_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Notice_OffLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reason;
        break;
      }

      // required bytes reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reason()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Notice_OffLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->account(), output);
  }

  // required bytes reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Notice_OffLine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes account = 1;
  if (has_account()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->account(), target);
  }

  // required bytes reason = 2;
  if (has_reason()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Notice_OffLine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

    // required bytes reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Notice_OffLine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Notice_OffLine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Notice_OffLine*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Notice_OffLine::MergeFrom(const S2C_Notice_OffLine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Notice_OffLine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Notice_OffLine::CopyFrom(const S2C_Notice_OffLine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Notice_OffLine::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2C_Notice_OffLine::Swap(S2C_Notice_OffLine* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Notice_OffLine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Notice_OffLine_descriptor_;
  metadata.reflection = S2C_Notice_OffLine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Ask_Charset::kUtf8FieldNumber;
const int C2S_Ask_Charset::kMsgVersionFieldNumber;
#endif  // !_MSC_VER

C2S_Ask_Charset::C2S_Ask_Charset()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Ask_Charset::InitAsDefaultInstance() {
}

C2S_Ask_Charset::C2S_Ask_Charset(const C2S_Ask_Charset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Ask_Charset::SharedCtor() {
  _cached_size_ = 0;
  utf_8_ = false;
  msg_version_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Ask_Charset::~C2S_Ask_Charset() {
  SharedDtor();
}

void C2S_Ask_Charset::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_Ask_Charset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Ask_Charset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Ask_Charset_descriptor_;
}

const C2S_Ask_Charset& C2S_Ask_Charset::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_Ask_Charset* C2S_Ask_Charset::default_instance_ = nullptr;

C2S_Ask_Charset* C2S_Ask_Charset::New() const {
  return new C2S_Ask_Charset;
}

void C2S_Ask_Charset::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    utf_8_ = false;
    msg_version_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Ask_Charset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool utf_8 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &utf_8_)));
          set_has_utf_8();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_msg_version;
        break;
      }

      // required sint32 msg_version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msg_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &msg_version_)));
          set_has_msg_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Ask_Charset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool utf_8 = 1;
  if (has_utf_8()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->utf_8(), output);
  }

  // required sint32 msg_version = 2;
  if (has_msg_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->msg_version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Ask_Charset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool utf_8 = 1;
  if (has_utf_8()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->utf_8(), target);
  }

  // required sint32 msg_version = 2;
  if (has_msg_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->msg_version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Ask_Charset::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool utf_8 = 1;
    if (has_utf_8()) {
      total_size += 1 + 1;
    }

    // required sint32 msg_version = 2;
    if (has_msg_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->msg_version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Ask_Charset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Ask_Charset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Ask_Charset*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Ask_Charset::MergeFrom(const C2S_Ask_Charset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_utf_8()) {
      set_utf_8(from.utf_8());
    }
    if (from.has_msg_version()) {
      set_msg_version(from.msg_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Ask_Charset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Ask_Charset::CopyFrom(const C2S_Ask_Charset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Ask_Charset::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C2S_Ask_Charset::Swap(C2S_Ask_Charset* other) {
  if (other != this) {
    std::swap(utf_8_, other->utf_8_);
    std::swap(msg_version_, other->msg_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Ask_Charset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Ask_Charset_descriptor_;
  metadata.reflection = C2S_Ask_Charset_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Heartbeat::kTimeFieldNumber;
#endif  // !_MSC_VER

C2S_Heartbeat::C2S_Heartbeat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Heartbeat::InitAsDefaultInstance() {
}

C2S_Heartbeat::C2S_Heartbeat(const C2S_Heartbeat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Heartbeat::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Heartbeat::~C2S_Heartbeat() {
  SharedDtor();
}

void C2S_Heartbeat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_Heartbeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Heartbeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Heartbeat_descriptor_;
}

const C2S_Heartbeat& C2S_Heartbeat::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_Heartbeat* C2S_Heartbeat::default_instance_ = nullptr;

C2S_Heartbeat* C2S_Heartbeat::New() const {
  return new C2S_Heartbeat;
}

void C2S_Heartbeat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Heartbeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Heartbeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Heartbeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Heartbeat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Heartbeat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Heartbeat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Heartbeat*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Heartbeat::MergeFrom(const C2S_Heartbeat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Heartbeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Heartbeat::CopyFrom(const C2S_Heartbeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Heartbeat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2S_Heartbeat::Swap(C2S_Heartbeat* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Heartbeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Heartbeat_descriptor_;
  metadata.reflection = C2S_Heartbeat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Heartbeat::kTimeFieldNumber;
#endif  // !_MSC_VER

S2C_Heartbeat::S2C_Heartbeat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Heartbeat::InitAsDefaultInstance() {
}

S2C_Heartbeat::S2C_Heartbeat(const S2C_Heartbeat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Heartbeat::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Heartbeat::~S2C_Heartbeat() {
  SharedDtor();
}

void S2C_Heartbeat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2C_Heartbeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Heartbeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Heartbeat_descriptor_;
}

const S2C_Heartbeat& S2C_Heartbeat::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Heartbeat* S2C_Heartbeat::default_instance_ = nullptr;

S2C_Heartbeat* S2C_Heartbeat::New() const {
  return new S2C_Heartbeat;
}

void S2C_Heartbeat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Heartbeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Heartbeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Heartbeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Heartbeat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Heartbeat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Heartbeat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Heartbeat*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Heartbeat::MergeFrom(const S2C_Heartbeat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Heartbeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Heartbeat::CopyFrom(const S2C_Heartbeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Heartbeat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void S2C_Heartbeat::Swap(S2C_Heartbeat* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Heartbeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Heartbeat_descriptor_;
  metadata.reflection = S2C_Heartbeat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_GameCoin::kRoleIndexFieldNumber;
#endif  // !_MSC_VER

C2S_GameCoin::C2S_GameCoin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_GameCoin::InitAsDefaultInstance() {
}

C2S_GameCoin::C2S_GameCoin(const C2S_GameCoin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_GameCoin::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_GameCoin::~C2S_GameCoin() {
  SharedDtor();
}

void C2S_GameCoin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_GameCoin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_GameCoin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_GameCoin_descriptor_;
}

const C2S_GameCoin& C2S_GameCoin::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_GameCoin* C2S_GameCoin::default_instance_ = nullptr;

C2S_GameCoin* C2S_GameCoin::New() const {
  return new C2S_GameCoin;
}

void C2S_GameCoin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_GameCoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_GameCoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_GameCoin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_GameCoin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_GameCoin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_GameCoin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_GameCoin*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_GameCoin::MergeFrom(const C2S_GameCoin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_GameCoin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_GameCoin::CopyFrom(const C2S_GameCoin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_GameCoin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2S_GameCoin::Swap(C2S_GameCoin* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_GameCoin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_GameCoin_descriptor_;
  metadata.reflection = C2S_GameCoin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Sync_Role_GameCoin::kRoleIndexFieldNumber;
const int S2C_Sync_Role_GameCoin::kAddGameCoinFieldNumber;
const int S2C_Sync_Role_GameCoin::kCurGameCoinFieldNumber;
const int S2C_Sync_Role_GameCoin::kIsShowFieldNumber;
#endif  // !_MSC_VER

S2C_Sync_Role_GameCoin::S2C_Sync_Role_GameCoin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Sync_Role_GameCoin::InitAsDefaultInstance() {
}

S2C_Sync_Role_GameCoin::S2C_Sync_Role_GameCoin(const S2C_Sync_Role_GameCoin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Sync_Role_GameCoin::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  add_game_coin_ = GOOGLE_LONGLONG(0);
  cur_game_coin_ = GOOGLE_LONGLONG(0);
  is_show_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Sync_Role_GameCoin::~S2C_Sync_Role_GameCoin() {
  SharedDtor();
}

void S2C_Sync_Role_GameCoin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2C_Sync_Role_GameCoin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Sync_Role_GameCoin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Sync_Role_GameCoin_descriptor_;
}

const S2C_Sync_Role_GameCoin& S2C_Sync_Role_GameCoin::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Sync_Role_GameCoin* S2C_Sync_Role_GameCoin::default_instance_ = nullptr;

S2C_Sync_Role_GameCoin* S2C_Sync_Role_GameCoin::New() const {
  return new S2C_Sync_Role_GameCoin;
}

void S2C_Sync_Role_GameCoin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    add_game_coin_ = GOOGLE_LONGLONG(0);
    cur_game_coin_ = GOOGLE_LONGLONG(0);
    is_show_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Sync_Role_GameCoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_add_game_coin;
        break;
      }

      // required int64 add_game_coin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_game_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &add_game_coin_)));
          set_has_add_game_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_game_coin;
        break;
      }

      // required int64 cur_game_coin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_game_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cur_game_coin_)));
          set_has_cur_game_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_show;
        break;
      }

      // required bool is_show = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_show:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_show_)));
          set_has_is_show();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Sync_Role_GameCoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required int64 add_game_coin = 2;
  if (has_add_game_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->add_game_coin(), output);
  }

  // required int64 cur_game_coin = 3;
  if (has_cur_game_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->cur_game_coin(), output);
  }

  // required bool is_show = 4;
  if (has_is_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_show(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Sync_Role_GameCoin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required int64 add_game_coin = 2;
  if (has_add_game_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->add_game_coin(), target);
  }

  // required int64 cur_game_coin = 3;
  if (has_cur_game_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->cur_game_coin(), target);
  }

  // required bool is_show = 4;
  if (has_is_show()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_show(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Sync_Role_GameCoin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required int64 add_game_coin = 2;
    if (has_add_game_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->add_game_coin());
    }

    // required int64 cur_game_coin = 3;
    if (has_cur_game_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cur_game_coin());
    }

    // required bool is_show = 4;
    if (has_is_show()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Sync_Role_GameCoin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Sync_Role_GameCoin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Sync_Role_GameCoin*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Sync_Role_GameCoin::MergeFrom(const S2C_Sync_Role_GameCoin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_add_game_coin()) {
      set_add_game_coin(from.add_game_coin());
    }
    if (from.has_cur_game_coin()) {
      set_cur_game_coin(from.cur_game_coin());
    }
    if (from.has_is_show()) {
      set_is_show(from.is_show());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Sync_Role_GameCoin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Sync_Role_GameCoin::CopyFrom(const S2C_Sync_Role_GameCoin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Sync_Role_GameCoin::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void S2C_Sync_Role_GameCoin::Swap(S2C_Sync_Role_GameCoin* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(add_game_coin_, other->add_game_coin_);
    std::swap(cur_game_coin_, other->cur_game_coin_);
    std::swap(is_show_, other->is_show_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Sync_Role_GameCoin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Sync_Role_GameCoin_descriptor_;
  metadata.reflection = S2C_Sync_Role_GameCoin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_DiamondCoin::kRoleIndexFieldNumber;
#endif  // !_MSC_VER

C2S_DiamondCoin::C2S_DiamondCoin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_DiamondCoin::InitAsDefaultInstance() {
}

C2S_DiamondCoin::C2S_DiamondCoin(const C2S_DiamondCoin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_DiamondCoin::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_DiamondCoin::~C2S_DiamondCoin() {
  SharedDtor();
}

void C2S_DiamondCoin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_DiamondCoin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_DiamondCoin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_DiamondCoin_descriptor_;
}

const C2S_DiamondCoin& C2S_DiamondCoin::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_DiamondCoin* C2S_DiamondCoin::default_instance_ = nullptr;

C2S_DiamondCoin* C2S_DiamondCoin::New() const {
  return new C2S_DiamondCoin;
}

void C2S_DiamondCoin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_DiamondCoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_DiamondCoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_DiamondCoin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_DiamondCoin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_DiamondCoin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_DiamondCoin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_DiamondCoin*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_DiamondCoin::MergeFrom(const C2S_DiamondCoin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_DiamondCoin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_DiamondCoin::CopyFrom(const C2S_DiamondCoin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_DiamondCoin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2S_DiamondCoin::Swap(C2S_DiamondCoin* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_DiamondCoin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_DiamondCoin_descriptor_;
  metadata.reflection = C2S_DiamondCoin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_DiamondCoin::kRoleIndexFieldNumber;
const int S2C_DiamondCoin::kDiamondCoinFieldNumber;
#endif  // !_MSC_VER

S2C_DiamondCoin::S2C_DiamondCoin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_DiamondCoin::InitAsDefaultInstance() {
}

S2C_DiamondCoin::S2C_DiamondCoin(const S2C_DiamondCoin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_DiamondCoin::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  diamond_coin_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_DiamondCoin::~S2C_DiamondCoin() {
  SharedDtor();
}

void S2C_DiamondCoin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2C_DiamondCoin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_DiamondCoin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_DiamondCoin_descriptor_;
}

const S2C_DiamondCoin& S2C_DiamondCoin::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_DiamondCoin* S2C_DiamondCoin::default_instance_ = nullptr;

S2C_DiamondCoin* S2C_DiamondCoin::New() const {
  return new S2C_DiamondCoin;
}

void S2C_DiamondCoin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    diamond_coin_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_DiamondCoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_diamond_coin;
        break;
      }

      // required int64 diamond_coin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &diamond_coin_)));
          set_has_diamond_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_DiamondCoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required int64 diamond_coin = 2;
  if (has_diamond_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->diamond_coin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_DiamondCoin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required int64 diamond_coin = 2;
  if (has_diamond_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->diamond_coin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_DiamondCoin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required int64 diamond_coin = 2;
    if (has_diamond_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->diamond_coin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_DiamondCoin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_DiamondCoin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_DiamondCoin*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_DiamondCoin::MergeFrom(const S2C_DiamondCoin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_diamond_coin()) {
      set_diamond_coin(from.diamond_coin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_DiamondCoin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_DiamondCoin::CopyFrom(const S2C_DiamondCoin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_DiamondCoin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2C_DiamondCoin::Swap(S2C_DiamondCoin* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(diamond_coin_, other->diamond_coin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_DiamondCoin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_DiamondCoin_descriptor_;
  metadata.reflection = S2C_DiamondCoin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Stamina::kRoleIndexFieldNumber;
#endif  // !_MSC_VER

C2S_Stamina::C2S_Stamina()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Stamina::InitAsDefaultInstance() {
}

C2S_Stamina::C2S_Stamina(const C2S_Stamina& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Stamina::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Stamina::~C2S_Stamina() {
  SharedDtor();
}

void C2S_Stamina::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_Stamina::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Stamina::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Stamina_descriptor_;
}

const C2S_Stamina& C2S_Stamina::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_Stamina* C2S_Stamina::default_instance_ = nullptr;

C2S_Stamina* C2S_Stamina::New() const {
  return new C2S_Stamina;
}

void C2S_Stamina::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Stamina::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Stamina::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Stamina::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Stamina::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Stamina::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Stamina* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Stamina*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Stamina::MergeFrom(const C2S_Stamina& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Stamina::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Stamina::CopyFrom(const C2S_Stamina& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Stamina::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2S_Stamina::Swap(C2S_Stamina* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Stamina::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Stamina_descriptor_;
  metadata.reflection = C2S_Stamina_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Stamina::kRoleIndexFieldNumber;
const int S2C_Stamina::kStaminaFieldNumber;
#endif  // !_MSC_VER

S2C_Stamina::S2C_Stamina()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Stamina::InitAsDefaultInstance() {
}

S2C_Stamina::S2C_Stamina(const S2C_Stamina& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Stamina::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  stamina_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Stamina::~S2C_Stamina() {
  SharedDtor();
}

void S2C_Stamina::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2C_Stamina::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Stamina::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Stamina_descriptor_;
}

const S2C_Stamina& S2C_Stamina::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Stamina* S2C_Stamina::default_instance_ = nullptr;

S2C_Stamina* S2C_Stamina::New() const {
  return new S2C_Stamina;
}

void S2C_Stamina::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    stamina_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Stamina::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stamina;
        break;
      }

      // required sint32 stamina = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stamina:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &stamina_)));
          set_has_stamina();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Stamina::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required sint32 stamina = 2;
  if (has_stamina()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->stamina(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Stamina::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required sint32 stamina = 2;
  if (has_stamina()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->stamina(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Stamina::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required sint32 stamina = 2;
    if (has_stamina()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->stamina());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Stamina::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Stamina* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Stamina*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Stamina::MergeFrom(const S2C_Stamina& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_stamina()) {
      set_stamina(from.stamina());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Stamina::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Stamina::CopyFrom(const S2C_Stamina& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Stamina::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2C_Stamina::Swap(S2C_Stamina* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(stamina_, other->stamina_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Stamina::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Stamina_descriptor_;
  metadata.reflection = S2C_Stamina_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Exp::kRoleIndexFieldNumber;
#endif  // !_MSC_VER

C2S_Exp::C2S_Exp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Exp::InitAsDefaultInstance() {
}

C2S_Exp::C2S_Exp(const C2S_Exp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Exp::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Exp::~C2S_Exp() {
  SharedDtor();
}

void C2S_Exp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_Exp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Exp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Exp_descriptor_;
}

const C2S_Exp& C2S_Exp::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_Exp* C2S_Exp::default_instance_ = nullptr;

C2S_Exp* C2S_Exp::New() const {
  return new C2S_Exp;
}

void C2S_Exp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Exp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Exp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Exp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Exp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Exp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Exp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Exp*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Exp::MergeFrom(const C2S_Exp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Exp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Exp::CopyFrom(const C2S_Exp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Exp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2S_Exp::Swap(C2S_Exp* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Exp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Exp_descriptor_;
  metadata.reflection = C2S_Exp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Sync_Role_Exp::kRoleIndexFieldNumber;
const int S2C_Sync_Role_Exp::kIsShowFieldNumber;
const int S2C_Sync_Role_Exp::kAddExpFieldNumber;
const int S2C_Sync_Role_Exp::kCurExpFieldNumber;
const int S2C_Sync_Role_Exp::kMaxExpFieldNumber;
#endif  // !_MSC_VER

S2C_Sync_Role_Exp::S2C_Sync_Role_Exp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Sync_Role_Exp::InitAsDefaultInstance() {
}

S2C_Sync_Role_Exp::S2C_Sync_Role_Exp(const S2C_Sync_Role_Exp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Sync_Role_Exp::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  is_show_ = false;
  add_exp_ = GOOGLE_LONGLONG(0);
  cur_exp_ = GOOGLE_LONGLONG(0);
  max_exp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Sync_Role_Exp::~S2C_Sync_Role_Exp() {
  SharedDtor();
}

void S2C_Sync_Role_Exp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2C_Sync_Role_Exp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Sync_Role_Exp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Sync_Role_Exp_descriptor_;
}

const S2C_Sync_Role_Exp& S2C_Sync_Role_Exp::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Sync_Role_Exp* S2C_Sync_Role_Exp::default_instance_ = nullptr;

S2C_Sync_Role_Exp* S2C_Sync_Role_Exp::New() const {
  return new S2C_Sync_Role_Exp;
}

void S2C_Sync_Role_Exp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    is_show_ = false;
    add_exp_ = GOOGLE_LONGLONG(0);
    cur_exp_ = GOOGLE_LONGLONG(0);
    max_exp_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Sync_Role_Exp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_show;
        break;
      }

      // required bool is_show = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_show:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_show_)));
          set_has_is_show();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_add_exp;
        break;
      }

      // required int64 add_exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &add_exp_)));
          set_has_add_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cur_exp;
        break;
      }

      // required int64 cur_exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cur_exp_)));
          set_has_cur_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_max_exp;
        break;
      }

      // required int64 max_exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_exp_)));
          set_has_max_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Sync_Role_Exp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required bool is_show = 2;
  if (has_is_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_show(), output);
  }

  // required int64 add_exp = 3;
  if (has_add_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->add_exp(), output);
  }

  // required int64 cur_exp = 4;
  if (has_cur_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->cur_exp(), output);
  }

  // required int64 max_exp = 5;
  if (has_max_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->max_exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Sync_Role_Exp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required bool is_show = 2;
  if (has_is_show()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_show(), target);
  }

  // required int64 add_exp = 3;
  if (has_add_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->add_exp(), target);
  }

  // required int64 cur_exp = 4;
  if (has_cur_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->cur_exp(), target);
  }

  // required int64 max_exp = 5;
  if (has_max_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->max_exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Sync_Role_Exp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required bool is_show = 2;
    if (has_is_show()) {
      total_size += 1 + 1;
    }

    // required int64 add_exp = 3;
    if (has_add_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->add_exp());
    }

    // required int64 cur_exp = 4;
    if (has_cur_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cur_exp());
    }

    // required int64 max_exp = 5;
    if (has_max_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Sync_Role_Exp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Sync_Role_Exp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Sync_Role_Exp*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Sync_Role_Exp::MergeFrom(const S2C_Sync_Role_Exp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_is_show()) {
      set_is_show(from.is_show());
    }
    if (from.has_add_exp()) {
      set_add_exp(from.add_exp());
    }
    if (from.has_cur_exp()) {
      set_cur_exp(from.cur_exp());
    }
    if (from.has_max_exp()) {
      set_max_exp(from.max_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Sync_Role_Exp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Sync_Role_Exp::CopyFrom(const S2C_Sync_Role_Exp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Sync_Role_Exp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void S2C_Sync_Role_Exp::Swap(S2C_Sync_Role_Exp* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(is_show_, other->is_show_);
    std::swap(add_exp_, other->add_exp_);
    std::swap(cur_exp_, other->cur_exp_);
    std::swap(max_exp_, other->max_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Sync_Role_Exp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Sync_Role_Exp_descriptor_;
  metadata.reflection = S2C_Sync_Role_Exp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Notice_Role_EnterScene::kRoleIndexFieldNumber;
const int S2C_Notice_Role_EnterScene::kPublicInfoFieldNumber;
const int S2C_Notice_Role_EnterScene::kPublicMemoryInfoFieldNumber;
const int S2C_Notice_Role_EnterScene::kAdditionalInfoFieldNumber;
const int S2C_Notice_Role_EnterScene::kSceneInstanceIdFieldNumber;
#endif  // !_MSC_VER

S2C_Notice_Role_EnterScene::S2C_Notice_Role_EnterScene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Notice_Role_EnterScene::InitAsDefaultInstance() {
  public_info_ = const_cast< ::universal_data*>(&::universal_data::default_instance());
  public_memory_info_ = const_cast< ::universal_data*>(&::universal_data::default_instance());
  additional_info_ = const_cast< ::universal_data*>(&::universal_data::default_instance());
}

S2C_Notice_Role_EnterScene::S2C_Notice_Role_EnterScene(const S2C_Notice_Role_EnterScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Notice_Role_EnterScene::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  public_info_ = nullptr;
  public_memory_info_ = nullptr;
  additional_info_ = nullptr;
  scene_instance_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Notice_Role_EnterScene::~S2C_Notice_Role_EnterScene() {
  SharedDtor();
}

void S2C_Notice_Role_EnterScene::SharedDtor() {
  if (this != default_instance_) {
    delete public_info_;
    delete public_memory_info_;
    delete additional_info_;
  }
}

void S2C_Notice_Role_EnterScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Notice_Role_EnterScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Notice_Role_EnterScene_descriptor_;
}

const S2C_Notice_Role_EnterScene& S2C_Notice_Role_EnterScene::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Notice_Role_EnterScene* S2C_Notice_Role_EnterScene::default_instance_ = nullptr;

S2C_Notice_Role_EnterScene* S2C_Notice_Role_EnterScene::New() const {
  return new S2C_Notice_Role_EnterScene;
}

void S2C_Notice_Role_EnterScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    if (has_public_info()) {
      if (public_info_ != nullptr) public_info_->::universal_data::Clear();
    }
    if (has_public_memory_info()) {
      if (public_memory_info_ != nullptr) public_memory_info_->::universal_data::Clear();
    }
    if (has_additional_info()) {
      if (additional_info_ != nullptr) additional_info_->::universal_data::Clear();
    }
    scene_instance_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Notice_Role_EnterScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_public_info;
        break;
      }

      // required .universal_data public_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_public_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_public_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_public_memory_info;
        break;
      }

      // required .universal_data public_memory_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_public_memory_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_public_memory_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_additional_info;
        break;
      }

      // optional .universal_data additional_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_additional_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_additional_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_scene_instance_id;
        break;
      }

      // required int64 scene_instance_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &scene_instance_id_)));
          set_has_scene_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Notice_Role_EnterScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required .universal_data public_info = 2;
  if (has_public_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->public_info(), output);
  }

  // required .universal_data public_memory_info = 3;
  if (has_public_memory_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->public_memory_info(), output);
  }

  // optional .universal_data additional_info = 4;
  if (has_additional_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->additional_info(), output);
  }

  // required int64 scene_instance_id = 5;
  if (has_scene_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->scene_instance_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Notice_Role_EnterScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required .universal_data public_info = 2;
  if (has_public_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->public_info(), target);
  }

  // required .universal_data public_memory_info = 3;
  if (has_public_memory_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->public_memory_info(), target);
  }

  // optional .universal_data additional_info = 4;
  if (has_additional_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->additional_info(), target);
  }

  // required int64 scene_instance_id = 5;
  if (has_scene_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->scene_instance_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Notice_Role_EnterScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required .universal_data public_info = 2;
    if (has_public_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->public_info());
    }

    // required .universal_data public_memory_info = 3;
    if (has_public_memory_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->public_memory_info());
    }

    // optional .universal_data additional_info = 4;
    if (has_additional_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->additional_info());
    }

    // required int64 scene_instance_id = 5;
    if (has_scene_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->scene_instance_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Notice_Role_EnterScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Notice_Role_EnterScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Notice_Role_EnterScene*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Notice_Role_EnterScene::MergeFrom(const S2C_Notice_Role_EnterScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_public_info()) {
      mutable_public_info()->::universal_data::MergeFrom(from.public_info());
    }
    if (from.has_public_memory_info()) {
      mutable_public_memory_info()->::universal_data::MergeFrom(from.public_memory_info());
    }
    if (from.has_additional_info()) {
      mutable_additional_info()->::universal_data::MergeFrom(from.additional_info());
    }
    if (from.has_scene_instance_id()) {
      set_scene_instance_id(from.scene_instance_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Notice_Role_EnterScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Notice_Role_EnterScene::CopyFrom(const S2C_Notice_Role_EnterScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Notice_Role_EnterScene::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;

  return true;
}

void S2C_Notice_Role_EnterScene::Swap(S2C_Notice_Role_EnterScene* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(public_info_, other->public_info_);
    std::swap(public_memory_info_, other->public_memory_info_);
    std::swap(additional_info_, other->additional_info_);
    std::swap(scene_instance_id_, other->scene_instance_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Notice_Role_EnterScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Notice_Role_EnterScene_descriptor_;
  metadata.reflection = S2C_Notice_Role_EnterScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Notice_Role_LeaveScene::kRoleIndexFieldNumber;
const int S2C_Notice_Role_LeaveScene::kSceneInstanceIdFieldNumber;
#endif  // !_MSC_VER

S2C_Notice_Role_LeaveScene::S2C_Notice_Role_LeaveScene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Notice_Role_LeaveScene::InitAsDefaultInstance() {
}

S2C_Notice_Role_LeaveScene::S2C_Notice_Role_LeaveScene(const S2C_Notice_Role_LeaveScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Notice_Role_LeaveScene::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  scene_instance_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Notice_Role_LeaveScene::~S2C_Notice_Role_LeaveScene() {
  SharedDtor();
}

void S2C_Notice_Role_LeaveScene::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2C_Notice_Role_LeaveScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Notice_Role_LeaveScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Notice_Role_LeaveScene_descriptor_;
}

const S2C_Notice_Role_LeaveScene& S2C_Notice_Role_LeaveScene::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Notice_Role_LeaveScene* S2C_Notice_Role_LeaveScene::default_instance_ = nullptr;

S2C_Notice_Role_LeaveScene* S2C_Notice_Role_LeaveScene::New() const {
  return new S2C_Notice_Role_LeaveScene;
}

void S2C_Notice_Role_LeaveScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    scene_instance_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Notice_Role_LeaveScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scene_instance_id;
        break;
      }

      // required int64 scene_instance_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &scene_instance_id_)));
          set_has_scene_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Notice_Role_LeaveScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required int64 scene_instance_id = 2;
  if (has_scene_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->scene_instance_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Notice_Role_LeaveScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required int64 scene_instance_id = 2;
  if (has_scene_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->scene_instance_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Notice_Role_LeaveScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required int64 scene_instance_id = 2;
    if (has_scene_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->scene_instance_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Notice_Role_LeaveScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Notice_Role_LeaveScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Notice_Role_LeaveScene*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Notice_Role_LeaveScene::MergeFrom(const S2C_Notice_Role_LeaveScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_scene_instance_id()) {
      set_scene_instance_id(from.scene_instance_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Notice_Role_LeaveScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Notice_Role_LeaveScene::CopyFrom(const S2C_Notice_Role_LeaveScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Notice_Role_LeaveScene::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2C_Notice_Role_LeaveScene::Swap(S2C_Notice_Role_LeaveScene* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(scene_instance_id_, other->scene_instance_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Notice_Role_LeaveScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Notice_Role_LeaveScene_descriptor_;
  metadata.reflection = S2C_Notice_Role_LeaveScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Sync_Role_PublicInfo::kRoleIndexFieldNumber;
const int S2C_Sync_Role_PublicInfo::kPublicInfoFieldNumber;
const int S2C_Sync_Role_PublicInfo::kPublicMemoryInfoFieldNumber;
#endif  // !_MSC_VER

S2C_Sync_Role_PublicInfo::S2C_Sync_Role_PublicInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Sync_Role_PublicInfo::InitAsDefaultInstance() {
  public_info_ = const_cast< ::universal_data*>(&::universal_data::default_instance());
  public_memory_info_ = const_cast< ::universal_data*>(&::universal_data::default_instance());
}

S2C_Sync_Role_PublicInfo::S2C_Sync_Role_PublicInfo(const S2C_Sync_Role_PublicInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Sync_Role_PublicInfo::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  public_info_ = nullptr;
  public_memory_info_ = nullptr;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Sync_Role_PublicInfo::~S2C_Sync_Role_PublicInfo() {
  SharedDtor();
}

void S2C_Sync_Role_PublicInfo::SharedDtor() {
  if (this != default_instance_) {
    delete public_info_;
    delete public_memory_info_;
  }
}

void S2C_Sync_Role_PublicInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Sync_Role_PublicInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Sync_Role_PublicInfo_descriptor_;
}

const S2C_Sync_Role_PublicInfo& S2C_Sync_Role_PublicInfo::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Sync_Role_PublicInfo* S2C_Sync_Role_PublicInfo::default_instance_ = nullptr;

S2C_Sync_Role_PublicInfo* S2C_Sync_Role_PublicInfo::New() const {
  return new S2C_Sync_Role_PublicInfo;
}

void S2C_Sync_Role_PublicInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    if (has_public_info()) {
      if (public_info_ != nullptr) public_info_->::universal_data::Clear();
    }
    if (has_public_memory_info()) {
      if (public_memory_info_ != nullptr) public_memory_info_->::universal_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Sync_Role_PublicInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_public_info;
        break;
      }

      // required .universal_data public_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_public_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_public_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_public_memory_info;
        break;
      }

      // required .universal_data public_memory_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_public_memory_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_public_memory_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Sync_Role_PublicInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required .universal_data public_info = 2;
  if (has_public_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->public_info(), output);
  }

  // required .universal_data public_memory_info = 3;
  if (has_public_memory_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->public_memory_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Sync_Role_PublicInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required .universal_data public_info = 2;
  if (has_public_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->public_info(), target);
  }

  // required .universal_data public_memory_info = 3;
  if (has_public_memory_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->public_memory_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Sync_Role_PublicInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required .universal_data public_info = 2;
    if (has_public_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->public_info());
    }

    // required .universal_data public_memory_info = 3;
    if (has_public_memory_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->public_memory_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Sync_Role_PublicInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Sync_Role_PublicInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Sync_Role_PublicInfo*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Sync_Role_PublicInfo::MergeFrom(const S2C_Sync_Role_PublicInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_public_info()) {
      mutable_public_info()->::universal_data::MergeFrom(from.public_info());
    }
    if (from.has_public_memory_info()) {
      mutable_public_memory_info()->::universal_data::MergeFrom(from.public_memory_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Sync_Role_PublicInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Sync_Role_PublicInfo::CopyFrom(const S2C_Sync_Role_PublicInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Sync_Role_PublicInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2C_Sync_Role_PublicInfo::Swap(S2C_Sync_Role_PublicInfo* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(public_info_, other->public_info_);
    std::swap(public_memory_info_, other->public_memory_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Sync_Role_PublicInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Sync_Role_PublicInfo_descriptor_;
  metadata.reflection = S2C_Sync_Role_PublicInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Sync_Role_PrivateInfo::kRoleIndexFieldNumber;
const int S2C_Sync_Role_PrivateInfo::kPrivateInfoFieldNumber;
const int S2C_Sync_Role_PrivateInfo::kPrivateMemoryInfoFieldNumber;
#endif  // !_MSC_VER

S2C_Sync_Role_PrivateInfo::S2C_Sync_Role_PrivateInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Sync_Role_PrivateInfo::InitAsDefaultInstance() {
  private_info_ = const_cast< ::universal_data*>(&::universal_data::default_instance());
  private_memory_info_ = const_cast< ::universal_data*>(&::universal_data::default_instance());
}

S2C_Sync_Role_PrivateInfo::S2C_Sync_Role_PrivateInfo(const S2C_Sync_Role_PrivateInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Sync_Role_PrivateInfo::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  private_info_ = nullptr;
  private_memory_info_ = nullptr;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Sync_Role_PrivateInfo::~S2C_Sync_Role_PrivateInfo() {
  SharedDtor();
}

void S2C_Sync_Role_PrivateInfo::SharedDtor() {
  if (this != default_instance_) {
    delete private_info_;
    delete private_memory_info_;
  }
}

void S2C_Sync_Role_PrivateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Sync_Role_PrivateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Sync_Role_PrivateInfo_descriptor_;
}

const S2C_Sync_Role_PrivateInfo& S2C_Sync_Role_PrivateInfo::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Sync_Role_PrivateInfo* S2C_Sync_Role_PrivateInfo::default_instance_ = nullptr;

S2C_Sync_Role_PrivateInfo* S2C_Sync_Role_PrivateInfo::New() const {
  return new S2C_Sync_Role_PrivateInfo;
}

void S2C_Sync_Role_PrivateInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    if (has_private_info()) {
      if (private_info_ != nullptr) private_info_->::universal_data::Clear();
    }
    if (has_private_memory_info()) {
      if (private_memory_info_ != nullptr) private_memory_info_->::universal_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Sync_Role_PrivateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_private_info;
        break;
      }

      // required .universal_data private_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_private_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_private_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_private_memory_info;
        break;
      }

      // required .universal_data private_memory_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_private_memory_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_private_memory_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Sync_Role_PrivateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required .universal_data private_info = 2;
  if (has_private_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->private_info(), output);
  }

  // required .universal_data private_memory_info = 3;
  if (has_private_memory_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->private_memory_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Sync_Role_PrivateInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required .universal_data private_info = 2;
  if (has_private_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->private_info(), target);
  }

  // required .universal_data private_memory_info = 3;
  if (has_private_memory_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->private_memory_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Sync_Role_PrivateInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required .universal_data private_info = 2;
    if (has_private_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->private_info());
    }

    // required .universal_data private_memory_info = 3;
    if (has_private_memory_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->private_memory_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Sync_Role_PrivateInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Sync_Role_PrivateInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Sync_Role_PrivateInfo*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Sync_Role_PrivateInfo::MergeFrom(const S2C_Sync_Role_PrivateInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_private_info()) {
      mutable_private_info()->::universal_data::MergeFrom(from.private_info());
    }
    if (from.has_private_memory_info()) {
      mutable_private_memory_info()->::universal_data::MergeFrom(from.private_memory_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Sync_Role_PrivateInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Sync_Role_PrivateInfo::CopyFrom(const S2C_Sync_Role_PrivateInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Sync_Role_PrivateInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2C_Sync_Role_PrivateInfo::Swap(S2C_Sync_Role_PrivateInfo* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(private_info_, other->private_info_);
    std::swap(private_memory_info_, other->private_memory_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Sync_Role_PrivateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Sync_Role_PrivateInfo_descriptor_;
  metadata.reflection = S2C_Sync_Role_PrivateInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Sync_RoleInfo::kRoleIndexFieldNumber;
const int S2C_Sync_RoleInfo::kUniversalRoleInfoFieldNumber;
#endif  // !_MSC_VER

S2C_Sync_RoleInfo::S2C_Sync_RoleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Sync_RoleInfo::InitAsDefaultInstance() {
}

S2C_Sync_RoleInfo::S2C_Sync_RoleInfo(const S2C_Sync_RoleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Sync_RoleInfo::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Sync_RoleInfo::~S2C_Sync_RoleInfo() {
  SharedDtor();
}

void S2C_Sync_RoleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2C_Sync_RoleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Sync_RoleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Sync_RoleInfo_descriptor_;
}

const S2C_Sync_RoleInfo& S2C_Sync_RoleInfo::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Sync_RoleInfo* S2C_Sync_RoleInfo::default_instance_ = nullptr;

S2C_Sync_RoleInfo* S2C_Sync_RoleInfo::New() const {
  return new S2C_Sync_RoleInfo;
}

void S2C_Sync_RoleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
  }
  universal_role_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Sync_RoleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_universal_role_info;
        break;
      }

      // repeated .universal_data universal_role_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_universal_role_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_universal_role_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_universal_role_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Sync_RoleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // repeated .universal_data universal_role_info = 2;
  for (int i = 0; i < this->universal_role_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->universal_role_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Sync_RoleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // repeated .universal_data universal_role_info = 2;
  for (int i = 0; i < this->universal_role_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->universal_role_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Sync_RoleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

  }
  // repeated .universal_data universal_role_info = 2;
  total_size += 1 * this->universal_role_info_size();
  for (int i = 0; i < this->universal_role_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->universal_role_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Sync_RoleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Sync_RoleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Sync_RoleInfo*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Sync_RoleInfo::MergeFrom(const S2C_Sync_RoleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  universal_role_info_.MergeFrom(from.universal_role_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Sync_RoleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Sync_RoleInfo::CopyFrom(const S2C_Sync_RoleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Sync_RoleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void S2C_Sync_RoleInfo::Swap(S2C_Sync_RoleInfo* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    universal_role_info_.Swap(&other->universal_role_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Sync_RoleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Sync_RoleInfo_descriptor_;
  metadata.reflection = S2C_Sync_RoleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Sync_RoleAttr::kRoleIndexFieldNumber;
const int S2C_Sync_RoleAttr::kNewRoleAttrFieldNumber;
#endif  // !_MSC_VER

S2C_Sync_RoleAttr::S2C_Sync_RoleAttr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Sync_RoleAttr::InitAsDefaultInstance() {
  new_role_attr_ = const_cast< ::universal_data*>(&::universal_data::default_instance());
}

S2C_Sync_RoleAttr::S2C_Sync_RoleAttr(const S2C_Sync_RoleAttr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Sync_RoleAttr::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  new_role_attr_ = nullptr;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Sync_RoleAttr::~S2C_Sync_RoleAttr() {
  SharedDtor();
}

void S2C_Sync_RoleAttr::SharedDtor() {
  if (this != default_instance_) {
    delete new_role_attr_;
  }
}

void S2C_Sync_RoleAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Sync_RoleAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Sync_RoleAttr_descriptor_;
}

const S2C_Sync_RoleAttr& S2C_Sync_RoleAttr::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Sync_RoleAttr* S2C_Sync_RoleAttr::default_instance_ = nullptr;

S2C_Sync_RoleAttr* S2C_Sync_RoleAttr::New() const {
  return new S2C_Sync_RoleAttr;
}

void S2C_Sync_RoleAttr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    if (has_new_role_attr()) {
      if (new_role_attr_ != nullptr) new_role_attr_->::universal_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Sync_RoleAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_new_role_attr;
        break;
      }

      // required .universal_data new_role_attr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_role_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_role_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Sync_RoleAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required .universal_data new_role_attr = 2;
  if (has_new_role_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->new_role_attr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Sync_RoleAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required .universal_data new_role_attr = 2;
  if (has_new_role_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->new_role_attr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Sync_RoleAttr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required .universal_data new_role_attr = 2;
    if (has_new_role_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_role_attr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Sync_RoleAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Sync_RoleAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Sync_RoleAttr*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Sync_RoleAttr::MergeFrom(const S2C_Sync_RoleAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_new_role_attr()) {
      mutable_new_role_attr()->::universal_data::MergeFrom(from.new_role_attr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Sync_RoleAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Sync_RoleAttr::CopyFrom(const S2C_Sync_RoleAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Sync_RoleAttr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2C_Sync_RoleAttr::Swap(S2C_Sync_RoleAttr* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(new_role_attr_, other->new_role_attr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Sync_RoleAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Sync_RoleAttr_descriptor_;
  metadata.reflection = S2C_Sync_RoleAttr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Sync_Dir::kRoleIndexFieldNumber;
const int C2S_Sync_Dir::kDirFieldNumber;
#endif  // !_MSC_VER

C2S_Sync_Dir::C2S_Sync_Dir()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Sync_Dir::InitAsDefaultInstance() {
}

C2S_Sync_Dir::C2S_Sync_Dir(const C2S_Sync_Dir& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Sync_Dir::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  dir_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Sync_Dir::~C2S_Sync_Dir() {
  SharedDtor();
}

void C2S_Sync_Dir::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_Sync_Dir::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Sync_Dir::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Sync_Dir_descriptor_;
}

const C2S_Sync_Dir& C2S_Sync_Dir::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_Sync_Dir* C2S_Sync_Dir::default_instance_ = nullptr;

C2S_Sync_Dir* C2S_Sync_Dir::New() const {
  return new C2S_Sync_Dir;
}

void C2S_Sync_Dir::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    dir_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Sync_Dir::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dir;
        break;
      }

      // required sint32 dir = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Sync_Dir::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required sint32 dir = 2;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->dir(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Sync_Dir::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required sint32 dir = 2;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->dir(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Sync_Dir::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required sint32 dir = 2;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->dir());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Sync_Dir::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Sync_Dir* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Sync_Dir*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Sync_Dir::MergeFrom(const C2S_Sync_Dir& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Sync_Dir::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Sync_Dir::CopyFrom(const C2S_Sync_Dir& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Sync_Dir::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C2S_Sync_Dir::Swap(C2S_Sync_Dir* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(dir_, other->dir_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Sync_Dir::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Sync_Dir_descriptor_;
  metadata.reflection = C2S_Sync_Dir_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Sync_Dir::kRoleIndexFieldNumber;
const int S2C_Sync_Dir::kDirFieldNumber;
#endif  // !_MSC_VER

S2C_Sync_Dir::S2C_Sync_Dir()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Sync_Dir::InitAsDefaultInstance() {
}

S2C_Sync_Dir::S2C_Sync_Dir(const S2C_Sync_Dir& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Sync_Dir::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  dir_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Sync_Dir::~S2C_Sync_Dir() {
  SharedDtor();
}

void S2C_Sync_Dir::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2C_Sync_Dir::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Sync_Dir::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Sync_Dir_descriptor_;
}

const S2C_Sync_Dir& S2C_Sync_Dir::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Sync_Dir* S2C_Sync_Dir::default_instance_ = nullptr;

S2C_Sync_Dir* S2C_Sync_Dir::New() const {
  return new S2C_Sync_Dir;
}

void S2C_Sync_Dir::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    dir_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Sync_Dir::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dir;
        break;
      }

      // required sint32 dir = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Sync_Dir::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required sint32 dir = 2;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->dir(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Sync_Dir::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required sint32 dir = 2;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->dir(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Sync_Dir::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required sint32 dir = 2;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->dir());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Sync_Dir::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Sync_Dir* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Sync_Dir*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Sync_Dir::MergeFrom(const S2C_Sync_Dir& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Sync_Dir::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Sync_Dir::CopyFrom(const S2C_Sync_Dir& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Sync_Dir::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2C_Sync_Dir::Swap(S2C_Sync_Dir* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(dir_, other->dir_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Sync_Dir::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Sync_Dir_descriptor_;
  metadata.reflection = S2C_Sync_Dir_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Sync_RoleMove::kRoleIndexFieldNumber;
const int C2S_Sync_RoleMove::kBeginXFieldNumber;
const int C2S_Sync_RoleMove::kBeginYFieldNumber;
const int C2S_Sync_RoleMove::kEndXFieldNumber;
const int C2S_Sync_RoleMove::kEndYFieldNumber;
const int C2S_Sync_RoleMove::kIsRunFieldNumber;
#endif  // !_MSC_VER

C2S_Sync_RoleMove::C2S_Sync_RoleMove()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Sync_RoleMove::InitAsDefaultInstance() {
}

C2S_Sync_RoleMove::C2S_Sync_RoleMove(const C2S_Sync_RoleMove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Sync_RoleMove::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  begin_x_ = 0;
  begin_y_ = 0;
  end_x_ = 0;
  end_y_ = 0;
  is_run_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Sync_RoleMove::~C2S_Sync_RoleMove() {
  SharedDtor();
}

void C2S_Sync_RoleMove::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_Sync_RoleMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Sync_RoleMove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Sync_RoleMove_descriptor_;
}

const C2S_Sync_RoleMove& C2S_Sync_RoleMove::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_Sync_RoleMove* C2S_Sync_RoleMove::default_instance_ = nullptr;

C2S_Sync_RoleMove* C2S_Sync_RoleMove::New() const {
  return new C2S_Sync_RoleMove;
}

void C2S_Sync_RoleMove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    begin_x_ = 0;
    begin_y_ = 0;
    end_x_ = 0;
    end_y_ = 0;
    is_run_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Sync_RoleMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_begin_x;
        break;
      }

      // required float begin_x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_begin_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &begin_x_)));
          set_has_begin_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_begin_y;
        break;
      }

      // required float begin_y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_begin_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &begin_y_)));
          set_has_begin_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_end_x;
        break;
      }

      // required float end_x = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_end_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &end_x_)));
          set_has_end_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_end_y;
        break;
      }

      // required float end_y = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_end_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &end_y_)));
          set_has_end_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_run;
        break;
      }

      // required bool is_run = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_run:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_run_)));
          set_has_is_run();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Sync_RoleMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required float begin_x = 3;
  if (has_begin_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->begin_x(), output);
  }

  // required float begin_y = 4;
  if (has_begin_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->begin_y(), output);
  }

  // required float end_x = 5;
  if (has_end_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->end_x(), output);
  }

  // required float end_y = 6;
  if (has_end_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->end_y(), output);
  }

  // required bool is_run = 7;
  if (has_is_run()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_run(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Sync_RoleMove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required float begin_x = 3;
  if (has_begin_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->begin_x(), target);
  }

  // required float begin_y = 4;
  if (has_begin_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->begin_y(), target);
  }

  // required float end_x = 5;
  if (has_end_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->end_x(), target);
  }

  // required float end_y = 6;
  if (has_end_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->end_y(), target);
  }

  // required bool is_run = 7;
  if (has_is_run()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_run(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Sync_RoleMove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required float begin_x = 3;
    if (has_begin_x()) {
      total_size += 1 + 4;
    }

    // required float begin_y = 4;
    if (has_begin_y()) {
      total_size += 1 + 4;
    }

    // required float end_x = 5;
    if (has_end_x()) {
      total_size += 1 + 4;
    }

    // required float end_y = 6;
    if (has_end_y()) {
      total_size += 1 + 4;
    }

    // required bool is_run = 7;
    if (has_is_run()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Sync_RoleMove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Sync_RoleMove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Sync_RoleMove*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Sync_RoleMove::MergeFrom(const C2S_Sync_RoleMove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_begin_x()) {
      set_begin_x(from.begin_x());
    }
    if (from.has_begin_y()) {
      set_begin_y(from.begin_y());
    }
    if (from.has_end_x()) {
      set_end_x(from.end_x());
    }
    if (from.has_end_y()) {
      set_end_y(from.end_y());
    }
    if (from.has_is_run()) {
      set_is_run(from.is_run());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Sync_RoleMove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Sync_RoleMove::CopyFrom(const C2S_Sync_RoleMove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Sync_RoleMove::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void C2S_Sync_RoleMove::Swap(C2S_Sync_RoleMove* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(begin_x_, other->begin_x_);
    std::swap(begin_y_, other->begin_y_);
    std::swap(end_x_, other->end_x_);
    std::swap(end_y_, other->end_y_);
    std::swap(is_run_, other->is_run_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Sync_RoleMove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Sync_RoleMove_descriptor_;
  metadata.reflection = C2S_Sync_RoleMove_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Sync_RoleMove::kRoleIndexFieldNumber;
const int S2C_Sync_RoleMove::kBeginXFieldNumber;
const int S2C_Sync_RoleMove::kBeginYFieldNumber;
const int S2C_Sync_RoleMove::kEndXFieldNumber;
const int S2C_Sync_RoleMove::kEndYFieldNumber;
const int S2C_Sync_RoleMove::kIsRunFieldNumber;
#endif  // !_MSC_VER

S2C_Sync_RoleMove::S2C_Sync_RoleMove()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Sync_RoleMove::InitAsDefaultInstance() {
}

S2C_Sync_RoleMove::S2C_Sync_RoleMove(const S2C_Sync_RoleMove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Sync_RoleMove::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  begin_x_ = 0;
  begin_y_ = 0;
  end_x_ = 0;
  end_y_ = 0;
  is_run_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Sync_RoleMove::~S2C_Sync_RoleMove() {
  SharedDtor();
}

void S2C_Sync_RoleMove::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2C_Sync_RoleMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Sync_RoleMove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Sync_RoleMove_descriptor_;
}

const S2C_Sync_RoleMove& S2C_Sync_RoleMove::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Sync_RoleMove* S2C_Sync_RoleMove::default_instance_ = nullptr;

S2C_Sync_RoleMove* S2C_Sync_RoleMove::New() const {
  return new S2C_Sync_RoleMove;
}

void S2C_Sync_RoleMove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    begin_x_ = 0;
    begin_y_ = 0;
    end_x_ = 0;
    end_y_ = 0;
    is_run_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Sync_RoleMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_begin_x;
        break;
      }

      // required float begin_x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_begin_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &begin_x_)));
          set_has_begin_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_begin_y;
        break;
      }

      // required float begin_y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_begin_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &begin_y_)));
          set_has_begin_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_end_x;
        break;
      }

      // required float end_x = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_end_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &end_x_)));
          set_has_end_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_end_y;
        break;
      }

      // required float end_y = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_end_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &end_y_)));
          set_has_end_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_run;
        break;
      }

      // required bool is_run = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_run:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_run_)));
          set_has_is_run();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Sync_RoleMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required float begin_x = 3;
  if (has_begin_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->begin_x(), output);
  }

  // required float begin_y = 4;
  if (has_begin_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->begin_y(), output);
  }

  // required float end_x = 5;
  if (has_end_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->end_x(), output);
  }

  // required float end_y = 6;
  if (has_end_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->end_y(), output);
  }

  // required bool is_run = 7;
  if (has_is_run()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_run(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Sync_RoleMove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required float begin_x = 3;
  if (has_begin_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->begin_x(), target);
  }

  // required float begin_y = 4;
  if (has_begin_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->begin_y(), target);
  }

  // required float end_x = 5;
  if (has_end_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->end_x(), target);
  }

  // required float end_y = 6;
  if (has_end_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->end_y(), target);
  }

  // required bool is_run = 7;
  if (has_is_run()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_run(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Sync_RoleMove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required float begin_x = 3;
    if (has_begin_x()) {
      total_size += 1 + 4;
    }

    // required float begin_y = 4;
    if (has_begin_y()) {
      total_size += 1 + 4;
    }

    // required float end_x = 5;
    if (has_end_x()) {
      total_size += 1 + 4;
    }

    // required float end_y = 6;
    if (has_end_y()) {
      total_size += 1 + 4;
    }

    // required bool is_run = 7;
    if (has_is_run()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Sync_RoleMove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Sync_RoleMove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Sync_RoleMove*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Sync_RoleMove::MergeFrom(const S2C_Sync_RoleMove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_begin_x()) {
      set_begin_x(from.begin_x());
    }
    if (from.has_begin_y()) {
      set_begin_y(from.begin_y());
    }
    if (from.has_end_x()) {
      set_end_x(from.end_x());
    }
    if (from.has_end_y()) {
      set_end_y(from.end_y());
    }
    if (from.has_is_run()) {
      set_is_run(from.is_run());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Sync_RoleMove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Sync_RoleMove::CopyFrom(const S2C_Sync_RoleMove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Sync_RoleMove::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void S2C_Sync_RoleMove::Swap(S2C_Sync_RoleMove* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(begin_x_, other->begin_x_);
    std::swap(begin_y_, other->begin_y_);
    std::swap(end_x_, other->end_x_);
    std::swap(end_y_, other->end_y_);
    std::swap(is_run_, other->is_run_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Sync_RoleMove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Sync_RoleMove_descriptor_;
  metadata.reflection = S2C_Sync_RoleMove_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Sync_RoleStopMove::kRoleIndexFieldNumber;
const int S2C_Sync_RoleStopMove::kEndXFieldNumber;
const int S2C_Sync_RoleStopMove::kEndYFieldNumber;
#endif  // !_MSC_VER

S2C_Sync_RoleStopMove::S2C_Sync_RoleStopMove()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Sync_RoleStopMove::InitAsDefaultInstance() {
}

S2C_Sync_RoleStopMove::S2C_Sync_RoleStopMove(const S2C_Sync_RoleStopMove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Sync_RoleStopMove::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  end_x_ = 0;
  end_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Sync_RoleStopMove::~S2C_Sync_RoleStopMove() {
  SharedDtor();
}

void S2C_Sync_RoleStopMove::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2C_Sync_RoleStopMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Sync_RoleStopMove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Sync_RoleStopMove_descriptor_;
}

const S2C_Sync_RoleStopMove& S2C_Sync_RoleStopMove::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Sync_RoleStopMove* S2C_Sync_RoleStopMove::default_instance_ = nullptr;

S2C_Sync_RoleStopMove* S2C_Sync_RoleStopMove::New() const {
  return new S2C_Sync_RoleStopMove;
}

void S2C_Sync_RoleStopMove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    end_x_ = 0;
    end_y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Sync_RoleStopMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_end_x;
        break;
      }

      // required float end_x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_end_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &end_x_)));
          set_has_end_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_end_y;
        break;
      }

      // required float end_y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_end_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &end_y_)));
          set_has_end_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Sync_RoleStopMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required float end_x = 3;
  if (has_end_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->end_x(), output);
  }

  // required float end_y = 4;
  if (has_end_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->end_y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Sync_RoleStopMove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required float end_x = 3;
  if (has_end_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->end_x(), target);
  }

  // required float end_y = 4;
  if (has_end_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->end_y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Sync_RoleStopMove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required float end_x = 3;
    if (has_end_x()) {
      total_size += 1 + 4;
    }

    // required float end_y = 4;
    if (has_end_y()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Sync_RoleStopMove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Sync_RoleStopMove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Sync_RoleStopMove*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Sync_RoleStopMove::MergeFrom(const S2C_Sync_RoleStopMove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_end_x()) {
      set_end_x(from.end_x());
    }
    if (from.has_end_y()) {
      set_end_y(from.end_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Sync_RoleStopMove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Sync_RoleStopMove::CopyFrom(const S2C_Sync_RoleStopMove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Sync_RoleStopMove::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2C_Sync_RoleStopMove::Swap(S2C_Sync_RoleStopMove* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(end_x_, other->end_x_);
    std::swap(end_y_, other->end_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Sync_RoleStopMove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Sync_RoleStopMove_descriptor_;
  metadata.reflection = S2C_Sync_RoleStopMove_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Notice_Role_LevelUp::kRoleIndexFieldNumber;
const int S2C_Notice_Role_LevelUp::kNewRoleAttrFieldNumber;
const int S2C_Notice_Role_LevelUp::kNewLevelFieldNumber;
#endif  // !_MSC_VER

S2C_Notice_Role_LevelUp::S2C_Notice_Role_LevelUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Notice_Role_LevelUp::InitAsDefaultInstance() {
  new_role_attr_ = const_cast< ::universal_data*>(&::universal_data::default_instance());
}

S2C_Notice_Role_LevelUp::S2C_Notice_Role_LevelUp(const S2C_Notice_Role_LevelUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Notice_Role_LevelUp::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  new_role_attr_ = nullptr;
  new_level_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Notice_Role_LevelUp::~S2C_Notice_Role_LevelUp() {
  SharedDtor();
}

void S2C_Notice_Role_LevelUp::SharedDtor() {
  if (this != default_instance_) {
    delete new_role_attr_;
  }
}

void S2C_Notice_Role_LevelUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Notice_Role_LevelUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Notice_Role_LevelUp_descriptor_;
}

const S2C_Notice_Role_LevelUp& S2C_Notice_Role_LevelUp::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Notice_Role_LevelUp* S2C_Notice_Role_LevelUp::default_instance_ = nullptr;

S2C_Notice_Role_LevelUp* S2C_Notice_Role_LevelUp::New() const {
  return new S2C_Notice_Role_LevelUp;
}

void S2C_Notice_Role_LevelUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    if (has_new_role_attr()) {
      if (new_role_attr_ != nullptr) new_role_attr_->::universal_data::Clear();
    }
    new_level_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Notice_Role_LevelUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_new_role_attr;
        break;
      }

      // required .universal_data new_role_attr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_role_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_role_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_new_level;
        break;
      }

      // required int64 new_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &new_level_)));
          set_has_new_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Notice_Role_LevelUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required .universal_data new_role_attr = 2;
  if (has_new_role_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->new_role_attr(), output);
  }

  // required int64 new_level = 3;
  if (has_new_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->new_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Notice_Role_LevelUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required .universal_data new_role_attr = 2;
  if (has_new_role_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->new_role_attr(), target);
  }

  // required int64 new_level = 3;
  if (has_new_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->new_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Notice_Role_LevelUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required .universal_data new_role_attr = 2;
    if (has_new_role_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_role_attr());
    }

    // required int64 new_level = 3;
    if (has_new_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->new_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Notice_Role_LevelUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Notice_Role_LevelUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Notice_Role_LevelUp*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Notice_Role_LevelUp::MergeFrom(const S2C_Notice_Role_LevelUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_new_role_attr()) {
      mutable_new_role_attr()->::universal_data::MergeFrom(from.new_role_attr());
    }
    if (from.has_new_level()) {
      set_new_level(from.new_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Notice_Role_LevelUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Notice_Role_LevelUp::CopyFrom(const S2C_Notice_Role_LevelUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Notice_Role_LevelUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2C_Notice_Role_LevelUp::Swap(S2C_Notice_Role_LevelUp* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(new_role_attr_, other->new_role_attr_);
    std::swap(new_level_, other->new_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Notice_Role_LevelUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Notice_Role_LevelUp_descriptor_;
  metadata.reflection = S2C_Notice_Role_LevelUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Ask_Comrade::kRoleIndexFieldNumber;
const int C2S_Ask_Comrade::kComradeRoleIndexFieldNumber;
const int C2S_Ask_Comrade::kTeamPosIndexFieldNumber;
#endif  // !_MSC_VER

C2S_Ask_Comrade::C2S_Ask_Comrade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Ask_Comrade::InitAsDefaultInstance() {
}

C2S_Ask_Comrade::C2S_Ask_Comrade(const C2S_Ask_Comrade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Ask_Comrade::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  comrade_role_index_ = GOOGLE_LONGLONG(0);
  team_pos_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Ask_Comrade::~C2S_Ask_Comrade() {
  SharedDtor();
}

void C2S_Ask_Comrade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_Ask_Comrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Ask_Comrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Ask_Comrade_descriptor_;
}

const C2S_Ask_Comrade& C2S_Ask_Comrade::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_Ask_Comrade* C2S_Ask_Comrade::default_instance_ = nullptr;

C2S_Ask_Comrade* C2S_Ask_Comrade::New() const {
  return new C2S_Ask_Comrade;
}

void C2S_Ask_Comrade::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    comrade_role_index_ = GOOGLE_LONGLONG(0);
    team_pos_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Ask_Comrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_comrade_role_index;
        break;
      }

      // required int64 comrade_role_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_comrade_role_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &comrade_role_index_)));
          set_has_comrade_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_team_pos_index;
        break;
      }

      // required sint32 team_pos_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_pos_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &team_pos_index_)));
          set_has_team_pos_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Ask_Comrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required int64 comrade_role_index = 2;
  if (has_comrade_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->comrade_role_index(), output);
  }

  // required sint32 team_pos_index = 3;
  if (has_team_pos_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->team_pos_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Ask_Comrade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required int64 comrade_role_index = 2;
  if (has_comrade_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->comrade_role_index(), target);
  }

  // required sint32 team_pos_index = 3;
  if (has_team_pos_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->team_pos_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Ask_Comrade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required int64 comrade_role_index = 2;
    if (has_comrade_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->comrade_role_index());
    }

    // required sint32 team_pos_index = 3;
    if (has_team_pos_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->team_pos_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Ask_Comrade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Ask_Comrade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Ask_Comrade*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Ask_Comrade::MergeFrom(const C2S_Ask_Comrade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_comrade_role_index()) {
      set_comrade_role_index(from.comrade_role_index());
    }
    if (from.has_team_pos_index()) {
      set_team_pos_index(from.team_pos_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Ask_Comrade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Ask_Comrade::CopyFrom(const C2S_Ask_Comrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Ask_Comrade::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void C2S_Ask_Comrade::Swap(C2S_Ask_Comrade* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(comrade_role_index_, other->comrade_role_index_);
    std::swap(team_pos_index_, other->team_pos_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Ask_Comrade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Ask_Comrade_descriptor_;
  metadata.reflection = C2S_Ask_Comrade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Ret_Comrade::kRoleIndexFieldNumber;
const int S2C_Ret_Comrade::kTeamIndexFieldNumber;
const int S2C_Ret_Comrade::kComradeRoleIndexFieldNumber;
const int S2C_Ret_Comrade::kTeamPosIndexFieldNumber;
#endif  // !_MSC_VER

S2C_Ret_Comrade::S2C_Ret_Comrade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Ret_Comrade::InitAsDefaultInstance() {
}

S2C_Ret_Comrade::S2C_Ret_Comrade(const S2C_Ret_Comrade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Ret_Comrade::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  team_index_ = GOOGLE_LONGLONG(0);
  comrade_role_index_ = GOOGLE_LONGLONG(0);
  team_pos_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Ret_Comrade::~S2C_Ret_Comrade() {
  SharedDtor();
}

void S2C_Ret_Comrade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2C_Ret_Comrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Ret_Comrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Ret_Comrade_descriptor_;
}

const S2C_Ret_Comrade& S2C_Ret_Comrade::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Ret_Comrade* S2C_Ret_Comrade::default_instance_ = nullptr;

S2C_Ret_Comrade* S2C_Ret_Comrade::New() const {
  return new S2C_Ret_Comrade;
}

void S2C_Ret_Comrade::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    team_index_ = GOOGLE_LONGLONG(0);
    comrade_role_index_ = GOOGLE_LONGLONG(0);
    team_pos_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Ret_Comrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team_index;
        break;
      }

      // required int64 team_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &team_index_)));
          set_has_team_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_comrade_role_index;
        break;
      }

      // required int64 comrade_role_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_comrade_role_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &comrade_role_index_)));
          set_has_comrade_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_team_pos_index;
        break;
      }

      // required sint32 team_pos_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_pos_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &team_pos_index_)));
          set_has_team_pos_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Ret_Comrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required int64 team_index = 2;
  if (has_team_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->team_index(), output);
  }

  // required int64 comrade_role_index = 3;
  if (has_comrade_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->comrade_role_index(), output);
  }

  // required sint32 team_pos_index = 4;
  if (has_team_pos_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->team_pos_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Ret_Comrade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required int64 team_index = 2;
  if (has_team_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->team_index(), target);
  }

  // required int64 comrade_role_index = 3;
  if (has_comrade_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->comrade_role_index(), target);
  }

  // required sint32 team_pos_index = 4;
  if (has_team_pos_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->team_pos_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Ret_Comrade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required int64 team_index = 2;
    if (has_team_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->team_index());
    }

    // required int64 comrade_role_index = 3;
    if (has_comrade_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->comrade_role_index());
    }

    // required sint32 team_pos_index = 4;
    if (has_team_pos_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->team_pos_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Ret_Comrade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Ret_Comrade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Ret_Comrade*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Ret_Comrade::MergeFrom(const S2C_Ret_Comrade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_team_index()) {
      set_team_index(from.team_index());
    }
    if (from.has_comrade_role_index()) {
      set_comrade_role_index(from.comrade_role_index());
    }
    if (from.has_team_pos_index()) {
      set_team_pos_index(from.team_pos_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Ret_Comrade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Ret_Comrade::CopyFrom(const S2C_Ret_Comrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Ret_Comrade::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void S2C_Ret_Comrade::Swap(S2C_Ret_Comrade* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(team_index_, other->team_index_);
    std::swap(comrade_role_index_, other->comrade_role_index_);
    std::swap(team_pos_index_, other->team_pos_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Ret_Comrade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Ret_Comrade_descriptor_;
  metadata.reflection = S2C_Ret_Comrade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Ask_Chat::kRoleIndexFieldNumber;
const int C2S_Ask_Chat::kChatTypeFieldNumber;
const int C2S_Ask_Chat::kMsgFieldNumber;
const int C2S_Ask_Chat::kBackcolorFieldNumber;
const int C2S_Ask_Chat::kBoxcolorFieldNumber;
const int C2S_Ask_Chat::kShadowcolorFieldNumber;
const int C2S_Ask_Chat::kMsgcolorFieldNumber;
#endif  // !_MSC_VER

C2S_Ask_Chat::C2S_Ask_Chat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Ask_Chat::InitAsDefaultInstance() {
}

C2S_Ask_Chat::C2S_Ask_Chat(const C2S_Ask_Chat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Ask_Chat::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  chat_type_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  backcolor_ = 0u;
  boxcolor_ = 0u;
  shadowcolor_ = 0u;
  msgcolor_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Ask_Chat::~C2S_Ask_Chat() {
  SharedDtor();
}

void C2S_Ask_Chat::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void C2S_Ask_Chat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Ask_Chat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Ask_Chat_descriptor_;
}

const C2S_Ask_Chat& C2S_Ask_Chat::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_Ask_Chat* C2S_Ask_Chat::default_instance_ = nullptr;

C2S_Ask_Chat* C2S_Ask_Chat::New() const {
  return new C2S_Ask_Chat;
}

void C2S_Ask_Chat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    chat_type_ = 0;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    backcolor_ = 0u;
    boxcolor_ = 0u;
    shadowcolor_ = 0u;
    msgcolor_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Ask_Chat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chat_type;
        break;
      }

      // required .E_CHAT_TYPE chat_type = 2 [default = ECT_CURRENT];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chat_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::E_CHAT_TYPE_IsValid(value)) {
            set_chat_type(static_cast< ::E_CHAT_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg;
        break;
      }

      // required bytes msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_backcolor;
        break;
      }

      // required uint32 backcolor = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_backcolor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &backcolor_)));
          set_has_backcolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_boxcolor;
        break;
      }

      // required uint32 boxcolor = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boxcolor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boxcolor_)));
          set_has_boxcolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_shadowcolor;
        break;
      }

      // required uint32 shadowcolor = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shadowcolor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shadowcolor_)));
          set_has_shadowcolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_msgcolor;
        break;
      }

      // required uint32 msgcolor = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgcolor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgcolor_)));
          set_has_msgcolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Ask_Chat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required .E_CHAT_TYPE chat_type = 2 [default = ECT_CURRENT];
  if (has_chat_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->chat_type(), output);
  }

  // required bytes msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->msg(), output);
  }

  // required uint32 backcolor = 4;
  if (has_backcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->backcolor(), output);
  }

  // required uint32 boxcolor = 5;
  if (has_boxcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->boxcolor(), output);
  }

  // required uint32 shadowcolor = 6;
  if (has_shadowcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->shadowcolor(), output);
  }

  // required uint32 msgcolor = 7;
  if (has_msgcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->msgcolor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Ask_Chat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required .E_CHAT_TYPE chat_type = 2 [default = ECT_CURRENT];
  if (has_chat_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->chat_type(), target);
  }

  // required bytes msg = 3;
  if (has_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->msg(), target);
  }

  // required uint32 backcolor = 4;
  if (has_backcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->backcolor(), target);
  }

  // required uint32 boxcolor = 5;
  if (has_boxcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->boxcolor(), target);
  }

  // required uint32 shadowcolor = 6;
  if (has_shadowcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->shadowcolor(), target);
  }

  // required uint32 msgcolor = 7;
  if (has_msgcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->msgcolor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Ask_Chat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required .E_CHAT_TYPE chat_type = 2 [default = ECT_CURRENT];
    if (has_chat_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->chat_type());
    }

    // required bytes msg = 3;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg());
    }

    // required uint32 backcolor = 4;
    if (has_backcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->backcolor());
    }

    // required uint32 boxcolor = 5;
    if (has_boxcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boxcolor());
    }

    // required uint32 shadowcolor = 6;
    if (has_shadowcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shadowcolor());
    }

    // required uint32 msgcolor = 7;
    if (has_msgcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgcolor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Ask_Chat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Ask_Chat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Ask_Chat*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Ask_Chat::MergeFrom(const C2S_Ask_Chat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_chat_type()) {
      set_chat_type(from.chat_type());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_backcolor()) {
      set_backcolor(from.backcolor());
    }
    if (from.has_boxcolor()) {
      set_boxcolor(from.boxcolor());
    }
    if (from.has_shadowcolor()) {
      set_shadowcolor(from.shadowcolor());
    }
    if (from.has_msgcolor()) {
      set_msgcolor(from.msgcolor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Ask_Chat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Ask_Chat::CopyFrom(const C2S_Ask_Chat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Ask_Chat::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void C2S_Ask_Chat::Swap(C2S_Ask_Chat* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(chat_type_, other->chat_type_);
    std::swap(msg_, other->msg_);
    std::swap(backcolor_, other->backcolor_);
    std::swap(boxcolor_, other->boxcolor_);
    std::swap(shadowcolor_, other->shadowcolor_);
    std::swap(msgcolor_, other->msgcolor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Ask_Chat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Ask_Chat_descriptor_;
  metadata.reflection = C2S_Ask_Chat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Ret_Chat::kRoleIndexFieldNumber;
const int S2C_Ret_Chat::kSceneInstanceIdFieldNumber;
const int S2C_Ret_Chat::kChatTypeFieldNumber;
const int S2C_Ret_Chat::kMsgFieldNumber;
const int S2C_Ret_Chat::kBackcolorFieldNumber;
const int S2C_Ret_Chat::kBoxcolorFieldNumber;
const int S2C_Ret_Chat::kShadowcolorFieldNumber;
const int S2C_Ret_Chat::kMsgcolorFieldNumber;
#endif  // !_MSC_VER

S2C_Ret_Chat::S2C_Ret_Chat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Ret_Chat::InitAsDefaultInstance() {
}

S2C_Ret_Chat::S2C_Ret_Chat(const S2C_Ret_Chat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Ret_Chat::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  scene_instance_id_ = GOOGLE_LONGLONG(0);
  chat_type_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  backcolor_ = 0u;
  boxcolor_ = 0u;
  shadowcolor_ = 0u;
  msgcolor_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Ret_Chat::~S2C_Ret_Chat() {
  SharedDtor();
}

void S2C_Ret_Chat::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void S2C_Ret_Chat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Ret_Chat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Ret_Chat_descriptor_;
}

const S2C_Ret_Chat& S2C_Ret_Chat::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Ret_Chat* S2C_Ret_Chat::default_instance_ = nullptr;

S2C_Ret_Chat* S2C_Ret_Chat::New() const {
  return new S2C_Ret_Chat;
}

void S2C_Ret_Chat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    scene_instance_id_ = GOOGLE_LONGLONG(0);
    chat_type_ = 0;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    backcolor_ = 0u;
    boxcolor_ = 0u;
    shadowcolor_ = 0u;
    msgcolor_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Ret_Chat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scene_instance_id;
        break;
      }

      // required int64 scene_instance_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &scene_instance_id_)));
          set_has_scene_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_chat_type;
        break;
      }

      // required .E_CHAT_TYPE chat_type = 5 [default = ECT_CURRENT];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chat_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::E_CHAT_TYPE_IsValid(value)) {
            set_chat_type(static_cast< ::E_CHAT_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_msg;
        break;
      }

      // required bytes msg = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_backcolor;
        break;
      }

      // required uint32 backcolor = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_backcolor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &backcolor_)));
          set_has_backcolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_boxcolor;
        break;
      }

      // required uint32 boxcolor = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boxcolor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boxcolor_)));
          set_has_boxcolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_shadowcolor;
        break;
      }

      // required uint32 shadowcolor = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shadowcolor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shadowcolor_)));
          set_has_shadowcolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_msgcolor;
        break;
      }

      // required uint32 msgcolor = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgcolor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgcolor_)));
          set_has_msgcolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Ret_Chat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required int64 scene_instance_id = 2;
  if (has_scene_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->scene_instance_id(), output);
  }

  // required .E_CHAT_TYPE chat_type = 5 [default = ECT_CURRENT];
  if (has_chat_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->chat_type(), output);
  }

  // required bytes msg = 6;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->msg(), output);
  }

  // required uint32 backcolor = 7;
  if (has_backcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->backcolor(), output);
  }

  // required uint32 boxcolor = 8;
  if (has_boxcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->boxcolor(), output);
  }

  // required uint32 shadowcolor = 10;
  if (has_shadowcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->shadowcolor(), output);
  }

  // required uint32 msgcolor = 11;
  if (has_msgcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->msgcolor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Ret_Chat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required int64 scene_instance_id = 2;
  if (has_scene_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->scene_instance_id(), target);
  }

  // required .E_CHAT_TYPE chat_type = 5 [default = ECT_CURRENT];
  if (has_chat_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->chat_type(), target);
  }

  // required bytes msg = 6;
  if (has_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->msg(), target);
  }

  // required uint32 backcolor = 7;
  if (has_backcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->backcolor(), target);
  }

  // required uint32 boxcolor = 8;
  if (has_boxcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->boxcolor(), target);
  }

  // required uint32 shadowcolor = 10;
  if (has_shadowcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->shadowcolor(), target);
  }

  // required uint32 msgcolor = 11;
  if (has_msgcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->msgcolor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Ret_Chat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required int64 scene_instance_id = 2;
    if (has_scene_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->scene_instance_id());
    }

    // required .E_CHAT_TYPE chat_type = 5 [default = ECT_CURRENT];
    if (has_chat_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->chat_type());
    }

    // required bytes msg = 6;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg());
    }

    // required uint32 backcolor = 7;
    if (has_backcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->backcolor());
    }

    // required uint32 boxcolor = 8;
    if (has_boxcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boxcolor());
    }

    // required uint32 shadowcolor = 10;
    if (has_shadowcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shadowcolor());
    }

    // required uint32 msgcolor = 11;
    if (has_msgcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgcolor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Ret_Chat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Ret_Chat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Ret_Chat*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Ret_Chat::MergeFrom(const S2C_Ret_Chat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_scene_instance_id()) {
      set_scene_instance_id(from.scene_instance_id());
    }
    if (from.has_chat_type()) {
      set_chat_type(from.chat_type());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_backcolor()) {
      set_backcolor(from.backcolor());
    }
    if (from.has_boxcolor()) {
      set_boxcolor(from.boxcolor());
    }
    if (from.has_shadowcolor()) {
      set_shadowcolor(from.shadowcolor());
    }
    if (from.has_msgcolor()) {
      set_msgcolor(from.msgcolor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Ret_Chat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Ret_Chat::CopyFrom(const S2C_Ret_Chat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Ret_Chat::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void S2C_Ret_Chat::Swap(S2C_Ret_Chat* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(scene_instance_id_, other->scene_instance_id_);
    std::swap(chat_type_, other->chat_type_);
    std::swap(msg_, other->msg_);
    std::swap(backcolor_, other->backcolor_);
    std::swap(boxcolor_, other->boxcolor_);
    std::swap(shadowcolor_, other->shadowcolor_);
    std::swap(msgcolor_, other->msgcolor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Ret_Chat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Ret_Chat_descriptor_;
  metadata.reflection = S2C_Ret_Chat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Change_Scene::kRoleIndexFieldNumber;
const int C2S_Change_Scene::kTarSceneIdFieldNumber;
const int C2S_Change_Scene::kPosXFieldNumber;
const int C2S_Change_Scene::kPosYFieldNumber;
#endif  // !_MSC_VER

C2S_Change_Scene::C2S_Change_Scene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Change_Scene::InitAsDefaultInstance() {
}

C2S_Change_Scene::C2S_Change_Scene(const C2S_Change_Scene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Change_Scene::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  tar_scene_id_ = 0u;
  pos_x_ = 0;
  pos_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Change_Scene::~C2S_Change_Scene() {
  SharedDtor();
}

void C2S_Change_Scene::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_Change_Scene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Change_Scene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Change_Scene_descriptor_;
}

const C2S_Change_Scene& C2S_Change_Scene::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_Change_Scene* C2S_Change_Scene::default_instance_ = nullptr;

C2S_Change_Scene* C2S_Change_Scene::New() const {
  return new C2S_Change_Scene;
}

void C2S_Change_Scene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    tar_scene_id_ = 0u;
    pos_x_ = 0;
    pos_y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Change_Scene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tar_scene_id;
        break;
      }

      // required uint32 tar_scene_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tar_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tar_scene_id_)));
          set_has_tar_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_pos_x;
        break;
      }

      // required float pos_x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_x_)));
          set_has_pos_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_pos_y;
        break;
      }

      // required float pos_y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_y_)));
          set_has_pos_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Change_Scene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required uint32 tar_scene_id = 2;
  if (has_tar_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tar_scene_id(), output);
  }

  // required float pos_x = 3;
  if (has_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->pos_x(), output);
  }

  // required float pos_y = 4;
  if (has_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->pos_y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Change_Scene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required uint32 tar_scene_id = 2;
  if (has_tar_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tar_scene_id(), target);
  }

  // required float pos_x = 3;
  if (has_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->pos_x(), target);
  }

  // required float pos_y = 4;
  if (has_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->pos_y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Change_Scene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required uint32 tar_scene_id = 2;
    if (has_tar_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tar_scene_id());
    }

    // required float pos_x = 3;
    if (has_pos_x()) {
      total_size += 1 + 4;
    }

    // required float pos_y = 4;
    if (has_pos_y()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Change_Scene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Change_Scene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Change_Scene*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Change_Scene::MergeFrom(const C2S_Change_Scene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_tar_scene_id()) {
      set_tar_scene_id(from.tar_scene_id());
    }
    if (from.has_pos_x()) {
      set_pos_x(from.pos_x());
    }
    if (from.has_pos_y()) {
      set_pos_y(from.pos_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Change_Scene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Change_Scene::CopyFrom(const C2S_Change_Scene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Change_Scene::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void C2S_Change_Scene::Swap(C2S_Change_Scene* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(tar_scene_id_, other->tar_scene_id_);
    std::swap(pos_x_, other->pos_x_);
    std::swap(pos_y_, other->pos_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Change_Scene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Change_Scene_descriptor_;
  metadata.reflection = C2S_Change_Scene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_TransPortChangeScene::kRoleIndexFieldNumber;
const int C2S_TransPortChangeScene::kTransportIdFieldNumber;
#endif  // !_MSC_VER

C2S_TransPortChangeScene::C2S_TransPortChangeScene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_TransPortChangeScene::InitAsDefaultInstance() {
}

C2S_TransPortChangeScene::C2S_TransPortChangeScene(const C2S_TransPortChangeScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_TransPortChangeScene::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  transport_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_TransPortChangeScene::~C2S_TransPortChangeScene() {
  SharedDtor();
}

void C2S_TransPortChangeScene::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_TransPortChangeScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_TransPortChangeScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_TransPortChangeScene_descriptor_;
}

const C2S_TransPortChangeScene& C2S_TransPortChangeScene::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_TransPortChangeScene* C2S_TransPortChangeScene::default_instance_ = nullptr;

C2S_TransPortChangeScene* C2S_TransPortChangeScene::New() const {
  return new C2S_TransPortChangeScene;
}

void C2S_TransPortChangeScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    transport_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_TransPortChangeScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_transport_id;
        break;
      }

      // required sint32 transport_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transport_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &transport_id_)));
          set_has_transport_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_TransPortChangeScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required sint32 transport_id = 2;
  if (has_transport_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->transport_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_TransPortChangeScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required sint32 transport_id = 2;
  if (has_transport_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->transport_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_TransPortChangeScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required sint32 transport_id = 2;
    if (has_transport_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->transport_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_TransPortChangeScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_TransPortChangeScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_TransPortChangeScene*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_TransPortChangeScene::MergeFrom(const C2S_TransPortChangeScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_transport_id()) {
      set_transport_id(from.transport_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_TransPortChangeScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_TransPortChangeScene::CopyFrom(const C2S_TransPortChangeScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_TransPortChangeScene::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C2S_TransPortChangeScene::Swap(C2S_TransPortChangeScene* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(transport_id_, other->transport_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_TransPortChangeScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_TransPortChangeScene_descriptor_;
  metadata.reflection = C2S_TransPortChangeScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_TransPortChangeScene::kRetFieldNumber;
const int S2C_TransPortChangeScene::kRoleIndexFieldNumber;
const int S2C_TransPortChangeScene::kTransportIdFieldNumber;
#endif  // !_MSC_VER

S2C_TransPortChangeScene::S2C_TransPortChangeScene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_TransPortChangeScene::InitAsDefaultInstance() {
}

S2C_TransPortChangeScene::S2C_TransPortChangeScene(const S2C_TransPortChangeScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_TransPortChangeScene::SharedCtor() {
  _cached_size_ = 0;
  ret_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_index_ = GOOGLE_LONGLONG(0);
  transport_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_TransPortChangeScene::~S2C_TransPortChangeScene() {
  SharedDtor();
}

void S2C_TransPortChangeScene::SharedDtor() {
  if (ret_ != &::google::protobuf::internal::kEmptyString) {
    delete ret_;
  }
  if (this != default_instance_) {
  }
}

void S2C_TransPortChangeScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_TransPortChangeScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_TransPortChangeScene_descriptor_;
}

const S2C_TransPortChangeScene& S2C_TransPortChangeScene::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_TransPortChangeScene* S2C_TransPortChangeScene::default_instance_ = nullptr;

S2C_TransPortChangeScene* S2C_TransPortChangeScene::New() const {
  return new S2C_TransPortChangeScene;
}

void S2C_TransPortChangeScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret()) {
      if (ret_ != &::google::protobuf::internal::kEmptyString) {
        ret_->clear();
      }
    }
    role_index_ = GOOGLE_LONGLONG(0);
    transport_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_TransPortChangeScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_index;
        break;
      }

      // required int64 role_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_transport_id;
        break;
      }

      // required sint32 transport_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transport_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &transport_id_)));
          set_has_transport_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_TransPortChangeScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->ret(), output);
  }

  // required int64 role_index = 2;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->role_index(), output);
  }

  // required sint32 transport_id = 3;
  if (has_transport_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->transport_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_TransPortChangeScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes ret = 1;
  if (has_ret()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ret(), target);
  }

  // required int64 role_index = 2;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->role_index(), target);
  }

  // required sint32 transport_id = 3;
  if (has_transport_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->transport_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_TransPortChangeScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ret());
    }

    // required int64 role_index = 2;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required sint32 transport_id = 3;
    if (has_transport_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->transport_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_TransPortChangeScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_TransPortChangeScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_TransPortChangeScene*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_TransPortChangeScene::MergeFrom(const S2C_TransPortChangeScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_transport_id()) {
      set_transport_id(from.transport_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_TransPortChangeScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_TransPortChangeScene::CopyFrom(const S2C_TransPortChangeScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_TransPortChangeScene::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2C_TransPortChangeScene::Swap(S2C_TransPortChangeScene* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(role_index_, other->role_index_);
    std::swap(transport_id_, other->transport_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_TransPortChangeScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_TransPortChangeScene_descriptor_;
  metadata.reflection = S2C_TransPortChangeScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_NPC_ChangeScene::kRoleIndexFieldNumber;
const int C2S_NPC_ChangeScene::kNpcIdFieldNumber;
const int C2S_NPC_ChangeScene::kSceneTypeFieldNumber;
const int C2S_NPC_ChangeScene::kTransInfoIdFieldNumber;
#endif  // !_MSC_VER

C2S_NPC_ChangeScene::C2S_NPC_ChangeScene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_NPC_ChangeScene::InitAsDefaultInstance() {
}

C2S_NPC_ChangeScene::C2S_NPC_ChangeScene(const C2S_NPC_ChangeScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_NPC_ChangeScene::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  npc_id_ = 0;
  scene_type_ = 0;
  trans_info_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_NPC_ChangeScene::~C2S_NPC_ChangeScene() {
  SharedDtor();
}

void C2S_NPC_ChangeScene::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_NPC_ChangeScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_NPC_ChangeScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_NPC_ChangeScene_descriptor_;
}

const C2S_NPC_ChangeScene& C2S_NPC_ChangeScene::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_NPC_ChangeScene* C2S_NPC_ChangeScene::default_instance_ = nullptr;

C2S_NPC_ChangeScene* C2S_NPC_ChangeScene::New() const {
  return new C2S_NPC_ChangeScene;
}

void C2S_NPC_ChangeScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    npc_id_ = 0;
    scene_type_ = 0;
    trans_info_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_NPC_ChangeScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_npc_id;
        break;
      }

      // required sint32 npc_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npc_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &npc_id_)));
          set_has_npc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_scene_type;
        break;
      }

      // required sint32 scene_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &scene_type_)));
          set_has_scene_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_trans_info_id;
        break;
      }

      // required sint32 trans_info_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trans_info_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &trans_info_id_)));
          set_has_trans_info_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_NPC_ChangeScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required sint32 npc_id = 2;
  if (has_npc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->npc_id(), output);
  }

  // required sint32 scene_type = 3;
  if (has_scene_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->scene_type(), output);
  }

  // required sint32 trans_info_id = 4;
  if (has_trans_info_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->trans_info_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_NPC_ChangeScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required sint32 npc_id = 2;
  if (has_npc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->npc_id(), target);
  }

  // required sint32 scene_type = 3;
  if (has_scene_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->scene_type(), target);
  }

  // required sint32 trans_info_id = 4;
  if (has_trans_info_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->trans_info_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_NPC_ChangeScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required sint32 npc_id = 2;
    if (has_npc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->npc_id());
    }

    // required sint32 scene_type = 3;
    if (has_scene_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->scene_type());
    }

    // required sint32 trans_info_id = 4;
    if (has_trans_info_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->trans_info_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_NPC_ChangeScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_NPC_ChangeScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_NPC_ChangeScene*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_NPC_ChangeScene::MergeFrom(const C2S_NPC_ChangeScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_npc_id()) {
      set_npc_id(from.npc_id());
    }
    if (from.has_scene_type()) {
      set_scene_type(from.scene_type());
    }
    if (from.has_trans_info_id()) {
      set_trans_info_id(from.trans_info_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_NPC_ChangeScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_NPC_ChangeScene::CopyFrom(const C2S_NPC_ChangeScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_NPC_ChangeScene::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void C2S_NPC_ChangeScene::Swap(C2S_NPC_ChangeScene* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(npc_id_, other->npc_id_);
    std::swap(scene_type_, other->scene_type_);
    std::swap(trans_info_id_, other->trans_info_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_NPC_ChangeScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_NPC_ChangeScene_descriptor_;
  metadata.reflection = C2S_NPC_ChangeScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_NPC_ChangeScene::kRetFieldNumber;
const int S2C_NPC_ChangeScene::kRoleIndexFieldNumber;
const int S2C_NPC_ChangeScene::kNpcIdFieldNumber;
const int S2C_NPC_ChangeScene::kSceneTypeFieldNumber;
#endif  // !_MSC_VER

S2C_NPC_ChangeScene::S2C_NPC_ChangeScene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_NPC_ChangeScene::InitAsDefaultInstance() {
}

S2C_NPC_ChangeScene::S2C_NPC_ChangeScene(const S2C_NPC_ChangeScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_NPC_ChangeScene::SharedCtor() {
  _cached_size_ = 0;
  ret_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_index_ = GOOGLE_LONGLONG(0);
  npc_id_ = 0;
  scene_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_NPC_ChangeScene::~S2C_NPC_ChangeScene() {
  SharedDtor();
}

void S2C_NPC_ChangeScene::SharedDtor() {
  if (ret_ != &::google::protobuf::internal::kEmptyString) {
    delete ret_;
  }
  if (this != default_instance_) {
  }
}

void S2C_NPC_ChangeScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_NPC_ChangeScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_NPC_ChangeScene_descriptor_;
}

const S2C_NPC_ChangeScene& S2C_NPC_ChangeScene::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_NPC_ChangeScene* S2C_NPC_ChangeScene::default_instance_ = nullptr;

S2C_NPC_ChangeScene* S2C_NPC_ChangeScene::New() const {
  return new S2C_NPC_ChangeScene;
}

void S2C_NPC_ChangeScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret()) {
      if (ret_ != &::google::protobuf::internal::kEmptyString) {
        ret_->clear();
      }
    }
    role_index_ = GOOGLE_LONGLONG(0);
    npc_id_ = 0;
    scene_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_NPC_ChangeScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_index;
        break;
      }

      // required int64 role_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_npc_id;
        break;
      }

      // required sint32 npc_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npc_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &npc_id_)));
          set_has_npc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_scene_type;
        break;
      }

      // required sint32 scene_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &scene_type_)));
          set_has_scene_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_NPC_ChangeScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->ret(), output);
  }

  // required int64 role_index = 2;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->role_index(), output);
  }

  // required sint32 npc_id = 3;
  if (has_npc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->npc_id(), output);
  }

  // required sint32 scene_type = 4;
  if (has_scene_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->scene_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_NPC_ChangeScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes ret = 1;
  if (has_ret()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ret(), target);
  }

  // required int64 role_index = 2;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->role_index(), target);
  }

  // required sint32 npc_id = 3;
  if (has_npc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->npc_id(), target);
  }

  // required sint32 scene_type = 4;
  if (has_scene_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->scene_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_NPC_ChangeScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ret());
    }

    // required int64 role_index = 2;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required sint32 npc_id = 3;
    if (has_npc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->npc_id());
    }

    // required sint32 scene_type = 4;
    if (has_scene_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->scene_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_NPC_ChangeScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_NPC_ChangeScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_NPC_ChangeScene*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_NPC_ChangeScene::MergeFrom(const S2C_NPC_ChangeScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_npc_id()) {
      set_npc_id(from.npc_id());
    }
    if (from.has_scene_type()) {
      set_scene_type(from.scene_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_NPC_ChangeScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_NPC_ChangeScene::CopyFrom(const S2C_NPC_ChangeScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_NPC_ChangeScene::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void S2C_NPC_ChangeScene::Swap(S2C_NPC_ChangeScene* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(role_index_, other->role_index_);
    std::swap(npc_id_, other->npc_id_);
    std::swap(scene_type_, other->scene_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_NPC_ChangeScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_NPC_ChangeScene_descriptor_;
  metadata.reflection = S2C_NPC_ChangeScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Qiecuo_Battle::kRoleIndexFieldNumber;
const int C2S_Qiecuo_Battle::kTarRoleIndexFieldNumber;
const int C2S_Qiecuo_Battle::kSceneInstanceIdFieldNumber;
#endif  // !_MSC_VER

C2S_Qiecuo_Battle::C2S_Qiecuo_Battle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Qiecuo_Battle::InitAsDefaultInstance() {
}

C2S_Qiecuo_Battle::C2S_Qiecuo_Battle(const C2S_Qiecuo_Battle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Qiecuo_Battle::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  tar_role_index_ = GOOGLE_LONGLONG(0);
  scene_instance_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Qiecuo_Battle::~C2S_Qiecuo_Battle() {
  SharedDtor();
}

void C2S_Qiecuo_Battle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_Qiecuo_Battle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Qiecuo_Battle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Qiecuo_Battle_descriptor_;
}

const C2S_Qiecuo_Battle& C2S_Qiecuo_Battle::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_Qiecuo_Battle* C2S_Qiecuo_Battle::default_instance_ = nullptr;

C2S_Qiecuo_Battle* C2S_Qiecuo_Battle::New() const {
  return new C2S_Qiecuo_Battle;
}

void C2S_Qiecuo_Battle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    tar_role_index_ = GOOGLE_LONGLONG(0);
    scene_instance_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Qiecuo_Battle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tar_role_index;
        break;
      }

      // required int64 tar_role_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tar_role_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tar_role_index_)));
          set_has_tar_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_scene_instance_id;
        break;
      }

      // required int64 scene_instance_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &scene_instance_id_)));
          set_has_scene_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Qiecuo_Battle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required int64 tar_role_index = 2;
  if (has_tar_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->tar_role_index(), output);
  }

  // required int64 scene_instance_id = 3;
  if (has_scene_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->scene_instance_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Qiecuo_Battle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required int64 tar_role_index = 2;
  if (has_tar_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->tar_role_index(), target);
  }

  // required int64 scene_instance_id = 3;
  if (has_scene_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->scene_instance_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Qiecuo_Battle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required int64 tar_role_index = 2;
    if (has_tar_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tar_role_index());
    }

    // required int64 scene_instance_id = 3;
    if (has_scene_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->scene_instance_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Qiecuo_Battle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Qiecuo_Battle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Qiecuo_Battle*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Qiecuo_Battle::MergeFrom(const C2S_Qiecuo_Battle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_tar_role_index()) {
      set_tar_role_index(from.tar_role_index());
    }
    if (from.has_scene_instance_id()) {
      set_scene_instance_id(from.scene_instance_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Qiecuo_Battle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Qiecuo_Battle::CopyFrom(const C2S_Qiecuo_Battle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Qiecuo_Battle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void C2S_Qiecuo_Battle::Swap(C2S_Qiecuo_Battle* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(tar_role_index_, other->tar_role_index_);
    std::swap(scene_instance_id_, other->scene_instance_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Qiecuo_Battle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Qiecuo_Battle_descriptor_;
  metadata.reflection = C2S_Qiecuo_Battle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Qiecuo_Battle_Refuse::kSrcRoleIndexFieldNumber;
const int S2C_Qiecuo_Battle_Refuse::kTarRoleIndexFieldNumber;
#endif  // !_MSC_VER

S2C_Qiecuo_Battle_Refuse::S2C_Qiecuo_Battle_Refuse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Qiecuo_Battle_Refuse::InitAsDefaultInstance() {
}

S2C_Qiecuo_Battle_Refuse::S2C_Qiecuo_Battle_Refuse(const S2C_Qiecuo_Battle_Refuse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Qiecuo_Battle_Refuse::SharedCtor() {
  _cached_size_ = 0;
  src_role_index_ = GOOGLE_LONGLONG(0);
  tar_role_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Qiecuo_Battle_Refuse::~S2C_Qiecuo_Battle_Refuse() {
  SharedDtor();
}

void S2C_Qiecuo_Battle_Refuse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2C_Qiecuo_Battle_Refuse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Qiecuo_Battle_Refuse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Qiecuo_Battle_Refuse_descriptor_;
}

const S2C_Qiecuo_Battle_Refuse& S2C_Qiecuo_Battle_Refuse::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Qiecuo_Battle_Refuse* S2C_Qiecuo_Battle_Refuse::default_instance_ = nullptr;

S2C_Qiecuo_Battle_Refuse* S2C_Qiecuo_Battle_Refuse::New() const {
  return new S2C_Qiecuo_Battle_Refuse;
}

void S2C_Qiecuo_Battle_Refuse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    src_role_index_ = GOOGLE_LONGLONG(0);
    tar_role_index_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Qiecuo_Battle_Refuse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 src_role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &src_role_index_)));
          set_has_src_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tar_role_index;
        break;
      }

      // required int64 tar_role_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tar_role_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tar_role_index_)));
          set_has_tar_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Qiecuo_Battle_Refuse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 src_role_index = 1;
  if (has_src_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->src_role_index(), output);
  }

  // required int64 tar_role_index = 2;
  if (has_tar_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->tar_role_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Qiecuo_Battle_Refuse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 src_role_index = 1;
  if (has_src_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->src_role_index(), target);
  }

  // required int64 tar_role_index = 2;
  if (has_tar_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->tar_role_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Qiecuo_Battle_Refuse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 src_role_index = 1;
    if (has_src_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->src_role_index());
    }

    // required int64 tar_role_index = 2;
    if (has_tar_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tar_role_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Qiecuo_Battle_Refuse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Qiecuo_Battle_Refuse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Qiecuo_Battle_Refuse*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Qiecuo_Battle_Refuse::MergeFrom(const S2C_Qiecuo_Battle_Refuse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_role_index()) {
      set_src_role_index(from.src_role_index());
    }
    if (from.has_tar_role_index()) {
      set_tar_role_index(from.tar_role_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Qiecuo_Battle_Refuse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Qiecuo_Battle_Refuse::CopyFrom(const S2C_Qiecuo_Battle_Refuse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Qiecuo_Battle_Refuse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2C_Qiecuo_Battle_Refuse::Swap(S2C_Qiecuo_Battle_Refuse* other) {
  if (other != this) {
    std::swap(src_role_index_, other->src_role_index_);
    std::swap(tar_role_index_, other->tar_role_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Qiecuo_Battle_Refuse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Qiecuo_Battle_Refuse_descriptor_;
  metadata.reflection = S2C_Qiecuo_Battle_Refuse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Qiecuo_Battle::kSrcRoleIndexFieldNumber;
const int S2C_Qiecuo_Battle::kTarRoleIndexFieldNumber;
const int S2C_Qiecuo_Battle::kSceneInstanceIdFieldNumber;
const int S2C_Qiecuo_Battle::kNewBattleSceneIdFieldNumber;
const int S2C_Qiecuo_Battle::kBattleTeamIdFieldNumber;
const int S2C_Qiecuo_Battle::kBattlePosIdFieldNumber;
const int S2C_Qiecuo_Battle::kBattleIndexFieldNumber;
#endif  // !_MSC_VER

S2C_Qiecuo_Battle::S2C_Qiecuo_Battle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Qiecuo_Battle::InitAsDefaultInstance() {
}

S2C_Qiecuo_Battle::S2C_Qiecuo_Battle(const S2C_Qiecuo_Battle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Qiecuo_Battle::SharedCtor() {
  _cached_size_ = 0;
  src_role_index_ = GOOGLE_LONGLONG(0);
  tar_role_index_ = GOOGLE_LONGLONG(0);
  scene_instance_id_ = GOOGLE_LONGLONG(0);
  new_battle_scene_id_ = 0;
  battle_team_id_ = 0;
  battle_pos_id_ = 0;
  battle_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Qiecuo_Battle::~S2C_Qiecuo_Battle() {
  SharedDtor();
}

void S2C_Qiecuo_Battle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2C_Qiecuo_Battle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Qiecuo_Battle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Qiecuo_Battle_descriptor_;
}

const S2C_Qiecuo_Battle& S2C_Qiecuo_Battle::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Qiecuo_Battle* S2C_Qiecuo_Battle::default_instance_ = nullptr;

S2C_Qiecuo_Battle* S2C_Qiecuo_Battle::New() const {
  return new S2C_Qiecuo_Battle;
}

void S2C_Qiecuo_Battle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    src_role_index_ = GOOGLE_LONGLONG(0);
    tar_role_index_ = GOOGLE_LONGLONG(0);
    scene_instance_id_ = GOOGLE_LONGLONG(0);
    new_battle_scene_id_ = 0;
    battle_team_id_ = 0;
    battle_pos_id_ = 0;
    battle_index_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Qiecuo_Battle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 src_role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &src_role_index_)));
          set_has_src_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tar_role_index;
        break;
      }

      // required int64 tar_role_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tar_role_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tar_role_index_)));
          set_has_tar_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_scene_instance_id;
        break;
      }

      // required int64 scene_instance_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &scene_instance_id_)));
          set_has_scene_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_new_battle_scene_id;
        break;
      }

      // required float new_battle_scene_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_new_battle_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &new_battle_scene_id_)));
          set_has_new_battle_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_battle_team_id;
        break;
      }

      // required sint32 battle_team_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &battle_team_id_)));
          set_has_battle_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_battle_pos_id;
        break;
      }

      // required sint32 battle_pos_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_pos_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &battle_pos_id_)));
          set_has_battle_pos_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_battle_index;
        break;
      }

      // required int64 battle_index = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &battle_index_)));
          set_has_battle_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Qiecuo_Battle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 src_role_index = 1;
  if (has_src_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->src_role_index(), output);
  }

  // required int64 tar_role_index = 2;
  if (has_tar_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->tar_role_index(), output);
  }

  // required int64 scene_instance_id = 3;
  if (has_scene_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->scene_instance_id(), output);
  }

  // required float new_battle_scene_id = 6;
  if (has_new_battle_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->new_battle_scene_id(), output);
  }

  // required sint32 battle_team_id = 7;
  if (has_battle_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->battle_team_id(), output);
  }

  // required sint32 battle_pos_id = 8;
  if (has_battle_pos_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->battle_pos_id(), output);
  }

  // required int64 battle_index = 9;
  if (has_battle_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->battle_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Qiecuo_Battle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 src_role_index = 1;
  if (has_src_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->src_role_index(), target);
  }

  // required int64 tar_role_index = 2;
  if (has_tar_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->tar_role_index(), target);
  }

  // required int64 scene_instance_id = 3;
  if (has_scene_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->scene_instance_id(), target);
  }

  // required float new_battle_scene_id = 6;
  if (has_new_battle_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->new_battle_scene_id(), target);
  }

  // required sint32 battle_team_id = 7;
  if (has_battle_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->battle_team_id(), target);
  }

  // required sint32 battle_pos_id = 8;
  if (has_battle_pos_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->battle_pos_id(), target);
  }

  // required int64 battle_index = 9;
  if (has_battle_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->battle_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Qiecuo_Battle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 src_role_index = 1;
    if (has_src_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->src_role_index());
    }

    // required int64 tar_role_index = 2;
    if (has_tar_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tar_role_index());
    }

    // required int64 scene_instance_id = 3;
    if (has_scene_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->scene_instance_id());
    }

    // required float new_battle_scene_id = 6;
    if (has_new_battle_scene_id()) {
      total_size += 1 + 4;
    }

    // required sint32 battle_team_id = 7;
    if (has_battle_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->battle_team_id());
    }

    // required sint32 battle_pos_id = 8;
    if (has_battle_pos_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->battle_pos_id());
    }

    // required int64 battle_index = 9;
    if (has_battle_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->battle_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Qiecuo_Battle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Qiecuo_Battle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Qiecuo_Battle*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Qiecuo_Battle::MergeFrom(const S2C_Qiecuo_Battle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_role_index()) {
      set_src_role_index(from.src_role_index());
    }
    if (from.has_tar_role_index()) {
      set_tar_role_index(from.tar_role_index());
    }
    if (from.has_scene_instance_id()) {
      set_scene_instance_id(from.scene_instance_id());
    }
    if (from.has_new_battle_scene_id()) {
      set_new_battle_scene_id(from.new_battle_scene_id());
    }
    if (from.has_battle_team_id()) {
      set_battle_team_id(from.battle_team_id());
    }
    if (from.has_battle_pos_id()) {
      set_battle_pos_id(from.battle_pos_id());
    }
    if (from.has_battle_index()) {
      set_battle_index(from.battle_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Qiecuo_Battle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Qiecuo_Battle::CopyFrom(const S2C_Qiecuo_Battle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Qiecuo_Battle::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void S2C_Qiecuo_Battle::Swap(S2C_Qiecuo_Battle* other) {
  if (other != this) {
    std::swap(src_role_index_, other->src_role_index_);
    std::swap(tar_role_index_, other->tar_role_index_);
    std::swap(scene_instance_id_, other->scene_instance_id_);
    std::swap(new_battle_scene_id_, other->new_battle_scene_id_);
    std::swap(battle_team_id_, other->battle_team_id_);
    std::swap(battle_pos_id_, other->battle_pos_id_);
    std::swap(battle_index_, other->battle_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Qiecuo_Battle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Qiecuo_Battle_descriptor_;
  metadata.reflection = S2C_Qiecuo_Battle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Qiecuo_Confirm_Battle::kSrcRoleIndexFieldNumber;
const int S2C_Qiecuo_Confirm_Battle::kTarRoleIndexFieldNumber;
#endif  // !_MSC_VER

S2C_Qiecuo_Confirm_Battle::S2C_Qiecuo_Confirm_Battle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Qiecuo_Confirm_Battle::InitAsDefaultInstance() {
}

S2C_Qiecuo_Confirm_Battle::S2C_Qiecuo_Confirm_Battle(const S2C_Qiecuo_Confirm_Battle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Qiecuo_Confirm_Battle::SharedCtor() {
  _cached_size_ = 0;
  src_role_index_ = GOOGLE_LONGLONG(0);
  tar_role_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Qiecuo_Confirm_Battle::~S2C_Qiecuo_Confirm_Battle() {
  SharedDtor();
}

void S2C_Qiecuo_Confirm_Battle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2C_Qiecuo_Confirm_Battle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Qiecuo_Confirm_Battle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Qiecuo_Confirm_Battle_descriptor_;
}

const S2C_Qiecuo_Confirm_Battle& S2C_Qiecuo_Confirm_Battle::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Qiecuo_Confirm_Battle* S2C_Qiecuo_Confirm_Battle::default_instance_ = nullptr;

S2C_Qiecuo_Confirm_Battle* S2C_Qiecuo_Confirm_Battle::New() const {
  return new S2C_Qiecuo_Confirm_Battle;
}

void S2C_Qiecuo_Confirm_Battle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    src_role_index_ = GOOGLE_LONGLONG(0);
    tar_role_index_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Qiecuo_Confirm_Battle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 src_role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &src_role_index_)));
          set_has_src_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tar_role_index;
        break;
      }

      // required int64 tar_role_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tar_role_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tar_role_index_)));
          set_has_tar_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Qiecuo_Confirm_Battle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 src_role_index = 1;
  if (has_src_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->src_role_index(), output);
  }

  // required int64 tar_role_index = 2;
  if (has_tar_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->tar_role_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Qiecuo_Confirm_Battle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 src_role_index = 1;
  if (has_src_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->src_role_index(), target);
  }

  // required int64 tar_role_index = 2;
  if (has_tar_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->tar_role_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Qiecuo_Confirm_Battle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 src_role_index = 1;
    if (has_src_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->src_role_index());
    }

    // required int64 tar_role_index = 2;
    if (has_tar_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tar_role_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Qiecuo_Confirm_Battle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Qiecuo_Confirm_Battle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Qiecuo_Confirm_Battle*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Qiecuo_Confirm_Battle::MergeFrom(const S2C_Qiecuo_Confirm_Battle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_role_index()) {
      set_src_role_index(from.src_role_index());
    }
    if (from.has_tar_role_index()) {
      set_tar_role_index(from.tar_role_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Qiecuo_Confirm_Battle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Qiecuo_Confirm_Battle::CopyFrom(const S2C_Qiecuo_Confirm_Battle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Qiecuo_Confirm_Battle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2C_Qiecuo_Confirm_Battle::Swap(S2C_Qiecuo_Confirm_Battle* other) {
  if (other != this) {
    std::swap(src_role_index_, other->src_role_index_);
    std::swap(tar_role_index_, other->tar_role_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Qiecuo_Confirm_Battle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Qiecuo_Confirm_Battle_descriptor_;
  metadata.reflection = S2C_Qiecuo_Confirm_Battle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Qiecuo_Confirm_Battle::kRoleIndexFieldNumber;
const int C2S_Qiecuo_Confirm_Battle::kSrcRoleIndexFieldNumber;
const int C2S_Qiecuo_Confirm_Battle::kAgreeFieldNumber;
#endif  // !_MSC_VER

C2S_Qiecuo_Confirm_Battle::C2S_Qiecuo_Confirm_Battle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Qiecuo_Confirm_Battle::InitAsDefaultInstance() {
}

C2S_Qiecuo_Confirm_Battle::C2S_Qiecuo_Confirm_Battle(const C2S_Qiecuo_Confirm_Battle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Qiecuo_Confirm_Battle::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  src_role_index_ = GOOGLE_LONGLONG(0);
  agree_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Qiecuo_Confirm_Battle::~C2S_Qiecuo_Confirm_Battle() {
  SharedDtor();
}

void C2S_Qiecuo_Confirm_Battle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_Qiecuo_Confirm_Battle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Qiecuo_Confirm_Battle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Qiecuo_Confirm_Battle_descriptor_;
}

const C2S_Qiecuo_Confirm_Battle& C2S_Qiecuo_Confirm_Battle::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_Qiecuo_Confirm_Battle* C2S_Qiecuo_Confirm_Battle::default_instance_ = nullptr;

C2S_Qiecuo_Confirm_Battle* C2S_Qiecuo_Confirm_Battle::New() const {
  return new C2S_Qiecuo_Confirm_Battle;
}

void C2S_Qiecuo_Confirm_Battle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    src_role_index_ = GOOGLE_LONGLONG(0);
    agree_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Qiecuo_Confirm_Battle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_src_role_index;
        break;
      }

      // required int64 src_role_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_role_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &src_role_index_)));
          set_has_src_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_agree;
        break;
      }

      // required bool agree = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &agree_)));
          set_has_agree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Qiecuo_Confirm_Battle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required int64 src_role_index = 2;
  if (has_src_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->src_role_index(), output);
  }

  // required bool agree = 3;
  if (has_agree()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->agree(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Qiecuo_Confirm_Battle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required int64 src_role_index = 2;
  if (has_src_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->src_role_index(), target);
  }

  // required bool agree = 3;
  if (has_agree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->agree(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Qiecuo_Confirm_Battle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required int64 src_role_index = 2;
    if (has_src_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->src_role_index());
    }

    // required bool agree = 3;
    if (has_agree()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Qiecuo_Confirm_Battle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Qiecuo_Confirm_Battle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Qiecuo_Confirm_Battle*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Qiecuo_Confirm_Battle::MergeFrom(const C2S_Qiecuo_Confirm_Battle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_src_role_index()) {
      set_src_role_index(from.src_role_index());
    }
    if (from.has_agree()) {
      set_agree(from.agree());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Qiecuo_Confirm_Battle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Qiecuo_Confirm_Battle::CopyFrom(const C2S_Qiecuo_Confirm_Battle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Qiecuo_Confirm_Battle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void C2S_Qiecuo_Confirm_Battle::Swap(C2S_Qiecuo_Confirm_Battle* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(src_role_index_, other->src_role_index_);
    std::swap(agree_, other->agree_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Qiecuo_Confirm_Battle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Qiecuo_Confirm_Battle_descriptor_;
  metadata.reflection = C2S_Qiecuo_Confirm_Battle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Battle_Info::kRoleIndexFieldNumber;
const int C2S_Battle_Info::kBattleIndexFieldNumber;
#endif  // !_MSC_VER

C2S_Battle_Info::C2S_Battle_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Battle_Info::InitAsDefaultInstance() {
}

C2S_Battle_Info::C2S_Battle_Info(const C2S_Battle_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Battle_Info::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  battle_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Battle_Info::~C2S_Battle_Info() {
  SharedDtor();
}

void C2S_Battle_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_Battle_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Battle_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Battle_Info_descriptor_;
}

const C2S_Battle_Info& C2S_Battle_Info::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_Battle_Info* C2S_Battle_Info::default_instance_ = nullptr;

C2S_Battle_Info* C2S_Battle_Info::New() const {
  return new C2S_Battle_Info;
}

void C2S_Battle_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    battle_index_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Battle_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battle_index;
        break;
      }

      // required int64 battle_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &battle_index_)));
          set_has_battle_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Battle_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required int64 battle_index = 2;
  if (has_battle_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->battle_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Battle_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required int64 battle_index = 2;
  if (has_battle_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->battle_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Battle_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required int64 battle_index = 2;
    if (has_battle_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->battle_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Battle_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Battle_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Battle_Info*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Battle_Info::MergeFrom(const C2S_Battle_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_battle_index()) {
      set_battle_index(from.battle_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Battle_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Battle_Info::CopyFrom(const C2S_Battle_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Battle_Info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C2S_Battle_Info::Swap(C2S_Battle_Info* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(battle_index_, other->battle_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Battle_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Battle_Info_descriptor_;
  metadata.reflection = C2S_Battle_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle_Role_Info::kRoleIndexFieldNumber;
const int Battle_Role_Info::kBattlePosIdFieldNumber;
const int Battle_Role_Info::kRoleTypeFieldNumber;
const int Battle_Role_Info::kRacialFieldNumber;
const int Battle_Role_Info::kNickNameFieldNumber;
const int Battle_Role_Info::kLevelFieldNumber;
#endif  // !_MSC_VER

Battle_Role_Info::Battle_Role_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle_Role_Info::InitAsDefaultInstance() {
}

Battle_Role_Info::Battle_Role_Info(const Battle_Role_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle_Role_Info::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  battle_pos_id_ = GOOGLE_LONGLONG(0);
  role_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  racial_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle_Role_Info::~Battle_Role_Info() {
  SharedDtor();
}

void Battle_Role_Info::SharedDtor() {
  if (role_type_ != &::google::protobuf::internal::kEmptyString) {
    delete role_type_;
  }
  if (racial_ != &::google::protobuf::internal::kEmptyString) {
    delete racial_;
  }
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (level_ != &::google::protobuf::internal::kEmptyString) {
    delete level_;
  }
  if (this != default_instance_) {
  }
}

void Battle_Role_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle_Role_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle_Role_Info_descriptor_;
}

const Battle_Role_Info& Battle_Role_Info::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

Battle_Role_Info* Battle_Role_Info::default_instance_ = nullptr;

Battle_Role_Info* Battle_Role_Info::New() const {
  return new Battle_Role_Info;
}

void Battle_Role_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    battle_pos_id_ = GOOGLE_LONGLONG(0);
    if (has_role_type()) {
      if (role_type_ != &::google::protobuf::internal::kEmptyString) {
        role_type_->clear();
      }
    }
    if (has_racial()) {
      if (racial_ != &::google::protobuf::internal::kEmptyString) {
        racial_->clear();
      }
    }
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
        nick_name_->clear();
      }
    }
    if (has_level()) {
      if (level_ != &::google::protobuf::internal::kEmptyString) {
        level_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle_Role_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battle_pos_id;
        break;
      }

      // required int64 battle_pos_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_pos_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &battle_pos_id_)));
          set_has_battle_pos_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role_type;
        break;
      }

      // required bytes role_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_role_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_racial;
        break;
      }

      // required bytes racial = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_racial:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_racial()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_nick_name;
        break;
      }

      // required bytes nick_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nick_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_level;
        break;
      }

      // required bytes level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_level:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_level()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle_Role_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required int64 battle_pos_id = 2;
  if (has_battle_pos_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->battle_pos_id(), output);
  }

  // required bytes role_type = 3;
  if (has_role_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->role_type(), output);
  }

  // required bytes racial = 4;
  if (has_racial()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->racial(), output);
  }

  // required bytes nick_name = 5;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->nick_name(), output);
  }

  // required bytes level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle_Role_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required int64 battle_pos_id = 2;
  if (has_battle_pos_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->battle_pos_id(), target);
  }

  // required bytes role_type = 3;
  if (has_role_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->role_type(), target);
  }

  // required bytes racial = 4;
  if (has_racial()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->racial(), target);
  }

  // required bytes nick_name = 5;
  if (has_nick_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->nick_name(), target);
  }

  // required bytes level = 6;
  if (has_level()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle_Role_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required int64 battle_pos_id = 2;
    if (has_battle_pos_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->battle_pos_id());
    }

    // required bytes role_type = 3;
    if (has_role_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->role_type());
    }

    // required bytes racial = 4;
    if (has_racial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->racial());
    }

    // required bytes nick_name = 5;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nick_name());
    }

    // required bytes level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle_Role_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle_Role_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle_Role_Info*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle_Role_Info::MergeFrom(const Battle_Role_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_battle_pos_id()) {
      set_battle_pos_id(from.battle_pos_id());
    }
    if (from.has_role_type()) {
      set_role_type(from.role_type());
    }
    if (from.has_racial()) {
      set_racial(from.racial());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle_Role_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle_Role_Info::CopyFrom(const Battle_Role_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle_Role_Info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void Battle_Role_Info::Swap(Battle_Role_Info* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(battle_pos_id_, other->battle_pos_id_);
    std::swap(role_type_, other->role_type_);
    std::swap(racial_, other->racial_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle_Role_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle_Role_Info_descriptor_;
  metadata.reflection = Battle_Role_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Battle_Info::kBattleIndexFieldNumber;
const int S2C_Battle_Info::kListBattleRoleInfosFieldNumber;
#endif  // !_MSC_VER

S2C_Battle_Info::S2C_Battle_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Battle_Info::InitAsDefaultInstance() {
}

S2C_Battle_Info::S2C_Battle_Info(const S2C_Battle_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Battle_Info::SharedCtor() {
  _cached_size_ = 0;
  battle_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Battle_Info::~S2C_Battle_Info() {
  SharedDtor();
}

void S2C_Battle_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2C_Battle_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Battle_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Battle_Info_descriptor_;
}

const S2C_Battle_Info& S2C_Battle_Info::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Battle_Info* S2C_Battle_Info::default_instance_ = nullptr;

S2C_Battle_Info* S2C_Battle_Info::New() const {
  return new S2C_Battle_Info;
}

void S2C_Battle_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battle_index_ = GOOGLE_LONGLONG(0);
  }
  list_battle_role_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Battle_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 battle_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &battle_index_)));
          set_has_battle_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list_battle_role_infos;
        break;
      }

      // repeated .Battle_Role_Info list_battle_role_infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_battle_role_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_battle_role_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list_battle_role_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Battle_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 battle_index = 1;
  if (has_battle_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->battle_index(), output);
  }

  // repeated .Battle_Role_Info list_battle_role_infos = 2;
  for (int i = 0; i < this->list_battle_role_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list_battle_role_infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Battle_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 battle_index = 1;
  if (has_battle_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->battle_index(), target);
  }

  // repeated .Battle_Role_Info list_battle_role_infos = 2;
  for (int i = 0; i < this->list_battle_role_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->list_battle_role_infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Battle_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 battle_index = 1;
    if (has_battle_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->battle_index());
    }

  }
  // repeated .Battle_Role_Info list_battle_role_infos = 2;
  total_size += 1 * this->list_battle_role_infos_size();
  for (int i = 0; i < this->list_battle_role_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_battle_role_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Battle_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Battle_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Battle_Info*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Battle_Info::MergeFrom(const S2C_Battle_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_battle_role_infos_.MergeFrom(from.list_battle_role_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battle_index()) {
      set_battle_index(from.battle_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Battle_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Battle_Info::CopyFrom(const S2C_Battle_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Battle_Info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < list_battle_role_infos_size(); i++) {
    if (!this->list_battle_role_infos(i).IsInitialized()) return false;
  }
  return true;
}

void S2C_Battle_Info::Swap(S2C_Battle_Info* other) {
  if (other != this) {
    std::swap(battle_index_, other->battle_index_);
    list_battle_role_infos_.Swap(&other->list_battle_role_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Battle_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Battle_Info_descriptor_;
  metadata.reflection = S2C_Battle_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Battle_Frame_Info::kBattleIndexFieldNumber;
const int C2S_Battle_Frame_Info::kBattleFrameIndexFieldNumber;
#endif  // !_MSC_VER

C2S_Battle_Frame_Info::C2S_Battle_Frame_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Battle_Frame_Info::InitAsDefaultInstance() {
}

C2S_Battle_Frame_Info::C2S_Battle_Frame_Info(const C2S_Battle_Frame_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Battle_Frame_Info::SharedCtor() {
  _cached_size_ = 0;
  battle_index_ = GOOGLE_LONGLONG(0);
  battle_frame_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Battle_Frame_Info::~C2S_Battle_Frame_Info() {
  SharedDtor();
}

void C2S_Battle_Frame_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_Battle_Frame_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Battle_Frame_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Battle_Frame_Info_descriptor_;
}

const C2S_Battle_Frame_Info& C2S_Battle_Frame_Info::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_Battle_Frame_Info* C2S_Battle_Frame_Info::default_instance_ = nullptr;

C2S_Battle_Frame_Info* C2S_Battle_Frame_Info::New() const {
  return new C2S_Battle_Frame_Info;
}

void C2S_Battle_Frame_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battle_index_ = GOOGLE_LONGLONG(0);
    battle_frame_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Battle_Frame_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 battle_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &battle_index_)));
          set_has_battle_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battle_frame_index;
        break;
      }

      // required sint32 battle_frame_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_frame_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &battle_frame_index_)));
          set_has_battle_frame_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Battle_Frame_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 battle_index = 1;
  if (has_battle_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->battle_index(), output);
  }

  // required sint32 battle_frame_index = 2;
  if (has_battle_frame_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->battle_frame_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Battle_Frame_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 battle_index = 1;
  if (has_battle_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->battle_index(), target);
  }

  // required sint32 battle_frame_index = 2;
  if (has_battle_frame_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->battle_frame_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Battle_Frame_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 battle_index = 1;
    if (has_battle_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->battle_index());
    }

    // required sint32 battle_frame_index = 2;
    if (has_battle_frame_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->battle_frame_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Battle_Frame_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Battle_Frame_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Battle_Frame_Info*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Battle_Frame_Info::MergeFrom(const C2S_Battle_Frame_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battle_index()) {
      set_battle_index(from.battle_index());
    }
    if (from.has_battle_frame_index()) {
      set_battle_frame_index(from.battle_frame_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Battle_Frame_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Battle_Frame_Info::CopyFrom(const C2S_Battle_Frame_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Battle_Frame_Info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C2S_Battle_Frame_Info::Swap(C2S_Battle_Frame_Info* other) {
  if (other != this) {
    std::swap(battle_index_, other->battle_index_);
    std::swap(battle_frame_index_, other->battle_frame_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Battle_Frame_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Battle_Frame_Info_descriptor_;
  metadata.reflection = C2S_Battle_Frame_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Battle_Frame_Info::kRoleIndexFieldNumber;
const int Battle_Frame_Info::kBattlePosIdFieldNumber;
const int Battle_Frame_Info::kRoleTypeFieldNumber;
const int Battle_Frame_Info::kRacialFieldNumber;
const int Battle_Frame_Info::kNickNameFieldNumber;
const int Battle_Frame_Info::kLevelFieldNumber;
#endif  // !_MSC_VER

Battle_Frame_Info::Battle_Frame_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Battle_Frame_Info::InitAsDefaultInstance() {
}

Battle_Frame_Info::Battle_Frame_Info(const Battle_Frame_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Battle_Frame_Info::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  battle_pos_id_ = GOOGLE_LONGLONG(0);
  role_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  racial_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Battle_Frame_Info::~Battle_Frame_Info() {
  SharedDtor();
}

void Battle_Frame_Info::SharedDtor() {
  if (role_type_ != &::google::protobuf::internal::kEmptyString) {
    delete role_type_;
  }
  if (racial_ != &::google::protobuf::internal::kEmptyString) {
    delete racial_;
  }
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (level_ != &::google::protobuf::internal::kEmptyString) {
    delete level_;
  }
  if (this != default_instance_) {
  }
}

void Battle_Frame_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Battle_Frame_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Battle_Frame_Info_descriptor_;
}

const Battle_Frame_Info& Battle_Frame_Info::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

Battle_Frame_Info* Battle_Frame_Info::default_instance_ = nullptr;

Battle_Frame_Info* Battle_Frame_Info::New() const {
  return new Battle_Frame_Info;
}

void Battle_Frame_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    battle_pos_id_ = GOOGLE_LONGLONG(0);
    if (has_role_type()) {
      if (role_type_ != &::google::protobuf::internal::kEmptyString) {
        role_type_->clear();
      }
    }
    if (has_racial()) {
      if (racial_ != &::google::protobuf::internal::kEmptyString) {
        racial_->clear();
      }
    }
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
        nick_name_->clear();
      }
    }
    if (has_level()) {
      if (level_ != &::google::protobuf::internal::kEmptyString) {
        level_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Battle_Frame_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battle_pos_id;
        break;
      }

      // required int64 battle_pos_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_pos_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &battle_pos_id_)));
          set_has_battle_pos_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role_type;
        break;
      }

      // required bytes role_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_role_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_racial;
        break;
      }

      // required bytes racial = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_racial:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_racial()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_nick_name;
        break;
      }

      // required bytes nick_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nick_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_level;
        break;
      }

      // required bytes level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_level:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_level()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Battle_Frame_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required int64 battle_pos_id = 2;
  if (has_battle_pos_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->battle_pos_id(), output);
  }

  // required bytes role_type = 3;
  if (has_role_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->role_type(), output);
  }

  // required bytes racial = 4;
  if (has_racial()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->racial(), output);
  }

  // required bytes nick_name = 5;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->nick_name(), output);
  }

  // required bytes level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Battle_Frame_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required int64 battle_pos_id = 2;
  if (has_battle_pos_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->battle_pos_id(), target);
  }

  // required bytes role_type = 3;
  if (has_role_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->role_type(), target);
  }

  // required bytes racial = 4;
  if (has_racial()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->racial(), target);
  }

  // required bytes nick_name = 5;
  if (has_nick_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->nick_name(), target);
  }

  // required bytes level = 6;
  if (has_level()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Battle_Frame_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required int64 battle_pos_id = 2;
    if (has_battle_pos_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->battle_pos_id());
    }

    // required bytes role_type = 3;
    if (has_role_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->role_type());
    }

    // required bytes racial = 4;
    if (has_racial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->racial());
    }

    // required bytes nick_name = 5;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nick_name());
    }

    // required bytes level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Battle_Frame_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Battle_Frame_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Battle_Frame_Info*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Battle_Frame_Info::MergeFrom(const Battle_Frame_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_battle_pos_id()) {
      set_battle_pos_id(from.battle_pos_id());
    }
    if (from.has_role_type()) {
      set_role_type(from.role_type());
    }
    if (from.has_racial()) {
      set_racial(from.racial());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Battle_Frame_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battle_Frame_Info::CopyFrom(const Battle_Frame_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battle_Frame_Info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void Battle_Frame_Info::Swap(Battle_Frame_Info* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(battle_pos_id_, other->battle_pos_id_);
    std::swap(role_type_, other->role_type_);
    std::swap(racial_, other->racial_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Battle_Frame_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Battle_Frame_Info_descriptor_;
  metadata.reflection = Battle_Frame_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Battle_Frame_Info::kBattleIndexFieldNumber;
const int S2C_Battle_Frame_Info::kBattleFrameIndexFieldNumber;
const int S2C_Battle_Frame_Info::kBattleFrameInfoFieldNumber;
#endif  // !_MSC_VER

S2C_Battle_Frame_Info::S2C_Battle_Frame_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Battle_Frame_Info::InitAsDefaultInstance() {
  battle_frame_info_ = const_cast< ::Battle_Frame_Info*>(&::Battle_Frame_Info::default_instance());
}

S2C_Battle_Frame_Info::S2C_Battle_Frame_Info(const S2C_Battle_Frame_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Battle_Frame_Info::SharedCtor() {
  _cached_size_ = 0;
  battle_index_ = GOOGLE_LONGLONG(0);
  battle_frame_index_ = 0;
  battle_frame_info_ = nullptr;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Battle_Frame_Info::~S2C_Battle_Frame_Info() {
  SharedDtor();
}

void S2C_Battle_Frame_Info::SharedDtor() {
  if (this != default_instance_) {
    delete battle_frame_info_;
  }
}

void S2C_Battle_Frame_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Battle_Frame_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Battle_Frame_Info_descriptor_;
}

const S2C_Battle_Frame_Info& S2C_Battle_Frame_Info::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Battle_Frame_Info* S2C_Battle_Frame_Info::default_instance_ = nullptr;

S2C_Battle_Frame_Info* S2C_Battle_Frame_Info::New() const {
  return new S2C_Battle_Frame_Info;
}

void S2C_Battle_Frame_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battle_index_ = GOOGLE_LONGLONG(0);
    battle_frame_index_ = 0;
    if (has_battle_frame_info()) {
      if (battle_frame_info_ != nullptr) battle_frame_info_->::Battle_Frame_Info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Battle_Frame_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 battle_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &battle_index_)));
          set_has_battle_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battle_frame_index;
        break;
      }

      // required sint32 battle_frame_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_frame_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &battle_frame_index_)));
          set_has_battle_frame_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_battle_frame_info;
        break;
      }

      // required .Battle_Frame_Info battle_frame_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_frame_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle_frame_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Battle_Frame_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 battle_index = 1;
  if (has_battle_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->battle_index(), output);
  }

  // required sint32 battle_frame_index = 2;
  if (has_battle_frame_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->battle_frame_index(), output);
  }

  // required .Battle_Frame_Info battle_frame_info = 3;
  if (has_battle_frame_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->battle_frame_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Battle_Frame_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 battle_index = 1;
  if (has_battle_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->battle_index(), target);
  }

  // required sint32 battle_frame_index = 2;
  if (has_battle_frame_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->battle_frame_index(), target);
  }

  // required .Battle_Frame_Info battle_frame_info = 3;
  if (has_battle_frame_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->battle_frame_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Battle_Frame_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 battle_index = 1;
    if (has_battle_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->battle_index());
    }

    // required sint32 battle_frame_index = 2;
    if (has_battle_frame_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->battle_frame_index());
    }

    // required .Battle_Frame_Info battle_frame_info = 3;
    if (has_battle_frame_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle_frame_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Battle_Frame_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Battle_Frame_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Battle_Frame_Info*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Battle_Frame_Info::MergeFrom(const S2C_Battle_Frame_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battle_index()) {
      set_battle_index(from.battle_index());
    }
    if (from.has_battle_frame_index()) {
      set_battle_frame_index(from.battle_frame_index());
    }
    if (from.has_battle_frame_info()) {
      mutable_battle_frame_info()->::Battle_Frame_Info::MergeFrom(from.battle_frame_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Battle_Frame_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Battle_Frame_Info::CopyFrom(const S2C_Battle_Frame_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Battle_Frame_Info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_battle_frame_info()) {
    if (!this->battle_frame_info().IsInitialized()) return false;
  }
  return true;
}

void S2C_Battle_Frame_Info::Swap(S2C_Battle_Frame_Info* other) {
  if (other != this) {
    std::swap(battle_index_, other->battle_index_);
    std::swap(battle_frame_index_, other->battle_frame_index_);
    std::swap(battle_frame_info_, other->battle_frame_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Battle_Frame_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Battle_Frame_Info_descriptor_;
  metadata.reflection = S2C_Battle_Frame_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Avatar_Goods_List::kListAvatarInfoFieldNumber;
#endif  // !_MSC_VER

S2C_Avatar_Goods_List::S2C_Avatar_Goods_List()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Avatar_Goods_List::InitAsDefaultInstance() {
}

S2C_Avatar_Goods_List::S2C_Avatar_Goods_List(const S2C_Avatar_Goods_List& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Avatar_Goods_List::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Avatar_Goods_List::~S2C_Avatar_Goods_List() {
  SharedDtor();
}

void S2C_Avatar_Goods_List::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2C_Avatar_Goods_List::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Avatar_Goods_List::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Avatar_Goods_List_descriptor_;
}

const S2C_Avatar_Goods_List& S2C_Avatar_Goods_List::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Avatar_Goods_List* S2C_Avatar_Goods_List::default_instance_ = nullptr;

S2C_Avatar_Goods_List* S2C_Avatar_Goods_List::New() const {
  return new S2C_Avatar_Goods_List;
}

void S2C_Avatar_Goods_List::Clear() {
  list_avatar_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Avatar_Goods_List::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GameShopAvatarInfo list_avatar_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_avatar_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_avatar_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list_avatar_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Avatar_Goods_List::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .GameShopAvatarInfo list_avatar_info = 1;
  for (int i = 0; i < this->list_avatar_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list_avatar_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Avatar_Goods_List::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GameShopAvatarInfo list_avatar_info = 1;
  for (int i = 0; i < this->list_avatar_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list_avatar_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Avatar_Goods_List::ByteSize() const {
  int total_size = 0;

  // repeated .GameShopAvatarInfo list_avatar_info = 1;
  total_size += 1 * this->list_avatar_info_size();
  for (int i = 0; i < this->list_avatar_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_avatar_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Avatar_Goods_List::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Avatar_Goods_List* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Avatar_Goods_List*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Avatar_Goods_List::MergeFrom(const S2C_Avatar_Goods_List& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_avatar_info_.MergeFrom(from.list_avatar_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Avatar_Goods_List::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Avatar_Goods_List::CopyFrom(const S2C_Avatar_Goods_List& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Avatar_Goods_List::IsInitialized() const {

  for (int i = 0; i < list_avatar_info_size(); i++) {
    if (!this->list_avatar_info(i).IsInitialized()) return false;
  }
  return true;
}

void S2C_Avatar_Goods_List::Swap(S2C_Avatar_Goods_List* other) {
  if (other != this) {
    list_avatar_info_.Swap(&other->list_avatar_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Avatar_Goods_List::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Avatar_Goods_List_descriptor_;
  metadata.reflection = S2C_Avatar_Goods_List_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Buy_Avatar_Goods::kListAvatarInfoFieldNumber;
#endif  // !_MSC_VER

C2S_Buy_Avatar_Goods::C2S_Buy_Avatar_Goods()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Buy_Avatar_Goods::InitAsDefaultInstance() {
  list_avatar_info_ = const_cast< ::GameShopAvatarInfo*>(&::GameShopAvatarInfo::default_instance());
}

C2S_Buy_Avatar_Goods::C2S_Buy_Avatar_Goods(const C2S_Buy_Avatar_Goods& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Buy_Avatar_Goods::SharedCtor() {
  _cached_size_ = 0;
  list_avatar_info_ = nullptr;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Buy_Avatar_Goods::~C2S_Buy_Avatar_Goods() {
  SharedDtor();
}

void C2S_Buy_Avatar_Goods::SharedDtor() {
  if (this != default_instance_) {
    delete list_avatar_info_;
  }
}

void C2S_Buy_Avatar_Goods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Buy_Avatar_Goods::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Buy_Avatar_Goods_descriptor_;
}

const C2S_Buy_Avatar_Goods& C2S_Buy_Avatar_Goods::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_Buy_Avatar_Goods* C2S_Buy_Avatar_Goods::default_instance_ = nullptr;

C2S_Buy_Avatar_Goods* C2S_Buy_Avatar_Goods::New() const {
  return new C2S_Buy_Avatar_Goods;
}

void C2S_Buy_Avatar_Goods::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_list_avatar_info()) {
      if (list_avatar_info_ != nullptr) list_avatar_info_->::GameShopAvatarInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Buy_Avatar_Goods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GameShopAvatarInfo list_avatar_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_list_avatar_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Buy_Avatar_Goods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GameShopAvatarInfo list_avatar_info = 1;
  if (has_list_avatar_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list_avatar_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Buy_Avatar_Goods::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .GameShopAvatarInfo list_avatar_info = 1;
  if (has_list_avatar_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list_avatar_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Buy_Avatar_Goods::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GameShopAvatarInfo list_avatar_info = 1;
    if (has_list_avatar_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list_avatar_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Buy_Avatar_Goods::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Buy_Avatar_Goods* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Buy_Avatar_Goods*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Buy_Avatar_Goods::MergeFrom(const C2S_Buy_Avatar_Goods& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_list_avatar_info()) {
      mutable_list_avatar_info()->::GameShopAvatarInfo::MergeFrom(from.list_avatar_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Buy_Avatar_Goods::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Buy_Avatar_Goods::CopyFrom(const C2S_Buy_Avatar_Goods& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Buy_Avatar_Goods::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_list_avatar_info()) {
    if (!this->list_avatar_info().IsInitialized()) return false;
  }
  return true;
}

void C2S_Buy_Avatar_Goods::Swap(C2S_Buy_Avatar_Goods* other) {
  if (other != this) {
    std::swap(list_avatar_info_, other->list_avatar_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Buy_Avatar_Goods::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Buy_Avatar_Goods_descriptor_;
  metadata.reflection = C2S_Buy_Avatar_Goods_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Buy_Avatar_Goods::kRetCodeFieldNumber;
const int S2C_Buy_Avatar_Goods::kListAvatarInfoFieldNumber;
#endif  // !_MSC_VER

S2C_Buy_Avatar_Goods::S2C_Buy_Avatar_Goods()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Buy_Avatar_Goods::InitAsDefaultInstance() {
  list_avatar_info_ = const_cast< ::GameShopAvatarInfo*>(&::GameShopAvatarInfo::default_instance());
}

S2C_Buy_Avatar_Goods::S2C_Buy_Avatar_Goods(const S2C_Buy_Avatar_Goods& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Buy_Avatar_Goods::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  list_avatar_info_ = nullptr;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Buy_Avatar_Goods::~S2C_Buy_Avatar_Goods() {
  SharedDtor();
}

void S2C_Buy_Avatar_Goods::SharedDtor() {
  if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
    delete ret_code_;
  }
  if (this != default_instance_) {
    delete list_avatar_info_;
  }
}

void S2C_Buy_Avatar_Goods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Buy_Avatar_Goods::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Buy_Avatar_Goods_descriptor_;
}

const S2C_Buy_Avatar_Goods& S2C_Buy_Avatar_Goods::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Buy_Avatar_Goods* S2C_Buy_Avatar_Goods::default_instance_ = nullptr;

S2C_Buy_Avatar_Goods* S2C_Buy_Avatar_Goods::New() const {
  return new S2C_Buy_Avatar_Goods;
}

void S2C_Buy_Avatar_Goods::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret_code()) {
      if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
        ret_code_->clear();
      }
    }
    if (has_list_avatar_info()) {
      if (list_avatar_info_ != nullptr) list_avatar_info_->::GameShopAvatarInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Buy_Avatar_Goods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ret_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list_avatar_info;
        break;
      }

      // required .GameShopAvatarInfo list_avatar_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_avatar_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_list_avatar_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Buy_Avatar_Goods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->ret_code(), output);
  }

  // required .GameShopAvatarInfo list_avatar_info = 2;
  if (has_list_avatar_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list_avatar_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Buy_Avatar_Goods::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes ret_code = 1;
  if (has_ret_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ret_code(), target);
  }

  // required .GameShopAvatarInfo list_avatar_info = 2;
  if (has_list_avatar_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->list_avatar_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Buy_Avatar_Goods::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ret_code());
    }

    // required .GameShopAvatarInfo list_avatar_info = 2;
    if (has_list_avatar_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list_avatar_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Buy_Avatar_Goods::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Buy_Avatar_Goods* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Buy_Avatar_Goods*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Buy_Avatar_Goods::MergeFrom(const S2C_Buy_Avatar_Goods& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_list_avatar_info()) {
      mutable_list_avatar_info()->::GameShopAvatarInfo::MergeFrom(from.list_avatar_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Buy_Avatar_Goods::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Buy_Avatar_Goods::CopyFrom(const S2C_Buy_Avatar_Goods& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Buy_Avatar_Goods::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_list_avatar_info()) {
    if (!this->list_avatar_info().IsInitialized()) return false;
  }
  return true;
}

void S2C_Buy_Avatar_Goods::Swap(S2C_Buy_Avatar_Goods* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(list_avatar_info_, other->list_avatar_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Buy_Avatar_Goods::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Buy_Avatar_Goods_descriptor_;
  metadata.reflection = S2C_Buy_Avatar_Goods_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Bag_Item::kRoleIndexFieldNumber;
#endif  // !_MSC_VER

C2S_Bag_Item::C2S_Bag_Item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Bag_Item::InitAsDefaultInstance() {
}

C2S_Bag_Item::C2S_Bag_Item(const C2S_Bag_Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Bag_Item::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Bag_Item::~C2S_Bag_Item() {
  SharedDtor();
}

void C2S_Bag_Item::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_Bag_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Bag_Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Bag_Item_descriptor_;
}

const C2S_Bag_Item& C2S_Bag_Item::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_Bag_Item* C2S_Bag_Item::default_instance_ = nullptr;

C2S_Bag_Item* C2S_Bag_Item::New() const {
  return new C2S_Bag_Item;
}

void C2S_Bag_Item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Bag_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Bag_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Bag_Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Bag_Item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Bag_Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Bag_Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Bag_Item*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Bag_Item::MergeFrom(const C2S_Bag_Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Bag_Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Bag_Item::CopyFrom(const C2S_Bag_Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Bag_Item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2S_Bag_Item::Swap(C2S_Bag_Item* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Bag_Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Bag_Item_descriptor_;
  metadata.reflection = C2S_Bag_Item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Sync_Role_Bag_Item::kGameCoinFieldNumber;
const int S2C_Sync_Role_Bag_Item::kGameDepositFieldNumber;
const int S2C_Sync_Role_Bag_Item::kGameBagFieldNumber;
#endif  // !_MSC_VER

S2C_Sync_Role_Bag_Item::S2C_Sync_Role_Bag_Item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Sync_Role_Bag_Item::InitAsDefaultInstance() {
  game_bag_ = const_cast< ::universal_data*>(&::universal_data::default_instance());
}

S2C_Sync_Role_Bag_Item::S2C_Sync_Role_Bag_Item(const S2C_Sync_Role_Bag_Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Sync_Role_Bag_Item::SharedCtor() {
  _cached_size_ = 0;
  game_coin_ = GOOGLE_LONGLONG(0);
  game_deposit_ = GOOGLE_LONGLONG(0);
  game_bag_ = nullptr;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Sync_Role_Bag_Item::~S2C_Sync_Role_Bag_Item() {
  SharedDtor();
}

void S2C_Sync_Role_Bag_Item::SharedDtor() {
  if (this != default_instance_) {
    delete game_bag_;
  }
}

void S2C_Sync_Role_Bag_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Sync_Role_Bag_Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Sync_Role_Bag_Item_descriptor_;
}

const S2C_Sync_Role_Bag_Item& S2C_Sync_Role_Bag_Item::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Sync_Role_Bag_Item* S2C_Sync_Role_Bag_Item::default_instance_ = nullptr;

S2C_Sync_Role_Bag_Item* S2C_Sync_Role_Bag_Item::New() const {
  return new S2C_Sync_Role_Bag_Item;
}

void S2C_Sync_Role_Bag_Item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_coin_ = GOOGLE_LONGLONG(0);
    game_deposit_ = GOOGLE_LONGLONG(0);
    if (has_game_bag()) {
      if (game_bag_ != nullptr) game_bag_->::universal_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Sync_Role_Bag_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 game_coin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &game_coin_)));
          set_has_game_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game_Deposit;
        break;
      }

      // required int64 game_Deposit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_Deposit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &game_deposit_)));
          set_has_game_deposit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_game_bag;
        break;
      }

      // required .universal_data game_bag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_bag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_bag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Sync_Role_Bag_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 game_coin = 1;
  if (has_game_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->game_coin(), output);
  }

  // required int64 game_Deposit = 2;
  if (has_game_deposit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->game_deposit(), output);
  }

  // required .universal_data game_bag = 3;
  if (has_game_bag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->game_bag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Sync_Role_Bag_Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 game_coin = 1;
  if (has_game_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->game_coin(), target);
  }

  // required int64 game_Deposit = 2;
  if (has_game_deposit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->game_deposit(), target);
  }

  // required .universal_data game_bag = 3;
  if (has_game_bag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->game_bag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Sync_Role_Bag_Item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 game_coin = 1;
    if (has_game_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->game_coin());
    }

    // required int64 game_Deposit = 2;
    if (has_game_deposit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->game_deposit());
    }

    // required .universal_data game_bag = 3;
    if (has_game_bag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game_bag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Sync_Role_Bag_Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Sync_Role_Bag_Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Sync_Role_Bag_Item*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Sync_Role_Bag_Item::MergeFrom(const S2C_Sync_Role_Bag_Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_coin()) {
      set_game_coin(from.game_coin());
    }
    if (from.has_game_deposit()) {
      set_game_deposit(from.game_deposit());
    }
    if (from.has_game_bag()) {
      mutable_game_bag()->::universal_data::MergeFrom(from.game_bag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Sync_Role_Bag_Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Sync_Role_Bag_Item::CopyFrom(const S2C_Sync_Role_Bag_Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Sync_Role_Bag_Item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2C_Sync_Role_Bag_Item::Swap(S2C_Sync_Role_Bag_Item* other) {
  if (other != this) {
    std::swap(game_coin_, other->game_coin_);
    std::swap(game_deposit_, other->game_deposit_);
    std::swap(game_bag_, other->game_bag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Sync_Role_Bag_Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Sync_Role_Bag_Item_descriptor_;
  metadata.reflection = S2C_Sync_Role_Bag_Item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Bag_MoveItem::kRoleIndexFieldNumber;
const int C2S_Bag_MoveItem::kSrcItemIndexFieldNumber;
const int C2S_Bag_MoveItem::kSrcItemPosFieldNumber;
const int C2S_Bag_MoveItem::kTarItemPosFieldNumber;
#endif  // !_MSC_VER

C2S_Bag_MoveItem::C2S_Bag_MoveItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Bag_MoveItem::InitAsDefaultInstance() {
}

C2S_Bag_MoveItem::C2S_Bag_MoveItem(const C2S_Bag_MoveItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Bag_MoveItem::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  src_item_index_ = GOOGLE_LONGLONG(0);
  src_item_pos_ = 0;
  tar_item_pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Bag_MoveItem::~C2S_Bag_MoveItem() {
  SharedDtor();
}

void C2S_Bag_MoveItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_Bag_MoveItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Bag_MoveItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Bag_MoveItem_descriptor_;
}

const C2S_Bag_MoveItem& C2S_Bag_MoveItem::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_Bag_MoveItem* C2S_Bag_MoveItem::default_instance_ = nullptr;

C2S_Bag_MoveItem* C2S_Bag_MoveItem::New() const {
  return new C2S_Bag_MoveItem;
}

void C2S_Bag_MoveItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    src_item_index_ = GOOGLE_LONGLONG(0);
    src_item_pos_ = 0;
    tar_item_pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Bag_MoveItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_src_item_index;
        break;
      }

      // required int64 src_item_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_item_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &src_item_index_)));
          set_has_src_item_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_src_item_pos;
        break;
      }

      // required sint32 src_item_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_item_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &src_item_pos_)));
          set_has_src_item_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tar_item_pos;
        break;
      }

      // required sint32 tar_item_pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tar_item_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &tar_item_pos_)));
          set_has_tar_item_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Bag_MoveItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required int64 src_item_index = 2;
  if (has_src_item_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->src_item_index(), output);
  }

  // required sint32 src_item_pos = 3;
  if (has_src_item_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->src_item_pos(), output);
  }

  // required sint32 tar_item_pos = 4;
  if (has_tar_item_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->tar_item_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Bag_MoveItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required int64 src_item_index = 2;
  if (has_src_item_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->src_item_index(), target);
  }

  // required sint32 src_item_pos = 3;
  if (has_src_item_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->src_item_pos(), target);
  }

  // required sint32 tar_item_pos = 4;
  if (has_tar_item_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->tar_item_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Bag_MoveItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required int64 src_item_index = 2;
    if (has_src_item_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->src_item_index());
    }

    // required sint32 src_item_pos = 3;
    if (has_src_item_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->src_item_pos());
    }

    // required sint32 tar_item_pos = 4;
    if (has_tar_item_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->tar_item_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Bag_MoveItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Bag_MoveItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Bag_MoveItem*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Bag_MoveItem::MergeFrom(const C2S_Bag_MoveItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_src_item_index()) {
      set_src_item_index(from.src_item_index());
    }
    if (from.has_src_item_pos()) {
      set_src_item_pos(from.src_item_pos());
    }
    if (from.has_tar_item_pos()) {
      set_tar_item_pos(from.tar_item_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Bag_MoveItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Bag_MoveItem::CopyFrom(const C2S_Bag_MoveItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Bag_MoveItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void C2S_Bag_MoveItem::Swap(C2S_Bag_MoveItem* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(src_item_index_, other->src_item_index_);
    std::swap(src_item_pos_, other->src_item_pos_);
    std::swap(tar_item_pos_, other->tar_item_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Bag_MoveItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Bag_MoveItem_descriptor_;
  metadata.reflection = C2S_Bag_MoveItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Use_Item::kRoleIndexFieldNumber;
const int C2S_Use_Item::kBagPosFieldNumber;
const int C2S_Use_Item::kItemIndexFieldNumber;
#endif  // !_MSC_VER

C2S_Use_Item::C2S_Use_Item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Use_Item::InitAsDefaultInstance() {
}

C2S_Use_Item::C2S_Use_Item(const C2S_Use_Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Use_Item::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  bag_pos_ = 0;
  item_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Use_Item::~C2S_Use_Item() {
  SharedDtor();
}

void C2S_Use_Item::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_Use_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Use_Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Use_Item_descriptor_;
}

const C2S_Use_Item& C2S_Use_Item::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_Use_Item* C2S_Use_Item::default_instance_ = nullptr;

C2S_Use_Item* C2S_Use_Item::New() const {
  return new C2S_Use_Item;
}

void C2S_Use_Item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    bag_pos_ = 0;
    item_index_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Use_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bag_pos;
        break;
      }

      // required sint32 bag_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bag_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bag_pos_)));
          set_has_bag_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_index;
        break;
      }

      // required int64 item_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_index_)));
          set_has_item_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Use_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required sint32 bag_pos = 2;
  if (has_bag_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->bag_pos(), output);
  }

  // required int64 item_index = 3;
  if (has_item_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->item_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Use_Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required sint32 bag_pos = 2;
  if (has_bag_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->bag_pos(), target);
  }

  // required int64 item_index = 3;
  if (has_item_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->item_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Use_Item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required sint32 bag_pos = 2;
    if (has_bag_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->bag_pos());
    }

    // required int64 item_index = 3;
    if (has_item_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Use_Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Use_Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Use_Item*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Use_Item::MergeFrom(const C2S_Use_Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_bag_pos()) {
      set_bag_pos(from.bag_pos());
    }
    if (from.has_item_index()) {
      set_item_index(from.item_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Use_Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Use_Item::CopyFrom(const C2S_Use_Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Use_Item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void C2S_Use_Item::Swap(C2S_Use_Item* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(bag_pos_, other->bag_pos_);
    std::swap(item_index_, other->item_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Use_Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Use_Item_descriptor_;
  metadata.reflection = C2S_Use_Item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Use_Item::kRetCodeFieldNumber;
const int S2C_Use_Item::kBagPosFieldNumber;
const int S2C_Use_Item::kItemIndexFieldNumber;
#endif  // !_MSC_VER

S2C_Use_Item::S2C_Use_Item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Use_Item::InitAsDefaultInstance() {
}

S2C_Use_Item::S2C_Use_Item(const S2C_Use_Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Use_Item::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bag_pos_ = 0;
  item_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Use_Item::~S2C_Use_Item() {
  SharedDtor();
}

void S2C_Use_Item::SharedDtor() {
  if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
    delete ret_code_;
  }
  if (this != default_instance_) {
  }
}

void S2C_Use_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Use_Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Use_Item_descriptor_;
}

const S2C_Use_Item& S2C_Use_Item::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Use_Item* S2C_Use_Item::default_instance_ = nullptr;

S2C_Use_Item* S2C_Use_Item::New() const {
  return new S2C_Use_Item;
}

void S2C_Use_Item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret_code()) {
      if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
        ret_code_->clear();
      }
    }
    bag_pos_ = 0;
    item_index_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Use_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ret_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bag_pos;
        break;
      }

      // required sint32 bag_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bag_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bag_pos_)));
          set_has_bag_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_index;
        break;
      }

      // required int64 item_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_index_)));
          set_has_item_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Use_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->ret_code(), output);
  }

  // required sint32 bag_pos = 2;
  if (has_bag_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->bag_pos(), output);
  }

  // required int64 item_index = 3;
  if (has_item_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->item_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Use_Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes ret_code = 1;
  if (has_ret_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ret_code(), target);
  }

  // required sint32 bag_pos = 2;
  if (has_bag_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->bag_pos(), target);
  }

  // required int64 item_index = 3;
  if (has_item_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->item_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Use_Item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ret_code());
    }

    // required sint32 bag_pos = 2;
    if (has_bag_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->bag_pos());
    }

    // required int64 item_index = 3;
    if (has_item_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Use_Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Use_Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Use_Item*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Use_Item::MergeFrom(const S2C_Use_Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_bag_pos()) {
      set_bag_pos(from.bag_pos());
    }
    if (from.has_item_index()) {
      set_item_index(from.item_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Use_Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Use_Item::CopyFrom(const S2C_Use_Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Use_Item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2C_Use_Item::Swap(S2C_Use_Item* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(bag_pos_, other->bag_pos_);
    std::swap(item_index_, other->item_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Use_Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Use_Item_descriptor_;
  metadata.reflection = S2C_Use_Item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Role_Equip::kRoleIndexFieldNumber;
#endif  // !_MSC_VER

C2S_Role_Equip::C2S_Role_Equip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Role_Equip::InitAsDefaultInstance() {
}

C2S_Role_Equip::C2S_Role_Equip(const C2S_Role_Equip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Role_Equip::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Role_Equip::~C2S_Role_Equip() {
  SharedDtor();
}

void C2S_Role_Equip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_Role_Equip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Role_Equip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Role_Equip_descriptor_;
}

const C2S_Role_Equip& C2S_Role_Equip::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_Role_Equip* C2S_Role_Equip::default_instance_ = nullptr;

C2S_Role_Equip* C2S_Role_Equip::New() const {
  return new C2S_Role_Equip;
}

void C2S_Role_Equip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Role_Equip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Role_Equip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Role_Equip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Role_Equip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Role_Equip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Role_Equip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Role_Equip*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Role_Equip::MergeFrom(const C2S_Role_Equip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Role_Equip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Role_Equip::CopyFrom(const C2S_Role_Equip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Role_Equip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2S_Role_Equip::Swap(C2S_Role_Equip* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Role_Equip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Role_Equip_descriptor_;
  metadata.reflection = C2S_Role_Equip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Role_Equip::kRoleIndexFieldNumber;
const int S2C_Role_Equip::kEquipsFieldNumber;
#endif  // !_MSC_VER

S2C_Role_Equip::S2C_Role_Equip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Role_Equip::InitAsDefaultInstance() {
  equips_ = const_cast< ::dict_item*>(&::dict_item::default_instance());
}

S2C_Role_Equip::S2C_Role_Equip(const S2C_Role_Equip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Role_Equip::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  equips_ = nullptr;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Role_Equip::~S2C_Role_Equip() {
  SharedDtor();
}

void S2C_Role_Equip::SharedDtor() {
  if (this != default_instance_) {
    delete equips_;
  }
}

void S2C_Role_Equip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Role_Equip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Role_Equip_descriptor_;
}

const S2C_Role_Equip& S2C_Role_Equip::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Role_Equip* S2C_Role_Equip::default_instance_ = nullptr;

S2C_Role_Equip* S2C_Role_Equip::New() const {
  return new S2C_Role_Equip;
}

void S2C_Role_Equip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    if (has_equips()) {
      if (equips_ != nullptr) equips_->::dict_item::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Role_Equip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equips;
        break;
      }

      // required .dict_item equips = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equips()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Role_Equip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required .dict_item equips = 2;
  if (has_equips()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equips(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Role_Equip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required .dict_item equips = 2;
  if (has_equips()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equips(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Role_Equip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required .dict_item equips = 2;
    if (has_equips()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equips());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Role_Equip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Role_Equip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Role_Equip*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Role_Equip::MergeFrom(const S2C_Role_Equip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_equips()) {
      mutable_equips()->::dict_item::MergeFrom(from.equips());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Role_Equip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Role_Equip::CopyFrom(const S2C_Role_Equip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Role_Equip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2C_Role_Equip::Swap(S2C_Role_Equip* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(equips_, other->equips_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Role_Equip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Role_Equip_descriptor_;
  metadata.reflection = S2C_Role_Equip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_TakeOff_Equip::kRoleIndexFieldNumber;
const int C2S_TakeOff_Equip::kEquipIndexFieldNumber;
const int C2S_TakeOff_Equip::kEquipPosTypeFieldNumber;
#endif  // !_MSC_VER

C2S_TakeOff_Equip::C2S_TakeOff_Equip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_TakeOff_Equip::InitAsDefaultInstance() {
}

C2S_TakeOff_Equip::C2S_TakeOff_Equip(const C2S_TakeOff_Equip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_TakeOff_Equip::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  equip_index_ = GOOGLE_LONGLONG(0);
  equip_pos_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_TakeOff_Equip::~C2S_TakeOff_Equip() {
  SharedDtor();
}

void C2S_TakeOff_Equip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_TakeOff_Equip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_TakeOff_Equip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_TakeOff_Equip_descriptor_;
}

const C2S_TakeOff_Equip& C2S_TakeOff_Equip::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_TakeOff_Equip* C2S_TakeOff_Equip::default_instance_ = nullptr;

C2S_TakeOff_Equip* C2S_TakeOff_Equip::New() const {
  return new C2S_TakeOff_Equip;
}

void C2S_TakeOff_Equip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    equip_index_ = GOOGLE_LONGLONG(0);
    equip_pos_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_TakeOff_Equip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equip_index;
        break;
      }

      // required int64 equip_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &equip_index_)));
          set_has_equip_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_equip_pos_type;
        break;
      }

      // required sint32 equip_pos_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_pos_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &equip_pos_type_)));
          set_has_equip_pos_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_TakeOff_Equip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required int64 equip_index = 2;
  if (has_equip_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->equip_index(), output);
  }

  // required sint32 equip_pos_type = 3;
  if (has_equip_pos_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->equip_pos_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_TakeOff_Equip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required int64 equip_index = 2;
  if (has_equip_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->equip_index(), target);
  }

  // required sint32 equip_pos_type = 3;
  if (has_equip_pos_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->equip_pos_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_TakeOff_Equip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required int64 equip_index = 2;
    if (has_equip_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->equip_index());
    }

    // required sint32 equip_pos_type = 3;
    if (has_equip_pos_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->equip_pos_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_TakeOff_Equip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_TakeOff_Equip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_TakeOff_Equip*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_TakeOff_Equip::MergeFrom(const C2S_TakeOff_Equip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_equip_index()) {
      set_equip_index(from.equip_index());
    }
    if (from.has_equip_pos_type()) {
      set_equip_pos_type(from.equip_pos_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_TakeOff_Equip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_TakeOff_Equip::CopyFrom(const C2S_TakeOff_Equip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_TakeOff_Equip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void C2S_TakeOff_Equip::Swap(C2S_TakeOff_Equip* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(equip_index_, other->equip_index_);
    std::swap(equip_pos_type_, other->equip_pos_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_TakeOff_Equip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_TakeOff_Equip_descriptor_;
  metadata.reflection = C2S_TakeOff_Equip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_TakeOff_Equip::kRetCodeFieldNumber;
const int S2C_TakeOff_Equip::kEquipIndexFieldNumber;
const int S2C_TakeOff_Equip::kEquipPosTypeFieldNumber;
#endif  // !_MSC_VER

S2C_TakeOff_Equip::S2C_TakeOff_Equip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_TakeOff_Equip::InitAsDefaultInstance() {
}

S2C_TakeOff_Equip::S2C_TakeOff_Equip(const S2C_TakeOff_Equip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_TakeOff_Equip::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  equip_index_ = GOOGLE_LONGLONG(0);
  equip_pos_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_TakeOff_Equip::~S2C_TakeOff_Equip() {
  SharedDtor();
}

void S2C_TakeOff_Equip::SharedDtor() {
  if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
    delete ret_code_;
  }
  if (this != default_instance_) {
  }
}

void S2C_TakeOff_Equip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_TakeOff_Equip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_TakeOff_Equip_descriptor_;
}

const S2C_TakeOff_Equip& S2C_TakeOff_Equip::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_TakeOff_Equip* S2C_TakeOff_Equip::default_instance_ = nullptr;

S2C_TakeOff_Equip* S2C_TakeOff_Equip::New() const {
  return new S2C_TakeOff_Equip;
}

void S2C_TakeOff_Equip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret_code()) {
      if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
        ret_code_->clear();
      }
    }
    equip_index_ = GOOGLE_LONGLONG(0);
    equip_pos_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_TakeOff_Equip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ret_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equip_index;
        break;
      }

      // required int64 equip_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &equip_index_)));
          set_has_equip_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_equip_pos_type;
        break;
      }

      // required sint32 equip_pos_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_pos_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &equip_pos_type_)));
          set_has_equip_pos_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_TakeOff_Equip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->ret_code(), output);
  }

  // required int64 equip_index = 2;
  if (has_equip_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->equip_index(), output);
  }

  // required sint32 equip_pos_type = 3;
  if (has_equip_pos_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->equip_pos_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_TakeOff_Equip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes ret_code = 1;
  if (has_ret_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ret_code(), target);
  }

  // required int64 equip_index = 2;
  if (has_equip_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->equip_index(), target);
  }

  // required sint32 equip_pos_type = 3;
  if (has_equip_pos_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->equip_pos_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_TakeOff_Equip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ret_code());
    }

    // required int64 equip_index = 2;
    if (has_equip_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->equip_index());
    }

    // required sint32 equip_pos_type = 3;
    if (has_equip_pos_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->equip_pos_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_TakeOff_Equip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_TakeOff_Equip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_TakeOff_Equip*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_TakeOff_Equip::MergeFrom(const S2C_TakeOff_Equip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_equip_index()) {
      set_equip_index(from.equip_index());
    }
    if (from.has_equip_pos_type()) {
      set_equip_pos_type(from.equip_pos_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_TakeOff_Equip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_TakeOff_Equip::CopyFrom(const S2C_TakeOff_Equip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_TakeOff_Equip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2C_TakeOff_Equip::Swap(S2C_TakeOff_Equip* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(equip_index_, other->equip_index_);
    std::swap(equip_pos_type_, other->equip_pos_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_TakeOff_Equip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_TakeOff_Equip_descriptor_;
  metadata.reflection = S2C_TakeOff_Equip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Bag_Item_Insert::kItemInfoFieldNumber;
#endif  // !_MSC_VER

S2C_Bag_Item_Insert::S2C_Bag_Item_Insert()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Bag_Item_Insert::InitAsDefaultInstance() {
  item_info_ = const_cast< ::item*>(&::item::default_instance());
}

S2C_Bag_Item_Insert::S2C_Bag_Item_Insert(const S2C_Bag_Item_Insert& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Bag_Item_Insert::SharedCtor() {
  _cached_size_ = 0;
  item_info_ = nullptr;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Bag_Item_Insert::~S2C_Bag_Item_Insert() {
  SharedDtor();
}

void S2C_Bag_Item_Insert::SharedDtor() {
  if (this != default_instance_) {
    delete item_info_;
  }
}

void S2C_Bag_Item_Insert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Bag_Item_Insert::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Bag_Item_Insert_descriptor_;
}

const S2C_Bag_Item_Insert& S2C_Bag_Item_Insert::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Bag_Item_Insert* S2C_Bag_Item_Insert::default_instance_ = nullptr;

S2C_Bag_Item_Insert* S2C_Bag_Item_Insert::New() const {
  return new S2C_Bag_Item_Insert;
}

void S2C_Bag_Item_Insert::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_item_info()) {
      if (item_info_ != nullptr) item_info_->::item::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Bag_Item_Insert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .item item_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Bag_Item_Insert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .item item_info = 1;
  if (has_item_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Bag_Item_Insert::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .item item_info = 1;
  if (has_item_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Bag_Item_Insert::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .item item_info = 1;
    if (has_item_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Bag_Item_Insert::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Bag_Item_Insert* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Bag_Item_Insert*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Bag_Item_Insert::MergeFrom(const S2C_Bag_Item_Insert& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_info()) {
      mutable_item_info()->::item::MergeFrom(from.item_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Bag_Item_Insert::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Bag_Item_Insert::CopyFrom(const S2C_Bag_Item_Insert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Bag_Item_Insert::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void S2C_Bag_Item_Insert::Swap(S2C_Bag_Item_Insert* other) {
  if (other != this) {
    std::swap(item_info_, other->item_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Bag_Item_Insert::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Bag_Item_Insert_descriptor_;
  metadata.reflection = S2C_Bag_Item_Insert_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Bag_Item_Remove::kItemInfoFieldNumber;
#endif  // !_MSC_VER

S2C_Bag_Item_Remove::S2C_Bag_Item_Remove()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Bag_Item_Remove::InitAsDefaultInstance() {
  item_info_ = const_cast< ::item*>(&::item::default_instance());
}

S2C_Bag_Item_Remove::S2C_Bag_Item_Remove(const S2C_Bag_Item_Remove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Bag_Item_Remove::SharedCtor() {
  _cached_size_ = 0;
  item_info_ = nullptr;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Bag_Item_Remove::~S2C_Bag_Item_Remove() {
  SharedDtor();
}

void S2C_Bag_Item_Remove::SharedDtor() {
  if (this != default_instance_) {
    delete item_info_;
  }
}

void S2C_Bag_Item_Remove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Bag_Item_Remove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Bag_Item_Remove_descriptor_;
}

const S2C_Bag_Item_Remove& S2C_Bag_Item_Remove::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Bag_Item_Remove* S2C_Bag_Item_Remove::default_instance_ = nullptr;

S2C_Bag_Item_Remove* S2C_Bag_Item_Remove::New() const {
  return new S2C_Bag_Item_Remove;
}

void S2C_Bag_Item_Remove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_item_info()) {
      if (item_info_ != nullptr) item_info_->::item::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Bag_Item_Remove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .item item_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Bag_Item_Remove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .item item_info = 1;
  if (has_item_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Bag_Item_Remove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .item item_info = 1;
  if (has_item_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Bag_Item_Remove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .item item_info = 1;
    if (has_item_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Bag_Item_Remove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Bag_Item_Remove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Bag_Item_Remove*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Bag_Item_Remove::MergeFrom(const S2C_Bag_Item_Remove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_info()) {
      mutable_item_info()->::item::MergeFrom(from.item_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Bag_Item_Remove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Bag_Item_Remove::CopyFrom(const S2C_Bag_Item_Remove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Bag_Item_Remove::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void S2C_Bag_Item_Remove::Swap(S2C_Bag_Item_Remove* other) {
  if (other != this) {
    std::swap(item_info_, other->item_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Bag_Item_Remove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Bag_Item_Remove_descriptor_;
  metadata.reflection = S2C_Bag_Item_Remove_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_SuitShopInfo::kRoleIndexFieldNumber;
#endif  // !_MSC_VER

C2S_SuitShopInfo::C2S_SuitShopInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_SuitShopInfo::InitAsDefaultInstance() {
}

C2S_SuitShopInfo::C2S_SuitShopInfo(const C2S_SuitShopInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_SuitShopInfo::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_SuitShopInfo::~C2S_SuitShopInfo() {
  SharedDtor();
}

void C2S_SuitShopInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_SuitShopInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_SuitShopInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_SuitShopInfo_descriptor_;
}

const C2S_SuitShopInfo& C2S_SuitShopInfo::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_SuitShopInfo* C2S_SuitShopInfo::default_instance_ = nullptr;

C2S_SuitShopInfo* C2S_SuitShopInfo::New() const {
  return new C2S_SuitShopInfo;
}

void C2S_SuitShopInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_SuitShopInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_SuitShopInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_SuitShopInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_SuitShopInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_SuitShopInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_SuitShopInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_SuitShopInfo*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_SuitShopInfo::MergeFrom(const C2S_SuitShopInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_SuitShopInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_SuitShopInfo::CopyFrom(const C2S_SuitShopInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_SuitShopInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2S_SuitShopInfo::Swap(C2S_SuitShopInfo* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_SuitShopInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_SuitShopInfo_descriptor_;
  metadata.reflection = C2S_SuitShopInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_SuitShopInfo::kRoleIndexFieldNumber;
const int S2C_SuitShopInfo::kListBuySuitFieldNumber;
const int S2C_SuitShopInfo::kSuitShopSurplusUpdateTimeFieldNumber;
#endif  // !_MSC_VER

S2C_SuitShopInfo::S2C_SuitShopInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_SuitShopInfo::InitAsDefaultInstance() {
}

S2C_SuitShopInfo::S2C_SuitShopInfo(const S2C_SuitShopInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_SuitShopInfo::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  suit_shop_surplus_update_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_SuitShopInfo::~S2C_SuitShopInfo() {
  SharedDtor();
}

void S2C_SuitShopInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2C_SuitShopInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_SuitShopInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_SuitShopInfo_descriptor_;
}

const S2C_SuitShopInfo& S2C_SuitShopInfo::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_SuitShopInfo* S2C_SuitShopInfo::default_instance_ = nullptr;

S2C_SuitShopInfo* S2C_SuitShopInfo::New() const {
  return new S2C_SuitShopInfo;
}

void S2C_SuitShopInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    suit_shop_surplus_update_time_ = GOOGLE_LONGLONG(0);
  }
  list_buy_suit_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_SuitShopInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list_buy_suit;
        break;
      }

      // repeated .suit_goods_info list_buy_suit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_buy_suit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_buy_suit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list_buy_suit;
        if (input->ExpectTag(24)) goto parse_suit_shop_surplus_update_time;
        break;
      }

      // required int64 suit_shop_surplus_update_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suit_shop_surplus_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &suit_shop_surplus_update_time_)));
          set_has_suit_shop_surplus_update_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_SuitShopInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // repeated .suit_goods_info list_buy_suit = 2;
  for (int i = 0; i < this->list_buy_suit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list_buy_suit(i), output);
  }

  // required int64 suit_shop_surplus_update_time = 3;
  if (has_suit_shop_surplus_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->suit_shop_surplus_update_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_SuitShopInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // repeated .suit_goods_info list_buy_suit = 2;
  for (int i = 0; i < this->list_buy_suit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->list_buy_suit(i), target);
  }

  // required int64 suit_shop_surplus_update_time = 3;
  if (has_suit_shop_surplus_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->suit_shop_surplus_update_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_SuitShopInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required int64 suit_shop_surplus_update_time = 3;
    if (has_suit_shop_surplus_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->suit_shop_surplus_update_time());
    }

  }
  // repeated .suit_goods_info list_buy_suit = 2;
  total_size += 1 * this->list_buy_suit_size();
  for (int i = 0; i < this->list_buy_suit_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_buy_suit(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_SuitShopInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_SuitShopInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_SuitShopInfo*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_SuitShopInfo::MergeFrom(const S2C_SuitShopInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_buy_suit_.MergeFrom(from.list_buy_suit_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_suit_shop_surplus_update_time()) {
      set_suit_shop_surplus_update_time(from.suit_shop_surplus_update_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_SuitShopInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_SuitShopInfo::CopyFrom(const S2C_SuitShopInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_SuitShopInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  for (int i = 0; i < list_buy_suit_size(); i++) {
    if (!this->list_buy_suit(i).IsInitialized()) return false;
  }
  return true;
}

void S2C_SuitShopInfo::Swap(S2C_SuitShopInfo* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    list_buy_suit_.Swap(&other->list_buy_suit_);
    std::swap(suit_shop_surplus_update_time_, other->suit_shop_surplus_update_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_SuitShopInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_SuitShopInfo_descriptor_;
  metadata.reflection = S2C_SuitShopInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_BuySuitInShop::kRoleIndexFieldNumber;
const int C2S_BuySuitInShop::kSuitShopIdFieldNumber;
const int C2S_BuySuitInShop::kSuitDurationFieldNumber;
#endif  // !_MSC_VER

C2S_BuySuitInShop::C2S_BuySuitInShop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_BuySuitInShop::InitAsDefaultInstance() {
}

C2S_BuySuitInShop::C2S_BuySuitInShop(const C2S_BuySuitInShop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_BuySuitInShop::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  suit_shop_id_ = 0;
  suit_duration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_BuySuitInShop::~C2S_BuySuitInShop() {
  SharedDtor();
}

void C2S_BuySuitInShop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_BuySuitInShop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_BuySuitInShop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_BuySuitInShop_descriptor_;
}

const C2S_BuySuitInShop& C2S_BuySuitInShop::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_BuySuitInShop* C2S_BuySuitInShop::default_instance_ = nullptr;

C2S_BuySuitInShop* C2S_BuySuitInShop::New() const {
  return new C2S_BuySuitInShop;
}

void C2S_BuySuitInShop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    suit_shop_id_ = 0;
    suit_duration_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_BuySuitInShop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_suit_shop_id;
        break;
      }

      // required sint32 suit_shop_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suit_shop_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &suit_shop_id_)));
          set_has_suit_shop_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_suit_duration;
        break;
      }

      // required sint32 suit_duration = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suit_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &suit_duration_)));
          set_has_suit_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_BuySuitInShop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required sint32 suit_shop_id = 2;
  if (has_suit_shop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->suit_shop_id(), output);
  }

  // required sint32 suit_duration = 3;
  if (has_suit_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->suit_duration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_BuySuitInShop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required sint32 suit_shop_id = 2;
  if (has_suit_shop_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->suit_shop_id(), target);
  }

  // required sint32 suit_duration = 3;
  if (has_suit_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->suit_duration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_BuySuitInShop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required sint32 suit_shop_id = 2;
    if (has_suit_shop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->suit_shop_id());
    }

    // required sint32 suit_duration = 3;
    if (has_suit_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->suit_duration());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_BuySuitInShop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_BuySuitInShop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_BuySuitInShop*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_BuySuitInShop::MergeFrom(const C2S_BuySuitInShop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_suit_shop_id()) {
      set_suit_shop_id(from.suit_shop_id());
    }
    if (from.has_suit_duration()) {
      set_suit_duration(from.suit_duration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_BuySuitInShop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_BuySuitInShop::CopyFrom(const C2S_BuySuitInShop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_BuySuitInShop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void C2S_BuySuitInShop::Swap(C2S_BuySuitInShop* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(suit_shop_id_, other->suit_shop_id_);
    std::swap(suit_duration_, other->suit_duration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_BuySuitInShop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_BuySuitInShop_descriptor_;
  metadata.reflection = C2S_BuySuitInShop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_BuySuitInShop::kRetCodeFieldNumber;
const int S2C_BuySuitInShop::kRoleIndexFieldNumber;
const int S2C_BuySuitInShop::kSuitShopIdFieldNumber;
const int S2C_BuySuitInShop::kSuitDurationFieldNumber;
#endif  // !_MSC_VER

S2C_BuySuitInShop::S2C_BuySuitInShop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_BuySuitInShop::InitAsDefaultInstance() {
}

S2C_BuySuitInShop::S2C_BuySuitInShop(const S2C_BuySuitInShop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_BuySuitInShop::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_index_ = GOOGLE_LONGLONG(0);
  suit_shop_id_ = 0;
  suit_duration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_BuySuitInShop::~S2C_BuySuitInShop() {
  SharedDtor();
}

void S2C_BuySuitInShop::SharedDtor() {
  if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
    delete ret_code_;
  }
  if (this != default_instance_) {
  }
}

void S2C_BuySuitInShop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_BuySuitInShop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_BuySuitInShop_descriptor_;
}

const S2C_BuySuitInShop& S2C_BuySuitInShop::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_BuySuitInShop* S2C_BuySuitInShop::default_instance_ = nullptr;

S2C_BuySuitInShop* S2C_BuySuitInShop::New() const {
  return new S2C_BuySuitInShop;
}

void S2C_BuySuitInShop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret_code()) {
      if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
        ret_code_->clear();
      }
    }
    role_index_ = GOOGLE_LONGLONG(0);
    suit_shop_id_ = 0;
    suit_duration_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_BuySuitInShop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ret_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_index;
        break;
      }

      // required int64 role_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_suit_shop_id;
        break;
      }

      // required sint32 suit_shop_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suit_shop_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &suit_shop_id_)));
          set_has_suit_shop_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_suit_duration;
        break;
      }

      // required sint32 suit_duration = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suit_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &suit_duration_)));
          set_has_suit_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_BuySuitInShop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->ret_code(), output);
  }

  // required int64 role_index = 2;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->role_index(), output);
  }

  // required sint32 suit_shop_id = 3;
  if (has_suit_shop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->suit_shop_id(), output);
  }

  // required sint32 suit_duration = 4;
  if (has_suit_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->suit_duration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_BuySuitInShop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes ret_code = 1;
  if (has_ret_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ret_code(), target);
  }

  // required int64 role_index = 2;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->role_index(), target);
  }

  // required sint32 suit_shop_id = 3;
  if (has_suit_shop_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->suit_shop_id(), target);
  }

  // required sint32 suit_duration = 4;
  if (has_suit_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->suit_duration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_BuySuitInShop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ret_code());
    }

    // required int64 role_index = 2;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required sint32 suit_shop_id = 3;
    if (has_suit_shop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->suit_shop_id());
    }

    // required sint32 suit_duration = 4;
    if (has_suit_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->suit_duration());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_BuySuitInShop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_BuySuitInShop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_BuySuitInShop*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_BuySuitInShop::MergeFrom(const S2C_BuySuitInShop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_suit_shop_id()) {
      set_suit_shop_id(from.suit_shop_id());
    }
    if (from.has_suit_duration()) {
      set_suit_duration(from.suit_duration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_BuySuitInShop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_BuySuitInShop::CopyFrom(const S2C_BuySuitInShop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_BuySuitInShop::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void S2C_BuySuitInShop::Swap(S2C_BuySuitInShop* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(role_index_, other->role_index_);
    std::swap(suit_shop_id_, other->suit_shop_id_);
    std::swap(suit_duration_, other->suit_duration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_BuySuitInShop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_BuySuitInShop_descriptor_;
  metadata.reflection = S2C_BuySuitInShop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_RoleSuitInfo::kRoleIndexFieldNumber;
#endif  // !_MSC_VER

C2S_RoleSuitInfo::C2S_RoleSuitInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_RoleSuitInfo::InitAsDefaultInstance() {
}

C2S_RoleSuitInfo::C2S_RoleSuitInfo(const C2S_RoleSuitInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_RoleSuitInfo::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_RoleSuitInfo::~C2S_RoleSuitInfo() {
  SharedDtor();
}

void C2S_RoleSuitInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_RoleSuitInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_RoleSuitInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_RoleSuitInfo_descriptor_;
}

const C2S_RoleSuitInfo& C2S_RoleSuitInfo::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_RoleSuitInfo* C2S_RoleSuitInfo::default_instance_ = nullptr;

C2S_RoleSuitInfo* C2S_RoleSuitInfo::New() const {
  return new C2S_RoleSuitInfo;
}

void C2S_RoleSuitInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_RoleSuitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_RoleSuitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_RoleSuitInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_RoleSuitInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_RoleSuitInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_RoleSuitInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_RoleSuitInfo*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_RoleSuitInfo::MergeFrom(const C2S_RoleSuitInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_RoleSuitInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_RoleSuitInfo::CopyFrom(const C2S_RoleSuitInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_RoleSuitInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2S_RoleSuitInfo::Swap(C2S_RoleSuitInfo* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_RoleSuitInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_RoleSuitInfo_descriptor_;
  metadata.reflection = C2S_RoleSuitInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_RoleSuitInfo::kRoleIndexFieldNumber;
const int S2C_RoleSuitInfo::kRoleSuitInfoFieldNumber;
#endif  // !_MSC_VER

S2C_RoleSuitInfo::S2C_RoleSuitInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_RoleSuitInfo::InitAsDefaultInstance() {
  role_suit_info_ = const_cast< ::list_role_suit_info*>(&::list_role_suit_info::default_instance());
}

S2C_RoleSuitInfo::S2C_RoleSuitInfo(const S2C_RoleSuitInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_RoleSuitInfo::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  role_suit_info_ = nullptr;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_RoleSuitInfo::~S2C_RoleSuitInfo() {
  SharedDtor();
}

void S2C_RoleSuitInfo::SharedDtor() {
  if (this != default_instance_) {
    delete role_suit_info_;
  }
}

void S2C_RoleSuitInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_RoleSuitInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_RoleSuitInfo_descriptor_;
}

const S2C_RoleSuitInfo& S2C_RoleSuitInfo::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_RoleSuitInfo* S2C_RoleSuitInfo::default_instance_ = nullptr;

S2C_RoleSuitInfo* S2C_RoleSuitInfo::New() const {
  return new S2C_RoleSuitInfo;
}

void S2C_RoleSuitInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    if (has_role_suit_info()) {
      if (role_suit_info_ != nullptr) role_suit_info_->::list_role_suit_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_RoleSuitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role_suit_info;
        break;
      }

      // required .list_role_suit_info role_suit_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_suit_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_suit_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_RoleSuitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required .list_role_suit_info role_suit_info = 3;
  if (has_role_suit_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->role_suit_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_RoleSuitInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required .list_role_suit_info role_suit_info = 3;
  if (has_role_suit_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->role_suit_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_RoleSuitInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required .list_role_suit_info role_suit_info = 3;
    if (has_role_suit_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_suit_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_RoleSuitInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_RoleSuitInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_RoleSuitInfo*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_RoleSuitInfo::MergeFrom(const S2C_RoleSuitInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_role_suit_info()) {
      mutable_role_suit_info()->::list_role_suit_info::MergeFrom(from.role_suit_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_RoleSuitInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_RoleSuitInfo::CopyFrom(const S2C_RoleSuitInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_RoleSuitInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_role_suit_info()) {
    if (!this->role_suit_info().IsInitialized()) return false;
  }
  return true;
}

void S2C_RoleSuitInfo::Swap(S2C_RoleSuitInfo* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(role_suit_info_, other->role_suit_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_RoleSuitInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_RoleSuitInfo_descriptor_;
  metadata.reflection = S2C_RoleSuitInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_DressSuit::kRoleIndexFieldNumber;
const int C2S_DressSuit::kSuitIdFieldNumber;
#endif  // !_MSC_VER

C2S_DressSuit::C2S_DressSuit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_DressSuit::InitAsDefaultInstance() {
}

C2S_DressSuit::C2S_DressSuit(const C2S_DressSuit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_DressSuit::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  suit_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_DressSuit::~C2S_DressSuit() {
  SharedDtor();
}

void C2S_DressSuit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_DressSuit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_DressSuit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_DressSuit_descriptor_;
}

const C2S_DressSuit& C2S_DressSuit::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_DressSuit* C2S_DressSuit::default_instance_ = nullptr;

C2S_DressSuit* C2S_DressSuit::New() const {
  return new C2S_DressSuit;
}

void C2S_DressSuit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    suit_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_DressSuit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_suit_id;
        break;
      }

      // required sint32 suit_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suit_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &suit_id_)));
          set_has_suit_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_DressSuit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required sint32 suit_id = 2;
  if (has_suit_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->suit_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_DressSuit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required sint32 suit_id = 2;
  if (has_suit_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->suit_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_DressSuit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required sint32 suit_id = 2;
    if (has_suit_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->suit_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_DressSuit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_DressSuit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_DressSuit*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_DressSuit::MergeFrom(const C2S_DressSuit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_suit_id()) {
      set_suit_id(from.suit_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_DressSuit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_DressSuit::CopyFrom(const C2S_DressSuit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_DressSuit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C2S_DressSuit::Swap(C2S_DressSuit* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(suit_id_, other->suit_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_DressSuit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_DressSuit_descriptor_;
  metadata.reflection = C2S_DressSuit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_DressSuit::kRetCodeFieldNumber;
const int S2C_DressSuit::kRoleIndexFieldNumber;
const int S2C_DressSuit::kSuitIdFieldNumber;
#endif  // !_MSC_VER

S2C_DressSuit::S2C_DressSuit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_DressSuit::InitAsDefaultInstance() {
}

S2C_DressSuit::S2C_DressSuit(const S2C_DressSuit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_DressSuit::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_index_ = GOOGLE_LONGLONG(0);
  suit_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_DressSuit::~S2C_DressSuit() {
  SharedDtor();
}

void S2C_DressSuit::SharedDtor() {
  if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
    delete ret_code_;
  }
  if (this != default_instance_) {
  }
}

void S2C_DressSuit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_DressSuit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_DressSuit_descriptor_;
}

const S2C_DressSuit& S2C_DressSuit::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_DressSuit* S2C_DressSuit::default_instance_ = nullptr;

S2C_DressSuit* S2C_DressSuit::New() const {
  return new S2C_DressSuit;
}

void S2C_DressSuit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret_code()) {
      if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
        ret_code_->clear();
      }
    }
    role_index_ = GOOGLE_LONGLONG(0);
    suit_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_DressSuit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ret_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_index;
        break;
      }

      // required int64 role_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_suit_id;
        break;
      }

      // required sint32 suit_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suit_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &suit_id_)));
          set_has_suit_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_DressSuit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->ret_code(), output);
  }

  // required int64 role_index = 2;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->role_index(), output);
  }

  // required sint32 suit_id = 3;
  if (has_suit_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->suit_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_DressSuit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes ret_code = 1;
  if (has_ret_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ret_code(), target);
  }

  // required int64 role_index = 2;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->role_index(), target);
  }

  // required sint32 suit_id = 3;
  if (has_suit_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->suit_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_DressSuit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ret_code());
    }

    // required int64 role_index = 2;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required sint32 suit_id = 3;
    if (has_suit_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->suit_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_DressSuit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_DressSuit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_DressSuit*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_DressSuit::MergeFrom(const S2C_DressSuit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_suit_id()) {
      set_suit_id(from.suit_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_DressSuit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_DressSuit::CopyFrom(const S2C_DressSuit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_DressSuit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2C_DressSuit::Swap(S2C_DressSuit* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(role_index_, other->role_index_);
    std::swap(suit_id_, other->suit_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_DressSuit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_DressSuit_descriptor_;
  metadata.reflection = S2C_DressSuit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_TakeOffSuit::kRoleIndexFieldNumber;
const int C2S_TakeOffSuit::kSuitIdFieldNumber;
#endif  // !_MSC_VER

C2S_TakeOffSuit::C2S_TakeOffSuit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_TakeOffSuit::InitAsDefaultInstance() {
}

C2S_TakeOffSuit::C2S_TakeOffSuit(const C2S_TakeOffSuit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_TakeOffSuit::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  suit_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_TakeOffSuit::~C2S_TakeOffSuit() {
  SharedDtor();
}

void C2S_TakeOffSuit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_TakeOffSuit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_TakeOffSuit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_TakeOffSuit_descriptor_;
}

const C2S_TakeOffSuit& C2S_TakeOffSuit::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_TakeOffSuit* C2S_TakeOffSuit::default_instance_ = nullptr;

C2S_TakeOffSuit* C2S_TakeOffSuit::New() const {
  return new C2S_TakeOffSuit;
}

void C2S_TakeOffSuit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    suit_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_TakeOffSuit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_suit_id;
        break;
      }

      // required sint32 suit_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suit_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &suit_id_)));
          set_has_suit_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_TakeOffSuit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required sint32 suit_id = 2;
  if (has_suit_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->suit_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_TakeOffSuit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required sint32 suit_id = 2;
  if (has_suit_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->suit_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_TakeOffSuit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required sint32 suit_id = 2;
    if (has_suit_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->suit_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_TakeOffSuit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_TakeOffSuit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_TakeOffSuit*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_TakeOffSuit::MergeFrom(const C2S_TakeOffSuit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_suit_id()) {
      set_suit_id(from.suit_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_TakeOffSuit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_TakeOffSuit::CopyFrom(const C2S_TakeOffSuit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_TakeOffSuit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C2S_TakeOffSuit::Swap(C2S_TakeOffSuit* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(suit_id_, other->suit_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_TakeOffSuit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_TakeOffSuit_descriptor_;
  metadata.reflection = C2S_TakeOffSuit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_TakeOffSuit::kRetCodeFieldNumber;
const int S2C_TakeOffSuit::kRoleIndexFieldNumber;
const int S2C_TakeOffSuit::kSuitIdFieldNumber;
#endif  // !_MSC_VER

S2C_TakeOffSuit::S2C_TakeOffSuit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_TakeOffSuit::InitAsDefaultInstance() {
}

S2C_TakeOffSuit::S2C_TakeOffSuit(const S2C_TakeOffSuit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_TakeOffSuit::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_index_ = GOOGLE_LONGLONG(0);
  suit_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_TakeOffSuit::~S2C_TakeOffSuit() {
  SharedDtor();
}

void S2C_TakeOffSuit::SharedDtor() {
  if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
    delete ret_code_;
  }
  if (this != default_instance_) {
  }
}

void S2C_TakeOffSuit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_TakeOffSuit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_TakeOffSuit_descriptor_;
}

const S2C_TakeOffSuit& S2C_TakeOffSuit::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_TakeOffSuit* S2C_TakeOffSuit::default_instance_ = nullptr;

S2C_TakeOffSuit* S2C_TakeOffSuit::New() const {
  return new S2C_TakeOffSuit;
}

void S2C_TakeOffSuit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret_code()) {
      if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
        ret_code_->clear();
      }
    }
    role_index_ = GOOGLE_LONGLONG(0);
    suit_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_TakeOffSuit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ret_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_index;
        break;
      }

      // required int64 role_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_suit_id;
        break;
      }

      // required sint32 suit_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suit_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &suit_id_)));
          set_has_suit_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_TakeOffSuit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->ret_code(), output);
  }

  // required int64 role_index = 2;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->role_index(), output);
  }

  // required sint32 suit_id = 3;
  if (has_suit_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->suit_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_TakeOffSuit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes ret_code = 1;
  if (has_ret_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ret_code(), target);
  }

  // required int64 role_index = 2;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->role_index(), target);
  }

  // required sint32 suit_id = 3;
  if (has_suit_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->suit_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_TakeOffSuit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ret_code());
    }

    // required int64 role_index = 2;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required sint32 suit_id = 3;
    if (has_suit_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->suit_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_TakeOffSuit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_TakeOffSuit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_TakeOffSuit*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_TakeOffSuit::MergeFrom(const S2C_TakeOffSuit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_suit_id()) {
      set_suit_id(from.suit_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_TakeOffSuit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_TakeOffSuit::CopyFrom(const S2C_TakeOffSuit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_TakeOffSuit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2C_TakeOffSuit::Swap(S2C_TakeOffSuit* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(role_index_, other->role_index_);
    std::swap(suit_id_, other->suit_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_TakeOffSuit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_TakeOffSuit_descriptor_;
  metadata.reflection = S2C_TakeOffSuit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_AskRewardList::kRoleIndexFieldNumber;
#endif  // !_MSC_VER

C2S_AskRewardList::C2S_AskRewardList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_AskRewardList::InitAsDefaultInstance() {
}

C2S_AskRewardList::C2S_AskRewardList(const C2S_AskRewardList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_AskRewardList::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_AskRewardList::~C2S_AskRewardList() {
  SharedDtor();
}

void C2S_AskRewardList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_AskRewardList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_AskRewardList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_AskRewardList_descriptor_;
}

const C2S_AskRewardList& C2S_AskRewardList::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_AskRewardList* C2S_AskRewardList::default_instance_ = nullptr;

C2S_AskRewardList* C2S_AskRewardList::New() const {
  return new C2S_AskRewardList;
}

void C2S_AskRewardList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_AskRewardList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_AskRewardList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_AskRewardList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_AskRewardList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_AskRewardList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_AskRewardList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_AskRewardList*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_AskRewardList::MergeFrom(const C2S_AskRewardList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_AskRewardList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_AskRewardList::CopyFrom(const C2S_AskRewardList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_AskRewardList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2S_AskRewardList::Swap(C2S_AskRewardList* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_AskRewardList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_AskRewardList_descriptor_;
  metadata.reflection = C2S_AskRewardList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Sync_Role_RewardList::kRoleIndexFieldNumber;
const int S2C_Sync_Role_RewardList::kListRewardExpFieldNumber;
const int S2C_Sync_Role_RewardList::kListRewardMoneyFieldNumber;
const int S2C_Sync_Role_RewardList::kListRewardItemFieldNumber;
#endif  // !_MSC_VER

S2C_Sync_Role_RewardList::S2C_Sync_Role_RewardList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Sync_Role_RewardList::InitAsDefaultInstance() {
}

S2C_Sync_Role_RewardList::S2C_Sync_Role_RewardList(const S2C_Sync_Role_RewardList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Sync_Role_RewardList::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Sync_Role_RewardList::~S2C_Sync_Role_RewardList() {
  SharedDtor();
}

void S2C_Sync_Role_RewardList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2C_Sync_Role_RewardList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Sync_Role_RewardList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Sync_Role_RewardList_descriptor_;
}

const S2C_Sync_Role_RewardList& S2C_Sync_Role_RewardList::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Sync_Role_RewardList* S2C_Sync_Role_RewardList::default_instance_ = nullptr;

S2C_Sync_Role_RewardList* S2C_Sync_Role_RewardList::New() const {
  return new S2C_Sync_Role_RewardList;
}

void S2C_Sync_Role_RewardList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
  }
  list_reward_exp_.Clear();
  list_reward_money_.Clear();
  list_reward_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Sync_Role_RewardList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_list_reward_exp;
        break;
      }

      // repeated int64 list_reward_exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_list_reward_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_list_reward_exp())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_list_reward_exp())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_list_reward_exp;
        if (input->ExpectTag(24)) goto parse_list_reward_money;
        break;
      }

      // repeated int64 list_reward_money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_list_reward_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_list_reward_money())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_list_reward_money())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_list_reward_money;
        if (input->ExpectTag(34)) goto parse_list_reward_item;
        break;
      }

      // repeated .item list_reward_item = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_reward_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_reward_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_list_reward_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Sync_Role_RewardList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // repeated int64 list_reward_exp = 2;
  for (int i = 0; i < this->list_reward_exp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->list_reward_exp(i), output);
  }

  // repeated int64 list_reward_money = 3;
  for (int i = 0; i < this->list_reward_money_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->list_reward_money(i), output);
  }

  // repeated .item list_reward_item = 4;
  for (int i = 0; i < this->list_reward_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->list_reward_item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Sync_Role_RewardList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // repeated int64 list_reward_exp = 2;
  for (int i = 0; i < this->list_reward_exp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->list_reward_exp(i), target);
  }

  // repeated int64 list_reward_money = 3;
  for (int i = 0; i < this->list_reward_money_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->list_reward_money(i), target);
  }

  // repeated .item list_reward_item = 4;
  for (int i = 0; i < this->list_reward_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->list_reward_item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Sync_Role_RewardList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

  }
  // repeated int64 list_reward_exp = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->list_reward_exp_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->list_reward_exp(i));
    }
    total_size += 1 * this->list_reward_exp_size() + data_size;
  }

  // repeated int64 list_reward_money = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->list_reward_money_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->list_reward_money(i));
    }
    total_size += 1 * this->list_reward_money_size() + data_size;
  }

  // repeated .item list_reward_item = 4;
  total_size += 1 * this->list_reward_item_size();
  for (int i = 0; i < this->list_reward_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_reward_item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Sync_Role_RewardList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Sync_Role_RewardList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Sync_Role_RewardList*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Sync_Role_RewardList::MergeFrom(const S2C_Sync_Role_RewardList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_reward_exp_.MergeFrom(from.list_reward_exp_);
  list_reward_money_.MergeFrom(from.list_reward_money_);
  list_reward_item_.MergeFrom(from.list_reward_item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Sync_Role_RewardList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Sync_Role_RewardList::CopyFrom(const S2C_Sync_Role_RewardList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Sync_Role_RewardList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void S2C_Sync_Role_RewardList::Swap(S2C_Sync_Role_RewardList* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    list_reward_exp_.Swap(&other->list_reward_exp_);
    list_reward_money_.Swap(&other->list_reward_money_);
    list_reward_item_.Swap(&other->list_reward_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Sync_Role_RewardList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Sync_Role_RewardList_descriptor_;
  metadata.reflection = S2C_Sync_Role_RewardList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_FaceShopInfo::kRoleIndexFieldNumber;
#endif  // !_MSC_VER

C2S_FaceShopInfo::C2S_FaceShopInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_FaceShopInfo::InitAsDefaultInstance() {
}

C2S_FaceShopInfo::C2S_FaceShopInfo(const C2S_FaceShopInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_FaceShopInfo::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_FaceShopInfo::~C2S_FaceShopInfo() {
  SharedDtor();
}

void C2S_FaceShopInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_FaceShopInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_FaceShopInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_FaceShopInfo_descriptor_;
}

const C2S_FaceShopInfo& C2S_FaceShopInfo::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_FaceShopInfo* C2S_FaceShopInfo::default_instance_ = nullptr;

C2S_FaceShopInfo* C2S_FaceShopInfo::New() const {
  return new C2S_FaceShopInfo;
}

void C2S_FaceShopInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_FaceShopInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_FaceShopInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_FaceShopInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_FaceShopInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_FaceShopInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_FaceShopInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_FaceShopInfo*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_FaceShopInfo::MergeFrom(const C2S_FaceShopInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_FaceShopInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_FaceShopInfo::CopyFrom(const C2S_FaceShopInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_FaceShopInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2S_FaceShopInfo::Swap(C2S_FaceShopInfo* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_FaceShopInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_FaceShopInfo_descriptor_;
  metadata.reflection = C2S_FaceShopInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_FaceShopInfo::kRoleIndexFieldNumber;
const int S2C_FaceShopInfo::kListOriginalBuyFaceFieldNumber;
const int S2C_FaceShopInfo::kListDiscountBuyFaceFieldNumber;
const int S2C_FaceShopInfo::kFaceShopSurplusUpdateTimeFieldNumber;
#endif  // !_MSC_VER

S2C_FaceShopInfo::S2C_FaceShopInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_FaceShopInfo::InitAsDefaultInstance() {
}

S2C_FaceShopInfo::S2C_FaceShopInfo(const S2C_FaceShopInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_FaceShopInfo::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  face_shop_surplus_update_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_FaceShopInfo::~S2C_FaceShopInfo() {
  SharedDtor();
}

void S2C_FaceShopInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2C_FaceShopInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_FaceShopInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_FaceShopInfo_descriptor_;
}

const S2C_FaceShopInfo& S2C_FaceShopInfo::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_FaceShopInfo* S2C_FaceShopInfo::default_instance_ = nullptr;

S2C_FaceShopInfo* S2C_FaceShopInfo::New() const {
  return new S2C_FaceShopInfo;
}

void S2C_FaceShopInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    face_shop_surplus_update_time_ = 0;
  }
  list_original_buy_face_.Clear();
  list_discount_buy_face_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_FaceShopInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list_original_buy_face;
        break;
      }

      // repeated .face_goods_info list_original_buy_face = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_original_buy_face:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_original_buy_face()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list_original_buy_face;
        if (input->ExpectTag(26)) goto parse_list_discount_buy_face;
        break;
      }

      // repeated .face_goods_info list_discount_buy_face = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_discount_buy_face:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_discount_buy_face()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_list_discount_buy_face;
        if (input->ExpectTag(32)) goto parse_face_shop_surplus_update_time;
        break;
      }

      // required sint32 face_shop_surplus_update_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_face_shop_surplus_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &face_shop_surplus_update_time_)));
          set_has_face_shop_surplus_update_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_FaceShopInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // repeated .face_goods_info list_original_buy_face = 2;
  for (int i = 0; i < this->list_original_buy_face_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list_original_buy_face(i), output);
  }

  // repeated .face_goods_info list_discount_buy_face = 3;
  for (int i = 0; i < this->list_discount_buy_face_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->list_discount_buy_face(i), output);
  }

  // required sint32 face_shop_surplus_update_time = 4;
  if (has_face_shop_surplus_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->face_shop_surplus_update_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_FaceShopInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // repeated .face_goods_info list_original_buy_face = 2;
  for (int i = 0; i < this->list_original_buy_face_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->list_original_buy_face(i), target);
  }

  // repeated .face_goods_info list_discount_buy_face = 3;
  for (int i = 0; i < this->list_discount_buy_face_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->list_discount_buy_face(i), target);
  }

  // required sint32 face_shop_surplus_update_time = 4;
  if (has_face_shop_surplus_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->face_shop_surplus_update_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_FaceShopInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required sint32 face_shop_surplus_update_time = 4;
    if (has_face_shop_surplus_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->face_shop_surplus_update_time());
    }

  }
  // repeated .face_goods_info list_original_buy_face = 2;
  total_size += 1 * this->list_original_buy_face_size();
  for (int i = 0; i < this->list_original_buy_face_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_original_buy_face(i));
  }

  // repeated .face_goods_info list_discount_buy_face = 3;
  total_size += 1 * this->list_discount_buy_face_size();
  for (int i = 0; i < this->list_discount_buy_face_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_discount_buy_face(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_FaceShopInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_FaceShopInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_FaceShopInfo*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_FaceShopInfo::MergeFrom(const S2C_FaceShopInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_original_buy_face_.MergeFrom(from.list_original_buy_face_);
  list_discount_buy_face_.MergeFrom(from.list_discount_buy_face_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_face_shop_surplus_update_time()) {
      set_face_shop_surplus_update_time(from.face_shop_surplus_update_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_FaceShopInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_FaceShopInfo::CopyFrom(const S2C_FaceShopInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_FaceShopInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  for (int i = 0; i < list_original_buy_face_size(); i++) {
    if (!this->list_original_buy_face(i).IsInitialized()) return false;
  }
  for (int i = 0; i < list_discount_buy_face_size(); i++) {
    if (!this->list_discount_buy_face(i).IsInitialized()) return false;
  }
  return true;
}

void S2C_FaceShopInfo::Swap(S2C_FaceShopInfo* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    list_original_buy_face_.Swap(&other->list_original_buy_face_);
    list_discount_buy_face_.Swap(&other->list_discount_buy_face_);
    std::swap(face_shop_surplus_update_time_, other->face_shop_surplus_update_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_FaceShopInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_FaceShopInfo_descriptor_;
  metadata.reflection = S2C_FaceShopInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_BuyFaceInShop::kRoleIndexFieldNumber;
const int C2S_BuyFaceInShop::kFaceShopIdFieldNumber;
const int C2S_BuyFaceInShop::kFaceDurationFieldNumber;
const int C2S_BuyFaceInShop::kFaceIsdiscountFieldNumber;
#endif  // !_MSC_VER

C2S_BuyFaceInShop::C2S_BuyFaceInShop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_BuyFaceInShop::InitAsDefaultInstance() {
}

C2S_BuyFaceInShop::C2S_BuyFaceInShop(const C2S_BuyFaceInShop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_BuyFaceInShop::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  face_shop_id_ = 0;
  face_duration_ = 0;
  face_isdiscount_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_BuyFaceInShop::~C2S_BuyFaceInShop() {
  SharedDtor();
}

void C2S_BuyFaceInShop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_BuyFaceInShop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_BuyFaceInShop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_BuyFaceInShop_descriptor_;
}

const C2S_BuyFaceInShop& C2S_BuyFaceInShop::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_BuyFaceInShop* C2S_BuyFaceInShop::default_instance_ = nullptr;

C2S_BuyFaceInShop* C2S_BuyFaceInShop::New() const {
  return new C2S_BuyFaceInShop;
}

void C2S_BuyFaceInShop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    face_shop_id_ = 0;
    face_duration_ = 0;
    face_isdiscount_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_BuyFaceInShop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_face_shop_id;
        break;
      }

      // required sint32 face_shop_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_face_shop_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &face_shop_id_)));
          set_has_face_shop_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_face_duration;
        break;
      }

      // required sint32 face_duration = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_face_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &face_duration_)));
          set_has_face_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_face_isdiscount;
        break;
      }

      // required bool face_isdiscount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_face_isdiscount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &face_isdiscount_)));
          set_has_face_isdiscount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_BuyFaceInShop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required sint32 face_shop_id = 2;
  if (has_face_shop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->face_shop_id(), output);
  }

  // required sint32 face_duration = 3;
  if (has_face_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->face_duration(), output);
  }

  // required bool face_isdiscount = 4;
  if (has_face_isdiscount()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->face_isdiscount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_BuyFaceInShop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required sint32 face_shop_id = 2;
  if (has_face_shop_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->face_shop_id(), target);
  }

  // required sint32 face_duration = 3;
  if (has_face_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->face_duration(), target);
  }

  // required bool face_isdiscount = 4;
  if (has_face_isdiscount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->face_isdiscount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_BuyFaceInShop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required sint32 face_shop_id = 2;
    if (has_face_shop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->face_shop_id());
    }

    // required sint32 face_duration = 3;
    if (has_face_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->face_duration());
    }

    // required bool face_isdiscount = 4;
    if (has_face_isdiscount()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_BuyFaceInShop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_BuyFaceInShop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_BuyFaceInShop*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_BuyFaceInShop::MergeFrom(const C2S_BuyFaceInShop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_face_shop_id()) {
      set_face_shop_id(from.face_shop_id());
    }
    if (from.has_face_duration()) {
      set_face_duration(from.face_duration());
    }
    if (from.has_face_isdiscount()) {
      set_face_isdiscount(from.face_isdiscount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_BuyFaceInShop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_BuyFaceInShop::CopyFrom(const C2S_BuyFaceInShop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_BuyFaceInShop::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void C2S_BuyFaceInShop::Swap(C2S_BuyFaceInShop* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(face_shop_id_, other->face_shop_id_);
    std::swap(face_duration_, other->face_duration_);
    std::swap(face_isdiscount_, other->face_isdiscount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_BuyFaceInShop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_BuyFaceInShop_descriptor_;
  metadata.reflection = C2S_BuyFaceInShop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_BuyFaceInShop::kRetCodeFieldNumber;
const int S2C_BuyFaceInShop::kRoleIndexFieldNumber;
const int S2C_BuyFaceInShop::kFaceShopIdFieldNumber;
const int S2C_BuyFaceInShop::kFaceDurationFieldNumber;
#endif  // !_MSC_VER

S2C_BuyFaceInShop::S2C_BuyFaceInShop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_BuyFaceInShop::InitAsDefaultInstance() {
}

S2C_BuyFaceInShop::S2C_BuyFaceInShop(const S2C_BuyFaceInShop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_BuyFaceInShop::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_index_ = GOOGLE_LONGLONG(0);
  face_shop_id_ = 0;
  face_duration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_BuyFaceInShop::~S2C_BuyFaceInShop() {
  SharedDtor();
}

void S2C_BuyFaceInShop::SharedDtor() {
  if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
    delete ret_code_;
  }
  if (this != default_instance_) {
  }
}

void S2C_BuyFaceInShop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_BuyFaceInShop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_BuyFaceInShop_descriptor_;
}

const S2C_BuyFaceInShop& S2C_BuyFaceInShop::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_BuyFaceInShop* S2C_BuyFaceInShop::default_instance_ = nullptr;

S2C_BuyFaceInShop* S2C_BuyFaceInShop::New() const {
  return new S2C_BuyFaceInShop;
}

void S2C_BuyFaceInShop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret_code()) {
      if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
        ret_code_->clear();
      }
    }
    role_index_ = GOOGLE_LONGLONG(0);
    face_shop_id_ = 0;
    face_duration_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_BuyFaceInShop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ret_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_index;
        break;
      }

      // required int64 role_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_face_shop_id;
        break;
      }

      // required sint32 face_shop_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_face_shop_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &face_shop_id_)));
          set_has_face_shop_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_face_duration;
        break;
      }

      // required sint32 face_duration = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_face_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &face_duration_)));
          set_has_face_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_BuyFaceInShop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->ret_code(), output);
  }

  // required int64 role_index = 2;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->role_index(), output);
  }

  // required sint32 face_shop_id = 3;
  if (has_face_shop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->face_shop_id(), output);
  }

  // required sint32 face_duration = 4;
  if (has_face_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->face_duration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_BuyFaceInShop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes ret_code = 1;
  if (has_ret_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ret_code(), target);
  }

  // required int64 role_index = 2;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->role_index(), target);
  }

  // required sint32 face_shop_id = 3;
  if (has_face_shop_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->face_shop_id(), target);
  }

  // required sint32 face_duration = 4;
  if (has_face_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->face_duration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_BuyFaceInShop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ret_code());
    }

    // required int64 role_index = 2;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required sint32 face_shop_id = 3;
    if (has_face_shop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->face_shop_id());
    }

    // required sint32 face_duration = 4;
    if (has_face_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->face_duration());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_BuyFaceInShop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_BuyFaceInShop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_BuyFaceInShop*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_BuyFaceInShop::MergeFrom(const S2C_BuyFaceInShop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_face_shop_id()) {
      set_face_shop_id(from.face_shop_id());
    }
    if (from.has_face_duration()) {
      set_face_duration(from.face_duration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_BuyFaceInShop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_BuyFaceInShop::CopyFrom(const S2C_BuyFaceInShop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_BuyFaceInShop::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void S2C_BuyFaceInShop::Swap(S2C_BuyFaceInShop* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(role_index_, other->role_index_);
    std::swap(face_shop_id_, other->face_shop_id_);
    std::swap(face_duration_, other->face_duration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_BuyFaceInShop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_BuyFaceInShop_descriptor_;
  metadata.reflection = S2C_BuyFaceInShop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_RoleFaceInfo::kRoleIndexFieldNumber;
#endif  // !_MSC_VER

C2S_RoleFaceInfo::C2S_RoleFaceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_RoleFaceInfo::InitAsDefaultInstance() {
}

C2S_RoleFaceInfo::C2S_RoleFaceInfo(const C2S_RoleFaceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_RoleFaceInfo::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_RoleFaceInfo::~C2S_RoleFaceInfo() {
  SharedDtor();
}

void C2S_RoleFaceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_RoleFaceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_RoleFaceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_RoleFaceInfo_descriptor_;
}

const C2S_RoleFaceInfo& C2S_RoleFaceInfo::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_RoleFaceInfo* C2S_RoleFaceInfo::default_instance_ = nullptr;

C2S_RoleFaceInfo* C2S_RoleFaceInfo::New() const {
  return new C2S_RoleFaceInfo;
}

void C2S_RoleFaceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_RoleFaceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_RoleFaceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_RoleFaceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_RoleFaceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_RoleFaceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_RoleFaceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_RoleFaceInfo*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_RoleFaceInfo::MergeFrom(const C2S_RoleFaceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_RoleFaceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_RoleFaceInfo::CopyFrom(const C2S_RoleFaceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_RoleFaceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2S_RoleFaceInfo::Swap(C2S_RoleFaceInfo* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_RoleFaceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_RoleFaceInfo_descriptor_;
  metadata.reflection = C2S_RoleFaceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_RoleFaceInfo::kRoleIndexFieldNumber;
const int S2C_RoleFaceInfo::kRoleFaceInfoFieldNumber;
#endif  // !_MSC_VER

S2C_RoleFaceInfo::S2C_RoleFaceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_RoleFaceInfo::InitAsDefaultInstance() {
  role_face_info_ = const_cast< ::list_role_face_info*>(&::list_role_face_info::default_instance());
}

S2C_RoleFaceInfo::S2C_RoleFaceInfo(const S2C_RoleFaceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_RoleFaceInfo::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  role_face_info_ = nullptr;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_RoleFaceInfo::~S2C_RoleFaceInfo() {
  SharedDtor();
}

void S2C_RoleFaceInfo::SharedDtor() {
  if (this != default_instance_) {
    delete role_face_info_;
  }
}

void S2C_RoleFaceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_RoleFaceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_RoleFaceInfo_descriptor_;
}

const S2C_RoleFaceInfo& S2C_RoleFaceInfo::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_RoleFaceInfo* S2C_RoleFaceInfo::default_instance_ = nullptr;

S2C_RoleFaceInfo* S2C_RoleFaceInfo::New() const {
  return new S2C_RoleFaceInfo;
}

void S2C_RoleFaceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    if (has_role_face_info()) {
      if (role_face_info_ != nullptr) role_face_info_->::list_role_face_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_RoleFaceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role_face_info;
        break;
      }

      // required .list_role_face_info role_face_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_face_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_face_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_RoleFaceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required .list_role_face_info role_face_info = 3;
  if (has_role_face_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->role_face_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_RoleFaceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required .list_role_face_info role_face_info = 3;
  if (has_role_face_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->role_face_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_RoleFaceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required .list_role_face_info role_face_info = 3;
    if (has_role_face_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_face_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_RoleFaceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_RoleFaceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_RoleFaceInfo*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_RoleFaceInfo::MergeFrom(const S2C_RoleFaceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_role_face_info()) {
      mutable_role_face_info()->::list_role_face_info::MergeFrom(from.role_face_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_RoleFaceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_RoleFaceInfo::CopyFrom(const S2C_RoleFaceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_RoleFaceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_role_face_info()) {
    if (!this->role_face_info().IsInitialized()) return false;
  }
  return true;
}

void S2C_RoleFaceInfo::Swap(S2C_RoleFaceInfo* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(role_face_info_, other->role_face_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_RoleFaceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_RoleFaceInfo_descriptor_;
  metadata.reflection = S2C_RoleFaceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_DressFace::kRoleIndexFieldNumber;
const int C2S_DressFace::kFaceIdFieldNumber;
#endif  // !_MSC_VER

C2S_DressFace::C2S_DressFace()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_DressFace::InitAsDefaultInstance() {
}

C2S_DressFace::C2S_DressFace(const C2S_DressFace& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_DressFace::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  face_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_DressFace::~C2S_DressFace() {
  SharedDtor();
}

void C2S_DressFace::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_DressFace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_DressFace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_DressFace_descriptor_;
}

const C2S_DressFace& C2S_DressFace::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_DressFace* C2S_DressFace::default_instance_ = nullptr;

C2S_DressFace* C2S_DressFace::New() const {
  return new C2S_DressFace;
}

void C2S_DressFace::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    face_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_DressFace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_face_id;
        break;
      }

      // required sint32 face_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_face_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &face_id_)));
          set_has_face_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_DressFace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required sint32 face_id = 2;
  if (has_face_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->face_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_DressFace::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required sint32 face_id = 2;
  if (has_face_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->face_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_DressFace::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required sint32 face_id = 2;
    if (has_face_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->face_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_DressFace::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_DressFace* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_DressFace*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_DressFace::MergeFrom(const C2S_DressFace& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_face_id()) {
      set_face_id(from.face_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_DressFace::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_DressFace::CopyFrom(const C2S_DressFace& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_DressFace::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C2S_DressFace::Swap(C2S_DressFace* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(face_id_, other->face_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_DressFace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_DressFace_descriptor_;
  metadata.reflection = C2S_DressFace_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_DressFace::kRetCodeFieldNumber;
const int S2C_DressFace::kRoleIndexFieldNumber;
const int S2C_DressFace::kFaceIdFieldNumber;
#endif  // !_MSC_VER

S2C_DressFace::S2C_DressFace()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_DressFace::InitAsDefaultInstance() {
}

S2C_DressFace::S2C_DressFace(const S2C_DressFace& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_DressFace::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_index_ = GOOGLE_LONGLONG(0);
  face_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_DressFace::~S2C_DressFace() {
  SharedDtor();
}

void S2C_DressFace::SharedDtor() {
  if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
    delete ret_code_;
  }
  if (this != default_instance_) {
  }
}

void S2C_DressFace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_DressFace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_DressFace_descriptor_;
}

const S2C_DressFace& S2C_DressFace::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_DressFace* S2C_DressFace::default_instance_ = nullptr;

S2C_DressFace* S2C_DressFace::New() const {
  return new S2C_DressFace;
}

void S2C_DressFace::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret_code()) {
      if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
        ret_code_->clear();
      }
    }
    role_index_ = GOOGLE_LONGLONG(0);
    face_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_DressFace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ret_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_index;
        break;
      }

      // required int64 role_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_face_id;
        break;
      }

      // required sint32 face_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_face_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &face_id_)));
          set_has_face_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_DressFace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->ret_code(), output);
  }

  // required int64 role_index = 2;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->role_index(), output);
  }

  // required sint32 face_id = 3;
  if (has_face_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->face_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_DressFace::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes ret_code = 1;
  if (has_ret_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ret_code(), target);
  }

  // required int64 role_index = 2;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->role_index(), target);
  }

  // required sint32 face_id = 3;
  if (has_face_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->face_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_DressFace::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ret_code());
    }

    // required int64 role_index = 2;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required sint32 face_id = 3;
    if (has_face_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->face_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_DressFace::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_DressFace* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_DressFace*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_DressFace::MergeFrom(const S2C_DressFace& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_face_id()) {
      set_face_id(from.face_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_DressFace::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_DressFace::CopyFrom(const S2C_DressFace& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_DressFace::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2C_DressFace::Swap(S2C_DressFace* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(role_index_, other->role_index_);
    std::swap(face_id_, other->face_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_DressFace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_DressFace_descriptor_;
  metadata.reflection = S2C_DressFace_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_TakeOffFace::kRoleIndexFieldNumber;
const int C2S_TakeOffFace::kFaceIdFieldNumber;
#endif  // !_MSC_VER

C2S_TakeOffFace::C2S_TakeOffFace()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_TakeOffFace::InitAsDefaultInstance() {
}

C2S_TakeOffFace::C2S_TakeOffFace(const C2S_TakeOffFace& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_TakeOffFace::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  face_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_TakeOffFace::~C2S_TakeOffFace() {
  SharedDtor();
}

void C2S_TakeOffFace::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_TakeOffFace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_TakeOffFace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_TakeOffFace_descriptor_;
}

const C2S_TakeOffFace& C2S_TakeOffFace::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_TakeOffFace* C2S_TakeOffFace::default_instance_ = nullptr;

C2S_TakeOffFace* C2S_TakeOffFace::New() const {
  return new C2S_TakeOffFace;
}

void C2S_TakeOffFace::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    face_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_TakeOffFace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_face_id;
        break;
      }

      // required sint32 face_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_face_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &face_id_)));
          set_has_face_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_TakeOffFace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required sint32 face_id = 2;
  if (has_face_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->face_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_TakeOffFace::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required sint32 face_id = 2;
  if (has_face_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->face_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_TakeOffFace::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required sint32 face_id = 2;
    if (has_face_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->face_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_TakeOffFace::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_TakeOffFace* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_TakeOffFace*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_TakeOffFace::MergeFrom(const C2S_TakeOffFace& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_face_id()) {
      set_face_id(from.face_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_TakeOffFace::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_TakeOffFace::CopyFrom(const C2S_TakeOffFace& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_TakeOffFace::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C2S_TakeOffFace::Swap(C2S_TakeOffFace* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(face_id_, other->face_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_TakeOffFace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_TakeOffFace_descriptor_;
  metadata.reflection = C2S_TakeOffFace_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_TakeOffFace::kRetCodeFieldNumber;
const int S2C_TakeOffFace::kRoleIndexFieldNumber;
const int S2C_TakeOffFace::kFaceIdFieldNumber;
#endif  // !_MSC_VER

S2C_TakeOffFace::S2C_TakeOffFace()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_TakeOffFace::InitAsDefaultInstance() {
}

S2C_TakeOffFace::S2C_TakeOffFace(const S2C_TakeOffFace& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_TakeOffFace::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_index_ = GOOGLE_LONGLONG(0);
  face_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_TakeOffFace::~S2C_TakeOffFace() {
  SharedDtor();
}

void S2C_TakeOffFace::SharedDtor() {
  if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
    delete ret_code_;
  }
  if (this != default_instance_) {
  }
}

void S2C_TakeOffFace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_TakeOffFace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_TakeOffFace_descriptor_;
}

const S2C_TakeOffFace& S2C_TakeOffFace::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_TakeOffFace* S2C_TakeOffFace::default_instance_ = nullptr;

S2C_TakeOffFace* S2C_TakeOffFace::New() const {
  return new S2C_TakeOffFace;
}

void S2C_TakeOffFace::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret_code()) {
      if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
        ret_code_->clear();
      }
    }
    role_index_ = GOOGLE_LONGLONG(0);
    face_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_TakeOffFace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ret_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_index;
        break;
      }

      // required int64 role_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_face_id;
        break;
      }

      // required sint32 face_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_face_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &face_id_)));
          set_has_face_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_TakeOffFace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->ret_code(), output);
  }

  // required int64 role_index = 2;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->role_index(), output);
  }

  // required sint32 face_id = 3;
  if (has_face_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->face_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_TakeOffFace::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes ret_code = 1;
  if (has_ret_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ret_code(), target);
  }

  // required int64 role_index = 2;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->role_index(), target);
  }

  // required sint32 face_id = 3;
  if (has_face_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->face_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_TakeOffFace::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ret_code());
    }

    // required int64 role_index = 2;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required sint32 face_id = 3;
    if (has_face_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->face_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_TakeOffFace::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_TakeOffFace* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_TakeOffFace*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_TakeOffFace::MergeFrom(const S2C_TakeOffFace& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_face_id()) {
      set_face_id(from.face_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_TakeOffFace::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_TakeOffFace::CopyFrom(const S2C_TakeOffFace& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_TakeOffFace::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2C_TakeOffFace::Swap(S2C_TakeOffFace* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(role_index_, other->role_index_);
    std::swap(face_id_, other->face_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_TakeOffFace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_TakeOffFace_descriptor_;
  metadata.reflection = S2C_TakeOffFace_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_ManualUpdateFaceShop::kRoleIndexFieldNumber;
#endif  // !_MSC_VER

C2S_ManualUpdateFaceShop::C2S_ManualUpdateFaceShop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_ManualUpdateFaceShop::InitAsDefaultInstance() {
}

C2S_ManualUpdateFaceShop::C2S_ManualUpdateFaceShop(const C2S_ManualUpdateFaceShop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_ManualUpdateFaceShop::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_ManualUpdateFaceShop::~C2S_ManualUpdateFaceShop() {
  SharedDtor();
}

void C2S_ManualUpdateFaceShop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_ManualUpdateFaceShop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_ManualUpdateFaceShop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_ManualUpdateFaceShop_descriptor_;
}

const C2S_ManualUpdateFaceShop& C2S_ManualUpdateFaceShop::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_ManualUpdateFaceShop* C2S_ManualUpdateFaceShop::default_instance_ = nullptr;

C2S_ManualUpdateFaceShop* C2S_ManualUpdateFaceShop::New() const {
  return new C2S_ManualUpdateFaceShop;
}

void C2S_ManualUpdateFaceShop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_ManualUpdateFaceShop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_ManualUpdateFaceShop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_ManualUpdateFaceShop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_ManualUpdateFaceShop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_ManualUpdateFaceShop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_ManualUpdateFaceShop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_ManualUpdateFaceShop*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_ManualUpdateFaceShop::MergeFrom(const C2S_ManualUpdateFaceShop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_ManualUpdateFaceShop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_ManualUpdateFaceShop::CopyFrom(const C2S_ManualUpdateFaceShop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_ManualUpdateFaceShop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2S_ManualUpdateFaceShop::Swap(C2S_ManualUpdateFaceShop* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_ManualUpdateFaceShop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_ManualUpdateFaceShop_descriptor_;
  metadata.reflection = C2S_ManualUpdateFaceShop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_ManualUpdateFaceShop::kRetCodeFieldNumber;
const int S2C_ManualUpdateFaceShop::kRoleIndexFieldNumber;
#endif  // !_MSC_VER

S2C_ManualUpdateFaceShop::S2C_ManualUpdateFaceShop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_ManualUpdateFaceShop::InitAsDefaultInstance() {
}

S2C_ManualUpdateFaceShop::S2C_ManualUpdateFaceShop(const S2C_ManualUpdateFaceShop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_ManualUpdateFaceShop::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_ManualUpdateFaceShop::~S2C_ManualUpdateFaceShop() {
  SharedDtor();
}

void S2C_ManualUpdateFaceShop::SharedDtor() {
  if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
    delete ret_code_;
  }
  if (this != default_instance_) {
  }
}

void S2C_ManualUpdateFaceShop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_ManualUpdateFaceShop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_ManualUpdateFaceShop_descriptor_;
}

const S2C_ManualUpdateFaceShop& S2C_ManualUpdateFaceShop::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_ManualUpdateFaceShop* S2C_ManualUpdateFaceShop::default_instance_ = nullptr;

S2C_ManualUpdateFaceShop* S2C_ManualUpdateFaceShop::New() const {
  return new S2C_ManualUpdateFaceShop;
}

void S2C_ManualUpdateFaceShop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret_code()) {
      if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
        ret_code_->clear();
      }
    }
    role_index_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_ManualUpdateFaceShop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ret_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_index;
        break;
      }

      // required int64 role_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_ManualUpdateFaceShop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->ret_code(), output);
  }

  // required int64 role_index = 2;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->role_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_ManualUpdateFaceShop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes ret_code = 1;
  if (has_ret_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ret_code(), target);
  }

  // required int64 role_index = 2;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->role_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_ManualUpdateFaceShop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ret_code());
    }

    // required int64 role_index = 2;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_ManualUpdateFaceShop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_ManualUpdateFaceShop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_ManualUpdateFaceShop*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_ManualUpdateFaceShop::MergeFrom(const S2C_ManualUpdateFaceShop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_ManualUpdateFaceShop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_ManualUpdateFaceShop::CopyFrom(const S2C_ManualUpdateFaceShop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_ManualUpdateFaceShop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2C_ManualUpdateFaceShop::Swap(S2C_ManualUpdateFaceShop* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(role_index_, other->role_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_ManualUpdateFaceShop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_ManualUpdateFaceShop_descriptor_;
  metadata.reflection = S2C_ManualUpdateFaceShop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_PassRisk::kRoleIndexFieldNumber;
const int C2S_PassRisk::kPassedFieldNumber;
const int C2S_PassRisk::kChapIdFieldNumber;
const int C2S_PassRisk::kLevelIdFieldNumber;
#endif  // !_MSC_VER

C2S_PassRisk::C2S_PassRisk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_PassRisk::InitAsDefaultInstance() {
}

C2S_PassRisk::C2S_PassRisk(const C2S_PassRisk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_PassRisk::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  passed_ = 0;
  chap_id_ = 0;
  level_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_PassRisk::~C2S_PassRisk() {
  SharedDtor();
}

void C2S_PassRisk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_PassRisk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_PassRisk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_PassRisk_descriptor_;
}

const C2S_PassRisk& C2S_PassRisk::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_PassRisk* C2S_PassRisk::default_instance_ = nullptr;

C2S_PassRisk* C2S_PassRisk::New() const {
  return new C2S_PassRisk;
}

void C2S_PassRisk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    passed_ = 0;
    chap_id_ = 0;
    level_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_PassRisk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_passed;
        break;
      }

      // required sint32 passed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_passed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &passed_)));
          set_has_passed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_chap_id;
        break;
      }

      // required sint32 chap_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chap_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &chap_id_)));
          set_has_chap_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level_id;
        break;
      }

      // required sint32 level_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &level_id_)));
          set_has_level_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_PassRisk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required sint32 passed = 2;
  if (has_passed()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->passed(), output);
  }

  // required sint32 chap_id = 3;
  if (has_chap_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->chap_id(), output);
  }

  // required sint32 level_id = 4;
  if (has_level_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->level_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_PassRisk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required sint32 passed = 2;
  if (has_passed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->passed(), target);
  }

  // required sint32 chap_id = 3;
  if (has_chap_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->chap_id(), target);
  }

  // required sint32 level_id = 4;
  if (has_level_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->level_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_PassRisk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required sint32 passed = 2;
    if (has_passed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->passed());
    }

    // required sint32 chap_id = 3;
    if (has_chap_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->chap_id());
    }

    // required sint32 level_id = 4;
    if (has_level_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->level_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_PassRisk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_PassRisk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_PassRisk*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_PassRisk::MergeFrom(const C2S_PassRisk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_passed()) {
      set_passed(from.passed());
    }
    if (from.has_chap_id()) {
      set_chap_id(from.chap_id());
    }
    if (from.has_level_id()) {
      set_level_id(from.level_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_PassRisk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_PassRisk::CopyFrom(const C2S_PassRisk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_PassRisk::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void C2S_PassRisk::Swap(C2S_PassRisk* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(passed_, other->passed_);
    std::swap(chap_id_, other->chap_id_);
    std::swap(level_id_, other->level_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_PassRisk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_PassRisk_descriptor_;
  metadata.reflection = C2S_PassRisk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_PassRisk::kRetCodeFieldNumber;
const int S2C_PassRisk::kListRewardFieldNumber;
#endif  // !_MSC_VER

S2C_PassRisk::S2C_PassRisk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_PassRisk::InitAsDefaultInstance() {
}

S2C_PassRisk::S2C_PassRisk(const S2C_PassRisk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_PassRisk::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_PassRisk::~S2C_PassRisk() {
  SharedDtor();
}

void S2C_PassRisk::SharedDtor() {
  if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
    delete ret_code_;
  }
  if (this != default_instance_) {
  }
}

void S2C_PassRisk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_PassRisk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_PassRisk_descriptor_;
}

const S2C_PassRisk& S2C_PassRisk::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_PassRisk* S2C_PassRisk::default_instance_ = nullptr;

S2C_PassRisk* S2C_PassRisk::New() const {
  return new S2C_PassRisk;
}

void S2C_PassRisk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret_code()) {
      if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
        ret_code_->clear();
      }
    }
  }
  list_reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_PassRisk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ret_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list_reward;
        break;
      }

      // repeated .reward_info list_reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list_reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_PassRisk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->ret_code(), output);
  }

  // repeated .reward_info list_reward = 2;
  for (int i = 0; i < this->list_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list_reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_PassRisk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes ret_code = 1;
  if (has_ret_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ret_code(), target);
  }

  // repeated .reward_info list_reward = 2;
  for (int i = 0; i < this->list_reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->list_reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_PassRisk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ret_code());
    }

  }
  // repeated .reward_info list_reward = 2;
  total_size += 1 * this->list_reward_size();
  for (int i = 0; i < this->list_reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_PassRisk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_PassRisk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_PassRisk*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_PassRisk::MergeFrom(const S2C_PassRisk& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_reward_.MergeFrom(from.list_reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_PassRisk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_PassRisk::CopyFrom(const S2C_PassRisk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_PassRisk::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < list_reward_size(); i++) {
    if (!this->list_reward(i).IsInitialized()) return false;
  }
  return true;
}

void S2C_PassRisk::Swap(S2C_PassRisk* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    list_reward_.Swap(&other->list_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_PassRisk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_PassRisk_descriptor_;
  metadata.reflection = S2C_PassRisk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_ReadyEnterRisk::kRoleIndexFieldNumber;
const int C2S_ReadyEnterRisk::kRiskIdFieldNumber;
const int C2S_ReadyEnterRisk::kNpcIdFieldNumber;
const int C2S_ReadyEnterRisk::kSceneIdFieldNumber;
const int C2S_ReadyEnterRisk::kSceneTypeFieldNumber;
const int C2S_ReadyEnterRisk::kTransInfoIdFieldNumber;
#endif  // !_MSC_VER

C2S_ReadyEnterRisk::C2S_ReadyEnterRisk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_ReadyEnterRisk::InitAsDefaultInstance() {
}

C2S_ReadyEnterRisk::C2S_ReadyEnterRisk(const C2S_ReadyEnterRisk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_ReadyEnterRisk::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  risk_id_ = 0;
  npc_id_ = 0;
  scene_id_ = 0;
  scene_type_ = 0;
  trans_info_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_ReadyEnterRisk::~C2S_ReadyEnterRisk() {
  SharedDtor();
}

void C2S_ReadyEnterRisk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_ReadyEnterRisk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_ReadyEnterRisk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_ReadyEnterRisk_descriptor_;
}

const C2S_ReadyEnterRisk& C2S_ReadyEnterRisk::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_ReadyEnterRisk* C2S_ReadyEnterRisk::default_instance_ = nullptr;

C2S_ReadyEnterRisk* C2S_ReadyEnterRisk::New() const {
  return new C2S_ReadyEnterRisk;
}

void C2S_ReadyEnterRisk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    risk_id_ = 0;
    npc_id_ = 0;
    scene_id_ = 0;
    scene_type_ = 0;
    trans_info_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_ReadyEnterRisk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_risk_id;
        break;
      }

      // required sint32 risk_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_risk_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &risk_id_)));
          set_has_risk_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_npc_id;
        break;
      }

      // required sint32 npc_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npc_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &npc_id_)));
          set_has_npc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_scene_id;
        break;
      }

      // required sint32 scene_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_scene_type;
        break;
      }

      // required sint32 scene_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &scene_type_)));
          set_has_scene_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_trans_info_id;
        break;
      }

      // required sint32 trans_info_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trans_info_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &trans_info_id_)));
          set_has_trans_info_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_ReadyEnterRisk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required sint32 risk_id = 2;
  if (has_risk_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->risk_id(), output);
  }

  // required sint32 npc_id = 3;
  if (has_npc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->npc_id(), output);
  }

  // required sint32 scene_id = 4;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->scene_id(), output);
  }

  // required sint32 scene_type = 5;
  if (has_scene_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->scene_type(), output);
  }

  // required sint32 trans_info_id = 6;
  if (has_trans_info_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->trans_info_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_ReadyEnterRisk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required sint32 risk_id = 2;
  if (has_risk_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->risk_id(), target);
  }

  // required sint32 npc_id = 3;
  if (has_npc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->npc_id(), target);
  }

  // required sint32 scene_id = 4;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->scene_id(), target);
  }

  // required sint32 scene_type = 5;
  if (has_scene_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->scene_type(), target);
  }

  // required sint32 trans_info_id = 6;
  if (has_trans_info_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->trans_info_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_ReadyEnterRisk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required sint32 risk_id = 2;
    if (has_risk_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->risk_id());
    }

    // required sint32 npc_id = 3;
    if (has_npc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->npc_id());
    }

    // required sint32 scene_id = 4;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->scene_id());
    }

    // required sint32 scene_type = 5;
    if (has_scene_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->scene_type());
    }

    // required sint32 trans_info_id = 6;
    if (has_trans_info_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->trans_info_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_ReadyEnterRisk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_ReadyEnterRisk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_ReadyEnterRisk*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_ReadyEnterRisk::MergeFrom(const C2S_ReadyEnterRisk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_risk_id()) {
      set_risk_id(from.risk_id());
    }
    if (from.has_npc_id()) {
      set_npc_id(from.npc_id());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_scene_type()) {
      set_scene_type(from.scene_type());
    }
    if (from.has_trans_info_id()) {
      set_trans_info_id(from.trans_info_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_ReadyEnterRisk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_ReadyEnterRisk::CopyFrom(const C2S_ReadyEnterRisk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_ReadyEnterRisk::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void C2S_ReadyEnterRisk::Swap(C2S_ReadyEnterRisk* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(risk_id_, other->risk_id_);
    std::swap(npc_id_, other->npc_id_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(scene_type_, other->scene_type_);
    std::swap(trans_info_id_, other->trans_info_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_ReadyEnterRisk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_ReadyEnterRisk_descriptor_;
  metadata.reflection = C2S_ReadyEnterRisk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_ReadyEnterRisk::kRetCodeFieldNumber;
const int S2C_ReadyEnterRisk::kRoleIndexFieldNumber;
const int S2C_ReadyEnterRisk::kRiskIdFieldNumber;
const int S2C_ReadyEnterRisk::kNpcIdFieldNumber;
const int S2C_ReadyEnterRisk::kSceneIdFieldNumber;
const int S2C_ReadyEnterRisk::kTransInfoIdFieldNumber;
#endif  // !_MSC_VER

S2C_ReadyEnterRisk::S2C_ReadyEnterRisk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_ReadyEnterRisk::InitAsDefaultInstance() {
}

S2C_ReadyEnterRisk::S2C_ReadyEnterRisk(const S2C_ReadyEnterRisk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_ReadyEnterRisk::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_index_ = GOOGLE_LONGLONG(0);
  risk_id_ = 0;
  npc_id_ = 0;
  scene_id_ = 0;
  trans_info_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_ReadyEnterRisk::~S2C_ReadyEnterRisk() {
  SharedDtor();
}

void S2C_ReadyEnterRisk::SharedDtor() {
  if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
    delete ret_code_;
  }
  if (this != default_instance_) {
  }
}

void S2C_ReadyEnterRisk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_ReadyEnterRisk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_ReadyEnterRisk_descriptor_;
}

const S2C_ReadyEnterRisk& S2C_ReadyEnterRisk::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_ReadyEnterRisk* S2C_ReadyEnterRisk::default_instance_ = nullptr;

S2C_ReadyEnterRisk* S2C_ReadyEnterRisk::New() const {
  return new S2C_ReadyEnterRisk;
}

void S2C_ReadyEnterRisk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret_code()) {
      if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
        ret_code_->clear();
      }
    }
    role_index_ = GOOGLE_LONGLONG(0);
    risk_id_ = 0;
    npc_id_ = 0;
    scene_id_ = 0;
    trans_info_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_ReadyEnterRisk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ret_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_index;
        break;
      }

      // required int64 role_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_risk_id;
        break;
      }

      // required sint32 risk_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_risk_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &risk_id_)));
          set_has_risk_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_npc_id;
        break;
      }

      // required sint32 npc_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npc_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &npc_id_)));
          set_has_npc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_scene_id;
        break;
      }

      // required sint32 scene_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_trans_info_id;
        break;
      }

      // required sint32 trans_info_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trans_info_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &trans_info_id_)));
          set_has_trans_info_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_ReadyEnterRisk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->ret_code(), output);
  }

  // required int64 role_index = 2;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->role_index(), output);
  }

  // required sint32 risk_id = 3;
  if (has_risk_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->risk_id(), output);
  }

  // required sint32 npc_id = 4;
  if (has_npc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->npc_id(), output);
  }

  // required sint32 scene_id = 5;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->scene_id(), output);
  }

  // required sint32 trans_info_id = 6;
  if (has_trans_info_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->trans_info_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_ReadyEnterRisk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes ret_code = 1;
  if (has_ret_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ret_code(), target);
  }

  // required int64 role_index = 2;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->role_index(), target);
  }

  // required sint32 risk_id = 3;
  if (has_risk_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->risk_id(), target);
  }

  // required sint32 npc_id = 4;
  if (has_npc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->npc_id(), target);
  }

  // required sint32 scene_id = 5;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->scene_id(), target);
  }

  // required sint32 trans_info_id = 6;
  if (has_trans_info_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->trans_info_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_ReadyEnterRisk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ret_code());
    }

    // required int64 role_index = 2;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required sint32 risk_id = 3;
    if (has_risk_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->risk_id());
    }

    // required sint32 npc_id = 4;
    if (has_npc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->npc_id());
    }

    // required sint32 scene_id = 5;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->scene_id());
    }

    // required sint32 trans_info_id = 6;
    if (has_trans_info_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->trans_info_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_ReadyEnterRisk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_ReadyEnterRisk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_ReadyEnterRisk*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_ReadyEnterRisk::MergeFrom(const S2C_ReadyEnterRisk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_risk_id()) {
      set_risk_id(from.risk_id());
    }
    if (from.has_npc_id()) {
      set_npc_id(from.npc_id());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_trans_info_id()) {
      set_trans_info_id(from.trans_info_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_ReadyEnterRisk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_ReadyEnterRisk::CopyFrom(const S2C_ReadyEnterRisk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_ReadyEnterRisk::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void S2C_ReadyEnterRisk::Swap(S2C_ReadyEnterRisk* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(role_index_, other->role_index_);
    std::swap(risk_id_, other->risk_id_);
    std::swap(npc_id_, other->npc_id_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(trans_info_id_, other->trans_info_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_ReadyEnterRisk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_ReadyEnterRisk_descriptor_;
  metadata.reflection = S2C_ReadyEnterRisk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_NPC_Add_RecordQueue::kNpcIdFieldNumber;
const int S2C_NPC_Add_RecordQueue::kRoleIndexFieldNumber;
const int S2C_NPC_Add_RecordQueue::kSuitIdFieldNumber;
const int S2C_NPC_Add_RecordQueue::kFaceIdFieldNumber;
const int S2C_NPC_Add_RecordQueue::kWeaponIdFieldNumber;
const int S2C_NPC_Add_RecordQueue::kHelmetIdFieldNumber;
#endif  // !_MSC_VER

S2C_NPC_Add_RecordQueue::S2C_NPC_Add_RecordQueue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_NPC_Add_RecordQueue::InitAsDefaultInstance() {
}

S2C_NPC_Add_RecordQueue::S2C_NPC_Add_RecordQueue(const S2C_NPC_Add_RecordQueue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_NPC_Add_RecordQueue::SharedCtor() {
  _cached_size_ = 0;
  npc_id_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  suit_id_ = 0;
  face_id_ = 0;
  weapon_id_ = 0;
  helmet_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_NPC_Add_RecordQueue::~S2C_NPC_Add_RecordQueue() {
  SharedDtor();
}

void S2C_NPC_Add_RecordQueue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2C_NPC_Add_RecordQueue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_NPC_Add_RecordQueue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_NPC_Add_RecordQueue_descriptor_;
}

const S2C_NPC_Add_RecordQueue& S2C_NPC_Add_RecordQueue::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_NPC_Add_RecordQueue* S2C_NPC_Add_RecordQueue::default_instance_ = nullptr;

S2C_NPC_Add_RecordQueue* S2C_NPC_Add_RecordQueue::New() const {
  return new S2C_NPC_Add_RecordQueue;
}

void S2C_NPC_Add_RecordQueue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npc_id_ = 0;
    role_index_ = GOOGLE_LONGLONG(0);
    suit_id_ = 0;
    face_id_ = 0;
    weapon_id_ = 0;
    helmet_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_NPC_Add_RecordQueue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 npc_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &npc_id_)));
          set_has_npc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_index;
        break;
      }

      // required int64 role_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_suit_id;
        break;
      }

      // required sint32 suit_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suit_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &suit_id_)));
          set_has_suit_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_face_id;
        break;
      }

      // required sint32 face_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_face_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &face_id_)));
          set_has_face_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_weapon_id;
        break;
      }

      // required sint32 weapon_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weapon_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &weapon_id_)));
          set_has_weapon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_helmet_id;
        break;
      }

      // required sint32 helmet_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_helmet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &helmet_id_)));
          set_has_helmet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_NPC_Add_RecordQueue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 npc_id = 1;
  if (has_npc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->npc_id(), output);
  }

  // required int64 role_index = 2;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->role_index(), output);
  }

  // required sint32 suit_id = 3;
  if (has_suit_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->suit_id(), output);
  }

  // required sint32 face_id = 4;
  if (has_face_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->face_id(), output);
  }

  // required sint32 weapon_id = 5;
  if (has_weapon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->weapon_id(), output);
  }

  // required sint32 helmet_id = 6;
  if (has_helmet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->helmet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_NPC_Add_RecordQueue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 npc_id = 1;
  if (has_npc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->npc_id(), target);
  }

  // required int64 role_index = 2;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->role_index(), target);
  }

  // required sint32 suit_id = 3;
  if (has_suit_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->suit_id(), target);
  }

  // required sint32 face_id = 4;
  if (has_face_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->face_id(), target);
  }

  // required sint32 weapon_id = 5;
  if (has_weapon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->weapon_id(), target);
  }

  // required sint32 helmet_id = 6;
  if (has_helmet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->helmet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_NPC_Add_RecordQueue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 npc_id = 1;
    if (has_npc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->npc_id());
    }

    // required int64 role_index = 2;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required sint32 suit_id = 3;
    if (has_suit_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->suit_id());
    }

    // required sint32 face_id = 4;
    if (has_face_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->face_id());
    }

    // required sint32 weapon_id = 5;
    if (has_weapon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->weapon_id());
    }

    // required sint32 helmet_id = 6;
    if (has_helmet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->helmet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_NPC_Add_RecordQueue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_NPC_Add_RecordQueue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_NPC_Add_RecordQueue*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_NPC_Add_RecordQueue::MergeFrom(const S2C_NPC_Add_RecordQueue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npc_id()) {
      set_npc_id(from.npc_id());
    }
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_suit_id()) {
      set_suit_id(from.suit_id());
    }
    if (from.has_face_id()) {
      set_face_id(from.face_id());
    }
    if (from.has_weapon_id()) {
      set_weapon_id(from.weapon_id());
    }
    if (from.has_helmet_id()) {
      set_helmet_id(from.helmet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_NPC_Add_RecordQueue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_NPC_Add_RecordQueue::CopyFrom(const S2C_NPC_Add_RecordQueue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_NPC_Add_RecordQueue::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void S2C_NPC_Add_RecordQueue::Swap(S2C_NPC_Add_RecordQueue* other) {
  if (other != this) {
    std::swap(npc_id_, other->npc_id_);
    std::swap(role_index_, other->role_index_);
    std::swap(suit_id_, other->suit_id_);
    std::swap(face_id_, other->face_id_);
    std::swap(weapon_id_, other->weapon_id_);
    std::swap(helmet_id_, other->helmet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_NPC_Add_RecordQueue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_NPC_Add_RecordQueue_descriptor_;
  metadata.reflection = S2C_NPC_Add_RecordQueue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_NPC_Go_RecordQueue::kNpcIdFieldNumber;
const int S2C_NPC_Go_RecordQueue::kRoleIndexFieldNumber;
#endif  // !_MSC_VER

S2C_NPC_Go_RecordQueue::S2C_NPC_Go_RecordQueue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_NPC_Go_RecordQueue::InitAsDefaultInstance() {
}

S2C_NPC_Go_RecordQueue::S2C_NPC_Go_RecordQueue(const S2C_NPC_Go_RecordQueue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_NPC_Go_RecordQueue::SharedCtor() {
  _cached_size_ = 0;
  npc_id_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_NPC_Go_RecordQueue::~S2C_NPC_Go_RecordQueue() {
  SharedDtor();
}

void S2C_NPC_Go_RecordQueue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2C_NPC_Go_RecordQueue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_NPC_Go_RecordQueue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_NPC_Go_RecordQueue_descriptor_;
}

const S2C_NPC_Go_RecordQueue& S2C_NPC_Go_RecordQueue::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_NPC_Go_RecordQueue* S2C_NPC_Go_RecordQueue::default_instance_ = nullptr;

S2C_NPC_Go_RecordQueue* S2C_NPC_Go_RecordQueue::New() const {
  return new S2C_NPC_Go_RecordQueue;
}

void S2C_NPC_Go_RecordQueue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npc_id_ = 0;
    role_index_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_NPC_Go_RecordQueue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 npc_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &npc_id_)));
          set_has_npc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_index;
        break;
      }

      // required int64 role_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_NPC_Go_RecordQueue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 npc_id = 1;
  if (has_npc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->npc_id(), output);
  }

  // required int64 role_index = 2;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->role_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_NPC_Go_RecordQueue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 npc_id = 1;
  if (has_npc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->npc_id(), target);
  }

  // required int64 role_index = 2;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->role_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_NPC_Go_RecordQueue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 npc_id = 1;
    if (has_npc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->npc_id());
    }

    // required int64 role_index = 2;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_NPC_Go_RecordQueue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_NPC_Go_RecordQueue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_NPC_Go_RecordQueue*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_NPC_Go_RecordQueue::MergeFrom(const S2C_NPC_Go_RecordQueue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npc_id()) {
      set_npc_id(from.npc_id());
    }
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_NPC_Go_RecordQueue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_NPC_Go_RecordQueue::CopyFrom(const S2C_NPC_Go_RecordQueue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_NPC_Go_RecordQueue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2C_NPC_Go_RecordQueue::Swap(S2C_NPC_Go_RecordQueue* other) {
  if (other != this) {
    std::swap(npc_id_, other->npc_id_);
    std::swap(role_index_, other->role_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_NPC_Go_RecordQueue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_NPC_Go_RecordQueue_descriptor_;
  metadata.reflection = S2C_NPC_Go_RecordQueue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Select_Recommend_Friends::kRoleIndexFieldNumber;
#endif  // !_MSC_VER

C2S_Select_Recommend_Friends::C2S_Select_Recommend_Friends()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Select_Recommend_Friends::InitAsDefaultInstance() {
}

C2S_Select_Recommend_Friends::C2S_Select_Recommend_Friends(const C2S_Select_Recommend_Friends& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Select_Recommend_Friends::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Select_Recommend_Friends::~C2S_Select_Recommend_Friends() {
  SharedDtor();
}

void C2S_Select_Recommend_Friends::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_Select_Recommend_Friends::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Select_Recommend_Friends::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Select_Recommend_Friends_descriptor_;
}

const C2S_Select_Recommend_Friends& C2S_Select_Recommend_Friends::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_Select_Recommend_Friends* C2S_Select_Recommend_Friends::default_instance_ = nullptr;

C2S_Select_Recommend_Friends* C2S_Select_Recommend_Friends::New() const {
  return new C2S_Select_Recommend_Friends;
}

void C2S_Select_Recommend_Friends::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Select_Recommend_Friends::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Select_Recommend_Friends::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Select_Recommend_Friends::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Select_Recommend_Friends::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Select_Recommend_Friends::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Select_Recommend_Friends* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Select_Recommend_Friends*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Select_Recommend_Friends::MergeFrom(const C2S_Select_Recommend_Friends& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Select_Recommend_Friends::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Select_Recommend_Friends::CopyFrom(const C2S_Select_Recommend_Friends& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Select_Recommend_Friends::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2S_Select_Recommend_Friends::Swap(C2S_Select_Recommend_Friends* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Select_Recommend_Friends::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Select_Recommend_Friends_descriptor_;
  metadata.reflection = C2S_Select_Recommend_Friends_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Select_Recommend_Friends::kListFriendInfosFieldNumber;
#endif  // !_MSC_VER

S2C_Select_Recommend_Friends::S2C_Select_Recommend_Friends()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Select_Recommend_Friends::InitAsDefaultInstance() {
}

S2C_Select_Recommend_Friends::S2C_Select_Recommend_Friends(const S2C_Select_Recommend_Friends& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Select_Recommend_Friends::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Select_Recommend_Friends::~S2C_Select_Recommend_Friends() {
  SharedDtor();
}

void S2C_Select_Recommend_Friends::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2C_Select_Recommend_Friends::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Select_Recommend_Friends::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Select_Recommend_Friends_descriptor_;
}

const S2C_Select_Recommend_Friends& S2C_Select_Recommend_Friends::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Select_Recommend_Friends* S2C_Select_Recommend_Friends::default_instance_ = nullptr;

S2C_Select_Recommend_Friends* S2C_Select_Recommend_Friends::New() const {
  return new S2C_Select_Recommend_Friends;
}

void S2C_Select_Recommend_Friends::Clear() {
  list_friend_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Select_Recommend_Friends::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .game_friend list_friend_infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_friend_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_friend_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list_friend_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Select_Recommend_Friends::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .game_friend list_friend_infos = 1;
  for (int i = 0; i < this->list_friend_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list_friend_infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Select_Recommend_Friends::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .game_friend list_friend_infos = 1;
  for (int i = 0; i < this->list_friend_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list_friend_infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Select_Recommend_Friends::ByteSize() const {
  int total_size = 0;

  // repeated .game_friend list_friend_infos = 1;
  total_size += 1 * this->list_friend_infos_size();
  for (int i = 0; i < this->list_friend_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_friend_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Select_Recommend_Friends::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Select_Recommend_Friends* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Select_Recommend_Friends*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Select_Recommend_Friends::MergeFrom(const S2C_Select_Recommend_Friends& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_friend_infos_.MergeFrom(from.list_friend_infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Select_Recommend_Friends::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Select_Recommend_Friends::CopyFrom(const S2C_Select_Recommend_Friends& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Select_Recommend_Friends::IsInitialized() const {

  for (int i = 0; i < list_friend_infos_size(); i++) {
    if (!this->list_friend_infos(i).IsInitialized()) return false;
  }
  return true;
}

void S2C_Select_Recommend_Friends::Swap(S2C_Select_Recommend_Friends* other) {
  if (other != this) {
    list_friend_infos_.Swap(&other->list_friend_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Select_Recommend_Friends::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Select_Recommend_Friends_descriptor_;
  metadata.reflection = S2C_Select_Recommend_Friends_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_FindFriend::kRoleIndexFieldNumber;
const int C2S_FindFriend::kNickNameFieldNumber;
#endif  // !_MSC_VER

C2S_FindFriend::C2S_FindFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_FindFriend::InitAsDefaultInstance() {
}

C2S_FindFriend::C2S_FindFriend(const C2S_FindFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_FindFriend::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_FindFriend::~C2S_FindFriend() {
  SharedDtor();
}

void C2S_FindFriend::SharedDtor() {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (this != default_instance_) {
  }
}

void C2S_FindFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_FindFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_FindFriend_descriptor_;
}

const C2S_FindFriend& C2S_FindFriend::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_FindFriend* C2S_FindFriend::default_instance_ = nullptr;

C2S_FindFriend* C2S_FindFriend::New() const {
  return new C2S_FindFriend;
}

void C2S_FindFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
        nick_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_FindFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nick_name;
        break;
      }

      // required bytes nick_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nick_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_FindFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required bytes nick_name = 2;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->nick_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_FindFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required bytes nick_name = 2;
  if (has_nick_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->nick_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_FindFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required bytes nick_name = 2;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nick_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_FindFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_FindFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_FindFriend*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_FindFriend::MergeFrom(const C2S_FindFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_FindFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_FindFriend::CopyFrom(const C2S_FindFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_FindFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C2S_FindFriend::Swap(C2S_FindFriend* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_FindFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_FindFriend_descriptor_;
  metadata.reflection = C2S_FindFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_FindFriend::kRetCodeFieldNumber;
const int S2C_FindFriend::kFriendInfoFieldNumber;
#endif  // !_MSC_VER

S2C_FindFriend::S2C_FindFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_FindFriend::InitAsDefaultInstance() {
  friend_info_ = const_cast< ::game_friend*>(&::game_friend::default_instance());
}

S2C_FindFriend::S2C_FindFriend(const S2C_FindFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_FindFriend::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  friend_info_ = nullptr;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_FindFriend::~S2C_FindFriend() {
  SharedDtor();
}

void S2C_FindFriend::SharedDtor() {
  if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
    delete ret_code_;
  }
  if (this != default_instance_) {
    delete friend_info_;
  }
}

void S2C_FindFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_FindFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_FindFriend_descriptor_;
}

const S2C_FindFriend& S2C_FindFriend::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_FindFriend* S2C_FindFriend::default_instance_ = nullptr;

S2C_FindFriend* S2C_FindFriend::New() const {
  return new S2C_FindFriend;
}

void S2C_FindFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret_code()) {
      if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
        ret_code_->clear();
      }
    }
    if (has_friend_info()) {
      if (friend_info_ != nullptr) friend_info_->::game_friend::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_FindFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ret_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_friend_info;
        break;
      }

      // optional .game_friend friend_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friend_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friend_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_FindFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->ret_code(), output);
  }

  // optional .game_friend friend_info = 2;
  if (has_friend_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->friend_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_FindFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes ret_code = 1;
  if (has_ret_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ret_code(), target);
  }

  // optional .game_friend friend_info = 2;
  if (has_friend_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->friend_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_FindFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ret_code());
    }

    // optional .game_friend friend_info = 2;
    if (has_friend_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friend_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_FindFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_FindFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_FindFriend*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_FindFriend::MergeFrom(const S2C_FindFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_friend_info()) {
      mutable_friend_info()->::game_friend::MergeFrom(from.friend_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_FindFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_FindFriend::CopyFrom(const S2C_FindFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_FindFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_friend_info()) {
    if (!this->friend_info().IsInitialized()) return false;
  }
  return true;
}

void S2C_FindFriend::Swap(S2C_FindFriend* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(friend_info_, other->friend_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_FindFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_FindFriend_descriptor_;
  metadata.reflection = S2C_FindFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Add_Friend::kRoleIndexFieldNumber;
const int C2S_Add_Friend::kTarRoleIndexFieldNumber;
#endif  // !_MSC_VER

C2S_Add_Friend::C2S_Add_Friend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Add_Friend::InitAsDefaultInstance() {
}

C2S_Add_Friend::C2S_Add_Friend(const C2S_Add_Friend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Add_Friend::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  tar_role_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Add_Friend::~C2S_Add_Friend() {
  SharedDtor();
}

void C2S_Add_Friend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_Add_Friend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Add_Friend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Add_Friend_descriptor_;
}

const C2S_Add_Friend& C2S_Add_Friend::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_Add_Friend* C2S_Add_Friend::default_instance_ = nullptr;

C2S_Add_Friend* C2S_Add_Friend::New() const {
  return new C2S_Add_Friend;
}

void C2S_Add_Friend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    tar_role_index_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Add_Friend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tar_role_index;
        break;
      }

      // required int64 tar_role_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tar_role_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tar_role_index_)));
          set_has_tar_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Add_Friend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required int64 tar_role_index = 2;
  if (has_tar_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->tar_role_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Add_Friend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required int64 tar_role_index = 2;
  if (has_tar_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->tar_role_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Add_Friend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required int64 tar_role_index = 2;
    if (has_tar_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tar_role_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Add_Friend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Add_Friend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Add_Friend*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Add_Friend::MergeFrom(const C2S_Add_Friend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_tar_role_index()) {
      set_tar_role_index(from.tar_role_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Add_Friend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Add_Friend::CopyFrom(const C2S_Add_Friend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Add_Friend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C2S_Add_Friend::Swap(C2S_Add_Friend* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(tar_role_index_, other->tar_role_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Add_Friend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Add_Friend_descriptor_;
  metadata.reflection = C2S_Add_Friend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Add_Friend::kTarRoleIndexFieldNumber;
const int S2C_Add_Friend::kRetCodeFieldNumber;
const int S2C_Add_Friend::kTarFriendInfoFieldNumber;
#endif  // !_MSC_VER

S2C_Add_Friend::S2C_Add_Friend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Add_Friend::InitAsDefaultInstance() {
  tar_friend_info_ = const_cast< ::game_friend*>(&::game_friend::default_instance());
}

S2C_Add_Friend::S2C_Add_Friend(const S2C_Add_Friend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Add_Friend::SharedCtor() {
  _cached_size_ = 0;
  tar_role_index_ = GOOGLE_LONGLONG(0);
  ret_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tar_friend_info_ = nullptr;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Add_Friend::~S2C_Add_Friend() {
  SharedDtor();
}

void S2C_Add_Friend::SharedDtor() {
  if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
    delete ret_code_;
  }
  if (this != default_instance_) {
    delete tar_friend_info_;
  }
}

void S2C_Add_Friend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Add_Friend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Add_Friend_descriptor_;
}

const S2C_Add_Friend& S2C_Add_Friend::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Add_Friend* S2C_Add_Friend::default_instance_ = nullptr;

S2C_Add_Friend* S2C_Add_Friend::New() const {
  return new S2C_Add_Friend;
}

void S2C_Add_Friend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tar_role_index_ = GOOGLE_LONGLONG(0);
    if (has_ret_code()) {
      if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
        ret_code_->clear();
      }
    }
    if (has_tar_friend_info()) {
      if (tar_friend_info_ != nullptr) tar_friend_info_->::game_friend::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Add_Friend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 tar_role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tar_role_index_)));
          set_has_tar_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ret_code;
        break;
      }

      // required bytes ret_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ret_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ret_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tar_friend_info;
        break;
      }

      // optional .game_friend tar_friend_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tar_friend_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tar_friend_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Add_Friend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 tar_role_index = 1;
  if (has_tar_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->tar_role_index(), output);
  }

  // required bytes ret_code = 2;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->ret_code(), output);
  }

  // optional .game_friend tar_friend_info = 3;
  if (has_tar_friend_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tar_friend_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Add_Friend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 tar_role_index = 1;
  if (has_tar_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->tar_role_index(), target);
  }

  // required bytes ret_code = 2;
  if (has_ret_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->ret_code(), target);
  }

  // optional .game_friend tar_friend_info = 3;
  if (has_tar_friend_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tar_friend_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Add_Friend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 tar_role_index = 1;
    if (has_tar_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tar_role_index());
    }

    // required bytes ret_code = 2;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ret_code());
    }

    // optional .game_friend tar_friend_info = 3;
    if (has_tar_friend_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tar_friend_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Add_Friend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Add_Friend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Add_Friend*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Add_Friend::MergeFrom(const S2C_Add_Friend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tar_role_index()) {
      set_tar_role_index(from.tar_role_index());
    }
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_tar_friend_info()) {
      mutable_tar_friend_info()->::game_friend::MergeFrom(from.tar_friend_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Add_Friend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Add_Friend::CopyFrom(const S2C_Add_Friend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Add_Friend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_tar_friend_info()) {
    if (!this->tar_friend_info().IsInitialized()) return false;
  }
  return true;
}

void S2C_Add_Friend::Swap(S2C_Add_Friend* other) {
  if (other != this) {
    std::swap(tar_role_index_, other->tar_role_index_);
    std::swap(ret_code_, other->ret_code_);
    std::swap(tar_friend_info_, other->tar_friend_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Add_Friend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Add_Friend_descriptor_;
  metadata.reflection = S2C_Add_Friend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Remove_Friend::kRoleIndexFieldNumber;
const int C2S_Remove_Friend::kTarRoleIndexFieldNumber;
#endif  // !_MSC_VER

C2S_Remove_Friend::C2S_Remove_Friend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Remove_Friend::InitAsDefaultInstance() {
}

C2S_Remove_Friend::C2S_Remove_Friend(const C2S_Remove_Friend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Remove_Friend::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  tar_role_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Remove_Friend::~C2S_Remove_Friend() {
  SharedDtor();
}

void C2S_Remove_Friend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_Remove_Friend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Remove_Friend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Remove_Friend_descriptor_;
}

const C2S_Remove_Friend& C2S_Remove_Friend::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_Remove_Friend* C2S_Remove_Friend::default_instance_ = nullptr;

C2S_Remove_Friend* C2S_Remove_Friend::New() const {
  return new C2S_Remove_Friend;
}

void C2S_Remove_Friend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    tar_role_index_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Remove_Friend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tar_role_index;
        break;
      }

      // required int64 tar_role_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tar_role_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tar_role_index_)));
          set_has_tar_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Remove_Friend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required int64 tar_role_index = 2;
  if (has_tar_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->tar_role_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Remove_Friend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required int64 tar_role_index = 2;
  if (has_tar_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->tar_role_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Remove_Friend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required int64 tar_role_index = 2;
    if (has_tar_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tar_role_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Remove_Friend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Remove_Friend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Remove_Friend*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Remove_Friend::MergeFrom(const C2S_Remove_Friend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_tar_role_index()) {
      set_tar_role_index(from.tar_role_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Remove_Friend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Remove_Friend::CopyFrom(const C2S_Remove_Friend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Remove_Friend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C2S_Remove_Friend::Swap(C2S_Remove_Friend* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(tar_role_index_, other->tar_role_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Remove_Friend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Remove_Friend_descriptor_;
  metadata.reflection = C2S_Remove_Friend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Remove_Friend::kTarRoleIndexFieldNumber;
const int S2C_Remove_Friend::kRetCodeFieldNumber;
#endif  // !_MSC_VER

S2C_Remove_Friend::S2C_Remove_Friend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Remove_Friend::InitAsDefaultInstance() {
}

S2C_Remove_Friend::S2C_Remove_Friend(const S2C_Remove_Friend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Remove_Friend::SharedCtor() {
  _cached_size_ = 0;
  tar_role_index_ = GOOGLE_LONGLONG(0);
  ret_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Remove_Friend::~S2C_Remove_Friend() {
  SharedDtor();
}

void S2C_Remove_Friend::SharedDtor() {
  if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
    delete ret_code_;
  }
  if (this != default_instance_) {
  }
}

void S2C_Remove_Friend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Remove_Friend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Remove_Friend_descriptor_;
}

const S2C_Remove_Friend& S2C_Remove_Friend::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Remove_Friend* S2C_Remove_Friend::default_instance_ = nullptr;

S2C_Remove_Friend* S2C_Remove_Friend::New() const {
  return new S2C_Remove_Friend;
}

void S2C_Remove_Friend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tar_role_index_ = GOOGLE_LONGLONG(0);
    if (has_ret_code()) {
      if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
        ret_code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Remove_Friend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 tar_role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tar_role_index_)));
          set_has_tar_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ret_code;
        break;
      }

      // required bytes ret_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ret_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ret_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Remove_Friend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 tar_role_index = 1;
  if (has_tar_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->tar_role_index(), output);
  }

  // required bytes ret_code = 2;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->ret_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Remove_Friend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 tar_role_index = 1;
  if (has_tar_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->tar_role_index(), target);
  }

  // required bytes ret_code = 2;
  if (has_ret_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->ret_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Remove_Friend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 tar_role_index = 1;
    if (has_tar_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tar_role_index());
    }

    // required bytes ret_code = 2;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ret_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Remove_Friend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Remove_Friend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Remove_Friend*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Remove_Friend::MergeFrom(const S2C_Remove_Friend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tar_role_index()) {
      set_tar_role_index(from.tar_role_index());
    }
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Remove_Friend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Remove_Friend::CopyFrom(const S2C_Remove_Friend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Remove_Friend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2C_Remove_Friend::Swap(S2C_Remove_Friend* other) {
  if (other != this) {
    std::swap(tar_role_index_, other->tar_role_index_);
    std::swap(ret_code_, other->ret_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Remove_Friend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Remove_Friend_descriptor_;
  metadata.reflection = S2C_Remove_Friend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Request_Add_Friend::kSrcRoleIndexFieldNumber;
const int S2C_Request_Add_Friend::kSrcFriendInfoFieldNumber;
#endif  // !_MSC_VER

S2C_Request_Add_Friend::S2C_Request_Add_Friend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Request_Add_Friend::InitAsDefaultInstance() {
  src_friend_info_ = const_cast< ::game_friend*>(&::game_friend::default_instance());
}

S2C_Request_Add_Friend::S2C_Request_Add_Friend(const S2C_Request_Add_Friend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Request_Add_Friend::SharedCtor() {
  _cached_size_ = 0;
  src_role_index_ = GOOGLE_LONGLONG(0);
  src_friend_info_ = nullptr;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Request_Add_Friend::~S2C_Request_Add_Friend() {
  SharedDtor();
}

void S2C_Request_Add_Friend::SharedDtor() {
  if (this != default_instance_) {
    delete src_friend_info_;
  }
}

void S2C_Request_Add_Friend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Request_Add_Friend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Request_Add_Friend_descriptor_;
}

const S2C_Request_Add_Friend& S2C_Request_Add_Friend::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Request_Add_Friend* S2C_Request_Add_Friend::default_instance_ = nullptr;

S2C_Request_Add_Friend* S2C_Request_Add_Friend::New() const {
  return new S2C_Request_Add_Friend;
}

void S2C_Request_Add_Friend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    src_role_index_ = GOOGLE_LONGLONG(0);
    if (has_src_friend_info()) {
      if (src_friend_info_ != nullptr) src_friend_info_->::game_friend::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Request_Add_Friend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 src_role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &src_role_index_)));
          set_has_src_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_src_friend_info;
        break;
      }

      // required .game_friend src_friend_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_src_friend_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_src_friend_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Request_Add_Friend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 src_role_index = 1;
  if (has_src_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->src_role_index(), output);
  }

  // required .game_friend src_friend_info = 2;
  if (has_src_friend_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->src_friend_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Request_Add_Friend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 src_role_index = 1;
  if (has_src_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->src_role_index(), target);
  }

  // required .game_friend src_friend_info = 2;
  if (has_src_friend_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->src_friend_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Request_Add_Friend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 src_role_index = 1;
    if (has_src_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->src_role_index());
    }

    // required .game_friend src_friend_info = 2;
    if (has_src_friend_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->src_friend_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Request_Add_Friend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Request_Add_Friend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Request_Add_Friend*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Request_Add_Friend::MergeFrom(const S2C_Request_Add_Friend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_role_index()) {
      set_src_role_index(from.src_role_index());
    }
    if (from.has_src_friend_info()) {
      mutable_src_friend_info()->::game_friend::MergeFrom(from.src_friend_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Request_Add_Friend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Request_Add_Friend::CopyFrom(const S2C_Request_Add_Friend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Request_Add_Friend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_src_friend_info()) {
    if (!this->src_friend_info().IsInitialized()) return false;
  }
  return true;
}

void S2C_Request_Add_Friend::Swap(S2C_Request_Add_Friend* other) {
  if (other != this) {
    std::swap(src_role_index_, other->src_role_index_);
    std::swap(src_friend_info_, other->src_friend_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Request_Add_Friend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Request_Add_Friend_descriptor_;
  metadata.reflection = S2C_Request_Add_Friend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Request_Add_Friend::kRoleIndexFieldNumber;
const int C2S_Request_Add_Friend::kSrcRoleIndexFieldNumber;
const int C2S_Request_Add_Friend::kIsRefuseFieldNumber;
#endif  // !_MSC_VER

C2S_Request_Add_Friend::C2S_Request_Add_Friend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Request_Add_Friend::InitAsDefaultInstance() {
}

C2S_Request_Add_Friend::C2S_Request_Add_Friend(const C2S_Request_Add_Friend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Request_Add_Friend::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  src_role_index_ = GOOGLE_LONGLONG(0);
  is_refuse_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Request_Add_Friend::~C2S_Request_Add_Friend() {
  SharedDtor();
}

void C2S_Request_Add_Friend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_Request_Add_Friend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Request_Add_Friend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Request_Add_Friend_descriptor_;
}

const C2S_Request_Add_Friend& C2S_Request_Add_Friend::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_Request_Add_Friend* C2S_Request_Add_Friend::default_instance_ = nullptr;

C2S_Request_Add_Friend* C2S_Request_Add_Friend::New() const {
  return new C2S_Request_Add_Friend;
}

void C2S_Request_Add_Friend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    src_role_index_ = GOOGLE_LONGLONG(0);
    is_refuse_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Request_Add_Friend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_src_role_index;
        break;
      }

      // required int64 src_role_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_role_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &src_role_index_)));
          set_has_src_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_refuse;
        break;
      }

      // required bool is_refuse = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_refuse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_refuse_)));
          set_has_is_refuse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Request_Add_Friend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required int64 src_role_index = 2;
  if (has_src_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->src_role_index(), output);
  }

  // required bool is_refuse = 3;
  if (has_is_refuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_refuse(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Request_Add_Friend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required int64 src_role_index = 2;
  if (has_src_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->src_role_index(), target);
  }

  // required bool is_refuse = 3;
  if (has_is_refuse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_refuse(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Request_Add_Friend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required int64 src_role_index = 2;
    if (has_src_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->src_role_index());
    }

    // required bool is_refuse = 3;
    if (has_is_refuse()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Request_Add_Friend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Request_Add_Friend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Request_Add_Friend*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Request_Add_Friend::MergeFrom(const C2S_Request_Add_Friend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_src_role_index()) {
      set_src_role_index(from.src_role_index());
    }
    if (from.has_is_refuse()) {
      set_is_refuse(from.is_refuse());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Request_Add_Friend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Request_Add_Friend::CopyFrom(const C2S_Request_Add_Friend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Request_Add_Friend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void C2S_Request_Add_Friend::Swap(C2S_Request_Add_Friend* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(src_role_index_, other->src_role_index_);
    std::swap(is_refuse_, other->is_refuse_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Request_Add_Friend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Request_Add_Friend_descriptor_;
  metadata.reflection = C2S_Request_Add_Friend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Friend_Online::kFriendRoleIndexFieldNumber;
const int S2C_Friend_Online::kSrcFriendInfoFieldNumber;
#endif  // !_MSC_VER

S2C_Friend_Online::S2C_Friend_Online()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Friend_Online::InitAsDefaultInstance() {
  src_friend_info_ = const_cast< ::game_friend*>(&::game_friend::default_instance());
}

S2C_Friend_Online::S2C_Friend_Online(const S2C_Friend_Online& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Friend_Online::SharedCtor() {
  _cached_size_ = 0;
  friend_role_index_ = GOOGLE_LONGLONG(0);
  src_friend_info_ = nullptr;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Friend_Online::~S2C_Friend_Online() {
  SharedDtor();
}

void S2C_Friend_Online::SharedDtor() {
  if (this != default_instance_) {
    delete src_friend_info_;
  }
}

void S2C_Friend_Online::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Friend_Online::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Friend_Online_descriptor_;
}

const S2C_Friend_Online& S2C_Friend_Online::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Friend_Online* S2C_Friend_Online::default_instance_ = nullptr;

S2C_Friend_Online* S2C_Friend_Online::New() const {
  return new S2C_Friend_Online;
}

void S2C_Friend_Online::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    friend_role_index_ = GOOGLE_LONGLONG(0);
    if (has_src_friend_info()) {
      if (src_friend_info_ != nullptr) src_friend_info_->::game_friend::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Friend_Online::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 friend_role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &friend_role_index_)));
          set_has_friend_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_src_friend_info;
        break;
      }

      // required .game_friend src_friend_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_src_friend_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_src_friend_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Friend_Online::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 friend_role_index = 1;
  if (has_friend_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->friend_role_index(), output);
  }

  // required .game_friend src_friend_info = 2;
  if (has_src_friend_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->src_friend_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Friend_Online::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 friend_role_index = 1;
  if (has_friend_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->friend_role_index(), target);
  }

  // required .game_friend src_friend_info = 2;
  if (has_src_friend_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->src_friend_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Friend_Online::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 friend_role_index = 1;
    if (has_friend_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->friend_role_index());
    }

    // required .game_friend src_friend_info = 2;
    if (has_src_friend_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->src_friend_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Friend_Online::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Friend_Online* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Friend_Online*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Friend_Online::MergeFrom(const S2C_Friend_Online& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friend_role_index()) {
      set_friend_role_index(from.friend_role_index());
    }
    if (from.has_src_friend_info()) {
      mutable_src_friend_info()->::game_friend::MergeFrom(from.src_friend_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Friend_Online::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Friend_Online::CopyFrom(const S2C_Friend_Online& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Friend_Online::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_src_friend_info()) {
    if (!this->src_friend_info().IsInitialized()) return false;
  }
  return true;
}

void S2C_Friend_Online::Swap(S2C_Friend_Online* other) {
  if (other != this) {
    std::swap(friend_role_index_, other->friend_role_index_);
    std::swap(src_friend_info_, other->src_friend_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Friend_Online::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Friend_Online_descriptor_;
  metadata.reflection = S2C_Friend_Online_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Friend_Offline::kFriendRoleIndexFieldNumber;
#endif  // !_MSC_VER

S2C_Friend_Offline::S2C_Friend_Offline()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Friend_Offline::InitAsDefaultInstance() {
}

S2C_Friend_Offline::S2C_Friend_Offline(const S2C_Friend_Offline& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Friend_Offline::SharedCtor() {
  _cached_size_ = 0;
  friend_role_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Friend_Offline::~S2C_Friend_Offline() {
  SharedDtor();
}

void S2C_Friend_Offline::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2C_Friend_Offline::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Friend_Offline::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Friend_Offline_descriptor_;
}

const S2C_Friend_Offline& S2C_Friend_Offline::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Friend_Offline* S2C_Friend_Offline::default_instance_ = nullptr;

S2C_Friend_Offline* S2C_Friend_Offline::New() const {
  return new S2C_Friend_Offline;
}

void S2C_Friend_Offline::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    friend_role_index_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Friend_Offline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 friend_role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &friend_role_index_)));
          set_has_friend_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Friend_Offline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 friend_role_index = 1;
  if (has_friend_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->friend_role_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Friend_Offline::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 friend_role_index = 1;
  if (has_friend_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->friend_role_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Friend_Offline::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 friend_role_index = 1;
    if (has_friend_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->friend_role_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Friend_Offline::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Friend_Offline* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Friend_Offline*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Friend_Offline::MergeFrom(const S2C_Friend_Offline& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friend_role_index()) {
      set_friend_role_index(from.friend_role_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Friend_Offline::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Friend_Offline::CopyFrom(const S2C_Friend_Offline& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Friend_Offline::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void S2C_Friend_Offline::Swap(S2C_Friend_Offline* other) {
  if (other != this) {
    std::swap(friend_role_index_, other->friend_role_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Friend_Offline::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Friend_Offline_descriptor_;
  metadata.reflection = S2C_Friend_Offline_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Skill_Study::kRoleIndexFieldNumber;
const int C2S_Skill_Study::kSkillIdFieldNumber;
#endif  // !_MSC_VER

C2S_Skill_Study::C2S_Skill_Study()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Skill_Study::InitAsDefaultInstance() {
}

C2S_Skill_Study::C2S_Skill_Study(const C2S_Skill_Study& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Skill_Study::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  skill_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Skill_Study::~C2S_Skill_Study() {
  SharedDtor();
}

void C2S_Skill_Study::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_Skill_Study::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Skill_Study::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Skill_Study_descriptor_;
}

const C2S_Skill_Study& C2S_Skill_Study::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_Skill_Study* C2S_Skill_Study::default_instance_ = nullptr;

C2S_Skill_Study* C2S_Skill_Study::New() const {
  return new C2S_Skill_Study;
}

void C2S_Skill_Study::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    skill_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Skill_Study::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_id;
        break;
      }

      // required sint32 skill_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Skill_Study::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required sint32 skill_id = 2;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->skill_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Skill_Study::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required sint32 skill_id = 2;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->skill_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Skill_Study::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required sint32 skill_id = 2;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->skill_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Skill_Study::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Skill_Study* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Skill_Study*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Skill_Study::MergeFrom(const C2S_Skill_Study& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Skill_Study::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Skill_Study::CopyFrom(const C2S_Skill_Study& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Skill_Study::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C2S_Skill_Study::Swap(C2S_Skill_Study* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Skill_Study::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Skill_Study_descriptor_;
  metadata.reflection = C2S_Skill_Study_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Skill_Study::kRoleIndexFieldNumber;
const int S2C_Skill_Study::kSkillIdFieldNumber;
const int S2C_Skill_Study::kRetCodeFieldNumber;
#endif  // !_MSC_VER

S2C_Skill_Study::S2C_Skill_Study()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Skill_Study::InitAsDefaultInstance() {
}

S2C_Skill_Study::S2C_Skill_Study(const S2C_Skill_Study& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Skill_Study::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  skill_id_ = 0;
  ret_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Skill_Study::~S2C_Skill_Study() {
  SharedDtor();
}

void S2C_Skill_Study::SharedDtor() {
  if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
    delete ret_code_;
  }
  if (this != default_instance_) {
  }
}

void S2C_Skill_Study::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Skill_Study::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Skill_Study_descriptor_;
}

const S2C_Skill_Study& S2C_Skill_Study::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Skill_Study* S2C_Skill_Study::default_instance_ = nullptr;

S2C_Skill_Study* S2C_Skill_Study::New() const {
  return new S2C_Skill_Study;
}

void S2C_Skill_Study::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    skill_id_ = 0;
    if (has_ret_code()) {
      if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
        ret_code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Skill_Study::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_id;
        break;
      }

      // required sint32 skill_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ret_code;
        break;
      }

      // required bytes ret_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ret_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ret_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Skill_Study::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required sint32 skill_id = 2;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->skill_id(), output);
  }

  // required bytes ret_code = 3;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->ret_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Skill_Study::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required sint32 skill_id = 2;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->skill_id(), target);
  }

  // required bytes ret_code = 3;
  if (has_ret_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->ret_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Skill_Study::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required sint32 skill_id = 2;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->skill_id());
    }

    // required bytes ret_code = 3;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ret_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Skill_Study::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Skill_Study* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Skill_Study*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Skill_Study::MergeFrom(const S2C_Skill_Study& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Skill_Study::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Skill_Study::CopyFrom(const S2C_Skill_Study& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Skill_Study::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2C_Skill_Study::Swap(S2C_Skill_Study* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(ret_code_, other->ret_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Skill_Study::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Skill_Study_descriptor_;
  metadata.reflection = S2C_Skill_Study_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Skill_LevelUp::kRoleIndexFieldNumber;
const int C2S_Skill_LevelUp::kSkillIdFieldNumber;
#endif  // !_MSC_VER

C2S_Skill_LevelUp::C2S_Skill_LevelUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Skill_LevelUp::InitAsDefaultInstance() {
}

C2S_Skill_LevelUp::C2S_Skill_LevelUp(const C2S_Skill_LevelUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Skill_LevelUp::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  skill_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Skill_LevelUp::~C2S_Skill_LevelUp() {
  SharedDtor();
}

void C2S_Skill_LevelUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_Skill_LevelUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Skill_LevelUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Skill_LevelUp_descriptor_;
}

const C2S_Skill_LevelUp& C2S_Skill_LevelUp::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_Skill_LevelUp* C2S_Skill_LevelUp::default_instance_ = nullptr;

C2S_Skill_LevelUp* C2S_Skill_LevelUp::New() const {
  return new C2S_Skill_LevelUp;
}

void C2S_Skill_LevelUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    skill_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Skill_LevelUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_id;
        break;
      }

      // required sint32 skill_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Skill_LevelUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required sint32 skill_id = 2;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->skill_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Skill_LevelUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required sint32 skill_id = 2;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->skill_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Skill_LevelUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required sint32 skill_id = 2;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->skill_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Skill_LevelUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Skill_LevelUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Skill_LevelUp*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Skill_LevelUp::MergeFrom(const C2S_Skill_LevelUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Skill_LevelUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Skill_LevelUp::CopyFrom(const C2S_Skill_LevelUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Skill_LevelUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C2S_Skill_LevelUp::Swap(C2S_Skill_LevelUp* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Skill_LevelUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Skill_LevelUp_descriptor_;
  metadata.reflection = C2S_Skill_LevelUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Skill_LevelUp::kRoleIndexFieldNumber;
const int S2C_Skill_LevelUp::kSkillIdFieldNumber;
const int S2C_Skill_LevelUp::kRetCodeFieldNumber;
#endif  // !_MSC_VER

S2C_Skill_LevelUp::S2C_Skill_LevelUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Skill_LevelUp::InitAsDefaultInstance() {
}

S2C_Skill_LevelUp::S2C_Skill_LevelUp(const S2C_Skill_LevelUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Skill_LevelUp::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  skill_id_ = 0;
  ret_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Skill_LevelUp::~S2C_Skill_LevelUp() {
  SharedDtor();
}

void S2C_Skill_LevelUp::SharedDtor() {
  if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
    delete ret_code_;
  }
  if (this != default_instance_) {
  }
}

void S2C_Skill_LevelUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Skill_LevelUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Skill_LevelUp_descriptor_;
}

const S2C_Skill_LevelUp& S2C_Skill_LevelUp::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Skill_LevelUp* S2C_Skill_LevelUp::default_instance_ = nullptr;

S2C_Skill_LevelUp* S2C_Skill_LevelUp::New() const {
  return new S2C_Skill_LevelUp;
}

void S2C_Skill_LevelUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    skill_id_ = 0;
    if (has_ret_code()) {
      if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
        ret_code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Skill_LevelUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_id;
        break;
      }

      // required sint32 skill_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ret_code;
        break;
      }

      // required bytes ret_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ret_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ret_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Skill_LevelUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required sint32 skill_id = 2;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->skill_id(), output);
  }

  // required bytes ret_code = 3;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->ret_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Skill_LevelUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required sint32 skill_id = 2;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->skill_id(), target);
  }

  // required bytes ret_code = 3;
  if (has_ret_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->ret_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Skill_LevelUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required sint32 skill_id = 2;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->skill_id());
    }

    // required bytes ret_code = 3;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ret_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Skill_LevelUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Skill_LevelUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Skill_LevelUp*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Skill_LevelUp::MergeFrom(const S2C_Skill_LevelUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Skill_LevelUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Skill_LevelUp::CopyFrom(const S2C_Skill_LevelUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Skill_LevelUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2C_Skill_LevelUp::Swap(S2C_Skill_LevelUp* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(ret_code_, other->ret_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Skill_LevelUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Skill_LevelUp_descriptor_;
  metadata.reflection = S2C_Skill_LevelUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Skill_DressTalent::kRoleIndexFieldNumber;
const int C2S_Skill_DressTalent::kSkillIdFieldNumber;
#endif  // !_MSC_VER

C2S_Skill_DressTalent::C2S_Skill_DressTalent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Skill_DressTalent::InitAsDefaultInstance() {
}

C2S_Skill_DressTalent::C2S_Skill_DressTalent(const C2S_Skill_DressTalent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Skill_DressTalent::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  skill_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Skill_DressTalent::~C2S_Skill_DressTalent() {
  SharedDtor();
}

void C2S_Skill_DressTalent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_Skill_DressTalent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Skill_DressTalent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Skill_DressTalent_descriptor_;
}

const C2S_Skill_DressTalent& C2S_Skill_DressTalent::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_Skill_DressTalent* C2S_Skill_DressTalent::default_instance_ = nullptr;

C2S_Skill_DressTalent* C2S_Skill_DressTalent::New() const {
  return new C2S_Skill_DressTalent;
}

void C2S_Skill_DressTalent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    skill_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Skill_DressTalent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_id;
        break;
      }

      // required sint32 skill_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Skill_DressTalent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required sint32 skill_id = 2;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->skill_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Skill_DressTalent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required sint32 skill_id = 2;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->skill_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Skill_DressTalent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required sint32 skill_id = 2;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->skill_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Skill_DressTalent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Skill_DressTalent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Skill_DressTalent*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Skill_DressTalent::MergeFrom(const C2S_Skill_DressTalent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Skill_DressTalent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Skill_DressTalent::CopyFrom(const C2S_Skill_DressTalent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Skill_DressTalent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C2S_Skill_DressTalent::Swap(C2S_Skill_DressTalent* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Skill_DressTalent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Skill_DressTalent_descriptor_;
  metadata.reflection = C2S_Skill_DressTalent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Skill_DressTalent::kRoleIndexFieldNumber;
const int S2C_Skill_DressTalent::kSkillIdFieldNumber;
const int S2C_Skill_DressTalent::kRetCodeFieldNumber;
#endif  // !_MSC_VER

S2C_Skill_DressTalent::S2C_Skill_DressTalent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Skill_DressTalent::InitAsDefaultInstance() {
}

S2C_Skill_DressTalent::S2C_Skill_DressTalent(const S2C_Skill_DressTalent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Skill_DressTalent::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  skill_id_ = 0;
  ret_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Skill_DressTalent::~S2C_Skill_DressTalent() {
  SharedDtor();
}

void S2C_Skill_DressTalent::SharedDtor() {
  if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
    delete ret_code_;
  }
  if (this != default_instance_) {
  }
}

void S2C_Skill_DressTalent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Skill_DressTalent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Skill_DressTalent_descriptor_;
}

const S2C_Skill_DressTalent& S2C_Skill_DressTalent::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Skill_DressTalent* S2C_Skill_DressTalent::default_instance_ = nullptr;

S2C_Skill_DressTalent* S2C_Skill_DressTalent::New() const {
  return new S2C_Skill_DressTalent;
}

void S2C_Skill_DressTalent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    skill_id_ = 0;
    if (has_ret_code()) {
      if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
        ret_code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Skill_DressTalent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_id;
        break;
      }

      // required sint32 skill_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ret_code;
        break;
      }

      // required bytes ret_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ret_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ret_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Skill_DressTalent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required sint32 skill_id = 2;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->skill_id(), output);
  }

  // required bytes ret_code = 3;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->ret_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Skill_DressTalent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required sint32 skill_id = 2;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->skill_id(), target);
  }

  // required bytes ret_code = 3;
  if (has_ret_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->ret_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Skill_DressTalent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required sint32 skill_id = 2;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->skill_id());
    }

    // required bytes ret_code = 3;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ret_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Skill_DressTalent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Skill_DressTalent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Skill_DressTalent*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Skill_DressTalent::MergeFrom(const S2C_Skill_DressTalent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Skill_DressTalent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Skill_DressTalent::CopyFrom(const S2C_Skill_DressTalent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Skill_DressTalent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2C_Skill_DressTalent::Swap(S2C_Skill_DressTalent* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(ret_code_, other->ret_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Skill_DressTalent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Skill_DressTalent_descriptor_;
  metadata.reflection = S2C_Skill_DressTalent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Skill_TakeOffTalent::kRoleIndexFieldNumber;
const int C2S_Skill_TakeOffTalent::kSkillIdFieldNumber;
#endif  // !_MSC_VER

C2S_Skill_TakeOffTalent::C2S_Skill_TakeOffTalent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Skill_TakeOffTalent::InitAsDefaultInstance() {
}

C2S_Skill_TakeOffTalent::C2S_Skill_TakeOffTalent(const C2S_Skill_TakeOffTalent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Skill_TakeOffTalent::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  skill_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Skill_TakeOffTalent::~C2S_Skill_TakeOffTalent() {
  SharedDtor();
}

void C2S_Skill_TakeOffTalent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_Skill_TakeOffTalent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Skill_TakeOffTalent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Skill_TakeOffTalent_descriptor_;
}

const C2S_Skill_TakeOffTalent& C2S_Skill_TakeOffTalent::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_Skill_TakeOffTalent* C2S_Skill_TakeOffTalent::default_instance_ = nullptr;

C2S_Skill_TakeOffTalent* C2S_Skill_TakeOffTalent::New() const {
  return new C2S_Skill_TakeOffTalent;
}

void C2S_Skill_TakeOffTalent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    skill_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Skill_TakeOffTalent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_id;
        break;
      }

      // required sint32 skill_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Skill_TakeOffTalent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required sint32 skill_id = 2;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->skill_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Skill_TakeOffTalent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required sint32 skill_id = 2;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->skill_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Skill_TakeOffTalent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required sint32 skill_id = 2;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->skill_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Skill_TakeOffTalent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Skill_TakeOffTalent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Skill_TakeOffTalent*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Skill_TakeOffTalent::MergeFrom(const C2S_Skill_TakeOffTalent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Skill_TakeOffTalent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Skill_TakeOffTalent::CopyFrom(const C2S_Skill_TakeOffTalent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Skill_TakeOffTalent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C2S_Skill_TakeOffTalent::Swap(C2S_Skill_TakeOffTalent* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Skill_TakeOffTalent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Skill_TakeOffTalent_descriptor_;
  metadata.reflection = C2S_Skill_TakeOffTalent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Skill_TakeOffTalent::kRoleIndexFieldNumber;
const int S2C_Skill_TakeOffTalent::kSkillIdFieldNumber;
const int S2C_Skill_TakeOffTalent::kRetCodeFieldNumber;
#endif  // !_MSC_VER

S2C_Skill_TakeOffTalent::S2C_Skill_TakeOffTalent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Skill_TakeOffTalent::InitAsDefaultInstance() {
}

S2C_Skill_TakeOffTalent::S2C_Skill_TakeOffTalent(const S2C_Skill_TakeOffTalent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Skill_TakeOffTalent::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  skill_id_ = 0;
  ret_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Skill_TakeOffTalent::~S2C_Skill_TakeOffTalent() {
  SharedDtor();
}

void S2C_Skill_TakeOffTalent::SharedDtor() {
  if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
    delete ret_code_;
  }
  if (this != default_instance_) {
  }
}

void S2C_Skill_TakeOffTalent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Skill_TakeOffTalent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Skill_TakeOffTalent_descriptor_;
}

const S2C_Skill_TakeOffTalent& S2C_Skill_TakeOffTalent::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Skill_TakeOffTalent* S2C_Skill_TakeOffTalent::default_instance_ = nullptr;

S2C_Skill_TakeOffTalent* S2C_Skill_TakeOffTalent::New() const {
  return new S2C_Skill_TakeOffTalent;
}

void S2C_Skill_TakeOffTalent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    skill_id_ = 0;
    if (has_ret_code()) {
      if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
        ret_code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Skill_TakeOffTalent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_id;
        break;
      }

      // required sint32 skill_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ret_code;
        break;
      }

      // required bytes ret_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ret_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ret_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Skill_TakeOffTalent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required sint32 skill_id = 2;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->skill_id(), output);
  }

  // required bytes ret_code = 3;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->ret_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Skill_TakeOffTalent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required sint32 skill_id = 2;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->skill_id(), target);
  }

  // required bytes ret_code = 3;
  if (has_ret_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->ret_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Skill_TakeOffTalent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required sint32 skill_id = 2;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->skill_id());
    }

    // required bytes ret_code = 3;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ret_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Skill_TakeOffTalent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Skill_TakeOffTalent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Skill_TakeOffTalent*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Skill_TakeOffTalent::MergeFrom(const S2C_Skill_TakeOffTalent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Skill_TakeOffTalent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Skill_TakeOffTalent::CopyFrom(const S2C_Skill_TakeOffTalent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Skill_TakeOffTalent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2C_Skill_TakeOffTalent::Swap(S2C_Skill_TakeOffTalent* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(ret_code_, other->ret_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Skill_TakeOffTalent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Skill_TakeOffTalent_descriptor_;
  metadata.reflection = S2C_Skill_TakeOffTalent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Skill_DressBook::kRoleIndexFieldNumber;
const int C2S_Skill_DressBook::kSkillIdFieldNumber;
#endif  // !_MSC_VER

C2S_Skill_DressBook::C2S_Skill_DressBook()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Skill_DressBook::InitAsDefaultInstance() {
}

C2S_Skill_DressBook::C2S_Skill_DressBook(const C2S_Skill_DressBook& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Skill_DressBook::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  skill_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Skill_DressBook::~C2S_Skill_DressBook() {
  SharedDtor();
}

void C2S_Skill_DressBook::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_Skill_DressBook::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Skill_DressBook::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Skill_DressBook_descriptor_;
}

const C2S_Skill_DressBook& C2S_Skill_DressBook::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_Skill_DressBook* C2S_Skill_DressBook::default_instance_ = nullptr;

C2S_Skill_DressBook* C2S_Skill_DressBook::New() const {
  return new C2S_Skill_DressBook;
}

void C2S_Skill_DressBook::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    skill_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Skill_DressBook::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_id;
        break;
      }

      // required sint32 skill_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Skill_DressBook::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required sint32 skill_id = 2;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->skill_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Skill_DressBook::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required sint32 skill_id = 2;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->skill_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Skill_DressBook::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required sint32 skill_id = 2;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->skill_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Skill_DressBook::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Skill_DressBook* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Skill_DressBook*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Skill_DressBook::MergeFrom(const C2S_Skill_DressBook& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Skill_DressBook::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Skill_DressBook::CopyFrom(const C2S_Skill_DressBook& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Skill_DressBook::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C2S_Skill_DressBook::Swap(C2S_Skill_DressBook* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Skill_DressBook::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Skill_DressBook_descriptor_;
  metadata.reflection = C2S_Skill_DressBook_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Skill_DressBook::kRoleIndexFieldNumber;
const int S2C_Skill_DressBook::kSkillIdFieldNumber;
const int S2C_Skill_DressBook::kRetCodeFieldNumber;
#endif  // !_MSC_VER

S2C_Skill_DressBook::S2C_Skill_DressBook()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Skill_DressBook::InitAsDefaultInstance() {
}

S2C_Skill_DressBook::S2C_Skill_DressBook(const S2C_Skill_DressBook& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Skill_DressBook::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  skill_id_ = 0;
  ret_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Skill_DressBook::~S2C_Skill_DressBook() {
  SharedDtor();
}

void S2C_Skill_DressBook::SharedDtor() {
  if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
    delete ret_code_;
  }
  if (this != default_instance_) {
  }
}

void S2C_Skill_DressBook::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Skill_DressBook::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Skill_DressBook_descriptor_;
}

const S2C_Skill_DressBook& S2C_Skill_DressBook::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Skill_DressBook* S2C_Skill_DressBook::default_instance_ = nullptr;

S2C_Skill_DressBook* S2C_Skill_DressBook::New() const {
  return new S2C_Skill_DressBook;
}

void S2C_Skill_DressBook::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    skill_id_ = 0;
    if (has_ret_code()) {
      if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
        ret_code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Skill_DressBook::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_id;
        break;
      }

      // required sint32 skill_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ret_code;
        break;
      }

      // required bytes ret_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ret_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ret_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Skill_DressBook::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required sint32 skill_id = 2;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->skill_id(), output);
  }

  // required bytes ret_code = 3;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->ret_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Skill_DressBook::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required sint32 skill_id = 2;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->skill_id(), target);
  }

  // required bytes ret_code = 3;
  if (has_ret_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->ret_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Skill_DressBook::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required sint32 skill_id = 2;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->skill_id());
    }

    // required bytes ret_code = 3;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ret_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Skill_DressBook::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Skill_DressBook* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Skill_DressBook*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Skill_DressBook::MergeFrom(const S2C_Skill_DressBook& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Skill_DressBook::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Skill_DressBook::CopyFrom(const S2C_Skill_DressBook& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Skill_DressBook::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2C_Skill_DressBook::Swap(S2C_Skill_DressBook* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(ret_code_, other->ret_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Skill_DressBook::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Skill_DressBook_descriptor_;
  metadata.reflection = S2C_Skill_DressBook_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Skill_TakeOffBook::kRoleIndexFieldNumber;
const int C2S_Skill_TakeOffBook::kSkillIdFieldNumber;
#endif  // !_MSC_VER

C2S_Skill_TakeOffBook::C2S_Skill_TakeOffBook()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Skill_TakeOffBook::InitAsDefaultInstance() {
}

C2S_Skill_TakeOffBook::C2S_Skill_TakeOffBook(const C2S_Skill_TakeOffBook& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Skill_TakeOffBook::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  skill_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Skill_TakeOffBook::~C2S_Skill_TakeOffBook() {
  SharedDtor();
}

void C2S_Skill_TakeOffBook::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_Skill_TakeOffBook::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Skill_TakeOffBook::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Skill_TakeOffBook_descriptor_;
}

const C2S_Skill_TakeOffBook& C2S_Skill_TakeOffBook::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_Skill_TakeOffBook* C2S_Skill_TakeOffBook::default_instance_ = nullptr;

C2S_Skill_TakeOffBook* C2S_Skill_TakeOffBook::New() const {
  return new C2S_Skill_TakeOffBook;
}

void C2S_Skill_TakeOffBook::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    skill_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Skill_TakeOffBook::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_id;
        break;
      }

      // required sint32 skill_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Skill_TakeOffBook::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required sint32 skill_id = 2;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->skill_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Skill_TakeOffBook::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required sint32 skill_id = 2;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->skill_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Skill_TakeOffBook::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required sint32 skill_id = 2;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->skill_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Skill_TakeOffBook::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Skill_TakeOffBook* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Skill_TakeOffBook*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Skill_TakeOffBook::MergeFrom(const C2S_Skill_TakeOffBook& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Skill_TakeOffBook::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Skill_TakeOffBook::CopyFrom(const C2S_Skill_TakeOffBook& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Skill_TakeOffBook::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C2S_Skill_TakeOffBook::Swap(C2S_Skill_TakeOffBook* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Skill_TakeOffBook::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Skill_TakeOffBook_descriptor_;
  metadata.reflection = C2S_Skill_TakeOffBook_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Skill_TakeOffBook::kRoleIndexFieldNumber;
const int S2C_Skill_TakeOffBook::kSkillIdFieldNumber;
const int S2C_Skill_TakeOffBook::kRetCodeFieldNumber;
#endif  // !_MSC_VER

S2C_Skill_TakeOffBook::S2C_Skill_TakeOffBook()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Skill_TakeOffBook::InitAsDefaultInstance() {
}

S2C_Skill_TakeOffBook::S2C_Skill_TakeOffBook(const S2C_Skill_TakeOffBook& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Skill_TakeOffBook::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  skill_id_ = 0;
  ret_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Skill_TakeOffBook::~S2C_Skill_TakeOffBook() {
  SharedDtor();
}

void S2C_Skill_TakeOffBook::SharedDtor() {
  if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
    delete ret_code_;
  }
  if (this != default_instance_) {
  }
}

void S2C_Skill_TakeOffBook::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Skill_TakeOffBook::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Skill_TakeOffBook_descriptor_;
}

const S2C_Skill_TakeOffBook& S2C_Skill_TakeOffBook::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Skill_TakeOffBook* S2C_Skill_TakeOffBook::default_instance_ = nullptr;

S2C_Skill_TakeOffBook* S2C_Skill_TakeOffBook::New() const {
  return new S2C_Skill_TakeOffBook;
}

void S2C_Skill_TakeOffBook::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    skill_id_ = 0;
    if (has_ret_code()) {
      if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
        ret_code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Skill_TakeOffBook::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_id;
        break;
      }

      // required sint32 skill_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ret_code;
        break;
      }

      // required bytes ret_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ret_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ret_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Skill_TakeOffBook::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required sint32 skill_id = 2;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->skill_id(), output);
  }

  // required bytes ret_code = 3;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->ret_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Skill_TakeOffBook::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required sint32 skill_id = 2;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->skill_id(), target);
  }

  // required bytes ret_code = 3;
  if (has_ret_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->ret_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Skill_TakeOffBook::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required sint32 skill_id = 2;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->skill_id());
    }

    // required bytes ret_code = 3;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ret_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Skill_TakeOffBook::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Skill_TakeOffBook* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Skill_TakeOffBook*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Skill_TakeOffBook::MergeFrom(const S2C_Skill_TakeOffBook& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Skill_TakeOffBook::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Skill_TakeOffBook::CopyFrom(const S2C_Skill_TakeOffBook& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Skill_TakeOffBook::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2C_Skill_TakeOffBook::Swap(S2C_Skill_TakeOffBook* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(ret_code_, other->ret_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Skill_TakeOffBook::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Skill_TakeOffBook_descriptor_;
  metadata.reflection = S2C_Skill_TakeOffBook_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Ask_ChangeAttrPoint::kRoleIndexFieldNumber;
const int C2S_Ask_ChangeAttrPoint::kHpPointFieldNumber;
const int C2S_Ask_ChangeAttrPoint::kMpPointFieldNumber;
const int C2S_Ask_ChangeAttrPoint::kApPointFieldNumber;
const int C2S_Ask_ChangeAttrPoint::kSpPointFieldNumber;
#endif  // !_MSC_VER

C2S_Ask_ChangeAttrPoint::C2S_Ask_ChangeAttrPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Ask_ChangeAttrPoint::InitAsDefaultInstance() {
}

C2S_Ask_ChangeAttrPoint::C2S_Ask_ChangeAttrPoint(const C2S_Ask_ChangeAttrPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Ask_ChangeAttrPoint::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  hp_point_ = 0;
  mp_point_ = 0;
  ap_point_ = 0;
  sp_point_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Ask_ChangeAttrPoint::~C2S_Ask_ChangeAttrPoint() {
  SharedDtor();
}

void C2S_Ask_ChangeAttrPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_Ask_ChangeAttrPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Ask_ChangeAttrPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Ask_ChangeAttrPoint_descriptor_;
}

const C2S_Ask_ChangeAttrPoint& C2S_Ask_ChangeAttrPoint::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_Ask_ChangeAttrPoint* C2S_Ask_ChangeAttrPoint::default_instance_ = nullptr;

C2S_Ask_ChangeAttrPoint* C2S_Ask_ChangeAttrPoint::New() const {
  return new C2S_Ask_ChangeAttrPoint;
}

void C2S_Ask_ChangeAttrPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    hp_point_ = 0;
    mp_point_ = 0;
    ap_point_ = 0;
    sp_point_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Ask_ChangeAttrPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hp_point;
        break;
      }

      // required int32 hp_point = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_point_)));
          set_has_hp_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mp_point;
        break;
      }

      // required int32 mp_point = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mp_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mp_point_)));
          set_has_mp_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ap_point;
        break;
      }

      // required int32 ap_point = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ap_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ap_point_)));
          set_has_ap_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sp_point;
        break;
      }

      // required int32 sp_point = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sp_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sp_point_)));
          set_has_sp_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Ask_ChangeAttrPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required int32 hp_point = 2;
  if (has_hp_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hp_point(), output);
  }

  // required int32 mp_point = 3;
  if (has_mp_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mp_point(), output);
  }

  // required int32 ap_point = 4;
  if (has_ap_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ap_point(), output);
  }

  // required int32 sp_point = 5;
  if (has_sp_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sp_point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Ask_ChangeAttrPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required int32 hp_point = 2;
  if (has_hp_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hp_point(), target);
  }

  // required int32 mp_point = 3;
  if (has_mp_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mp_point(), target);
  }

  // required int32 ap_point = 4;
  if (has_ap_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ap_point(), target);
  }

  // required int32 sp_point = 5;
  if (has_sp_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sp_point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Ask_ChangeAttrPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required int32 hp_point = 2;
    if (has_hp_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp_point());
    }

    // required int32 mp_point = 3;
    if (has_mp_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mp_point());
    }

    // required int32 ap_point = 4;
    if (has_ap_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ap_point());
    }

    // required int32 sp_point = 5;
    if (has_sp_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sp_point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Ask_ChangeAttrPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Ask_ChangeAttrPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Ask_ChangeAttrPoint*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Ask_ChangeAttrPoint::MergeFrom(const C2S_Ask_ChangeAttrPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_hp_point()) {
      set_hp_point(from.hp_point());
    }
    if (from.has_mp_point()) {
      set_mp_point(from.mp_point());
    }
    if (from.has_ap_point()) {
      set_ap_point(from.ap_point());
    }
    if (from.has_sp_point()) {
      set_sp_point(from.sp_point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Ask_ChangeAttrPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Ask_ChangeAttrPoint::CopyFrom(const C2S_Ask_ChangeAttrPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Ask_ChangeAttrPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void C2S_Ask_ChangeAttrPoint::Swap(C2S_Ask_ChangeAttrPoint* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(hp_point_, other->hp_point_);
    std::swap(mp_point_, other->mp_point_);
    std::swap(ap_point_, other->ap_point_);
    std::swap(sp_point_, other->sp_point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Ask_ChangeAttrPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Ask_ChangeAttrPoint_descriptor_;
  metadata.reflection = C2S_Ask_ChangeAttrPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Ask_SummonpetChangeAttrPoint::kRoleIndexFieldNumber;
const int C2S_Ask_SummonpetChangeAttrPoint::kSummonpetRoleIndexFieldNumber;
const int C2S_Ask_SummonpetChangeAttrPoint::kHpPointFieldNumber;
const int C2S_Ask_SummonpetChangeAttrPoint::kMpPointFieldNumber;
const int C2S_Ask_SummonpetChangeAttrPoint::kApPointFieldNumber;
const int C2S_Ask_SummonpetChangeAttrPoint::kSpPointFieldNumber;
#endif  // !_MSC_VER

C2S_Ask_SummonpetChangeAttrPoint::C2S_Ask_SummonpetChangeAttrPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Ask_SummonpetChangeAttrPoint::InitAsDefaultInstance() {
}

C2S_Ask_SummonpetChangeAttrPoint::C2S_Ask_SummonpetChangeAttrPoint(const C2S_Ask_SummonpetChangeAttrPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Ask_SummonpetChangeAttrPoint::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  summonpet_role_index_ = GOOGLE_LONGLONG(0);
  hp_point_ = 0;
  mp_point_ = 0;
  ap_point_ = 0;
  sp_point_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Ask_SummonpetChangeAttrPoint::~C2S_Ask_SummonpetChangeAttrPoint() {
  SharedDtor();
}

void C2S_Ask_SummonpetChangeAttrPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_Ask_SummonpetChangeAttrPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Ask_SummonpetChangeAttrPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Ask_SummonpetChangeAttrPoint_descriptor_;
}

const C2S_Ask_SummonpetChangeAttrPoint& C2S_Ask_SummonpetChangeAttrPoint::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_Ask_SummonpetChangeAttrPoint* C2S_Ask_SummonpetChangeAttrPoint::default_instance_ = nullptr;

C2S_Ask_SummonpetChangeAttrPoint* C2S_Ask_SummonpetChangeAttrPoint::New() const {
  return new C2S_Ask_SummonpetChangeAttrPoint;
}

void C2S_Ask_SummonpetChangeAttrPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    summonpet_role_index_ = GOOGLE_LONGLONG(0);
    hp_point_ = 0;
    mp_point_ = 0;
    ap_point_ = 0;
    sp_point_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Ask_SummonpetChangeAttrPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_summonpet_role_index;
        break;
      }

      // required int64 summonpet_role_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_summonpet_role_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &summonpet_role_index_)));
          set_has_summonpet_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hp_point;
        break;
      }

      // required int32 hp_point = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_point_)));
          set_has_hp_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mp_point;
        break;
      }

      // required int32 mp_point = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mp_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mp_point_)));
          set_has_mp_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ap_point;
        break;
      }

      // required int32 ap_point = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ap_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ap_point_)));
          set_has_ap_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sp_point;
        break;
      }

      // required int32 sp_point = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sp_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sp_point_)));
          set_has_sp_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Ask_SummonpetChangeAttrPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required int64 summonpet_role_index = 2;
  if (has_summonpet_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->summonpet_role_index(), output);
  }

  // required int32 hp_point = 3;
  if (has_hp_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hp_point(), output);
  }

  // required int32 mp_point = 4;
  if (has_mp_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mp_point(), output);
  }

  // required int32 ap_point = 5;
  if (has_ap_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ap_point(), output);
  }

  // required int32 sp_point = 6;
  if (has_sp_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sp_point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Ask_SummonpetChangeAttrPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required int64 summonpet_role_index = 2;
  if (has_summonpet_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->summonpet_role_index(), target);
  }

  // required int32 hp_point = 3;
  if (has_hp_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hp_point(), target);
  }

  // required int32 mp_point = 4;
  if (has_mp_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mp_point(), target);
  }

  // required int32 ap_point = 5;
  if (has_ap_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ap_point(), target);
  }

  // required int32 sp_point = 6;
  if (has_sp_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sp_point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Ask_SummonpetChangeAttrPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required int64 summonpet_role_index = 2;
    if (has_summonpet_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->summonpet_role_index());
    }

    // required int32 hp_point = 3;
    if (has_hp_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp_point());
    }

    // required int32 mp_point = 4;
    if (has_mp_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mp_point());
    }

    // required int32 ap_point = 5;
    if (has_ap_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ap_point());
    }

    // required int32 sp_point = 6;
    if (has_sp_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sp_point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Ask_SummonpetChangeAttrPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Ask_SummonpetChangeAttrPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Ask_SummonpetChangeAttrPoint*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Ask_SummonpetChangeAttrPoint::MergeFrom(const C2S_Ask_SummonpetChangeAttrPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_summonpet_role_index()) {
      set_summonpet_role_index(from.summonpet_role_index());
    }
    if (from.has_hp_point()) {
      set_hp_point(from.hp_point());
    }
    if (from.has_mp_point()) {
      set_mp_point(from.mp_point());
    }
    if (from.has_ap_point()) {
      set_ap_point(from.ap_point());
    }
    if (from.has_sp_point()) {
      set_sp_point(from.sp_point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Ask_SummonpetChangeAttrPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Ask_SummonpetChangeAttrPoint::CopyFrom(const C2S_Ask_SummonpetChangeAttrPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Ask_SummonpetChangeAttrPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void C2S_Ask_SummonpetChangeAttrPoint::Swap(C2S_Ask_SummonpetChangeAttrPoint* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(summonpet_role_index_, other->summonpet_role_index_);
    std::swap(hp_point_, other->hp_point_);
    std::swap(mp_point_, other->mp_point_);
    std::swap(ap_point_, other->ap_point_);
    std::swap(sp_point_, other->sp_point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Ask_SummonpetChangeAttrPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Ask_SummonpetChangeAttrPoint_descriptor_;
  metadata.reflection = C2S_Ask_SummonpetChangeAttrPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Ask_CreateTeam::kRoleIndexFieldNumber;
#endif  // !_MSC_VER

C2S_Ask_CreateTeam::C2S_Ask_CreateTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Ask_CreateTeam::InitAsDefaultInstance() {
}

C2S_Ask_CreateTeam::C2S_Ask_CreateTeam(const C2S_Ask_CreateTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Ask_CreateTeam::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Ask_CreateTeam::~C2S_Ask_CreateTeam() {
  SharedDtor();
}

void C2S_Ask_CreateTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_Ask_CreateTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Ask_CreateTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Ask_CreateTeam_descriptor_;
}

const C2S_Ask_CreateTeam& C2S_Ask_CreateTeam::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_Ask_CreateTeam* C2S_Ask_CreateTeam::default_instance_ = nullptr;

C2S_Ask_CreateTeam* C2S_Ask_CreateTeam::New() const {
  return new C2S_Ask_CreateTeam;
}

void C2S_Ask_CreateTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Ask_CreateTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Ask_CreateTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Ask_CreateTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Ask_CreateTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Ask_CreateTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Ask_CreateTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Ask_CreateTeam*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Ask_CreateTeam::MergeFrom(const C2S_Ask_CreateTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Ask_CreateTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Ask_CreateTeam::CopyFrom(const C2S_Ask_CreateTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Ask_CreateTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2S_Ask_CreateTeam::Swap(C2S_Ask_CreateTeam* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Ask_CreateTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Ask_CreateTeam_descriptor_;
  metadata.reflection = C2S_Ask_CreateTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Ret_CreateTeam::kRoleIndexFieldNumber;
const int S2C_Ret_CreateTeam::kRetCodeFieldNumber;
#endif  // !_MSC_VER

S2C_Ret_CreateTeam::S2C_Ret_CreateTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Ret_CreateTeam::InitAsDefaultInstance() {
}

S2C_Ret_CreateTeam::S2C_Ret_CreateTeam(const S2C_Ret_CreateTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Ret_CreateTeam::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  ret_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Ret_CreateTeam::~S2C_Ret_CreateTeam() {
  SharedDtor();
}

void S2C_Ret_CreateTeam::SharedDtor() {
  if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
    delete ret_code_;
  }
  if (this != default_instance_) {
  }
}

void S2C_Ret_CreateTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Ret_CreateTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Ret_CreateTeam_descriptor_;
}

const S2C_Ret_CreateTeam& S2C_Ret_CreateTeam::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Ret_CreateTeam* S2C_Ret_CreateTeam::default_instance_ = nullptr;

S2C_Ret_CreateTeam* S2C_Ret_CreateTeam::New() const {
  return new S2C_Ret_CreateTeam;
}

void S2C_Ret_CreateTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    if (has_ret_code()) {
      if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
        ret_code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Ret_CreateTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ret_code;
        break;
      }

      // required bytes ret_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ret_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ret_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Ret_CreateTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required bytes ret_code = 2;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->ret_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Ret_CreateTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required bytes ret_code = 2;
  if (has_ret_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->ret_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Ret_CreateTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required bytes ret_code = 2;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ret_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Ret_CreateTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Ret_CreateTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Ret_CreateTeam*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Ret_CreateTeam::MergeFrom(const S2C_Ret_CreateTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Ret_CreateTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Ret_CreateTeam::CopyFrom(const S2C_Ret_CreateTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Ret_CreateTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2C_Ret_CreateTeam::Swap(S2C_Ret_CreateTeam* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(ret_code_, other->ret_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Ret_CreateTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Ret_CreateTeam_descriptor_;
  metadata.reflection = S2C_Ret_CreateTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Ask_DestroyTeam::kRoleIndexFieldNumber;
#endif  // !_MSC_VER

C2S_Ask_DestroyTeam::C2S_Ask_DestroyTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Ask_DestroyTeam::InitAsDefaultInstance() {
}

C2S_Ask_DestroyTeam::C2S_Ask_DestroyTeam(const C2S_Ask_DestroyTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Ask_DestroyTeam::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Ask_DestroyTeam::~C2S_Ask_DestroyTeam() {
  SharedDtor();
}

void C2S_Ask_DestroyTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_Ask_DestroyTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Ask_DestroyTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Ask_DestroyTeam_descriptor_;
}

const C2S_Ask_DestroyTeam& C2S_Ask_DestroyTeam::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_Ask_DestroyTeam* C2S_Ask_DestroyTeam::default_instance_ = nullptr;

C2S_Ask_DestroyTeam* C2S_Ask_DestroyTeam::New() const {
  return new C2S_Ask_DestroyTeam;
}

void C2S_Ask_DestroyTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Ask_DestroyTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Ask_DestroyTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Ask_DestroyTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Ask_DestroyTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Ask_DestroyTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Ask_DestroyTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Ask_DestroyTeam*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Ask_DestroyTeam::MergeFrom(const C2S_Ask_DestroyTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Ask_DestroyTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Ask_DestroyTeam::CopyFrom(const C2S_Ask_DestroyTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Ask_DestroyTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2S_Ask_DestroyTeam::Swap(C2S_Ask_DestroyTeam* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Ask_DestroyTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Ask_DestroyTeam_descriptor_;
  metadata.reflection = C2S_Ask_DestroyTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Ret_DestroyTeam::kRoleIndexFieldNumber;
const int S2C_Ret_DestroyTeam::kRetCodeFieldNumber;
#endif  // !_MSC_VER

S2C_Ret_DestroyTeam::S2C_Ret_DestroyTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Ret_DestroyTeam::InitAsDefaultInstance() {
}

S2C_Ret_DestroyTeam::S2C_Ret_DestroyTeam(const S2C_Ret_DestroyTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Ret_DestroyTeam::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  ret_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Ret_DestroyTeam::~S2C_Ret_DestroyTeam() {
  SharedDtor();
}

void S2C_Ret_DestroyTeam::SharedDtor() {
  if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
    delete ret_code_;
  }
  if (this != default_instance_) {
  }
}

void S2C_Ret_DestroyTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Ret_DestroyTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Ret_DestroyTeam_descriptor_;
}

const S2C_Ret_DestroyTeam& S2C_Ret_DestroyTeam::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Ret_DestroyTeam* S2C_Ret_DestroyTeam::default_instance_ = nullptr;

S2C_Ret_DestroyTeam* S2C_Ret_DestroyTeam::New() const {
  return new S2C_Ret_DestroyTeam;
}

void S2C_Ret_DestroyTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    if (has_ret_code()) {
      if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
        ret_code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Ret_DestroyTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ret_code;
        break;
      }

      // required bytes ret_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ret_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ret_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Ret_DestroyTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required bytes ret_code = 2;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->ret_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Ret_DestroyTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required bytes ret_code = 2;
  if (has_ret_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->ret_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Ret_DestroyTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required bytes ret_code = 2;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ret_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Ret_DestroyTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Ret_DestroyTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Ret_DestroyTeam*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Ret_DestroyTeam::MergeFrom(const S2C_Ret_DestroyTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Ret_DestroyTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Ret_DestroyTeam::CopyFrom(const S2C_Ret_DestroyTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Ret_DestroyTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2C_Ret_DestroyTeam::Swap(S2C_Ret_DestroyTeam* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(ret_code_, other->ret_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Ret_DestroyTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Ret_DestroyTeam_descriptor_;
  metadata.reflection = S2C_Ret_DestroyTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Ask_InviteEnterTeam::kRoleIndexFieldNumber;
const int C2S_Ask_InviteEnterTeam::kTarRoleIndexFieldNumber;
const int C2S_Ask_InviteEnterTeam::kTeamIndexFieldNumber;
#endif  // !_MSC_VER

C2S_Ask_InviteEnterTeam::C2S_Ask_InviteEnterTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Ask_InviteEnterTeam::InitAsDefaultInstance() {
}

C2S_Ask_InviteEnterTeam::C2S_Ask_InviteEnterTeam(const C2S_Ask_InviteEnterTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Ask_InviteEnterTeam::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  tar_role_index_ = GOOGLE_LONGLONG(0);
  team_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Ask_InviteEnterTeam::~C2S_Ask_InviteEnterTeam() {
  SharedDtor();
}

void C2S_Ask_InviteEnterTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_Ask_InviteEnterTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Ask_InviteEnterTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Ask_InviteEnterTeam_descriptor_;
}

const C2S_Ask_InviteEnterTeam& C2S_Ask_InviteEnterTeam::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_Ask_InviteEnterTeam* C2S_Ask_InviteEnterTeam::default_instance_ = nullptr;

C2S_Ask_InviteEnterTeam* C2S_Ask_InviteEnterTeam::New() const {
  return new C2S_Ask_InviteEnterTeam;
}

void C2S_Ask_InviteEnterTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    tar_role_index_ = GOOGLE_LONGLONG(0);
    team_index_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Ask_InviteEnterTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tar_role_index;
        break;
      }

      // required int64 tar_role_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tar_role_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tar_role_index_)));
          set_has_tar_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_team_index;
        break;
      }

      // required int64 team_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &team_index_)));
          set_has_team_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Ask_InviteEnterTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required int64 tar_role_index = 2;
  if (has_tar_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->tar_role_index(), output);
  }

  // required int64 team_index = 3;
  if (has_team_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->team_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Ask_InviteEnterTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required int64 tar_role_index = 2;
  if (has_tar_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->tar_role_index(), target);
  }

  // required int64 team_index = 3;
  if (has_team_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->team_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Ask_InviteEnterTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required int64 tar_role_index = 2;
    if (has_tar_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tar_role_index());
    }

    // required int64 team_index = 3;
    if (has_team_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->team_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Ask_InviteEnterTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Ask_InviteEnterTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Ask_InviteEnterTeam*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Ask_InviteEnterTeam::MergeFrom(const C2S_Ask_InviteEnterTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_tar_role_index()) {
      set_tar_role_index(from.tar_role_index());
    }
    if (from.has_team_index()) {
      set_team_index(from.team_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Ask_InviteEnterTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Ask_InviteEnterTeam::CopyFrom(const C2S_Ask_InviteEnterTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Ask_InviteEnterTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void C2S_Ask_InviteEnterTeam::Swap(C2S_Ask_InviteEnterTeam* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(tar_role_index_, other->tar_role_index_);
    std::swap(team_index_, other->team_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Ask_InviteEnterTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Ask_InviteEnterTeam_descriptor_;
  metadata.reflection = C2S_Ask_InviteEnterTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Ret_InviteEnterTeam::kRoleIndexFieldNumber;
const int S2C_Ret_InviteEnterTeam::kRetCodeFieldNumber;
const int S2C_Ret_InviteEnterTeam::kTeamIndexFieldNumber;
#endif  // !_MSC_VER

S2C_Ret_InviteEnterTeam::S2C_Ret_InviteEnterTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Ret_InviteEnterTeam::InitAsDefaultInstance() {
}

S2C_Ret_InviteEnterTeam::S2C_Ret_InviteEnterTeam(const S2C_Ret_InviteEnterTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Ret_InviteEnterTeam::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  ret_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  team_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Ret_InviteEnterTeam::~S2C_Ret_InviteEnterTeam() {
  SharedDtor();
}

void S2C_Ret_InviteEnterTeam::SharedDtor() {
  if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
    delete ret_code_;
  }
  if (this != default_instance_) {
  }
}

void S2C_Ret_InviteEnterTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Ret_InviteEnterTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Ret_InviteEnterTeam_descriptor_;
}

const S2C_Ret_InviteEnterTeam& S2C_Ret_InviteEnterTeam::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Ret_InviteEnterTeam* S2C_Ret_InviteEnterTeam::default_instance_ = nullptr;

S2C_Ret_InviteEnterTeam* S2C_Ret_InviteEnterTeam::New() const {
  return new S2C_Ret_InviteEnterTeam;
}

void S2C_Ret_InviteEnterTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    if (has_ret_code()) {
      if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
        ret_code_->clear();
      }
    }
    team_index_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Ret_InviteEnterTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ret_code;
        break;
      }

      // required bytes ret_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ret_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ret_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_team_index;
        break;
      }

      // required int64 team_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &team_index_)));
          set_has_team_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Ret_InviteEnterTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required bytes ret_code = 2;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->ret_code(), output);
  }

  // required int64 team_index = 3;
  if (has_team_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->team_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Ret_InviteEnterTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required bytes ret_code = 2;
  if (has_ret_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->ret_code(), target);
  }

  // required int64 team_index = 3;
  if (has_team_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->team_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Ret_InviteEnterTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required bytes ret_code = 2;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ret_code());
    }

    // required int64 team_index = 3;
    if (has_team_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->team_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Ret_InviteEnterTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Ret_InviteEnterTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Ret_InviteEnterTeam*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Ret_InviteEnterTeam::MergeFrom(const S2C_Ret_InviteEnterTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_team_index()) {
      set_team_index(from.team_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Ret_InviteEnterTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Ret_InviteEnterTeam::CopyFrom(const S2C_Ret_InviteEnterTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Ret_InviteEnterTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2C_Ret_InviteEnterTeam::Swap(S2C_Ret_InviteEnterTeam* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(ret_code_, other->ret_code_);
    std::swap(team_index_, other->team_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Ret_InviteEnterTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Ret_InviteEnterTeam_descriptor_;
  metadata.reflection = S2C_Ret_InviteEnterTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Ask_ApplyEnterTeam::kRoleIndexFieldNumber;
const int C2S_Ask_ApplyEnterTeam::kTeamIndexFieldNumber;
#endif  // !_MSC_VER

C2S_Ask_ApplyEnterTeam::C2S_Ask_ApplyEnterTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Ask_ApplyEnterTeam::InitAsDefaultInstance() {
}

C2S_Ask_ApplyEnterTeam::C2S_Ask_ApplyEnterTeam(const C2S_Ask_ApplyEnterTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Ask_ApplyEnterTeam::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  team_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Ask_ApplyEnterTeam::~C2S_Ask_ApplyEnterTeam() {
  SharedDtor();
}

void C2S_Ask_ApplyEnterTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_Ask_ApplyEnterTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Ask_ApplyEnterTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Ask_ApplyEnterTeam_descriptor_;
}

const C2S_Ask_ApplyEnterTeam& C2S_Ask_ApplyEnterTeam::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_Ask_ApplyEnterTeam* C2S_Ask_ApplyEnterTeam::default_instance_ = nullptr;

C2S_Ask_ApplyEnterTeam* C2S_Ask_ApplyEnterTeam::New() const {
  return new C2S_Ask_ApplyEnterTeam;
}

void C2S_Ask_ApplyEnterTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    team_index_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Ask_ApplyEnterTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team_index;
        break;
      }

      // required int64 team_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &team_index_)));
          set_has_team_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Ask_ApplyEnterTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required int64 team_index = 2;
  if (has_team_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->team_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Ask_ApplyEnterTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required int64 team_index = 2;
  if (has_team_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->team_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Ask_ApplyEnterTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required int64 team_index = 2;
    if (has_team_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->team_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Ask_ApplyEnterTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Ask_ApplyEnterTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Ask_ApplyEnterTeam*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Ask_ApplyEnterTeam::MergeFrom(const C2S_Ask_ApplyEnterTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_team_index()) {
      set_team_index(from.team_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Ask_ApplyEnterTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Ask_ApplyEnterTeam::CopyFrom(const C2S_Ask_ApplyEnterTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Ask_ApplyEnterTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C2S_Ask_ApplyEnterTeam::Swap(C2S_Ask_ApplyEnterTeam* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(team_index_, other->team_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Ask_ApplyEnterTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Ask_ApplyEnterTeam_descriptor_;
  metadata.reflection = C2S_Ask_ApplyEnterTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Ret_ApplyEnterTeam::kRoleIndexFieldNumber;
const int S2C_Ret_ApplyEnterTeam::kRetCodeFieldNumber;
#endif  // !_MSC_VER

S2C_Ret_ApplyEnterTeam::S2C_Ret_ApplyEnterTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Ret_ApplyEnterTeam::InitAsDefaultInstance() {
}

S2C_Ret_ApplyEnterTeam::S2C_Ret_ApplyEnterTeam(const S2C_Ret_ApplyEnterTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Ret_ApplyEnterTeam::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  ret_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Ret_ApplyEnterTeam::~S2C_Ret_ApplyEnterTeam() {
  SharedDtor();
}

void S2C_Ret_ApplyEnterTeam::SharedDtor() {
  if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
    delete ret_code_;
  }
  if (this != default_instance_) {
  }
}

void S2C_Ret_ApplyEnterTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Ret_ApplyEnterTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Ret_ApplyEnterTeam_descriptor_;
}

const S2C_Ret_ApplyEnterTeam& S2C_Ret_ApplyEnterTeam::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Ret_ApplyEnterTeam* S2C_Ret_ApplyEnterTeam::default_instance_ = nullptr;

S2C_Ret_ApplyEnterTeam* S2C_Ret_ApplyEnterTeam::New() const {
  return new S2C_Ret_ApplyEnterTeam;
}

void S2C_Ret_ApplyEnterTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    if (has_ret_code()) {
      if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
        ret_code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Ret_ApplyEnterTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ret_code;
        break;
      }

      // required bytes ret_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ret_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ret_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Ret_ApplyEnterTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required bytes ret_code = 2;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->ret_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Ret_ApplyEnterTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required bytes ret_code = 2;
  if (has_ret_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->ret_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Ret_ApplyEnterTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required bytes ret_code = 2;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ret_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Ret_ApplyEnterTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Ret_ApplyEnterTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Ret_ApplyEnterTeam*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Ret_ApplyEnterTeam::MergeFrom(const S2C_Ret_ApplyEnterTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Ret_ApplyEnterTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Ret_ApplyEnterTeam::CopyFrom(const S2C_Ret_ApplyEnterTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Ret_ApplyEnterTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2C_Ret_ApplyEnterTeam::Swap(S2C_Ret_ApplyEnterTeam* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(ret_code_, other->ret_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Ret_ApplyEnterTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Ret_ApplyEnterTeam_descriptor_;
  metadata.reflection = S2C_Ret_ApplyEnterTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Ask_ApplyLeaveTeam::kRoleIndexFieldNumber;
#endif  // !_MSC_VER

C2S_Ask_ApplyLeaveTeam::C2S_Ask_ApplyLeaveTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Ask_ApplyLeaveTeam::InitAsDefaultInstance() {
}

C2S_Ask_ApplyLeaveTeam::C2S_Ask_ApplyLeaveTeam(const C2S_Ask_ApplyLeaveTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Ask_ApplyLeaveTeam::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Ask_ApplyLeaveTeam::~C2S_Ask_ApplyLeaveTeam() {
  SharedDtor();
}

void C2S_Ask_ApplyLeaveTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_Ask_ApplyLeaveTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Ask_ApplyLeaveTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Ask_ApplyLeaveTeam_descriptor_;
}

const C2S_Ask_ApplyLeaveTeam& C2S_Ask_ApplyLeaveTeam::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_Ask_ApplyLeaveTeam* C2S_Ask_ApplyLeaveTeam::default_instance_ = nullptr;

C2S_Ask_ApplyLeaveTeam* C2S_Ask_ApplyLeaveTeam::New() const {
  return new C2S_Ask_ApplyLeaveTeam;
}

void C2S_Ask_ApplyLeaveTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Ask_ApplyLeaveTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Ask_ApplyLeaveTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Ask_ApplyLeaveTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Ask_ApplyLeaveTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Ask_ApplyLeaveTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Ask_ApplyLeaveTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Ask_ApplyLeaveTeam*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Ask_ApplyLeaveTeam::MergeFrom(const C2S_Ask_ApplyLeaveTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Ask_ApplyLeaveTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Ask_ApplyLeaveTeam::CopyFrom(const C2S_Ask_ApplyLeaveTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Ask_ApplyLeaveTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2S_Ask_ApplyLeaveTeam::Swap(C2S_Ask_ApplyLeaveTeam* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Ask_ApplyLeaveTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Ask_ApplyLeaveTeam_descriptor_;
  metadata.reflection = C2S_Ask_ApplyLeaveTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Ret_ApplyLeaveTeam::kRoleIndexFieldNumber;
const int S2C_Ret_ApplyLeaveTeam::kRetCodeFieldNumber;
#endif  // !_MSC_VER

S2C_Ret_ApplyLeaveTeam::S2C_Ret_ApplyLeaveTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Ret_ApplyLeaveTeam::InitAsDefaultInstance() {
}

S2C_Ret_ApplyLeaveTeam::S2C_Ret_ApplyLeaveTeam(const S2C_Ret_ApplyLeaveTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Ret_ApplyLeaveTeam::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  ret_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Ret_ApplyLeaveTeam::~S2C_Ret_ApplyLeaveTeam() {
  SharedDtor();
}

void S2C_Ret_ApplyLeaveTeam::SharedDtor() {
  if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
    delete ret_code_;
  }
  if (this != default_instance_) {
  }
}

void S2C_Ret_ApplyLeaveTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Ret_ApplyLeaveTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Ret_ApplyLeaveTeam_descriptor_;
}

const S2C_Ret_ApplyLeaveTeam& S2C_Ret_ApplyLeaveTeam::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Ret_ApplyLeaveTeam* S2C_Ret_ApplyLeaveTeam::default_instance_ = nullptr;

S2C_Ret_ApplyLeaveTeam* S2C_Ret_ApplyLeaveTeam::New() const {
  return new S2C_Ret_ApplyLeaveTeam;
}

void S2C_Ret_ApplyLeaveTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    if (has_ret_code()) {
      if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
        ret_code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Ret_ApplyLeaveTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ret_code;
        break;
      }

      // required bytes ret_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ret_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ret_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Ret_ApplyLeaveTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required bytes ret_code = 2;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->ret_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Ret_ApplyLeaveTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required bytes ret_code = 2;
  if (has_ret_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->ret_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Ret_ApplyLeaveTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required bytes ret_code = 2;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ret_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Ret_ApplyLeaveTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Ret_ApplyLeaveTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Ret_ApplyLeaveTeam*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Ret_ApplyLeaveTeam::MergeFrom(const S2C_Ret_ApplyLeaveTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Ret_ApplyLeaveTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Ret_ApplyLeaveTeam::CopyFrom(const S2C_Ret_ApplyLeaveTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Ret_ApplyLeaveTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2C_Ret_ApplyLeaveTeam::Swap(S2C_Ret_ApplyLeaveTeam* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(ret_code_, other->ret_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Ret_ApplyLeaveTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Ret_ApplyLeaveTeam_descriptor_;
  metadata.reflection = S2C_Ret_ApplyLeaveTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Ask_AgreeEnterTeam::kRoleIndexFieldNumber;
const int C2S_Ask_AgreeEnterTeam::kTarIndexFieldNumber;
#endif  // !_MSC_VER

C2S_Ask_AgreeEnterTeam::C2S_Ask_AgreeEnterTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Ask_AgreeEnterTeam::InitAsDefaultInstance() {
}

C2S_Ask_AgreeEnterTeam::C2S_Ask_AgreeEnterTeam(const C2S_Ask_AgreeEnterTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Ask_AgreeEnterTeam::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  tar_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Ask_AgreeEnterTeam::~C2S_Ask_AgreeEnterTeam() {
  SharedDtor();
}

void C2S_Ask_AgreeEnterTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_Ask_AgreeEnterTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Ask_AgreeEnterTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Ask_AgreeEnterTeam_descriptor_;
}

const C2S_Ask_AgreeEnterTeam& C2S_Ask_AgreeEnterTeam::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_Ask_AgreeEnterTeam* C2S_Ask_AgreeEnterTeam::default_instance_ = nullptr;

C2S_Ask_AgreeEnterTeam* C2S_Ask_AgreeEnterTeam::New() const {
  return new C2S_Ask_AgreeEnterTeam;
}

void C2S_Ask_AgreeEnterTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    tar_index_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Ask_AgreeEnterTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tar_index;
        break;
      }

      // required int64 tar_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tar_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tar_index_)));
          set_has_tar_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Ask_AgreeEnterTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required int64 tar_index = 2;
  if (has_tar_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->tar_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Ask_AgreeEnterTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required int64 tar_index = 2;
  if (has_tar_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->tar_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Ask_AgreeEnterTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required int64 tar_index = 2;
    if (has_tar_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tar_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Ask_AgreeEnterTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Ask_AgreeEnterTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Ask_AgreeEnterTeam*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Ask_AgreeEnterTeam::MergeFrom(const C2S_Ask_AgreeEnterTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_tar_index()) {
      set_tar_index(from.tar_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Ask_AgreeEnterTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Ask_AgreeEnterTeam::CopyFrom(const C2S_Ask_AgreeEnterTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Ask_AgreeEnterTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C2S_Ask_AgreeEnterTeam::Swap(C2S_Ask_AgreeEnterTeam* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(tar_index_, other->tar_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Ask_AgreeEnterTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Ask_AgreeEnterTeam_descriptor_;
  metadata.reflection = C2S_Ask_AgreeEnterTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Ret_AgreeEnterTeam::kRoleIndexFieldNumber;
const int S2C_Ret_AgreeEnterTeam::kTarIndexFieldNumber;
const int S2C_Ret_AgreeEnterTeam::kRetCodeFieldNumber;
#endif  // !_MSC_VER

S2C_Ret_AgreeEnterTeam::S2C_Ret_AgreeEnterTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Ret_AgreeEnterTeam::InitAsDefaultInstance() {
}

S2C_Ret_AgreeEnterTeam::S2C_Ret_AgreeEnterTeam(const S2C_Ret_AgreeEnterTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Ret_AgreeEnterTeam::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  tar_index_ = GOOGLE_LONGLONG(0);
  ret_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Ret_AgreeEnterTeam::~S2C_Ret_AgreeEnterTeam() {
  SharedDtor();
}

void S2C_Ret_AgreeEnterTeam::SharedDtor() {
  if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
    delete ret_code_;
  }
  if (this != default_instance_) {
  }
}

void S2C_Ret_AgreeEnterTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Ret_AgreeEnterTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Ret_AgreeEnterTeam_descriptor_;
}

const S2C_Ret_AgreeEnterTeam& S2C_Ret_AgreeEnterTeam::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Ret_AgreeEnterTeam* S2C_Ret_AgreeEnterTeam::default_instance_ = nullptr;

S2C_Ret_AgreeEnterTeam* S2C_Ret_AgreeEnterTeam::New() const {
  return new S2C_Ret_AgreeEnterTeam;
}

void S2C_Ret_AgreeEnterTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    tar_index_ = GOOGLE_LONGLONG(0);
    if (has_ret_code()) {
      if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
        ret_code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Ret_AgreeEnterTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tar_index;
        break;
      }

      // required int64 tar_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tar_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tar_index_)));
          set_has_tar_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ret_code;
        break;
      }

      // required bytes ret_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ret_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ret_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Ret_AgreeEnterTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required int64 tar_index = 2;
  if (has_tar_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->tar_index(), output);
  }

  // required bytes ret_code = 3;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->ret_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Ret_AgreeEnterTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required int64 tar_index = 2;
  if (has_tar_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->tar_index(), target);
  }

  // required bytes ret_code = 3;
  if (has_ret_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->ret_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Ret_AgreeEnterTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required int64 tar_index = 2;
    if (has_tar_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tar_index());
    }

    // required bytes ret_code = 3;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ret_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Ret_AgreeEnterTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Ret_AgreeEnterTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Ret_AgreeEnterTeam*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Ret_AgreeEnterTeam::MergeFrom(const S2C_Ret_AgreeEnterTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_tar_index()) {
      set_tar_index(from.tar_index());
    }
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Ret_AgreeEnterTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Ret_AgreeEnterTeam::CopyFrom(const S2C_Ret_AgreeEnterTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Ret_AgreeEnterTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2C_Ret_AgreeEnterTeam::Swap(S2C_Ret_AgreeEnterTeam* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(tar_index_, other->tar_index_);
    std::swap(ret_code_, other->ret_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Ret_AgreeEnterTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Ret_AgreeEnterTeam_descriptor_;
  metadata.reflection = S2C_Ret_AgreeEnterTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Ask_RefuseEnterTeam::kRoleIndexFieldNumber;
const int C2S_Ask_RefuseEnterTeam::kTarIndexFieldNumber;
#endif  // !_MSC_VER

C2S_Ask_RefuseEnterTeam::C2S_Ask_RefuseEnterTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Ask_RefuseEnterTeam::InitAsDefaultInstance() {
}

C2S_Ask_RefuseEnterTeam::C2S_Ask_RefuseEnterTeam(const C2S_Ask_RefuseEnterTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Ask_RefuseEnterTeam::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  tar_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Ask_RefuseEnterTeam::~C2S_Ask_RefuseEnterTeam() {
  SharedDtor();
}

void C2S_Ask_RefuseEnterTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_Ask_RefuseEnterTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Ask_RefuseEnterTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Ask_RefuseEnterTeam_descriptor_;
}

const C2S_Ask_RefuseEnterTeam& C2S_Ask_RefuseEnterTeam::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_Ask_RefuseEnterTeam* C2S_Ask_RefuseEnterTeam::default_instance_ = nullptr;

C2S_Ask_RefuseEnterTeam* C2S_Ask_RefuseEnterTeam::New() const {
  return new C2S_Ask_RefuseEnterTeam;
}

void C2S_Ask_RefuseEnterTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    tar_index_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Ask_RefuseEnterTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tar_index;
        break;
      }

      // required int64 tar_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tar_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tar_index_)));
          set_has_tar_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Ask_RefuseEnterTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required int64 tar_index = 2;
  if (has_tar_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->tar_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Ask_RefuseEnterTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required int64 tar_index = 2;
  if (has_tar_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->tar_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Ask_RefuseEnterTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required int64 tar_index = 2;
    if (has_tar_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tar_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Ask_RefuseEnterTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Ask_RefuseEnterTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Ask_RefuseEnterTeam*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Ask_RefuseEnterTeam::MergeFrom(const C2S_Ask_RefuseEnterTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_tar_index()) {
      set_tar_index(from.tar_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Ask_RefuseEnterTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Ask_RefuseEnterTeam::CopyFrom(const C2S_Ask_RefuseEnterTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Ask_RefuseEnterTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C2S_Ask_RefuseEnterTeam::Swap(C2S_Ask_RefuseEnterTeam* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(tar_index_, other->tar_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Ask_RefuseEnterTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Ask_RefuseEnterTeam_descriptor_;
  metadata.reflection = C2S_Ask_RefuseEnterTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Ret_RefuseEnterTeam::kRoleIndexFieldNumber;
const int S2C_Ret_RefuseEnterTeam::kTarIndexFieldNumber;
const int S2C_Ret_RefuseEnterTeam::kRetCodeFieldNumber;
#endif  // !_MSC_VER

S2C_Ret_RefuseEnterTeam::S2C_Ret_RefuseEnterTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Ret_RefuseEnterTeam::InitAsDefaultInstance() {
}

S2C_Ret_RefuseEnterTeam::S2C_Ret_RefuseEnterTeam(const S2C_Ret_RefuseEnterTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Ret_RefuseEnterTeam::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  tar_index_ = GOOGLE_LONGLONG(0);
  ret_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Ret_RefuseEnterTeam::~S2C_Ret_RefuseEnterTeam() {
  SharedDtor();
}

void S2C_Ret_RefuseEnterTeam::SharedDtor() {
  if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
    delete ret_code_;
  }
  if (this != default_instance_) {
  }
}

void S2C_Ret_RefuseEnterTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Ret_RefuseEnterTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Ret_RefuseEnterTeam_descriptor_;
}

const S2C_Ret_RefuseEnterTeam& S2C_Ret_RefuseEnterTeam::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Ret_RefuseEnterTeam* S2C_Ret_RefuseEnterTeam::default_instance_ = nullptr;

S2C_Ret_RefuseEnterTeam* S2C_Ret_RefuseEnterTeam::New() const {
  return new S2C_Ret_RefuseEnterTeam;
}

void S2C_Ret_RefuseEnterTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    tar_index_ = GOOGLE_LONGLONG(0);
    if (has_ret_code()) {
      if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
        ret_code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Ret_RefuseEnterTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tar_index;
        break;
      }

      // required int64 tar_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tar_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tar_index_)));
          set_has_tar_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ret_code;
        break;
      }

      // required bytes ret_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ret_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ret_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Ret_RefuseEnterTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required int64 tar_index = 2;
  if (has_tar_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->tar_index(), output);
  }

  // required bytes ret_code = 3;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->ret_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Ret_RefuseEnterTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required int64 tar_index = 2;
  if (has_tar_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->tar_index(), target);
  }

  // required bytes ret_code = 3;
  if (has_ret_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->ret_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Ret_RefuseEnterTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required int64 tar_index = 2;
    if (has_tar_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tar_index());
    }

    // required bytes ret_code = 3;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ret_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Ret_RefuseEnterTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Ret_RefuseEnterTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Ret_RefuseEnterTeam*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Ret_RefuseEnterTeam::MergeFrom(const S2C_Ret_RefuseEnterTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_tar_index()) {
      set_tar_index(from.tar_index());
    }
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Ret_RefuseEnterTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Ret_RefuseEnterTeam::CopyFrom(const S2C_Ret_RefuseEnterTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Ret_RefuseEnterTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2C_Ret_RefuseEnterTeam::Swap(S2C_Ret_RefuseEnterTeam* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(tar_index_, other->tar_index_);
    std::swap(ret_code_, other->ret_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Ret_RefuseEnterTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Ret_RefuseEnterTeam_descriptor_;
  metadata.reflection = S2C_Ret_RefuseEnterTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Ask_KickLeaveTeam::kRoleIndexFieldNumber;
const int C2S_Ask_KickLeaveTeam::kTarIndexFieldNumber;
#endif  // !_MSC_VER

C2S_Ask_KickLeaveTeam::C2S_Ask_KickLeaveTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Ask_KickLeaveTeam::InitAsDefaultInstance() {
}

C2S_Ask_KickLeaveTeam::C2S_Ask_KickLeaveTeam(const C2S_Ask_KickLeaveTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Ask_KickLeaveTeam::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  tar_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Ask_KickLeaveTeam::~C2S_Ask_KickLeaveTeam() {
  SharedDtor();
}

void C2S_Ask_KickLeaveTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_Ask_KickLeaveTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Ask_KickLeaveTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Ask_KickLeaveTeam_descriptor_;
}

const C2S_Ask_KickLeaveTeam& C2S_Ask_KickLeaveTeam::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_Ask_KickLeaveTeam* C2S_Ask_KickLeaveTeam::default_instance_ = nullptr;

C2S_Ask_KickLeaveTeam* C2S_Ask_KickLeaveTeam::New() const {
  return new C2S_Ask_KickLeaveTeam;
}

void C2S_Ask_KickLeaveTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    tar_index_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Ask_KickLeaveTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tar_index;
        break;
      }

      // required int64 tar_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tar_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tar_index_)));
          set_has_tar_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Ask_KickLeaveTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required int64 tar_index = 2;
  if (has_tar_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->tar_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Ask_KickLeaveTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required int64 tar_index = 2;
  if (has_tar_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->tar_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Ask_KickLeaveTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required int64 tar_index = 2;
    if (has_tar_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tar_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Ask_KickLeaveTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Ask_KickLeaveTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Ask_KickLeaveTeam*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Ask_KickLeaveTeam::MergeFrom(const C2S_Ask_KickLeaveTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_tar_index()) {
      set_tar_index(from.tar_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Ask_KickLeaveTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Ask_KickLeaveTeam::CopyFrom(const C2S_Ask_KickLeaveTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Ask_KickLeaveTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C2S_Ask_KickLeaveTeam::Swap(C2S_Ask_KickLeaveTeam* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(tar_index_, other->tar_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Ask_KickLeaveTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Ask_KickLeaveTeam_descriptor_;
  metadata.reflection = C2S_Ask_KickLeaveTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Ret_KickLeaveTeam::kRoleIndexFieldNumber;
const int S2C_Ret_KickLeaveTeam::kTarIndexFieldNumber;
const int S2C_Ret_KickLeaveTeam::kRetCodeFieldNumber;
#endif  // !_MSC_VER

S2C_Ret_KickLeaveTeam::S2C_Ret_KickLeaveTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Ret_KickLeaveTeam::InitAsDefaultInstance() {
}

S2C_Ret_KickLeaveTeam::S2C_Ret_KickLeaveTeam(const S2C_Ret_KickLeaveTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Ret_KickLeaveTeam::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  tar_index_ = GOOGLE_LONGLONG(0);
  ret_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Ret_KickLeaveTeam::~S2C_Ret_KickLeaveTeam() {
  SharedDtor();
}

void S2C_Ret_KickLeaveTeam::SharedDtor() {
  if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
    delete ret_code_;
  }
  if (this != default_instance_) {
  }
}

void S2C_Ret_KickLeaveTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Ret_KickLeaveTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Ret_KickLeaveTeam_descriptor_;
}

const S2C_Ret_KickLeaveTeam& S2C_Ret_KickLeaveTeam::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Ret_KickLeaveTeam* S2C_Ret_KickLeaveTeam::default_instance_ = nullptr;

S2C_Ret_KickLeaveTeam* S2C_Ret_KickLeaveTeam::New() const {
  return new S2C_Ret_KickLeaveTeam;
}

void S2C_Ret_KickLeaveTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    tar_index_ = GOOGLE_LONGLONG(0);
    if (has_ret_code()) {
      if (ret_code_ != &::google::protobuf::internal::kEmptyString) {
        ret_code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Ret_KickLeaveTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tar_index;
        break;
      }

      // required int64 tar_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tar_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tar_index_)));
          set_has_tar_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ret_code;
        break;
      }

      // required bytes ret_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ret_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ret_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Ret_KickLeaveTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  // required int64 tar_index = 2;
  if (has_tar_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->tar_index(), output);
  }

  // required bytes ret_code = 3;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->ret_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Ret_KickLeaveTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  // required int64 tar_index = 2;
  if (has_tar_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->tar_index(), target);
  }

  // required bytes ret_code = 3;
  if (has_ret_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->ret_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Ret_KickLeaveTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

    // required int64 tar_index = 2;
    if (has_tar_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tar_index());
    }

    // required bytes ret_code = 3;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ret_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Ret_KickLeaveTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Ret_KickLeaveTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Ret_KickLeaveTeam*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Ret_KickLeaveTeam::MergeFrom(const S2C_Ret_KickLeaveTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_tar_index()) {
      set_tar_index(from.tar_index());
    }
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Ret_KickLeaveTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Ret_KickLeaveTeam::CopyFrom(const S2C_Ret_KickLeaveTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Ret_KickLeaveTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2C_Ret_KickLeaveTeam::Swap(S2C_Ret_KickLeaveTeam* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(tar_index_, other->tar_index_);
    std::swap(ret_code_, other->ret_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Ret_KickLeaveTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Ret_KickLeaveTeam_descriptor_;
  metadata.reflection = S2C_Ret_KickLeaveTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_Ask_TeamInfo::kRoleIndexFieldNumber;
#endif  // !_MSC_VER

C2S_Ask_TeamInfo::C2S_Ask_TeamInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Ask_TeamInfo::InitAsDefaultInstance() {
}

C2S_Ask_TeamInfo::C2S_Ask_TeamInfo(const C2S_Ask_TeamInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Ask_TeamInfo::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Ask_TeamInfo::~C2S_Ask_TeamInfo() {
  SharedDtor();
}

void C2S_Ask_TeamInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_Ask_TeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Ask_TeamInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Ask_TeamInfo_descriptor_;
}

const C2S_Ask_TeamInfo& C2S_Ask_TeamInfo::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

C2S_Ask_TeamInfo* C2S_Ask_TeamInfo::default_instance_ = nullptr;

C2S_Ask_TeamInfo* C2S_Ask_TeamInfo::New() const {
  return new C2S_Ask_TeamInfo;
}

void C2S_Ask_TeamInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Ask_TeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_Ask_TeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->role_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Ask_TeamInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->role_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Ask_TeamInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Ask_TeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Ask_TeamInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Ask_TeamInfo*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Ask_TeamInfo::MergeFrom(const C2S_Ask_TeamInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Ask_TeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Ask_TeamInfo::CopyFrom(const C2S_Ask_TeamInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Ask_TeamInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2S_Ask_TeamInfo::Swap(C2S_Ask_TeamInfo* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Ask_TeamInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Ask_TeamInfo_descriptor_;
  metadata.reflection = C2S_Ask_TeamInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_Ret_TeamInfo::kTeamsFieldNumber;
const int S2C_Ret_TeamInfo::kDestroyTeamsFieldNumber;
#endif  // !_MSC_VER

S2C_Ret_TeamInfo::S2C_Ret_TeamInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Ret_TeamInfo::InitAsDefaultInstance() {
}

S2C_Ret_TeamInfo::S2C_Ret_TeamInfo(const S2C_Ret_TeamInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Ret_TeamInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Ret_TeamInfo::~S2C_Ret_TeamInfo() {
  SharedDtor();
}

void S2C_Ret_TeamInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2C_Ret_TeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Ret_TeamInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Ret_TeamInfo_descriptor_;
}

const S2C_Ret_TeamInfo& S2C_Ret_TeamInfo::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_NetPacket_2eproto();
  return *default_instance_;
}

S2C_Ret_TeamInfo* S2C_Ret_TeamInfo::default_instance_ = nullptr;

S2C_Ret_TeamInfo* S2C_Ret_TeamInfo::New() const {
  return new S2C_Ret_TeamInfo;
}

void S2C_Ret_TeamInfo::Clear() {
  teams_.Clear();
  destroy_teams_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Ret_TeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .universal_data teams = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_teams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teams()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_teams;
        if (input->ExpectTag(16)) goto parse_destroy_teams;
        break;
      }

      // repeated int64 destroy_teams = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destroy_teams:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_destroy_teams())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_destroy_teams())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_destroy_teams;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_Ret_TeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .universal_data teams = 1;
  for (int i = 0; i < this->teams_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->teams(i), output);
  }

  // repeated int64 destroy_teams = 2;
  for (int i = 0; i < this->destroy_teams_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->destroy_teams(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Ret_TeamInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .universal_data teams = 1;
  for (int i = 0; i < this->teams_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->teams(i), target);
  }

  // repeated int64 destroy_teams = 2;
  for (int i = 0; i < this->destroy_teams_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->destroy_teams(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Ret_TeamInfo::ByteSize() const {
  int total_size = 0;

  // repeated .universal_data teams = 1;
  total_size += 1 * this->teams_size();
  for (int i = 0; i < this->teams_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teams(i));
  }

  // repeated int64 destroy_teams = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->destroy_teams_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->destroy_teams(i));
    }
    total_size += 1 * this->destroy_teams_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Ret_TeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Ret_TeamInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Ret_TeamInfo*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Ret_TeamInfo::MergeFrom(const S2C_Ret_TeamInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  teams_.MergeFrom(from.teams_);
  destroy_teams_.MergeFrom(from.destroy_teams_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Ret_TeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Ret_TeamInfo::CopyFrom(const S2C_Ret_TeamInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Ret_TeamInfo::IsInitialized() const {

  return true;
}

void S2C_Ret_TeamInfo::Swap(S2C_Ret_TeamInfo* other) {
  if (other != this) {
    teams_.Swap(&other->teams_);
    destroy_teams_.Swap(&other->destroy_teams_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Ret_TeamInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Ret_TeamInfo_descriptor_;
  metadata.reflection = S2C_Ret_TeamInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
