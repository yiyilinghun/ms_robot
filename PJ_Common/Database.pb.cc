// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Database.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Database.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* sql_result_register_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sql_result_register_reflection_ = nullptr;
const ::google::protobuf::Descriptor* sql_ret_role_count_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sql_ret_role_count_reflection_ = nullptr;
const ::google::protobuf::Descriptor* sql_ret_cluster_node_info_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sql_ret_cluster_node_info_reflection_ = nullptr;
const ::google::protobuf::Descriptor* sql_check_account_key_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sql_check_account_key_reflection_ = nullptr;
const ::google::protobuf::Descriptor* sql_result_login_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sql_result_login_reflection_ = nullptr;
const ::google::protobuf::Descriptor* sql_result_role_online_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sql_result_role_online_reflection_ = nullptr;
const ::google::protobuf::Descriptor* sql_result_role_offline_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sql_result_role_offline_reflection_ = nullptr;
const ::google::protobuf::Descriptor* sql_result_role_count_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sql_result_role_count_reflection_ = nullptr;
const ::google::protobuf::Descriptor* sql_result_createrole_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sql_result_createrole_reflection_ = nullptr;
const ::google::protobuf::Descriptor* sql_result_save_role_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sql_result_save_role_reflection_ = nullptr;
const ::google::protobuf::Descriptor* item_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  item_reflection_ = nullptr;
const ::google::protobuf::Descriptor* dict_item_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dict_item_reflection_ = nullptr;
const ::google::protobuf::Descriptor* suit_goods_info_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  suit_goods_info_reflection_ = nullptr;
const ::google::protobuf::Descriptor* suit_info_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  suit_info_reflection_ = nullptr;
const ::google::protobuf::Descriptor* list_role_suit_info_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  list_role_suit_info_reflection_ = nullptr;
const ::google::protobuf::Descriptor* face_goods_info_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  face_goods_info_reflection_ = nullptr;
const ::google::protobuf::Descriptor* face_info_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  face_info_reflection_ = nullptr;
const ::google::protobuf::Descriptor* level_info_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  level_info_reflection_ = nullptr;
const ::google::protobuf::Descriptor* reward_box_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  reward_box_reflection_ = nullptr;
const ::google::protobuf::Descriptor* chapter_info_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chapter_info_reflection_ = nullptr;
const ::google::protobuf::Descriptor* list_role_face_info_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  list_role_face_info_reflection_ = nullptr;
const ::google::protobuf::Descriptor* role_info_skill_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_info_skill_reflection_ = nullptr;
const ::google::protobuf::Descriptor* game_friend_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_friend_reflection_ = nullptr;
const ::google::protobuf::Descriptor* dict_game_friend_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dict_game_friend_reflection_ = nullptr;
const ::google::protobuf::Descriptor* summonpet_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  summonpet_reflection_ = nullptr;
const ::google::protobuf::Descriptor* dict_summonpet_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dict_summonpet_reflection_ = nullptr;
const ::google::protobuf::Descriptor* task_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  task_reflection_ = nullptr;
const ::google::protobuf::Descriptor* success_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  success_reflection_ = nullptr;
const ::google::protobuf::Descriptor* guide_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guide_reflection_ = nullptr;
const ::google::protobuf::Descriptor* role_info_config_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_info_config_reflection_ = nullptr;
const ::google::protobuf::Descriptor* times_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  times_reflection_ = nullptr;
const ::google::protobuf::Descriptor* dict_comrade_role_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dict_comrade_role_reflection_ = nullptr;
const ::google::protobuf::Descriptor* role_info_memory_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_info_memory_reflection_ = nullptr;
const ::google::protobuf::Descriptor* role_info_public_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_info_public_reflection_ = nullptr;
const ::google::protobuf::Descriptor* role_info_private_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_info_private_reflection_ = nullptr;
const ::google::protobuf::Descriptor* role_info_attr_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_info_attr_reflection_ = nullptr;
const ::google::protobuf::Descriptor* role_info_reward_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_info_reward_reflection_ = nullptr;
const ::google::protobuf::Descriptor* roleinfo_extend_attr_1_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  roleinfo_extend_attr_1_reflection_ = nullptr;
const ::google::protobuf::Descriptor* roleinfo_extend_attr_2_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  roleinfo_extend_attr_2_reflection_ = nullptr;
const ::google::protobuf::Descriptor* roleinfo_extend_attr_3_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  roleinfo_extend_attr_3_reflection_ = nullptr;
const ::google::protobuf::Descriptor* roleinfo_extend_attr_4_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  roleinfo_extend_attr_4_reflection_ = nullptr;
const ::google::protobuf::Descriptor* roleinfo_extend_attr_5_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  roleinfo_extend_attr_5_reflection_ = nullptr;
const ::google::protobuf::Descriptor* role_info_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_info_reflection_ = nullptr;

}  // namespace


void protobuf_AssignDesc_Database_2eproto() {
  protobuf_AddDesc_Database_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Database.proto");
  GOOGLE_CHECK(file != nullptr);
  sql_result_register_descriptor_ = file->message_type(0);
  static const int sql_result_register_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_result_register, ret_code_),
  };
  sql_result_register_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sql_result_register_descriptor_,
      sql_result_register::default_instance_,
      sql_result_register_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_result_register, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_result_register, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sql_result_register));
  sql_ret_role_count_descriptor_ = file->message_type(1);
  static const int sql_ret_role_count_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_ret_role_count, is_ok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_ret_role_count, role_index_),
  };
  sql_ret_role_count_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sql_ret_role_count_descriptor_,
      sql_ret_role_count::default_instance_,
      sql_ret_role_count_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_ret_role_count, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_ret_role_count, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sql_ret_role_count));
  sql_ret_cluster_node_info_descriptor_ = file->message_type(2);
  static const int sql_ret_cluster_node_info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_ret_cluster_node_info, node_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_ret_cluster_node_info, intaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_ret_cluster_node_info, unit_next_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_ret_cluster_node_info, cpu_pressure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_ret_cluster_node_info, is_online_),
  };
  sql_ret_cluster_node_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sql_ret_cluster_node_info_descriptor_,
      sql_ret_cluster_node_info::default_instance_,
      sql_ret_cluster_node_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_ret_cluster_node_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_ret_cluster_node_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sql_ret_cluster_node_info));
  sql_check_account_key_descriptor_ = file->message_type(3);
  static const int sql_check_account_key_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_check_account_key, account_),
  };
  sql_check_account_key_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sql_check_account_key_descriptor_,
      sql_check_account_key::default_instance_,
      sql_check_account_key_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_check_account_key, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_check_account_key, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sql_check_account_key));
  sql_result_login_descriptor_ = file->message_type(4);
  static const int sql_result_login_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_result_login, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_result_login, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_result_login, login_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_result_login, can_login_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_result_login, can_profit_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_result_login, can_senior_operation_),
  };
  sql_result_login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sql_result_login_descriptor_,
      sql_result_login::default_instance_,
      sql_result_login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_result_login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_result_login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sql_result_login));
  sql_result_role_online_descriptor_ = file->message_type(5);
  static const int sql_result_role_online_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_result_role_online, count_),
  };
  sql_result_role_online_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sql_result_role_online_descriptor_,
      sql_result_role_online::default_instance_,
      sql_result_role_online_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_result_role_online, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_result_role_online, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sql_result_role_online));
  sql_result_role_offline_descriptor_ = file->message_type(6);
  static const int sql_result_role_offline_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_result_role_offline, count_),
  };
  sql_result_role_offline_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sql_result_role_offline_descriptor_,
      sql_result_role_offline::default_instance_,
      sql_result_role_offline_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_result_role_offline, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_result_role_offline, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sql_result_role_offline));
  sql_result_role_count_descriptor_ = file->message_type(7);
  static const int sql_result_role_count_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_result_role_count, role_index_),
  };
  sql_result_role_count_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sql_result_role_count_descriptor_,
      sql_result_role_count::default_instance_,
      sql_result_role_count_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_result_role_count, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_result_role_count, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sql_result_role_count));
  sql_result_createrole_descriptor_ = file->message_type(8);
  static const int sql_result_createrole_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_result_createrole, ret_code_),
  };
  sql_result_createrole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sql_result_createrole_descriptor_,
      sql_result_createrole::default_instance_,
      sql_result_createrole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_result_createrole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_result_createrole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sql_result_createrole));
  sql_result_save_role_descriptor_ = file->message_type(9);
  static const int sql_result_save_role_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_result_save_role, ret_code_),
  };
  sql_result_save_role_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sql_result_save_role_descriptor_,
      sql_result_save_role::default_instance_,
      sql_result_save_role_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_result_save_role, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sql_result_save_role, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sql_result_save_role));
  item_descriptor_ = file->message_type(10);
  static const int item_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item, item_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item, item_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item, item_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item, item_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item, item_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item, item_res_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item, item_res_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item, ex_info_),
  };
  item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      item_descriptor_,
      item::default_instance_,
      item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(item));
  dict_item_descriptor_ = file->message_type(11);
  static const int dict_item_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dict_item, item_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dict_item, item_info_),
  };
  dict_item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dict_item_descriptor_,
      dict_item::default_instance_,
      dict_item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dict_item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dict_item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dict_item));
  suit_goods_info_descriptor_ = file->message_type(12);
  static const int suit_goods_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(suit_goods_info, can_buy_suit_shop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(suit_goods_info, is_buy_),
  };
  suit_goods_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      suit_goods_info_descriptor_,
      suit_goods_info::default_instance_,
      suit_goods_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(suit_goods_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(suit_goods_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(suit_goods_info));
  suit_info_descriptor_ = file->message_type(13);
  static const int suit_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(suit_info, suit_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(suit_info, suit_unixtime_time_out_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(suit_info, suit_duration_type_),
  };
  suit_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      suit_info_descriptor_,
      suit_info::default_instance_,
      suit_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(suit_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(suit_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(suit_info));
  list_role_suit_info_descriptor_ = file->message_type(14);
  static const int list_role_suit_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(list_role_suit_info, list_buy_suit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(list_role_suit_info, suit_shop_last_update_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(list_role_suit_info, current_suit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(list_role_suit_info, list_have_suits_),
  };
  list_role_suit_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      list_role_suit_info_descriptor_,
      list_role_suit_info::default_instance_,
      list_role_suit_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(list_role_suit_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(list_role_suit_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(list_role_suit_info));
  face_goods_info_descriptor_ = file->message_type(15);
  static const int face_goods_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(face_goods_info, can_buy_face_shop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(face_goods_info, is_buy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(face_goods_info, face_shop_index_),
  };
  face_goods_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      face_goods_info_descriptor_,
      face_goods_info::default_instance_,
      face_goods_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(face_goods_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(face_goods_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(face_goods_info));
  face_info_descriptor_ = file->message_type(16);
  static const int face_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(face_info, face_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(face_info, face_unixtime_time_out_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(face_info, face_duration_type_),
  };
  face_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      face_info_descriptor_,
      face_info::default_instance_,
      face_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(face_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(face_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(face_info));
  level_info_descriptor_ = file->message_type(17);
  static const int level_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(level_info, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(level_info, passed_),
  };
  level_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      level_info_descriptor_,
      level_info::default_instance_,
      level_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(level_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(level_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(level_info));
  reward_box_descriptor_ = file->message_type(18);
  static const int reward_box_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reward_box, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reward_box, get_),
  };
  reward_box_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      reward_box_descriptor_,
      reward_box::default_instance_,
      reward_box_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reward_box, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reward_box, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(reward_box));
  chapter_info_descriptor_ = file->message_type(19);
  static const int chapter_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chapter_info, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chapter_info, list_dup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chapter_info, list_box_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chapter_info, get_reward_),
  };
  chapter_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chapter_info_descriptor_,
      chapter_info::default_instance_,
      chapter_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chapter_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chapter_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chapter_info));
  list_role_face_info_descriptor_ = file->message_type(20);
  static const int list_role_face_info_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(list_role_face_info, list_original_buy_face_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(list_role_face_info, list_discount_buy_face_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(list_role_face_info, face_shop_last_update_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(list_role_face_info, face_shop_last_manual_update_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(list_role_face_info, face_shop_manual_update_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(list_role_face_info, current_face_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(list_role_face_info, list_have_faces_),
  };
  list_role_face_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      list_role_face_info_descriptor_,
      list_role_face_info::default_instance_,
      list_role_face_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(list_role_face_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(list_role_face_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(list_role_face_info));
  role_info_skill_descriptor_ = file->message_type(21);
  static const int role_info_skill_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_skill, defaule_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_skill, list_skill_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_skill, list_skill_),
  };
  role_info_skill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_info_skill_descriptor_,
      role_info_skill::default_instance_,
      role_info_skill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_skill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_skill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_info_skill));
  game_friend_descriptor_ = file->message_type(22);
  static const int game_friend_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_friend, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_friend, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_friend, nick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_friend, suit_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_friend, face_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_friend, weapon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_friend, helmet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_friend, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_friend, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_friend, is_online_),
  };
  game_friend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_friend_descriptor_,
      game_friend::default_instance_,
      game_friend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_friend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_friend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_friend));
  dict_game_friend_descriptor_ = file->message_type(23);
  static const int dict_game_friend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dict_game_friend, list_role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dict_game_friend, list_friends_),
  };
  dict_game_friend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dict_game_friend_descriptor_,
      dict_game_friend::default_instance_,
      dict_game_friend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dict_game_friend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dict_game_friend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dict_game_friend));
  summonpet_descriptor_ = file->message_type(24);
  static const int summonpet_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(summonpet, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(summonpet, reborn_sum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(summonpet, public_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(summonpet, memory_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(summonpet, attr_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(summonpet, skill_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(summonpet, reward_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(summonpet, is_follow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(summonpet, is_comrade_),
  };
  summonpet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      summonpet_descriptor_,
      summonpet::default_instance_,
      summonpet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(summonpet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(summonpet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(summonpet));
  dict_summonpet_descriptor_ = file->message_type(25);
  static const int dict_summonpet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dict_summonpet, list_role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dict_summonpet, list_summonpet_info_),
  };
  dict_summonpet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dict_summonpet_descriptor_,
      dict_summonpet::default_instance_,
      dict_summonpet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dict_summonpet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dict_summonpet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dict_summonpet));
  task_descriptor_ = file->message_type(26);
  static const int task_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task, list_completed_task_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task, list_can_accept_task_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task, list_accepted_task_list_),
  };
  task_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      task_descriptor_,
      task::default_instance_,
      task_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(task));
  success_descriptor_ = file->message_type(27);
  static const int success_offsets_[1] = {
  };
  success_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      success_descriptor_,
      success::default_instance_,
      success_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(success, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(success, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(success));
  guide_descriptor_ = file->message_type(28);
  static const int guide_offsets_[1] = {
  };
  guide_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guide_descriptor_,
      guide::default_instance_,
      guide_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guide, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guide, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guide));
  role_info_config_descriptor_ = file->message_type(29);
  static const int role_info_config_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_config, follower_auto_comrade_),
  };
  role_info_config_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_info_config_descriptor_,
      role_info_config::default_instance_,
      role_info_config_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_config, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_config, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_info_config));
  times_descriptor_ = file->message_type(30);
  static const int times_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(times, face_shop_last_update_time_),
  };
  times_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      times_descriptor_,
      times::default_instance_,
      times_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(times, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(times, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(times));
  dict_comrade_role_descriptor_ = file->message_type(31);
  static const int dict_comrade_role_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dict_comrade_role, keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dict_comrade_role, values_),
  };
  dict_comrade_role_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dict_comrade_role_descriptor_,
      dict_comrade_role::default_instance_,
      dict_comrade_role_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dict_comrade_role, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dict_comrade_role, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dict_comrade_role));
  role_info_memory_descriptor_ = file->message_type(32);
  static const int role_info_memory_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_memory, list_follow_role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_memory, comrade_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_memory, is_on_enter_game_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_memory, battle_team_index_),
  };
  role_info_memory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_info_memory_descriptor_,
      role_info_memory::default_instance_,
      role_info_memory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_memory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_memory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_info_memory));
  role_info_public_descriptor_ = file->message_type(33);
  static const int role_info_public_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_public, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_public, team_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_public, team_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_public, reborn_sum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_public, object_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_public, racial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_public, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_public, object_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_public, head_icon_file_small_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_public, head_icon_key_small_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_public, head_icon_file_medium_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_public, head_icon_key_medium_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_public, head_icon_file_big_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_public, head_icon_key_big_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_public, head_icon_file_portrait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_public, head_icon_key_portrait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_public, nick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_public, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_public, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_public, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_public, pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_public, pos_y_),
  };
  role_info_public_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_info_public_descriptor_,
      role_info_public::default_instance_,
      role_info_public_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_public, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_public, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_info_public));
  role_info_private_descriptor_ = file->message_type(34);
  static const int role_info_private_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_private, battle_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_private, game_coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_private, stamina_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_private, diamond_coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_private, skill_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_private, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_private, list_watcher_role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_private, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_private, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_private, qq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_private, platform_type_),
  };
  role_info_private_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_info_private_descriptor_,
      role_info_private::default_instance_,
      role_info_private_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_private, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_private, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_info_private));
  role_info_attr_descriptor_ = file->message_type(35);
  static const int role_info_attr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_attr, attr_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_attr, attr_value_),
  };
  role_info_attr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_info_attr_descriptor_,
      role_info_attr::default_instance_,
      role_info_attr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_attr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_attr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_info_attr));
  role_info_reward_descriptor_ = file->message_type(36);
  static const int role_info_reward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_reward, list_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_reward, list_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_reward, list_item_),
  };
  role_info_reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_info_reward_descriptor_,
      role_info_reward::default_instance_,
      role_info_reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_info_reward));
  roleinfo_extend_attr_1_descriptor_ = file->message_type(37);
  static const int roleinfo_extend_attr_1_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleinfo_extend_attr_1, test_data_),
  };
  roleinfo_extend_attr_1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      roleinfo_extend_attr_1_descriptor_,
      roleinfo_extend_attr_1::default_instance_,
      roleinfo_extend_attr_1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleinfo_extend_attr_1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleinfo_extend_attr_1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(roleinfo_extend_attr_1));
  roleinfo_extend_attr_2_descriptor_ = file->message_type(38);
  static const int roleinfo_extend_attr_2_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleinfo_extend_attr_2, test_data_),
  };
  roleinfo_extend_attr_2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      roleinfo_extend_attr_2_descriptor_,
      roleinfo_extend_attr_2::default_instance_,
      roleinfo_extend_attr_2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleinfo_extend_attr_2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleinfo_extend_attr_2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(roleinfo_extend_attr_2));
  roleinfo_extend_attr_3_descriptor_ = file->message_type(39);
  static const int roleinfo_extend_attr_3_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleinfo_extend_attr_3, test_data_),
  };
  roleinfo_extend_attr_3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      roleinfo_extend_attr_3_descriptor_,
      roleinfo_extend_attr_3::default_instance_,
      roleinfo_extend_attr_3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleinfo_extend_attr_3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleinfo_extend_attr_3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(roleinfo_extend_attr_3));
  roleinfo_extend_attr_4_descriptor_ = file->message_type(40);
  static const int roleinfo_extend_attr_4_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleinfo_extend_attr_4, test_data_),
  };
  roleinfo_extend_attr_4_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      roleinfo_extend_attr_4_descriptor_,
      roleinfo_extend_attr_4::default_instance_,
      roleinfo_extend_attr_4_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleinfo_extend_attr_4, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleinfo_extend_attr_4, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(roleinfo_extend_attr_4));
  roleinfo_extend_attr_5_descriptor_ = file->message_type(41);
  static const int roleinfo_extend_attr_5_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleinfo_extend_attr_5, test_data_),
  };
  roleinfo_extend_attr_5_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      roleinfo_extend_attr_5_descriptor_,
      roleinfo_extend_attr_5::default_instance_,
      roleinfo_extend_attr_5_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleinfo_extend_attr_5, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleinfo_extend_attr_5, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(roleinfo_extend_attr_5));
  role_info_descriptor_ = file->message_type(42);
  static const int role_info_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info, role_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info, public_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info, private_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info, attr_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info, memory_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info, skill_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info, reward_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info, config_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info, bag_page_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info, equips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info, summonpets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info, friends_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info, task_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info, list_success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info, list_guide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info, extend_attr1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info, extend_attr2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info, extend_attr3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info, extend_attr4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info, extend_attr5_),
  };
  role_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_info_descriptor_,
      role_info::default_instance_,
      role_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_info));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Database_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sql_result_register_descriptor_, &sql_result_register::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sql_ret_role_count_descriptor_, &sql_ret_role_count::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sql_ret_cluster_node_info_descriptor_, &sql_ret_cluster_node_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sql_check_account_key_descriptor_, &sql_check_account_key::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sql_result_login_descriptor_, &sql_result_login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sql_result_role_online_descriptor_, &sql_result_role_online::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sql_result_role_offline_descriptor_, &sql_result_role_offline::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sql_result_role_count_descriptor_, &sql_result_role_count::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sql_result_createrole_descriptor_, &sql_result_createrole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sql_result_save_role_descriptor_, &sql_result_save_role::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    item_descriptor_, &item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dict_item_descriptor_, &dict_item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    suit_goods_info_descriptor_, &suit_goods_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    suit_info_descriptor_, &suit_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    list_role_suit_info_descriptor_, &list_role_suit_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    face_goods_info_descriptor_, &face_goods_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    face_info_descriptor_, &face_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    level_info_descriptor_, &level_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    reward_box_descriptor_, &reward_box::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chapter_info_descriptor_, &chapter_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    list_role_face_info_descriptor_, &list_role_face_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_info_skill_descriptor_, &role_info_skill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_friend_descriptor_, &game_friend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dict_game_friend_descriptor_, &dict_game_friend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    summonpet_descriptor_, &summonpet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dict_summonpet_descriptor_, &dict_summonpet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    task_descriptor_, &task::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    success_descriptor_, &success::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guide_descriptor_, &guide::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_info_config_descriptor_, &role_info_config::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    times_descriptor_, &times::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dict_comrade_role_descriptor_, &dict_comrade_role::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_info_memory_descriptor_, &role_info_memory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_info_public_descriptor_, &role_info_public::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_info_private_descriptor_, &role_info_private::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_info_attr_descriptor_, &role_info_attr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_info_reward_descriptor_, &role_info_reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    roleinfo_extend_attr_1_descriptor_, &roleinfo_extend_attr_1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    roleinfo_extend_attr_2_descriptor_, &roleinfo_extend_attr_2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    roleinfo_extend_attr_3_descriptor_, &roleinfo_extend_attr_3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    roleinfo_extend_attr_4_descriptor_, &roleinfo_extend_attr_4::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    roleinfo_extend_attr_5_descriptor_, &roleinfo_extend_attr_5::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_info_descriptor_, &role_info::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Database_2eproto() {
  delete sql_result_register::default_instance_;
  delete sql_result_register_reflection_;
  delete sql_ret_role_count::default_instance_;
  delete sql_ret_role_count_reflection_;
  delete sql_ret_cluster_node_info::default_instance_;
  delete sql_ret_cluster_node_info_reflection_;
  delete sql_check_account_key::default_instance_;
  delete sql_check_account_key_reflection_;
  delete sql_result_login::default_instance_;
  delete sql_result_login_reflection_;
  delete sql_result_role_online::default_instance_;
  delete sql_result_role_online_reflection_;
  delete sql_result_role_offline::default_instance_;
  delete sql_result_role_offline_reflection_;
  delete sql_result_role_count::default_instance_;
  delete sql_result_role_count_reflection_;
  delete sql_result_createrole::default_instance_;
  delete sql_result_createrole_reflection_;
  delete sql_result_save_role::default_instance_;
  delete sql_result_save_role_reflection_;
  delete item::default_instance_;
  delete item_reflection_;
  delete dict_item::default_instance_;
  delete dict_item_reflection_;
  delete suit_goods_info::default_instance_;
  delete suit_goods_info_reflection_;
  delete suit_info::default_instance_;
  delete suit_info_reflection_;
  delete list_role_suit_info::default_instance_;
  delete list_role_suit_info_reflection_;
  delete face_goods_info::default_instance_;
  delete face_goods_info_reflection_;
  delete face_info::default_instance_;
  delete face_info_reflection_;
  delete level_info::default_instance_;
  delete level_info_reflection_;
  delete reward_box::default_instance_;
  delete reward_box_reflection_;
  delete chapter_info::default_instance_;
  delete chapter_info_reflection_;
  delete list_role_face_info::default_instance_;
  delete list_role_face_info_reflection_;
  delete role_info_skill::default_instance_;
  delete role_info_skill_reflection_;
  delete game_friend::default_instance_;
  delete game_friend_reflection_;
  delete dict_game_friend::default_instance_;
  delete dict_game_friend_reflection_;
  delete summonpet::default_instance_;
  delete summonpet_reflection_;
  delete dict_summonpet::default_instance_;
  delete dict_summonpet_reflection_;
  delete task::default_instance_;
  delete task_reflection_;
  delete success::default_instance_;
  delete success_reflection_;
  delete guide::default_instance_;
  delete guide_reflection_;
  delete role_info_config::default_instance_;
  delete role_info_config_reflection_;
  delete times::default_instance_;
  delete times_reflection_;
  delete dict_comrade_role::default_instance_;
  delete dict_comrade_role_reflection_;
  delete role_info_memory::default_instance_;
  delete role_info_memory_reflection_;
  delete role_info_public::default_instance_;
  delete role_info_public_reflection_;
  delete role_info_private::default_instance_;
  delete role_info_private_reflection_;
  delete role_info_attr::default_instance_;
  delete role_info_attr_reflection_;
  delete role_info_reward::default_instance_;
  delete role_info_reward_reflection_;
  delete roleinfo_extend_attr_1::default_instance_;
  delete roleinfo_extend_attr_1_reflection_;
  delete roleinfo_extend_attr_2::default_instance_;
  delete roleinfo_extend_attr_2_reflection_;
  delete roleinfo_extend_attr_3::default_instance_;
  delete roleinfo_extend_attr_3_reflection_;
  delete roleinfo_extend_attr_4::default_instance_;
  delete roleinfo_extend_attr_4_reflection_;
  delete roleinfo_extend_attr_5::default_instance_;
  delete roleinfo_extend_attr_5_reflection_;
  delete role_info::default_instance_;
  delete role_info_reflection_;
}

void protobuf_AddDesc_Database_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_EnumDef_2eproto();
  ::protobuf_AddDesc_Common_2eproto();
  ::protobuf_AddDesc_Task_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016Database.proto\032\rEnumDef.proto\032\014Common."
    "proto\032\nTask.proto\"\'\n\023sql_result_register"
    "\022\020\n\010ret_code\030\001 \002(\005\"7\n\022sql_ret_role_count"
    "\022\r\n\005is_ok\030\001 \002(\010\022\022\n\nrole_index\030\002 \003(\022\"\202\001\n\031"
    "sql_ret_cluster_node_info\022\022\n\nnode_index\030"
    "\001 \002(\022\022\017\n\007intaddr\030\002 \002(\022\022\027\n\017unit_next_inde"
    "x\030\003 \002(\022\022\024\n\014cpu_pressure\030\004 \002(\022\022\021\n\tis_onli"
    "ne\030\005 \002(\010\"(\n\025sql_check_account_key\022\017\n\007acc"
    "ount\030\001 \002(\014\"\233\001\n\020sql_result_login\022\017\n\007accou"
    "nt\030\001 \002(\014\022\023\n\013create_time\030\002 \002(\022\022\022\n\nlogin_t"
    "ime\030\003 \002(\022\022\026\n\016can_login_flag\030\004 \002(\010\022\027\n\017can"
    "_profit_flag\030\005 \002(\010\022\034\n\024can_senior_operati"
    "on\030\006 \002(\010\"\'\n\026sql_result_role_online\022\r\n\005co"
    "unt\030\001 \002(\021\"(\n\027sql_result_role_offline\022\r\n\005"
    "count\030\001 \002(\021\"+\n\025sql_result_role_count\022\022\n\n"
    "role_index\030\001 \002(\022\")\n\025sql_result_createrol"
    "e\022\020\n\010ret_code\030\001 \002(\021\"(\n\024sql_result_save_r"
    "ole\022\020\n\010ret_code\030\002 \002(\005\"\265\001\n\004item\022\022\n\nitem_i"
    "ndex\030\001 \001(\022\022\021\n\titem_type\030\002 \001(\014\022\020\n\010item_po"
    "s\030\003 \001(\r\022\021\n\titem_name\030\004 \001(\014\022\022\n\nitem_count"
    "\030\005 \001(\021\022\025\n\ritem_res_file\030\006 \001(\014\022\024\n\014item_re"
    "s_key\030\007 \001(\r\022 \n\007ex_info\030\010 \001(\0132\017.universal"
    "_data\"9\n\tdict_item\022\022\n\nitem_index\030\001 \003(\022\022\030"
    "\n\titem_info\030\002 \003(\0132\005.item\"\?\n\017suit_goods_i"
    "nfo\022\034\n\024can_buy_suit_shop_id\030\001 \002(\021\022\016\n\006is_"
    "buy\030\002 \002(\010\"^\n\tsuit_info\022\017\n\007suit_id\030\001 \002(\021\022"
    "$\n\034suit_unixtime_time_out_stamp\030\002 \002(\022\022\032\n"
    "\022suit_duration_type\030\003 \002(\021\"\251\001\n\023list_role_"
    "suit_info\022\'\n\rlist_buy_suit\030\001 \003(\0132\020.suit_"
    "goods_info\022\"\n\032suit_shop_last_update_time"
    "\030\002 \002(\022\022 \n\014current_suit\030\003 \001(\0132\n.suit_info"
    "\022#\n\017list_have_suits\030\004 \003(\0132\n.suit_info\"X\n"
    "\017face_goods_info\022\034\n\024can_buy_face_shop_id"
    "\030\001 \002(\021\022\016\n\006is_buy\030\002 \002(\010\022\027\n\017face_shop_inde"
    "x\030\003 \002(\021\"^\n\tface_info\022\017\n\007face_id\030\001 \002(\021\022$\n"
    "\034face_unixtime_time_out_stamp\030\002 \002(\022\022\032\n\022f"
    "ace_duration_type\030\003 \002(\021\"(\n\nlevel_info\022\n\n"
    "\002id\030\001 \002(\021\022\016\n\006passed\030\002 \002(\021\"%\n\nreward_box\022"
    "\n\n\002id\030\001 \002(\021\022\013\n\003get\030\002 \002(\021\"l\n\014chapter_info"
    "\022\n\n\002id\030\001 \002(\021\022\035\n\010list_dup\030\002 \003(\0132\013.level_i"
    "nfo\022\035\n\010list_box\030\003 \003(\0132\013.reward_box\022\022\n\nge"
    "t_reward\030\004 \002(\021\"\266\002\n\023list_role_face_info\0220"
    "\n\026list_original_buy_face\030\001 \003(\0132\020.face_go"
    "ods_info\0220\n\026list_discount_buy_face\030\002 \003(\013"
    "2\020.face_goods_info\022\"\n\032face_shop_last_upd"
    "ate_time\030\003 \002(\022\022)\n!face_shop_last_manual_"
    "update_time\030\004 \002(\022\022%\n\035face_shop_manual_up"
    "date_count\030\005 \002(\021\022 \n\014current_face\030\006 \001(\0132\n"
    ".face_info\022#\n\017list_have_faces\030\007 \003(\0132\n.fa"
    "ce_info\"f\n\017role_info_skill\022\025\n\rdefaule_sk"
    "ill\030\001 \001(\014\022\027\n\017list_skill_name\030\002 \003(\014\022#\n\nli"
    "st_skill\030\003 \003(\0132\017.universal_data\"\273\001\n\013game"
    "_friend\022\022\n\nrole_index\030\001 \002(\022\022\r\n\005level\030\002 \002"
    "(\021\022\021\n\tnick_name\030\003 \002(\014\022\017\n\007suit_id\030\004 \002(\021\022\017"
    "\n\007face_id\030\005 \002(\021\022\021\n\tweapon_id\030\006 \002(\021\022\021\n\the"
    "lmet_id\030\007 \002(\021\022\r\n\005state\030\010 \002(\014\022\014\n\004time\030\t \002"
    "(\022\022\021\n\tis_online\030\n \002(\010\"O\n\020dict_game_frien"
    "d\022\027\n\017list_role_index\030\001 \003(\022\022\"\n\014list_frien"
    "ds\030\002 \003(\0132\014.game_friend\"\234\002\n\tsummonpet\022\022\n\n"
    "role_index\030\001 \002(\022\022\022\n\nreborn_sum\030\002 \002(\021\022&\n\013"
    "public_info\030\003 \002(\0132\021.role_info_public\022&\n\013"
    "memory_info\030\004 \001(\0132\021.role_info_memory\022\"\n\t"
    "attr_info\030\005 \002(\0132\017.role_info_attr\022$\n\nskil"
    "l_info\030\007 \002(\0132\020.role_info_skill\022&\n\013reward"
    "_info\030\010 \001(\0132\021.role_info_reward\022\021\n\tis_fol"
    "low\030\t \002(\010\022\022\n\nis_comrade\030\n \002(\010\"R\n\016dict_su"
    "mmonpet\022\027\n\017list_role_index\030\001 \003(\022\022\'\n\023list"
    "_summonpet_info\030\002 \003(\0132\n.summonpet\"\204\001\n\004ta"
    "sk\022 \n\030list_completed_task_list\030\001 \003(\021\022-\n\031"
    "list_can_accept_task_list\030\002 \003(\0132\n.task_i"
    "nfo\022+\n\027list_accepted_task_list\030\003 \003(\0132\n.t"
    "ask_info\"\t\n\007success\"\007\n\005guide\"1\n\020role_inf"
    "o_config\022\035\n\025follower_auto_comrade\030\002 \001(\010\""
    "+\n\005times\022\"\n\032face_shop_last_update_time\030\002"
    " \001(\022\"1\n\021dict_comrade_role\022\014\n\004keys\030\001 \003(\021\022"
    "\016\n\006values\030\002 \003(\022\"\213\001\n\020role_info_memory\022\030\n\020"
    "list_follow_role\030\001 \003(\022\022(\n\014comrade_info\030\002"
    " \001(\0132\022.dict_comrade_role\022\030\n\020is_on_enter_"
    "game\030\004 \001(\010\022\031\n\021battle_team_index\030\005 \001(\021\"\252\004"
    "\n\020role_info_public\022\022\n\nrole_index\030\001 \001(\022\022\022"
    "\n\nteam_index\030\002 \001(\022\022\020\n\010team_pos\030\003 \001(\021\022\022\n\n"
    "reborn_sum\030\004 \001(\021\0220\n\013object_type\030\005 \001(\0162\016."
    "E_OBJECT_TYPE:\013EOT_INVALID\022\016\n\006racial\030\n \001"
    "(\014\022\016\n\006gender\030\013 \001(\014\022#\n\nobject_res\030\014 \001(\0132\017"
    ".universal_data\022\034\n\024head_icon_file_small\030"
    "\024 \001(\014\022\033\n\023head_icon_key_small\030\025 \001(\r\022\035\n\025he"
    "ad_icon_file_medium\030\026 \001(\014\022\034\n\024head_icon_k"
    "ey_medium\030\027 \001(\r\022\032\n\022head_icon_file_big\030\030 "
    "\001(\014\022\031\n\021head_icon_key_big\030\031 \001(\r\022\037\n\027head_i"
    "con_file_portrait\030\032 \001(\014\022\036\n\026head_icon_key"
    "_portrait\030\033 \001(\r\022\021\n\tnick_name\030d \001(\014\022\r\n\005le"
    "vel\030e \001(\022\022\021\n\010scene_id\030\311\001 \001(\021\022\014\n\003dir\030\312\001 \001"
    "(\021\022\016\n\005pos_x\030\313\001 \001(\002\022\016\n\005pos_y\030\314\001 \001(\002\"\355\001\n\021r"
    "ole_info_private\022\024\n\014battle_index\030\001 \002(\022\022\021"
    "\n\tgame_coin\030\002 \002(\022\022\017\n\007stamina\030\003 \002(\021\022\024\n\014di"
    "amond_coin\030\004 \002(\022\022\023\n\013skill_point\030\005 \002(\021\022\021\n"
    "\tvip_level\030\006 \002(\021\022\037\n\027list_watcher_role_in"
    "dex\0302 \003(\022\022\r\n\005phone\030d \001(\014\022\r\n\005email\030e \001(\014\022"
    "\n\n\002qq\030f \001(\014\022\025\n\rplatform_type\030g \001(\014\"6\n\016ro"
    "le_info_attr\022\020\n\010attr_key\030\001 \003(\021\022\022\n\nattr_v"
    "alue\030\002 \003(\022\"W\n\020role_info_reward\022\020\n\010list_e"
    "xp\030\n \003(\022\022\022\n\nlist_money\030\013 \003(\022\022\035\n\tlist_ite"
    "m\030\014 \002(\0132\n.dict_item\"+\n\026roleinfo_extend_a"
    "ttr_1\022\021\n\ttest_data\030\001 \001(\022\"+\n\026roleinfo_ext"
    "end_attr_2\022\021\n\ttest_data\030\001 \001(\022\"+\n\026roleinf"
    "o_extend_attr_3\022\021\n\ttest_data\030\001 \001(\022\"+\n\026ro"
    "leinfo_extend_attr_4\022\021\n\ttest_data\030\001 \001(\022\""
    "+\n\026roleinfo_extend_attr_5\022\021\n\ttest_data\030\001"
    " \001(\022\"\277\006\n\trole_info\022\022\n\nrole_index\030\001 \002(\022\022\017"
    "\n\007account\030\002 \002(\014\022&\n\013public_info\030\003 \002(\0132\021.r"
    "ole_info_public\022(\n\014private_info\030\004 \001(\0132\022."
    "role_info_private\022\"\n\tattr_info\030\005 \001(\0132\017.r"
    "ole_info_attr\022&\n\013memory_info\030\006 \001(\0132\021.rol"
    "e_info_memory\022$\n\nskill_info\030\007 \001(\0132\020.role"
    "_info_skill\022&\n\013reward_info\030\010 \001(\0132\021.role_"
    "info_reward\022&\n\013config_info\030\t \001(\0132\021.role_"
    "info_config\022\026\n\016bag_page_count\030\n \001(\021\022\031\n\005i"
    "tems\030g \001(\0132\n.dict_item\022\032\n\006equips\030j \001(\0132\n"
    ".dict_item\022$\n\nsummonpets\030\312\001 \001(\0132\017.dict_s"
    "ummonpet\022#\n\007friends\030\313\001 \001(\0132\021.dict_game_f"
    "riend\022\031\n\ttask_info\030\314\001 \001(\0132\005.task\022\037\n\014list"
    "_success\030\315\001 \001(\0132\010.success\022\033\n\nlist_guide\030"
    "\316\001 \001(\0132\006.guide\022\026\n\005times\030\320\001 \001(\0132\006.times\022."
    "\n\014extend_attr1\030\255\002 \001(\0132\027.roleinfo_extend_"
    "attr_1\022.\n\014extend_attr2\030\256\002 \001(\0132\027.roleinfo"
    "_extend_attr_2\022.\n\014extend_attr3\030\257\002 \001(\0132\027."
    "roleinfo_extend_attr_3\022.\n\014extend_attr4\030\260"
    "\002 \001(\0132\027.roleinfo_extend_attr_4\022.\n\014extend"
    "_attr5\030\261\002 \001(\0132\027.roleinfo_extend_attr_5", 5158);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Database.proto", &protobuf_RegisterTypes);
  sql_result_register::default_instance_ = new sql_result_register();
  sql_ret_role_count::default_instance_ = new sql_ret_role_count();
  sql_ret_cluster_node_info::default_instance_ = new sql_ret_cluster_node_info();
  sql_check_account_key::default_instance_ = new sql_check_account_key();
  sql_result_login::default_instance_ = new sql_result_login();
  sql_result_role_online::default_instance_ = new sql_result_role_online();
  sql_result_role_offline::default_instance_ = new sql_result_role_offline();
  sql_result_role_count::default_instance_ = new sql_result_role_count();
  sql_result_createrole::default_instance_ = new sql_result_createrole();
  sql_result_save_role::default_instance_ = new sql_result_save_role();
  item::default_instance_ = new item();
  dict_item::default_instance_ = new dict_item();
  suit_goods_info::default_instance_ = new suit_goods_info();
  suit_info::default_instance_ = new suit_info();
  list_role_suit_info::default_instance_ = new list_role_suit_info();
  face_goods_info::default_instance_ = new face_goods_info();
  face_info::default_instance_ = new face_info();
  level_info::default_instance_ = new level_info();
  reward_box::default_instance_ = new reward_box();
  chapter_info::default_instance_ = new chapter_info();
  list_role_face_info::default_instance_ = new list_role_face_info();
  role_info_skill::default_instance_ = new role_info_skill();
  game_friend::default_instance_ = new game_friend();
  dict_game_friend::default_instance_ = new dict_game_friend();
  summonpet::default_instance_ = new summonpet();
  dict_summonpet::default_instance_ = new dict_summonpet();
  task::default_instance_ = new task();
  success::default_instance_ = new success();
  guide::default_instance_ = new guide();
  role_info_config::default_instance_ = new role_info_config();
  times::default_instance_ = new times();
  dict_comrade_role::default_instance_ = new dict_comrade_role();
  role_info_memory::default_instance_ = new role_info_memory();
  role_info_public::default_instance_ = new role_info_public();
  role_info_private::default_instance_ = new role_info_private();
  role_info_attr::default_instance_ = new role_info_attr();
  role_info_reward::default_instance_ = new role_info_reward();
  roleinfo_extend_attr_1::default_instance_ = new roleinfo_extend_attr_1();
  roleinfo_extend_attr_2::default_instance_ = new roleinfo_extend_attr_2();
  roleinfo_extend_attr_3::default_instance_ = new roleinfo_extend_attr_3();
  roleinfo_extend_attr_4::default_instance_ = new roleinfo_extend_attr_4();
  roleinfo_extend_attr_5::default_instance_ = new roleinfo_extend_attr_5();
  role_info::default_instance_ = new role_info();
  sql_result_register::default_instance_->InitAsDefaultInstance();
  sql_ret_role_count::default_instance_->InitAsDefaultInstance();
  sql_ret_cluster_node_info::default_instance_->InitAsDefaultInstance();
  sql_check_account_key::default_instance_->InitAsDefaultInstance();
  sql_result_login::default_instance_->InitAsDefaultInstance();
  sql_result_role_online::default_instance_->InitAsDefaultInstance();
  sql_result_role_offline::default_instance_->InitAsDefaultInstance();
  sql_result_role_count::default_instance_->InitAsDefaultInstance();
  sql_result_createrole::default_instance_->InitAsDefaultInstance();
  sql_result_save_role::default_instance_->InitAsDefaultInstance();
  item::default_instance_->InitAsDefaultInstance();
  dict_item::default_instance_->InitAsDefaultInstance();
  suit_goods_info::default_instance_->InitAsDefaultInstance();
  suit_info::default_instance_->InitAsDefaultInstance();
  list_role_suit_info::default_instance_->InitAsDefaultInstance();
  face_goods_info::default_instance_->InitAsDefaultInstance();
  face_info::default_instance_->InitAsDefaultInstance();
  level_info::default_instance_->InitAsDefaultInstance();
  reward_box::default_instance_->InitAsDefaultInstance();
  chapter_info::default_instance_->InitAsDefaultInstance();
  list_role_face_info::default_instance_->InitAsDefaultInstance();
  role_info_skill::default_instance_->InitAsDefaultInstance();
  game_friend::default_instance_->InitAsDefaultInstance();
  dict_game_friend::default_instance_->InitAsDefaultInstance();
  summonpet::default_instance_->InitAsDefaultInstance();
  dict_summonpet::default_instance_->InitAsDefaultInstance();
  task::default_instance_->InitAsDefaultInstance();
  success::default_instance_->InitAsDefaultInstance();
  guide::default_instance_->InitAsDefaultInstance();
  role_info_config::default_instance_->InitAsDefaultInstance();
  times::default_instance_->InitAsDefaultInstance();
  dict_comrade_role::default_instance_->InitAsDefaultInstance();
  role_info_memory::default_instance_->InitAsDefaultInstance();
  role_info_public::default_instance_->InitAsDefaultInstance();
  role_info_private::default_instance_->InitAsDefaultInstance();
  role_info_attr::default_instance_->InitAsDefaultInstance();
  role_info_reward::default_instance_->InitAsDefaultInstance();
  roleinfo_extend_attr_1::default_instance_->InitAsDefaultInstance();
  roleinfo_extend_attr_2::default_instance_->InitAsDefaultInstance();
  roleinfo_extend_attr_3::default_instance_->InitAsDefaultInstance();
  roleinfo_extend_attr_4::default_instance_->InitAsDefaultInstance();
  roleinfo_extend_attr_5::default_instance_->InitAsDefaultInstance();
  role_info::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Database_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Database_2eproto {
  StaticDescriptorInitializer_Database_2eproto() {
    protobuf_AddDesc_Database_2eproto();
  }
} static_descriptor_initializer_Database_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int sql_result_register::kRetCodeFieldNumber;
#endif  // !_MSC_VER

sql_result_register::sql_result_register()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sql_result_register::InitAsDefaultInstance() {
}

sql_result_register::sql_result_register(const sql_result_register& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sql_result_register::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sql_result_register::~sql_result_register() {
  SharedDtor();
}

void sql_result_register::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sql_result_register::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sql_result_register::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sql_result_register_descriptor_;
}

const sql_result_register& sql_result_register::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Database_2eproto();
  return *default_instance_;
}

sql_result_register* sql_result_register::default_instance_ = nullptr;

sql_result_register* sql_result_register::New() const {
  return new sql_result_register;
}

void sql_result_register::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sql_result_register::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sql_result_register::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sql_result_register::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sql_result_register::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sql_result_register::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sql_result_register* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sql_result_register*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sql_result_register::MergeFrom(const sql_result_register& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sql_result_register::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sql_result_register::CopyFrom(const sql_result_register& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sql_result_register::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void sql_result_register::Swap(sql_result_register* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sql_result_register::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sql_result_register_descriptor_;
  metadata.reflection = sql_result_register_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sql_ret_role_count::kIsOkFieldNumber;
const int sql_ret_role_count::kRoleIndexFieldNumber;
#endif  // !_MSC_VER

sql_ret_role_count::sql_ret_role_count()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sql_ret_role_count::InitAsDefaultInstance() {
}

sql_ret_role_count::sql_ret_role_count(const sql_ret_role_count& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sql_ret_role_count::SharedCtor() {
  _cached_size_ = 0;
  is_ok_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sql_ret_role_count::~sql_ret_role_count() {
  SharedDtor();
}

void sql_ret_role_count::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sql_ret_role_count::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sql_ret_role_count::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sql_ret_role_count_descriptor_;
}

const sql_ret_role_count& sql_ret_role_count::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Database_2eproto();
  return *default_instance_;
}

sql_ret_role_count* sql_ret_role_count::default_instance_ = nullptr;

sql_ret_role_count* sql_ret_role_count::New() const {
  return new sql_ret_role_count;
}

void sql_ret_role_count::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_ok_ = false;
  }
  role_index_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sql_ret_role_count::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_ok = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ok_)));
          set_has_is_ok();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_index;
        break;
      }

      // repeated sint64 role_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 16, input, this->mutable_role_index())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_role_index())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_index;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sql_ret_role_count::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_ok = 1;
  if (has_is_ok()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_ok(), output);
  }

  // repeated sint64 role_index = 2;
  for (int i = 0; i < this->role_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(
      2, this->role_index(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sql_ret_role_count::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_ok = 1;
  if (has_is_ok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_ok(), target);
  }

  // repeated sint64 role_index = 2;
  for (int i = 0; i < this->role_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64ToArray(2, this->role_index(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sql_ret_role_count::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_ok = 1;
    if (has_is_ok()) {
      total_size += 1 + 1;
    }

  }
  // repeated sint64 role_index = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->role_index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->role_index(i));
    }
    total_size += 1 * this->role_index_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sql_ret_role_count::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sql_ret_role_count* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sql_ret_role_count*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sql_ret_role_count::MergeFrom(const sql_ret_role_count& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_index_.MergeFrom(from.role_index_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_ok()) {
      set_is_ok(from.is_ok());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sql_ret_role_count::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sql_ret_role_count::CopyFrom(const sql_ret_role_count& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sql_ret_role_count::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void sql_ret_role_count::Swap(sql_ret_role_count* other) {
  if (other != this) {
    std::swap(is_ok_, other->is_ok_);
    role_index_.Swap(&other->role_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sql_ret_role_count::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sql_ret_role_count_descriptor_;
  metadata.reflection = sql_ret_role_count_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sql_ret_cluster_node_info::kNodeIndexFieldNumber;
const int sql_ret_cluster_node_info::kIntaddrFieldNumber;
const int sql_ret_cluster_node_info::kUnitNextIndexFieldNumber;
const int sql_ret_cluster_node_info::kCpuPressureFieldNumber;
const int sql_ret_cluster_node_info::kIsOnlineFieldNumber;
#endif  // !_MSC_VER

sql_ret_cluster_node_info::sql_ret_cluster_node_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sql_ret_cluster_node_info::InitAsDefaultInstance() {
}

sql_ret_cluster_node_info::sql_ret_cluster_node_info(const sql_ret_cluster_node_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sql_ret_cluster_node_info::SharedCtor() {
  _cached_size_ = 0;
  node_index_ = GOOGLE_LONGLONG(0);
  intaddr_ = GOOGLE_LONGLONG(0);
  unit_next_index_ = GOOGLE_LONGLONG(0);
  cpu_pressure_ = GOOGLE_LONGLONG(0);
  is_online_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sql_ret_cluster_node_info::~sql_ret_cluster_node_info() {
  SharedDtor();
}

void sql_ret_cluster_node_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sql_ret_cluster_node_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sql_ret_cluster_node_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sql_ret_cluster_node_info_descriptor_;
}

const sql_ret_cluster_node_info& sql_ret_cluster_node_info::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Database_2eproto();
  return *default_instance_;
}

sql_ret_cluster_node_info* sql_ret_cluster_node_info::default_instance_ = nullptr;

sql_ret_cluster_node_info* sql_ret_cluster_node_info::New() const {
  return new sql_ret_cluster_node_info;
}

void sql_ret_cluster_node_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    node_index_ = GOOGLE_LONGLONG(0);
    intaddr_ = GOOGLE_LONGLONG(0);
    unit_next_index_ = GOOGLE_LONGLONG(0);
    cpu_pressure_ = GOOGLE_LONGLONG(0);
    is_online_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sql_ret_cluster_node_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 node_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &node_index_)));
          set_has_node_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_intaddr;
        break;
      }

      // required sint64 intaddr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intaddr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &intaddr_)));
          set_has_intaddr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_unit_next_index;
        break;
      }

      // required sint64 unit_next_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unit_next_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &unit_next_index_)));
          set_has_unit_next_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cpu_pressure;
        break;
      }

      // required sint64 cpu_pressure = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cpu_pressure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &cpu_pressure_)));
          set_has_cpu_pressure();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_online;
        break;
      }

      // required bool is_online = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_online_)));
          set_has_is_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sql_ret_cluster_node_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 node_index = 1;
  if (has_node_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->node_index(), output);
  }

  // required sint64 intaddr = 2;
  if (has_intaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->intaddr(), output);
  }

  // required sint64 unit_next_index = 3;
  if (has_unit_next_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->unit_next_index(), output);
  }

  // required sint64 cpu_pressure = 4;
  if (has_cpu_pressure()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->cpu_pressure(), output);
  }

  // required bool is_online = 5;
  if (has_is_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_online(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sql_ret_cluster_node_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 node_index = 1;
  if (has_node_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->node_index(), target);
  }

  // required sint64 intaddr = 2;
  if (has_intaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->intaddr(), target);
  }

  // required sint64 unit_next_index = 3;
  if (has_unit_next_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->unit_next_index(), target);
  }

  // required sint64 cpu_pressure = 4;
  if (has_cpu_pressure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(4, this->cpu_pressure(), target);
  }

  // required bool is_online = 5;
  if (has_is_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_online(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sql_ret_cluster_node_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 node_index = 1;
    if (has_node_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->node_index());
    }

    // required sint64 intaddr = 2;
    if (has_intaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->intaddr());
    }

    // required sint64 unit_next_index = 3;
    if (has_unit_next_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->unit_next_index());
    }

    // required sint64 cpu_pressure = 4;
    if (has_cpu_pressure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->cpu_pressure());
    }

    // required bool is_online = 5;
    if (has_is_online()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sql_ret_cluster_node_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sql_ret_cluster_node_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sql_ret_cluster_node_info*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sql_ret_cluster_node_info::MergeFrom(const sql_ret_cluster_node_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_index()) {
      set_node_index(from.node_index());
    }
    if (from.has_intaddr()) {
      set_intaddr(from.intaddr());
    }
    if (from.has_unit_next_index()) {
      set_unit_next_index(from.unit_next_index());
    }
    if (from.has_cpu_pressure()) {
      set_cpu_pressure(from.cpu_pressure());
    }
    if (from.has_is_online()) {
      set_is_online(from.is_online());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sql_ret_cluster_node_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sql_ret_cluster_node_info::CopyFrom(const sql_ret_cluster_node_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sql_ret_cluster_node_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void sql_ret_cluster_node_info::Swap(sql_ret_cluster_node_info* other) {
  if (other != this) {
    std::swap(node_index_, other->node_index_);
    std::swap(intaddr_, other->intaddr_);
    std::swap(unit_next_index_, other->unit_next_index_);
    std::swap(cpu_pressure_, other->cpu_pressure_);
    std::swap(is_online_, other->is_online_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sql_ret_cluster_node_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sql_ret_cluster_node_info_descriptor_;
  metadata.reflection = sql_ret_cluster_node_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sql_check_account_key::kAccountFieldNumber;
#endif  // !_MSC_VER

sql_check_account_key::sql_check_account_key()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sql_check_account_key::InitAsDefaultInstance() {
}

sql_check_account_key::sql_check_account_key(const sql_check_account_key& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sql_check_account_key::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sql_check_account_key::~sql_check_account_key() {
  SharedDtor();
}

void sql_check_account_key::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void sql_check_account_key::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sql_check_account_key::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sql_check_account_key_descriptor_;
}

const sql_check_account_key& sql_check_account_key::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Database_2eproto();
  return *default_instance_;
}

sql_check_account_key* sql_check_account_key::default_instance_ = nullptr;

sql_check_account_key* sql_check_account_key::New() const {
  return new sql_check_account_key;
}

void sql_check_account_key::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sql_check_account_key::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sql_check_account_key::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->account(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sql_check_account_key::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes account = 1;
  if (has_account()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->account(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sql_check_account_key::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sql_check_account_key::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sql_check_account_key* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sql_check_account_key*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sql_check_account_key::MergeFrom(const sql_check_account_key& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sql_check_account_key::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sql_check_account_key::CopyFrom(const sql_check_account_key& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sql_check_account_key::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void sql_check_account_key::Swap(sql_check_account_key* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sql_check_account_key::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sql_check_account_key_descriptor_;
  metadata.reflection = sql_check_account_key_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sql_result_login::kAccountFieldNumber;
const int sql_result_login::kCreateTimeFieldNumber;
const int sql_result_login::kLoginTimeFieldNumber;
const int sql_result_login::kCanLoginFlagFieldNumber;
const int sql_result_login::kCanProfitFlagFieldNumber;
const int sql_result_login::kCanSeniorOperationFieldNumber;
#endif  // !_MSC_VER

sql_result_login::sql_result_login()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sql_result_login::InitAsDefaultInstance() {
}

sql_result_login::sql_result_login(const sql_result_login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sql_result_login::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  create_time_ = GOOGLE_LONGLONG(0);
  login_time_ = GOOGLE_LONGLONG(0);
  can_login_flag_ = false;
  can_profit_flag_ = false;
  can_senior_operation_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sql_result_login::~sql_result_login() {
  SharedDtor();
}

void sql_result_login::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void sql_result_login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sql_result_login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sql_result_login_descriptor_;
}

const sql_result_login& sql_result_login::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Database_2eproto();
  return *default_instance_;
}

sql_result_login* sql_result_login::default_instance_ = nullptr;

sql_result_login* sql_result_login::New() const {
  return new sql_result_login;
}

void sql_result_login::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    create_time_ = GOOGLE_LONGLONG(0);
    login_time_ = GOOGLE_LONGLONG(0);
    can_login_flag_ = false;
    can_profit_flag_ = false;
    can_senior_operation_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sql_result_login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_create_time;
        break;
      }

      // required sint64 create_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_login_time;
        break;
      }

      // required sint64 login_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &login_time_)));
          set_has_login_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_can_login_flag;
        break;
      }

      // required bool can_login_flag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_login_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_login_flag_)));
          set_has_can_login_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_can_profit_flag;
        break;
      }

      // required bool can_profit_flag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_profit_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_profit_flag_)));
          set_has_can_profit_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_can_senior_operation;
        break;
      }

      // required bool can_senior_operation = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_senior_operation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_senior_operation_)));
          set_has_can_senior_operation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sql_result_login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->account(), output);
  }

  // required sint64 create_time = 2;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->create_time(), output);
  }

  // required sint64 login_time = 3;
  if (has_login_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->login_time(), output);
  }

  // required bool can_login_flag = 4;
  if (has_can_login_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->can_login_flag(), output);
  }

  // required bool can_profit_flag = 5;
  if (has_can_profit_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->can_profit_flag(), output);
  }

  // required bool can_senior_operation = 6;
  if (has_can_senior_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->can_senior_operation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sql_result_login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes account = 1;
  if (has_account()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->account(), target);
  }

  // required sint64 create_time = 2;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->create_time(), target);
  }

  // required sint64 login_time = 3;
  if (has_login_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->login_time(), target);
  }

  // required bool can_login_flag = 4;
  if (has_can_login_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->can_login_flag(), target);
  }

  // required bool can_profit_flag = 5;
  if (has_can_profit_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->can_profit_flag(), target);
  }

  // required bool can_senior_operation = 6;
  if (has_can_senior_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->can_senior_operation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sql_result_login::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

    // required sint64 create_time = 2;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->create_time());
    }

    // required sint64 login_time = 3;
    if (has_login_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->login_time());
    }

    // required bool can_login_flag = 4;
    if (has_can_login_flag()) {
      total_size += 1 + 1;
    }

    // required bool can_profit_flag = 5;
    if (has_can_profit_flag()) {
      total_size += 1 + 1;
    }

    // required bool can_senior_operation = 6;
    if (has_can_senior_operation()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sql_result_login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sql_result_login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sql_result_login*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sql_result_login::MergeFrom(const sql_result_login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_login_time()) {
      set_login_time(from.login_time());
    }
    if (from.has_can_login_flag()) {
      set_can_login_flag(from.can_login_flag());
    }
    if (from.has_can_profit_flag()) {
      set_can_profit_flag(from.can_profit_flag());
    }
    if (from.has_can_senior_operation()) {
      set_can_senior_operation(from.can_senior_operation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sql_result_login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sql_result_login::CopyFrom(const sql_result_login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sql_result_login::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void sql_result_login::Swap(sql_result_login* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(create_time_, other->create_time_);
    std::swap(login_time_, other->login_time_);
    std::swap(can_login_flag_, other->can_login_flag_);
    std::swap(can_profit_flag_, other->can_profit_flag_);
    std::swap(can_senior_operation_, other->can_senior_operation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sql_result_login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sql_result_login_descriptor_;
  metadata.reflection = sql_result_login_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sql_result_role_online::kCountFieldNumber;
#endif  // !_MSC_VER

sql_result_role_online::sql_result_role_online()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sql_result_role_online::InitAsDefaultInstance() {
}

sql_result_role_online::sql_result_role_online(const sql_result_role_online& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sql_result_role_online::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sql_result_role_online::~sql_result_role_online() {
  SharedDtor();
}

void sql_result_role_online::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sql_result_role_online::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sql_result_role_online::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sql_result_role_online_descriptor_;
}

const sql_result_role_online& sql_result_role_online::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Database_2eproto();
  return *default_instance_;
}

sql_result_role_online* sql_result_role_online::default_instance_ = nullptr;

sql_result_role_online* sql_result_role_online::New() const {
  return new sql_result_role_online;
}

void sql_result_role_online::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sql_result_role_online::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sql_result_role_online::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sql_result_role_online::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sql_result_role_online::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sql_result_role_online::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sql_result_role_online* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sql_result_role_online*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sql_result_role_online::MergeFrom(const sql_result_role_online& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sql_result_role_online::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sql_result_role_online::CopyFrom(const sql_result_role_online& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sql_result_role_online::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void sql_result_role_online::Swap(sql_result_role_online* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sql_result_role_online::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sql_result_role_online_descriptor_;
  metadata.reflection = sql_result_role_online_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sql_result_role_offline::kCountFieldNumber;
#endif  // !_MSC_VER

sql_result_role_offline::sql_result_role_offline()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sql_result_role_offline::InitAsDefaultInstance() {
}

sql_result_role_offline::sql_result_role_offline(const sql_result_role_offline& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sql_result_role_offline::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sql_result_role_offline::~sql_result_role_offline() {
  SharedDtor();
}

void sql_result_role_offline::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sql_result_role_offline::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sql_result_role_offline::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sql_result_role_offline_descriptor_;
}

const sql_result_role_offline& sql_result_role_offline::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Database_2eproto();
  return *default_instance_;
}

sql_result_role_offline* sql_result_role_offline::default_instance_ = nullptr;

sql_result_role_offline* sql_result_role_offline::New() const {
  return new sql_result_role_offline;
}

void sql_result_role_offline::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sql_result_role_offline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sql_result_role_offline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sql_result_role_offline::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sql_result_role_offline::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sql_result_role_offline::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sql_result_role_offline* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sql_result_role_offline*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sql_result_role_offline::MergeFrom(const sql_result_role_offline& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sql_result_role_offline::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sql_result_role_offline::CopyFrom(const sql_result_role_offline& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sql_result_role_offline::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void sql_result_role_offline::Swap(sql_result_role_offline* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sql_result_role_offline::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sql_result_role_offline_descriptor_;
  metadata.reflection = sql_result_role_offline_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sql_result_role_count::kRoleIndexFieldNumber;
#endif  // !_MSC_VER

sql_result_role_count::sql_result_role_count()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sql_result_role_count::InitAsDefaultInstance() {
}

sql_result_role_count::sql_result_role_count(const sql_result_role_count& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sql_result_role_count::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sql_result_role_count::~sql_result_role_count() {
  SharedDtor();
}

void sql_result_role_count::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sql_result_role_count::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sql_result_role_count::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sql_result_role_count_descriptor_;
}

const sql_result_role_count& sql_result_role_count::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Database_2eproto();
  return *default_instance_;
}

sql_result_role_count* sql_result_role_count::default_instance_ = nullptr;

sql_result_role_count* sql_result_role_count::New() const {
  return new sql_result_role_count;
}

void sql_result_role_count::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sql_result_role_count::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sql_result_role_count::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->role_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sql_result_role_count::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->role_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sql_result_role_count::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->role_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sql_result_role_count::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sql_result_role_count* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sql_result_role_count*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sql_result_role_count::MergeFrom(const sql_result_role_count& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sql_result_role_count::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sql_result_role_count::CopyFrom(const sql_result_role_count& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sql_result_role_count::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void sql_result_role_count::Swap(sql_result_role_count* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sql_result_role_count::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sql_result_role_count_descriptor_;
  metadata.reflection = sql_result_role_count_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sql_result_createrole::kRetCodeFieldNumber;
#endif  // !_MSC_VER

sql_result_createrole::sql_result_createrole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sql_result_createrole::InitAsDefaultInstance() {
}

sql_result_createrole::sql_result_createrole(const sql_result_createrole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sql_result_createrole::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sql_result_createrole::~sql_result_createrole() {
  SharedDtor();
}

void sql_result_createrole::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sql_result_createrole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sql_result_createrole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sql_result_createrole_descriptor_;
}

const sql_result_createrole& sql_result_createrole::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Database_2eproto();
  return *default_instance_;
}

sql_result_createrole* sql_result_createrole::default_instance_ = nullptr;

sql_result_createrole* sql_result_createrole::New() const {
  return new sql_result_createrole;
}

void sql_result_createrole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sql_result_createrole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sql_result_createrole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->ret_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sql_result_createrole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->ret_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sql_result_createrole::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->ret_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sql_result_createrole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sql_result_createrole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sql_result_createrole*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sql_result_createrole::MergeFrom(const sql_result_createrole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sql_result_createrole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sql_result_createrole::CopyFrom(const sql_result_createrole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sql_result_createrole::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void sql_result_createrole::Swap(sql_result_createrole* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sql_result_createrole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sql_result_createrole_descriptor_;
  metadata.reflection = sql_result_createrole_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sql_result_save_role::kRetCodeFieldNumber;
#endif  // !_MSC_VER

sql_result_save_role::sql_result_save_role()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sql_result_save_role::InitAsDefaultInstance() {
}

sql_result_save_role::sql_result_save_role(const sql_result_save_role& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sql_result_save_role::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sql_result_save_role::~sql_result_save_role() {
  SharedDtor();
}

void sql_result_save_role::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sql_result_save_role::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sql_result_save_role::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sql_result_save_role_descriptor_;
}

const sql_result_save_role& sql_result_save_role::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Database_2eproto();
  return *default_instance_;
}

sql_result_save_role* sql_result_save_role::default_instance_ = nullptr;

sql_result_save_role* sql_result_save_role::New() const {
  return new sql_result_save_role;
}

void sql_result_save_role::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sql_result_save_role::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sql_result_save_role::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret_code = 2;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sql_result_save_role::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret_code = 2;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sql_result_save_role::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret_code = 2;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sql_result_save_role::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sql_result_save_role* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sql_result_save_role*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sql_result_save_role::MergeFrom(const sql_result_save_role& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sql_result_save_role::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sql_result_save_role::CopyFrom(const sql_result_save_role& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sql_result_save_role::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void sql_result_save_role::Swap(sql_result_save_role* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sql_result_save_role::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sql_result_save_role_descriptor_;
  metadata.reflection = sql_result_save_role_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int item::kItemIndexFieldNumber;
const int item::kItemTypeFieldNumber;
const int item::kItemPosFieldNumber;
const int item::kItemNameFieldNumber;
const int item::kItemCountFieldNumber;
const int item::kItemResFileFieldNumber;
const int item::kItemResKeyFieldNumber;
const int item::kExInfoFieldNumber;
#endif  // !_MSC_VER

item::item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void item::InitAsDefaultInstance() {
  ex_info_ = const_cast< ::universal_data*>(&::universal_data::default_instance());
}

item::item(const item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void item::SharedCtor() {
  _cached_size_ = 0;
  item_index_ = GOOGLE_LONGLONG(0);
  item_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  item_pos_ = 0u;
  item_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  item_count_ = 0;
  item_res_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  item_res_key_ = 0u;
  ex_info_ = nullptr;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

item::~item() {
  SharedDtor();
}

void item::SharedDtor() {
  if (item_type_ != &::google::protobuf::internal::kEmptyString) {
    delete item_type_;
  }
  if (item_name_ != &::google::protobuf::internal::kEmptyString) {
    delete item_name_;
  }
  if (item_res_file_ != &::google::protobuf::internal::kEmptyString) {
    delete item_res_file_;
  }
  if (this != default_instance_) {
    delete ex_info_;
  }
}

void item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return item_descriptor_;
}

const item& item::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Database_2eproto();
  return *default_instance_;
}

item* item::default_instance_ = nullptr;

item* item::New() const {
  return new item;
}

void item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_index_ = GOOGLE_LONGLONG(0);
    if (has_item_type()) {
      if (item_type_ != &::google::protobuf::internal::kEmptyString) {
        item_type_->clear();
      }
    }
    item_pos_ = 0u;
    if (has_item_name()) {
      if (item_name_ != &::google::protobuf::internal::kEmptyString) {
        item_name_->clear();
      }
    }
    item_count_ = 0;
    if (has_item_res_file()) {
      if (item_res_file_ != &::google::protobuf::internal::kEmptyString) {
        item_res_file_->clear();
      }
    }
    item_res_key_ = 0u;
    if (has_ex_info()) {
      if (ex_info_ != nullptr) ex_info_->::universal_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 item_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &item_index_)));
          set_has_item_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_type;
        break;
      }

      // optional bytes item_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_item_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_pos;
        break;
      }

      // optional uint32 item_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_pos_)));
          set_has_item_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_item_name;
        break;
      }

      // optional bytes item_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_item_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_item_count;
        break;
      }

      // optional sint32 item_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_item_res_file;
        break;
      }

      // optional bytes item_res_file = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_res_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_item_res_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_item_res_key;
        break;
      }

      // optional uint32 item_res_key = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_res_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_res_key_)));
          set_has_item_res_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_ex_info;
        break;
      }

      // optional .universal_data ex_info = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ex_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ex_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint64 item_index = 1;
  if (has_item_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->item_index(), output);
  }

  // optional bytes item_type = 2;
  if (has_item_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->item_type(), output);
  }

  // optional uint32 item_pos = 3;
  if (has_item_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_pos(), output);
  }

  // optional bytes item_name = 4;
  if (has_item_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->item_name(), output);
  }

  // optional sint32 item_count = 5;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->item_count(), output);
  }

  // optional bytes item_res_file = 6;
  if (has_item_res_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->item_res_file(), output);
  }

  // optional uint32 item_res_key = 7;
  if (has_item_res_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->item_res_key(), output);
  }

  // optional .universal_data ex_info = 8;
  if (has_ex_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->ex_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint64 item_index = 1;
  if (has_item_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->item_index(), target);
  }

  // optional bytes item_type = 2;
  if (has_item_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->item_type(), target);
  }

  // optional uint32 item_pos = 3;
  if (has_item_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_pos(), target);
  }

  // optional bytes item_name = 4;
  if (has_item_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->item_name(), target);
  }

  // optional sint32 item_count = 5;
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->item_count(), target);
  }

  // optional bytes item_res_file = 6;
  if (has_item_res_file()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->item_res_file(), target);
  }

  // optional uint32 item_res_key = 7;
  if (has_item_res_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->item_res_key(), target);
  }

  // optional .universal_data ex_info = 8;
  if (has_ex_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->ex_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint64 item_index = 1;
    if (has_item_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->item_index());
    }

    // optional bytes item_type = 2;
    if (has_item_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->item_type());
    }

    // optional uint32 item_pos = 3;
    if (has_item_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_pos());
    }

    // optional bytes item_name = 4;
    if (has_item_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->item_name());
    }

    // optional sint32 item_count = 5;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->item_count());
    }

    // optional bytes item_res_file = 6;
    if (has_item_res_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->item_res_file());
    }

    // optional uint32 item_res_key = 7;
    if (has_item_res_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_res_key());
    }

    // optional .universal_data ex_info = 8;
    if (has_ex_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ex_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const item*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void item::MergeFrom(const item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_index()) {
      set_item_index(from.item_index());
    }
    if (from.has_item_type()) {
      set_item_type(from.item_type());
    }
    if (from.has_item_pos()) {
      set_item_pos(from.item_pos());
    }
    if (from.has_item_name()) {
      set_item_name(from.item_name());
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
    if (from.has_item_res_file()) {
      set_item_res_file(from.item_res_file());
    }
    if (from.has_item_res_key()) {
      set_item_res_key(from.item_res_key());
    }
    if (from.has_ex_info()) {
      mutable_ex_info()->::universal_data::MergeFrom(from.ex_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void item::CopyFrom(const item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool item::IsInitialized() const {

  return true;
}

void item::Swap(item* other) {
  if (other != this) {
    std::swap(item_index_, other->item_index_);
    std::swap(item_type_, other->item_type_);
    std::swap(item_pos_, other->item_pos_);
    std::swap(item_name_, other->item_name_);
    std::swap(item_count_, other->item_count_);
    std::swap(item_res_file_, other->item_res_file_);
    std::swap(item_res_key_, other->item_res_key_);
    std::swap(ex_info_, other->ex_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = item_descriptor_;
  metadata.reflection = item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dict_item::kItemIndexFieldNumber;
const int dict_item::kItemInfoFieldNumber;
#endif  // !_MSC_VER

dict_item::dict_item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dict_item::InitAsDefaultInstance() {
}

dict_item::dict_item(const dict_item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dict_item::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dict_item::~dict_item() {
  SharedDtor();
}

void dict_item::SharedDtor() {
  if (this != default_instance_) {
  }
}

void dict_item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dict_item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dict_item_descriptor_;
}

const dict_item& dict_item::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Database_2eproto();
  return *default_instance_;
}

dict_item* dict_item::default_instance_ = nullptr;

dict_item* dict_item::New() const {
  return new dict_item;
}

void dict_item::Clear() {
  item_index_.Clear();
  item_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dict_item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated sint64 item_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 8, input, this->mutable_item_index())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_item_index())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_item_index;
        if (input->ExpectTag(18)) goto parse_item_info;
        break;
      }

      // repeated .item item_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dict_item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated sint64 item_index = 1;
  for (int i = 0; i < this->item_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(
      1, this->item_index(i), output);
  }

  // repeated .item item_info = 2;
  for (int i = 0; i < this->item_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dict_item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated sint64 item_index = 1;
  for (int i = 0; i < this->item_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64ToArray(1, this->item_index(i), target);
  }

  // repeated .item item_info = 2;
  for (int i = 0; i < this->item_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dict_item::ByteSize() const {
  int total_size = 0;

  // repeated sint64 item_index = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->item_index(i));
    }
    total_size += 1 * this->item_index_size() + data_size;
  }

  // repeated .item item_info = 2;
  total_size += 1 * this->item_info_size();
  for (int i = 0; i < this->item_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dict_item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dict_item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dict_item*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dict_item::MergeFrom(const dict_item& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_index_.MergeFrom(from.item_index_);
  item_info_.MergeFrom(from.item_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dict_item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dict_item::CopyFrom(const dict_item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dict_item::IsInitialized() const {

  return true;
}

void dict_item::Swap(dict_item* other) {
  if (other != this) {
    item_index_.Swap(&other->item_index_);
    item_info_.Swap(&other->item_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dict_item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dict_item_descriptor_;
  metadata.reflection = dict_item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int suit_goods_info::kCanBuySuitShopIdFieldNumber;
const int suit_goods_info::kIsBuyFieldNumber;
#endif  // !_MSC_VER

suit_goods_info::suit_goods_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void suit_goods_info::InitAsDefaultInstance() {
}

suit_goods_info::suit_goods_info(const suit_goods_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void suit_goods_info::SharedCtor() {
  _cached_size_ = 0;
  can_buy_suit_shop_id_ = 0;
  is_buy_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

suit_goods_info::~suit_goods_info() {
  SharedDtor();
}

void suit_goods_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void suit_goods_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* suit_goods_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return suit_goods_info_descriptor_;
}

const suit_goods_info& suit_goods_info::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Database_2eproto();
  return *default_instance_;
}

suit_goods_info* suit_goods_info::default_instance_ = nullptr;

suit_goods_info* suit_goods_info::New() const {
  return new suit_goods_info;
}

void suit_goods_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    can_buy_suit_shop_id_ = 0;
    is_buy_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool suit_goods_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 can_buy_suit_shop_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &can_buy_suit_shop_id_)));
          set_has_can_buy_suit_shop_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_buy;
        break;
      }

      // required bool is_buy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_buy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_buy_)));
          set_has_is_buy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void suit_goods_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 can_buy_suit_shop_id = 1;
  if (has_can_buy_suit_shop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->can_buy_suit_shop_id(), output);
  }

  // required bool is_buy = 2;
  if (has_is_buy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_buy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* suit_goods_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 can_buy_suit_shop_id = 1;
  if (has_can_buy_suit_shop_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->can_buy_suit_shop_id(), target);
  }

  // required bool is_buy = 2;
  if (has_is_buy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_buy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int suit_goods_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 can_buy_suit_shop_id = 1;
    if (has_can_buy_suit_shop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->can_buy_suit_shop_id());
    }

    // required bool is_buy = 2;
    if (has_is_buy()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void suit_goods_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const suit_goods_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const suit_goods_info*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void suit_goods_info::MergeFrom(const suit_goods_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_can_buy_suit_shop_id()) {
      set_can_buy_suit_shop_id(from.can_buy_suit_shop_id());
    }
    if (from.has_is_buy()) {
      set_is_buy(from.is_buy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void suit_goods_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void suit_goods_info::CopyFrom(const suit_goods_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool suit_goods_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void suit_goods_info::Swap(suit_goods_info* other) {
  if (other != this) {
    std::swap(can_buy_suit_shop_id_, other->can_buy_suit_shop_id_);
    std::swap(is_buy_, other->is_buy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata suit_goods_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = suit_goods_info_descriptor_;
  metadata.reflection = suit_goods_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int suit_info::kSuitIdFieldNumber;
const int suit_info::kSuitUnixtimeTimeOutStampFieldNumber;
const int suit_info::kSuitDurationTypeFieldNumber;
#endif  // !_MSC_VER

suit_info::suit_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void suit_info::InitAsDefaultInstance() {
}

suit_info::suit_info(const suit_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void suit_info::SharedCtor() {
  _cached_size_ = 0;
  suit_id_ = 0;
  suit_unixtime_time_out_stamp_ = GOOGLE_LONGLONG(0);
  suit_duration_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

suit_info::~suit_info() {
  SharedDtor();
}

void suit_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void suit_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* suit_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return suit_info_descriptor_;
}

const suit_info& suit_info::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Database_2eproto();
  return *default_instance_;
}

suit_info* suit_info::default_instance_ = nullptr;

suit_info* suit_info::New() const {
  return new suit_info;
}

void suit_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    suit_id_ = 0;
    suit_unixtime_time_out_stamp_ = GOOGLE_LONGLONG(0);
    suit_duration_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool suit_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 suit_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &suit_id_)));
          set_has_suit_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_suit_unixtime_time_out_stamp;
        break;
      }

      // required sint64 suit_unixtime_time_out_stamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suit_unixtime_time_out_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &suit_unixtime_time_out_stamp_)));
          set_has_suit_unixtime_time_out_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_suit_duration_type;
        break;
      }

      // required sint32 suit_duration_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suit_duration_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &suit_duration_type_)));
          set_has_suit_duration_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void suit_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 suit_id = 1;
  if (has_suit_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->suit_id(), output);
  }

  // required sint64 suit_unixtime_time_out_stamp = 2;
  if (has_suit_unixtime_time_out_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->suit_unixtime_time_out_stamp(), output);
  }

  // required sint32 suit_duration_type = 3;
  if (has_suit_duration_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->suit_duration_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* suit_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 suit_id = 1;
  if (has_suit_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->suit_id(), target);
  }

  // required sint64 suit_unixtime_time_out_stamp = 2;
  if (has_suit_unixtime_time_out_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->suit_unixtime_time_out_stamp(), target);
  }

  // required sint32 suit_duration_type = 3;
  if (has_suit_duration_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->suit_duration_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int suit_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 suit_id = 1;
    if (has_suit_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->suit_id());
    }

    // required sint64 suit_unixtime_time_out_stamp = 2;
    if (has_suit_unixtime_time_out_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->suit_unixtime_time_out_stamp());
    }

    // required sint32 suit_duration_type = 3;
    if (has_suit_duration_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->suit_duration_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void suit_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const suit_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const suit_info*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void suit_info::MergeFrom(const suit_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_suit_id()) {
      set_suit_id(from.suit_id());
    }
    if (from.has_suit_unixtime_time_out_stamp()) {
      set_suit_unixtime_time_out_stamp(from.suit_unixtime_time_out_stamp());
    }
    if (from.has_suit_duration_type()) {
      set_suit_duration_type(from.suit_duration_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void suit_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void suit_info::CopyFrom(const suit_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool suit_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void suit_info::Swap(suit_info* other) {
  if (other != this) {
    std::swap(suit_id_, other->suit_id_);
    std::swap(suit_unixtime_time_out_stamp_, other->suit_unixtime_time_out_stamp_);
    std::swap(suit_duration_type_, other->suit_duration_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata suit_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = suit_info_descriptor_;
  metadata.reflection = suit_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int list_role_suit_info::kListBuySuitFieldNumber;
const int list_role_suit_info::kSuitShopLastUpdateTimeFieldNumber;
const int list_role_suit_info::kCurrentSuitFieldNumber;
const int list_role_suit_info::kListHaveSuitsFieldNumber;
#endif  // !_MSC_VER

list_role_suit_info::list_role_suit_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void list_role_suit_info::InitAsDefaultInstance() {
  current_suit_ = const_cast< ::suit_info*>(&::suit_info::default_instance());
}

list_role_suit_info::list_role_suit_info(const list_role_suit_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void list_role_suit_info::SharedCtor() {
  _cached_size_ = 0;
  suit_shop_last_update_time_ = GOOGLE_LONGLONG(0);
  current_suit_ = nullptr;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

list_role_suit_info::~list_role_suit_info() {
  SharedDtor();
}

void list_role_suit_info::SharedDtor() {
  if (this != default_instance_) {
    delete current_suit_;
  }
}

void list_role_suit_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* list_role_suit_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return list_role_suit_info_descriptor_;
}

const list_role_suit_info& list_role_suit_info::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Database_2eproto();
  return *default_instance_;
}

list_role_suit_info* list_role_suit_info::default_instance_ = nullptr;

list_role_suit_info* list_role_suit_info::New() const {
  return new list_role_suit_info;
}

void list_role_suit_info::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    suit_shop_last_update_time_ = GOOGLE_LONGLONG(0);
    if (has_current_suit()) {
      if (current_suit_ != nullptr) current_suit_->::suit_info::Clear();
    }
  }
  list_buy_suit_.Clear();
  list_have_suits_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool list_role_suit_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .suit_goods_info list_buy_suit = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_buy_suit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_buy_suit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list_buy_suit;
        if (input->ExpectTag(16)) goto parse_suit_shop_last_update_time;
        break;
      }

      // required sint64 suit_shop_last_update_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suit_shop_last_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &suit_shop_last_update_time_)));
          set_has_suit_shop_last_update_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_current_suit;
        break;
      }

      // optional .suit_info current_suit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_current_suit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_current_suit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_list_have_suits;
        break;
      }

      // repeated .suit_info list_have_suits = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_have_suits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_have_suits()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_list_have_suits;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void list_role_suit_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .suit_goods_info list_buy_suit = 1;
  for (int i = 0; i < this->list_buy_suit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list_buy_suit(i), output);
  }

  // required sint64 suit_shop_last_update_time = 2;
  if (has_suit_shop_last_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->suit_shop_last_update_time(), output);
  }

  // optional .suit_info current_suit = 3;
  if (has_current_suit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->current_suit(), output);
  }

  // repeated .suit_info list_have_suits = 4;
  for (int i = 0; i < this->list_have_suits_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->list_have_suits(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* list_role_suit_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .suit_goods_info list_buy_suit = 1;
  for (int i = 0; i < this->list_buy_suit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list_buy_suit(i), target);
  }

  // required sint64 suit_shop_last_update_time = 2;
  if (has_suit_shop_last_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->suit_shop_last_update_time(), target);
  }

  // optional .suit_info current_suit = 3;
  if (has_current_suit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->current_suit(), target);
  }

  // repeated .suit_info list_have_suits = 4;
  for (int i = 0; i < this->list_have_suits_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->list_have_suits(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int list_role_suit_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required sint64 suit_shop_last_update_time = 2;
    if (has_suit_shop_last_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->suit_shop_last_update_time());
    }

    // optional .suit_info current_suit = 3;
    if (has_current_suit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->current_suit());
    }

  }
  // repeated .suit_goods_info list_buy_suit = 1;
  total_size += 1 * this->list_buy_suit_size();
  for (int i = 0; i < this->list_buy_suit_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_buy_suit(i));
  }

  // repeated .suit_info list_have_suits = 4;
  total_size += 1 * this->list_have_suits_size();
  for (int i = 0; i < this->list_have_suits_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_have_suits(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void list_role_suit_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const list_role_suit_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const list_role_suit_info*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void list_role_suit_info::MergeFrom(const list_role_suit_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_buy_suit_.MergeFrom(from.list_buy_suit_);
  list_have_suits_.MergeFrom(from.list_have_suits_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_suit_shop_last_update_time()) {
      set_suit_shop_last_update_time(from.suit_shop_last_update_time());
    }
    if (from.has_current_suit()) {
      mutable_current_suit()->::suit_info::MergeFrom(from.current_suit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void list_role_suit_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void list_role_suit_info::CopyFrom(const list_role_suit_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool list_role_suit_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < list_buy_suit_size(); i++) {
    if (!this->list_buy_suit(i).IsInitialized()) return false;
  }
  if (has_current_suit()) {
    if (!this->current_suit().IsInitialized()) return false;
  }
  for (int i = 0; i < list_have_suits_size(); i++) {
    if (!this->list_have_suits(i).IsInitialized()) return false;
  }
  return true;
}

void list_role_suit_info::Swap(list_role_suit_info* other) {
  if (other != this) {
    list_buy_suit_.Swap(&other->list_buy_suit_);
    std::swap(suit_shop_last_update_time_, other->suit_shop_last_update_time_);
    std::swap(current_suit_, other->current_suit_);
    list_have_suits_.Swap(&other->list_have_suits_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata list_role_suit_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = list_role_suit_info_descriptor_;
  metadata.reflection = list_role_suit_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int face_goods_info::kCanBuyFaceShopIdFieldNumber;
const int face_goods_info::kIsBuyFieldNumber;
const int face_goods_info::kFaceShopIndexFieldNumber;
#endif  // !_MSC_VER

face_goods_info::face_goods_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void face_goods_info::InitAsDefaultInstance() {
}

face_goods_info::face_goods_info(const face_goods_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void face_goods_info::SharedCtor() {
  _cached_size_ = 0;
  can_buy_face_shop_id_ = 0;
  is_buy_ = false;
  face_shop_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

face_goods_info::~face_goods_info() {
  SharedDtor();
}

void face_goods_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void face_goods_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* face_goods_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return face_goods_info_descriptor_;
}

const face_goods_info& face_goods_info::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Database_2eproto();
  return *default_instance_;
}

face_goods_info* face_goods_info::default_instance_ = nullptr;

face_goods_info* face_goods_info::New() const {
  return new face_goods_info;
}

void face_goods_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    can_buy_face_shop_id_ = 0;
    is_buy_ = false;
    face_shop_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool face_goods_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 can_buy_face_shop_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &can_buy_face_shop_id_)));
          set_has_can_buy_face_shop_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_buy;
        break;
      }

      // required bool is_buy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_buy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_buy_)));
          set_has_is_buy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_face_shop_index;
        break;
      }

      // required sint32 face_shop_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_face_shop_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &face_shop_index_)));
          set_has_face_shop_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void face_goods_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 can_buy_face_shop_id = 1;
  if (has_can_buy_face_shop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->can_buy_face_shop_id(), output);
  }

  // required bool is_buy = 2;
  if (has_is_buy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_buy(), output);
  }

  // required sint32 face_shop_index = 3;
  if (has_face_shop_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->face_shop_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* face_goods_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 can_buy_face_shop_id = 1;
  if (has_can_buy_face_shop_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->can_buy_face_shop_id(), target);
  }

  // required bool is_buy = 2;
  if (has_is_buy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_buy(), target);
  }

  // required sint32 face_shop_index = 3;
  if (has_face_shop_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->face_shop_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int face_goods_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 can_buy_face_shop_id = 1;
    if (has_can_buy_face_shop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->can_buy_face_shop_id());
    }

    // required bool is_buy = 2;
    if (has_is_buy()) {
      total_size += 1 + 1;
    }

    // required sint32 face_shop_index = 3;
    if (has_face_shop_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->face_shop_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void face_goods_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const face_goods_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const face_goods_info*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void face_goods_info::MergeFrom(const face_goods_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_can_buy_face_shop_id()) {
      set_can_buy_face_shop_id(from.can_buy_face_shop_id());
    }
    if (from.has_is_buy()) {
      set_is_buy(from.is_buy());
    }
    if (from.has_face_shop_index()) {
      set_face_shop_index(from.face_shop_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void face_goods_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void face_goods_info::CopyFrom(const face_goods_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool face_goods_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void face_goods_info::Swap(face_goods_info* other) {
  if (other != this) {
    std::swap(can_buy_face_shop_id_, other->can_buy_face_shop_id_);
    std::swap(is_buy_, other->is_buy_);
    std::swap(face_shop_index_, other->face_shop_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata face_goods_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = face_goods_info_descriptor_;
  metadata.reflection = face_goods_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int face_info::kFaceIdFieldNumber;
const int face_info::kFaceUnixtimeTimeOutStampFieldNumber;
const int face_info::kFaceDurationTypeFieldNumber;
#endif  // !_MSC_VER

face_info::face_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void face_info::InitAsDefaultInstance() {
}

face_info::face_info(const face_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void face_info::SharedCtor() {
  _cached_size_ = 0;
  face_id_ = 0;
  face_unixtime_time_out_stamp_ = GOOGLE_LONGLONG(0);
  face_duration_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

face_info::~face_info() {
  SharedDtor();
}

void face_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void face_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* face_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return face_info_descriptor_;
}

const face_info& face_info::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Database_2eproto();
  return *default_instance_;
}

face_info* face_info::default_instance_ = nullptr;

face_info* face_info::New() const {
  return new face_info;
}

void face_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    face_id_ = 0;
    face_unixtime_time_out_stamp_ = GOOGLE_LONGLONG(0);
    face_duration_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool face_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 face_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &face_id_)));
          set_has_face_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_face_unixtime_time_out_stamp;
        break;
      }

      // required sint64 face_unixtime_time_out_stamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_face_unixtime_time_out_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &face_unixtime_time_out_stamp_)));
          set_has_face_unixtime_time_out_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_face_duration_type;
        break;
      }

      // required sint32 face_duration_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_face_duration_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &face_duration_type_)));
          set_has_face_duration_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void face_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 face_id = 1;
  if (has_face_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->face_id(), output);
  }

  // required sint64 face_unixtime_time_out_stamp = 2;
  if (has_face_unixtime_time_out_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->face_unixtime_time_out_stamp(), output);
  }

  // required sint32 face_duration_type = 3;
  if (has_face_duration_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->face_duration_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* face_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 face_id = 1;
  if (has_face_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->face_id(), target);
  }

  // required sint64 face_unixtime_time_out_stamp = 2;
  if (has_face_unixtime_time_out_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->face_unixtime_time_out_stamp(), target);
  }

  // required sint32 face_duration_type = 3;
  if (has_face_duration_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->face_duration_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int face_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 face_id = 1;
    if (has_face_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->face_id());
    }

    // required sint64 face_unixtime_time_out_stamp = 2;
    if (has_face_unixtime_time_out_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->face_unixtime_time_out_stamp());
    }

    // required sint32 face_duration_type = 3;
    if (has_face_duration_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->face_duration_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void face_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const face_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const face_info*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void face_info::MergeFrom(const face_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_face_id()) {
      set_face_id(from.face_id());
    }
    if (from.has_face_unixtime_time_out_stamp()) {
      set_face_unixtime_time_out_stamp(from.face_unixtime_time_out_stamp());
    }
    if (from.has_face_duration_type()) {
      set_face_duration_type(from.face_duration_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void face_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void face_info::CopyFrom(const face_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool face_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void face_info::Swap(face_info* other) {
  if (other != this) {
    std::swap(face_id_, other->face_id_);
    std::swap(face_unixtime_time_out_stamp_, other->face_unixtime_time_out_stamp_);
    std::swap(face_duration_type_, other->face_duration_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata face_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = face_info_descriptor_;
  metadata.reflection = face_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int level_info::kIdFieldNumber;
const int level_info::kPassedFieldNumber;
#endif  // !_MSC_VER

level_info::level_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void level_info::InitAsDefaultInstance() {
}

level_info::level_info(const level_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void level_info::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  passed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

level_info::~level_info() {
  SharedDtor();
}

void level_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void level_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* level_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return level_info_descriptor_;
}

const level_info& level_info::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Database_2eproto();
  return *default_instance_;
}

level_info* level_info::default_instance_ = nullptr;

level_info* level_info::New() const {
  return new level_info;
}

void level_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    passed_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool level_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_passed;
        break;
      }

      // required sint32 passed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_passed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &passed_)));
          set_has_passed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void level_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->id(), output);
  }

  // required sint32 passed = 2;
  if (has_passed()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->passed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* level_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->id(), target);
  }

  // required sint32 passed = 2;
  if (has_passed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->passed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int level_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->id());
    }

    // required sint32 passed = 2;
    if (has_passed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->passed());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void level_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const level_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const level_info*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void level_info::MergeFrom(const level_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_passed()) {
      set_passed(from.passed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void level_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void level_info::CopyFrom(const level_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool level_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void level_info::Swap(level_info* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(passed_, other->passed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata level_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = level_info_descriptor_;
  metadata.reflection = level_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int reward_box::kIdFieldNumber;
const int reward_box::kGetFieldNumber;
#endif  // !_MSC_VER

reward_box::reward_box()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void reward_box::InitAsDefaultInstance() {
}

reward_box::reward_box(const reward_box& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void reward_box::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  get_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

reward_box::~reward_box() {
  SharedDtor();
}

void reward_box::SharedDtor() {
  if (this != default_instance_) {
  }
}

void reward_box::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* reward_box::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return reward_box_descriptor_;
}

const reward_box& reward_box::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Database_2eproto();
  return *default_instance_;
}

reward_box* reward_box::default_instance_ = nullptr;

reward_box* reward_box::New() const {
  return new reward_box;
}

void reward_box::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    get_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool reward_box::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_get;
        break;
      }

      // required sint32 get = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &get_)));
          set_has_get();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void reward_box::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->id(), output);
  }

  // required sint32 get = 2;
  if (has_get()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->get(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* reward_box::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->id(), target);
  }

  // required sint32 get = 2;
  if (has_get()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->get(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int reward_box::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->id());
    }

    // required sint32 get = 2;
    if (has_get()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->get());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void reward_box::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const reward_box* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const reward_box*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void reward_box::MergeFrom(const reward_box& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_get()) {
      set_get(from.get());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void reward_box::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reward_box::CopyFrom(const reward_box& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reward_box::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void reward_box::Swap(reward_box* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(get_, other->get_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata reward_box::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = reward_box_descriptor_;
  metadata.reflection = reward_box_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chapter_info::kIdFieldNumber;
const int chapter_info::kListDupFieldNumber;
const int chapter_info::kListBoxFieldNumber;
const int chapter_info::kGetRewardFieldNumber;
#endif  // !_MSC_VER

chapter_info::chapter_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void chapter_info::InitAsDefaultInstance() {
}

chapter_info::chapter_info(const chapter_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void chapter_info::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  get_reward_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chapter_info::~chapter_info() {
  SharedDtor();
}

void chapter_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void chapter_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chapter_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chapter_info_descriptor_;
}

const chapter_info& chapter_info::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Database_2eproto();
  return *default_instance_;
}

chapter_info* chapter_info::default_instance_ = nullptr;

chapter_info* chapter_info::New() const {
  return new chapter_info;
}

void chapter_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    get_reward_ = 0;
  }
  list_dup_.Clear();
  list_box_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chapter_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list_dup;
        break;
      }

      // repeated .level_info list_dup = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_dup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_dup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list_dup;
        if (input->ExpectTag(26)) goto parse_list_box;
        break;
      }

      // repeated .reward_box list_box = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_box:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_box()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_list_box;
        if (input->ExpectTag(32)) goto parse_get_reward;
        break;
      }

      // required sint32 get_reward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &get_reward_)));
          set_has_get_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void chapter_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->id(), output);
  }

  // repeated .level_info list_dup = 2;
  for (int i = 0; i < this->list_dup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list_dup(i), output);
  }

  // repeated .reward_box list_box = 3;
  for (int i = 0; i < this->list_box_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->list_box(i), output);
  }

  // required sint32 get_reward = 4;
  if (has_get_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->get_reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* chapter_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->id(), target);
  }

  // repeated .level_info list_dup = 2;
  for (int i = 0; i < this->list_dup_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->list_dup(i), target);
  }

  // repeated .reward_box list_box = 3;
  for (int i = 0; i < this->list_box_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->list_box(i), target);
  }

  // required sint32 get_reward = 4;
  if (has_get_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->get_reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int chapter_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->id());
    }

    // required sint32 get_reward = 4;
    if (has_get_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->get_reward());
    }

  }
  // repeated .level_info list_dup = 2;
  total_size += 1 * this->list_dup_size();
  for (int i = 0; i < this->list_dup_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_dup(i));
  }

  // repeated .reward_box list_box = 3;
  total_size += 1 * this->list_box_size();
  for (int i = 0; i < this->list_box_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_box(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chapter_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chapter_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chapter_info*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chapter_info::MergeFrom(const chapter_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_dup_.MergeFrom(from.list_dup_);
  list_box_.MergeFrom(from.list_box_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_get_reward()) {
      set_get_reward(from.get_reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chapter_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chapter_info::CopyFrom(const chapter_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chapter_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  for (int i = 0; i < list_dup_size(); i++) {
    if (!this->list_dup(i).IsInitialized()) return false;
  }
  for (int i = 0; i < list_box_size(); i++) {
    if (!this->list_box(i).IsInitialized()) return false;
  }
  return true;
}

void chapter_info::Swap(chapter_info* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    list_dup_.Swap(&other->list_dup_);
    list_box_.Swap(&other->list_box_);
    std::swap(get_reward_, other->get_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chapter_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chapter_info_descriptor_;
  metadata.reflection = chapter_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int list_role_face_info::kListOriginalBuyFaceFieldNumber;
const int list_role_face_info::kListDiscountBuyFaceFieldNumber;
const int list_role_face_info::kFaceShopLastUpdateTimeFieldNumber;
const int list_role_face_info::kFaceShopLastManualUpdateTimeFieldNumber;
const int list_role_face_info::kFaceShopManualUpdateCountFieldNumber;
const int list_role_face_info::kCurrentFaceFieldNumber;
const int list_role_face_info::kListHaveFacesFieldNumber;
#endif  // !_MSC_VER

list_role_face_info::list_role_face_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void list_role_face_info::InitAsDefaultInstance() {
  current_face_ = const_cast< ::face_info*>(&::face_info::default_instance());
}

list_role_face_info::list_role_face_info(const list_role_face_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void list_role_face_info::SharedCtor() {
  _cached_size_ = 0;
  face_shop_last_update_time_ = GOOGLE_LONGLONG(0);
  face_shop_last_manual_update_time_ = GOOGLE_LONGLONG(0);
  face_shop_manual_update_count_ = 0;
  current_face_ = nullptr;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

list_role_face_info::~list_role_face_info() {
  SharedDtor();
}

void list_role_face_info::SharedDtor() {
  if (this != default_instance_) {
    delete current_face_;
  }
}

void list_role_face_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* list_role_face_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return list_role_face_info_descriptor_;
}

const list_role_face_info& list_role_face_info::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Database_2eproto();
  return *default_instance_;
}

list_role_face_info* list_role_face_info::default_instance_ = nullptr;

list_role_face_info* list_role_face_info::New() const {
  return new list_role_face_info;
}

void list_role_face_info::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    face_shop_last_update_time_ = GOOGLE_LONGLONG(0);
    face_shop_last_manual_update_time_ = GOOGLE_LONGLONG(0);
    face_shop_manual_update_count_ = 0;
    if (has_current_face()) {
      if (current_face_ != nullptr) current_face_->::face_info::Clear();
    }
  }
  list_original_buy_face_.Clear();
  list_discount_buy_face_.Clear();
  list_have_faces_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool list_role_face_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .face_goods_info list_original_buy_face = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_original_buy_face:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_original_buy_face()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list_original_buy_face;
        if (input->ExpectTag(18)) goto parse_list_discount_buy_face;
        break;
      }

      // repeated .face_goods_info list_discount_buy_face = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_discount_buy_face:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_discount_buy_face()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list_discount_buy_face;
        if (input->ExpectTag(24)) goto parse_face_shop_last_update_time;
        break;
      }

      // required sint64 face_shop_last_update_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_face_shop_last_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &face_shop_last_update_time_)));
          set_has_face_shop_last_update_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_face_shop_last_manual_update_time;
        break;
      }

      // required sint64 face_shop_last_manual_update_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_face_shop_last_manual_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &face_shop_last_manual_update_time_)));
          set_has_face_shop_last_manual_update_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_face_shop_manual_update_count;
        break;
      }

      // required sint32 face_shop_manual_update_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_face_shop_manual_update_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &face_shop_manual_update_count_)));
          set_has_face_shop_manual_update_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_current_face;
        break;
      }

      // optional .face_info current_face = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_current_face:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_current_face()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_list_have_faces;
        break;
      }

      // repeated .face_info list_have_faces = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_have_faces:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_have_faces()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_list_have_faces;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void list_role_face_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .face_goods_info list_original_buy_face = 1;
  for (int i = 0; i < this->list_original_buy_face_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list_original_buy_face(i), output);
  }

  // repeated .face_goods_info list_discount_buy_face = 2;
  for (int i = 0; i < this->list_discount_buy_face_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list_discount_buy_face(i), output);
  }

  // required sint64 face_shop_last_update_time = 3;
  if (has_face_shop_last_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->face_shop_last_update_time(), output);
  }

  // required sint64 face_shop_last_manual_update_time = 4;
  if (has_face_shop_last_manual_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->face_shop_last_manual_update_time(), output);
  }

  // required sint32 face_shop_manual_update_count = 5;
  if (has_face_shop_manual_update_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->face_shop_manual_update_count(), output);
  }

  // optional .face_info current_face = 6;
  if (has_current_face()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->current_face(), output);
  }

  // repeated .face_info list_have_faces = 7;
  for (int i = 0; i < this->list_have_faces_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->list_have_faces(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* list_role_face_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .face_goods_info list_original_buy_face = 1;
  for (int i = 0; i < this->list_original_buy_face_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list_original_buy_face(i), target);
  }

  // repeated .face_goods_info list_discount_buy_face = 2;
  for (int i = 0; i < this->list_discount_buy_face_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->list_discount_buy_face(i), target);
  }

  // required sint64 face_shop_last_update_time = 3;
  if (has_face_shop_last_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->face_shop_last_update_time(), target);
  }

  // required sint64 face_shop_last_manual_update_time = 4;
  if (has_face_shop_last_manual_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(4, this->face_shop_last_manual_update_time(), target);
  }

  // required sint32 face_shop_manual_update_count = 5;
  if (has_face_shop_manual_update_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->face_shop_manual_update_count(), target);
  }

  // optional .face_info current_face = 6;
  if (has_current_face()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->current_face(), target);
  }

  // repeated .face_info list_have_faces = 7;
  for (int i = 0; i < this->list_have_faces_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->list_have_faces(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int list_role_face_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required sint64 face_shop_last_update_time = 3;
    if (has_face_shop_last_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->face_shop_last_update_time());
    }

    // required sint64 face_shop_last_manual_update_time = 4;
    if (has_face_shop_last_manual_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->face_shop_last_manual_update_time());
    }

    // required sint32 face_shop_manual_update_count = 5;
    if (has_face_shop_manual_update_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->face_shop_manual_update_count());
    }

    // optional .face_info current_face = 6;
    if (has_current_face()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->current_face());
    }

  }
  // repeated .face_goods_info list_original_buy_face = 1;
  total_size += 1 * this->list_original_buy_face_size();
  for (int i = 0; i < this->list_original_buy_face_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_original_buy_face(i));
  }

  // repeated .face_goods_info list_discount_buy_face = 2;
  total_size += 1 * this->list_discount_buy_face_size();
  for (int i = 0; i < this->list_discount_buy_face_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_discount_buy_face(i));
  }

  // repeated .face_info list_have_faces = 7;
  total_size += 1 * this->list_have_faces_size();
  for (int i = 0; i < this->list_have_faces_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_have_faces(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void list_role_face_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const list_role_face_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const list_role_face_info*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void list_role_face_info::MergeFrom(const list_role_face_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_original_buy_face_.MergeFrom(from.list_original_buy_face_);
  list_discount_buy_face_.MergeFrom(from.list_discount_buy_face_);
  list_have_faces_.MergeFrom(from.list_have_faces_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_face_shop_last_update_time()) {
      set_face_shop_last_update_time(from.face_shop_last_update_time());
    }
    if (from.has_face_shop_last_manual_update_time()) {
      set_face_shop_last_manual_update_time(from.face_shop_last_manual_update_time());
    }
    if (from.has_face_shop_manual_update_count()) {
      set_face_shop_manual_update_count(from.face_shop_manual_update_count());
    }
    if (from.has_current_face()) {
      mutable_current_face()->::face_info::MergeFrom(from.current_face());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void list_role_face_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void list_role_face_info::CopyFrom(const list_role_face_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool list_role_face_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001c) != 0x0000001c) return false;

  for (int i = 0; i < list_original_buy_face_size(); i++) {
    if (!this->list_original_buy_face(i).IsInitialized()) return false;
  }
  for (int i = 0; i < list_discount_buy_face_size(); i++) {
    if (!this->list_discount_buy_face(i).IsInitialized()) return false;
  }
  if (has_current_face()) {
    if (!this->current_face().IsInitialized()) return false;
  }
  for (int i = 0; i < list_have_faces_size(); i++) {
    if (!this->list_have_faces(i).IsInitialized()) return false;
  }
  return true;
}

void list_role_face_info::Swap(list_role_face_info* other) {
  if (other != this) {
    list_original_buy_face_.Swap(&other->list_original_buy_face_);
    list_discount_buy_face_.Swap(&other->list_discount_buy_face_);
    std::swap(face_shop_last_update_time_, other->face_shop_last_update_time_);
    std::swap(face_shop_last_manual_update_time_, other->face_shop_last_manual_update_time_);
    std::swap(face_shop_manual_update_count_, other->face_shop_manual_update_count_);
    std::swap(current_face_, other->current_face_);
    list_have_faces_.Swap(&other->list_have_faces_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata list_role_face_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = list_role_face_info_descriptor_;
  metadata.reflection = list_role_face_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_info_skill::kDefauleSkillFieldNumber;
const int role_info_skill::kListSkillNameFieldNumber;
const int role_info_skill::kListSkillFieldNumber;
#endif  // !_MSC_VER

role_info_skill::role_info_skill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_info_skill::InitAsDefaultInstance() {
}

role_info_skill::role_info_skill(const role_info_skill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_info_skill::SharedCtor() {
  _cached_size_ = 0;
  defaule_skill_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_info_skill::~role_info_skill() {
  SharedDtor();
}

void role_info_skill::SharedDtor() {
  if (defaule_skill_ != &::google::protobuf::internal::kEmptyString) {
    delete defaule_skill_;
  }
  if (this != default_instance_) {
  }
}

void role_info_skill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_info_skill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_info_skill_descriptor_;
}

const role_info_skill& role_info_skill::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Database_2eproto();
  return *default_instance_;
}

role_info_skill* role_info_skill::default_instance_ = nullptr;

role_info_skill* role_info_skill::New() const {
  return new role_info_skill;
}

void role_info_skill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_defaule_skill()) {
      if (defaule_skill_ != &::google::protobuf::internal::kEmptyString) {
        defaule_skill_->clear();
      }
    }
  }
  list_skill_name_.Clear();
  list_skill_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_info_skill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes defaule_skill = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_defaule_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list_skill_name;
        break;
      }

      // repeated bytes list_skill_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_skill_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_list_skill_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list_skill_name;
        if (input->ExpectTag(26)) goto parse_list_skill;
        break;
      }

      // repeated .universal_data list_skill = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_list_skill;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_info_skill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes defaule_skill = 1;
  if (has_defaule_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->defaule_skill(), output);
  }

  // repeated bytes list_skill_name = 2;
  for (int i = 0; i < this->list_skill_name_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->list_skill_name(i), output);
  }

  // repeated .universal_data list_skill = 3;
  for (int i = 0; i < this->list_skill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->list_skill(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_info_skill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes defaule_skill = 1;
  if (has_defaule_skill()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->defaule_skill(), target);
  }

  // repeated bytes list_skill_name = 2;
  for (int i = 0; i < this->list_skill_name_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->list_skill_name(i), target);
  }

  // repeated .universal_data list_skill = 3;
  for (int i = 0; i < this->list_skill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->list_skill(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_info_skill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes defaule_skill = 1;
    if (has_defaule_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->defaule_skill());
    }

  }
  // repeated bytes list_skill_name = 2;
  total_size += 1 * this->list_skill_name_size();
  for (int i = 0; i < this->list_skill_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->list_skill_name(i));
  }

  // repeated .universal_data list_skill = 3;
  total_size += 1 * this->list_skill_size();
  for (int i = 0; i < this->list_skill_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_skill(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_info_skill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_info_skill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_info_skill*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_info_skill::MergeFrom(const role_info_skill& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_skill_name_.MergeFrom(from.list_skill_name_);
  list_skill_.MergeFrom(from.list_skill_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_defaule_skill()) {
      set_defaule_skill(from.defaule_skill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_info_skill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_info_skill::CopyFrom(const role_info_skill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_info_skill::IsInitialized() const {

  return true;
}

void role_info_skill::Swap(role_info_skill* other) {
  if (other != this) {
    std::swap(defaule_skill_, other->defaule_skill_);
    list_skill_name_.Swap(&other->list_skill_name_);
    list_skill_.Swap(&other->list_skill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_info_skill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_info_skill_descriptor_;
  metadata.reflection = role_info_skill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_friend::kRoleIndexFieldNumber;
const int game_friend::kLevelFieldNumber;
const int game_friend::kNickNameFieldNumber;
const int game_friend::kSuitIdFieldNumber;
const int game_friend::kFaceIdFieldNumber;
const int game_friend::kWeaponIdFieldNumber;
const int game_friend::kHelmetIdFieldNumber;
const int game_friend::kStateFieldNumber;
const int game_friend::kTimeFieldNumber;
const int game_friend::kIsOnlineFieldNumber;
#endif  // !_MSC_VER

game_friend::game_friend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_friend::InitAsDefaultInstance() {
}

game_friend::game_friend(const game_friend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_friend::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  level_ = 0;
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  suit_id_ = 0;
  face_id_ = 0;
  weapon_id_ = 0;
  helmet_id_ = 0;
  state_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = GOOGLE_LONGLONG(0);
  is_online_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_friend::~game_friend() {
  SharedDtor();
}

void game_friend::SharedDtor() {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (state_ != &::google::protobuf::internal::kEmptyString) {
    delete state_;
  }
  if (this != default_instance_) {
  }
}

void game_friend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_friend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_friend_descriptor_;
}

const game_friend& game_friend::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Database_2eproto();
  return *default_instance_;
}

game_friend* game_friend::default_instance_ = nullptr;

game_friend* game_friend::New() const {
  return new game_friend;
}

void game_friend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    level_ = 0;
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
        nick_name_->clear();
      }
    }
    suit_id_ = 0;
    face_id_ = 0;
    weapon_id_ = 0;
    helmet_id_ = 0;
    if (has_state()) {
      if (state_ != &::google::protobuf::internal::kEmptyString) {
        state_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    time_ = GOOGLE_LONGLONG(0);
    is_online_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_friend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required sint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nick_name;
        break;
      }

      // required bytes nick_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nick_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_suit_id;
        break;
      }

      // required sint32 suit_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suit_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &suit_id_)));
          set_has_suit_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_face_id;
        break;
      }

      // required sint32 face_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_face_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &face_id_)));
          set_has_face_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_weapon_id;
        break;
      }

      // required sint32 weapon_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weapon_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &weapon_id_)));
          set_has_weapon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_helmet_id;
        break;
      }

      // required sint32 helmet_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_helmet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &helmet_id_)));
          set_has_helmet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_state;
        break;
      }

      // required bytes state = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_time;
        break;
      }

      // required sint64 time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_is_online;
        break;
      }

      // required bool is_online = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_online_)));
          set_has_is_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_friend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->role_index(), output);
  }

  // required sint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->level(), output);
  }

  // required bytes nick_name = 3;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->nick_name(), output);
  }

  // required sint32 suit_id = 4;
  if (has_suit_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->suit_id(), output);
  }

  // required sint32 face_id = 5;
  if (has_face_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->face_id(), output);
  }

  // required sint32 weapon_id = 6;
  if (has_weapon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->weapon_id(), output);
  }

  // required sint32 helmet_id = 7;
  if (has_helmet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->helmet_id(), output);
  }

  // required bytes state = 8;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->state(), output);
  }

  // required sint64 time = 9;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(9, this->time(), output);
  }

  // required bool is_online = 10;
  if (has_is_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_online(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_friend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->role_index(), target);
  }

  // required sint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->level(), target);
  }

  // required bytes nick_name = 3;
  if (has_nick_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->nick_name(), target);
  }

  // required sint32 suit_id = 4;
  if (has_suit_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->suit_id(), target);
  }

  // required sint32 face_id = 5;
  if (has_face_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->face_id(), target);
  }

  // required sint32 weapon_id = 6;
  if (has_weapon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->weapon_id(), target);
  }

  // required sint32 helmet_id = 7;
  if (has_helmet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->helmet_id(), target);
  }

  // required bytes state = 8;
  if (has_state()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->state(), target);
  }

  // required sint64 time = 9;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(9, this->time(), target);
  }

  // required bool is_online = 10;
  if (has_is_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_online(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_friend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->role_index());
    }

    // required sint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->level());
    }

    // required bytes nick_name = 3;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nick_name());
    }

    // required sint32 suit_id = 4;
    if (has_suit_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->suit_id());
    }

    // required sint32 face_id = 5;
    if (has_face_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->face_id());
    }

    // required sint32 weapon_id = 6;
    if (has_weapon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->weapon_id());
    }

    // required sint32 helmet_id = 7;
    if (has_helmet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->helmet_id());
    }

    // required bytes state = 8;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->state());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required sint64 time = 9;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->time());
    }

    // required bool is_online = 10;
    if (has_is_online()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_friend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_friend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_friend*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_friend::MergeFrom(const game_friend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
    if (from.has_suit_id()) {
      set_suit_id(from.suit_id());
    }
    if (from.has_face_id()) {
      set_face_id(from.face_id());
    }
    if (from.has_weapon_id()) {
      set_weapon_id(from.weapon_id());
    }
    if (from.has_helmet_id()) {
      set_helmet_id(from.helmet_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_is_online()) {
      set_is_online(from.is_online());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_friend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_friend::CopyFrom(const game_friend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_friend::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  return true;
}

void game_friend::Swap(game_friend* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(level_, other->level_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(suit_id_, other->suit_id_);
    std::swap(face_id_, other->face_id_);
    std::swap(weapon_id_, other->weapon_id_);
    std::swap(helmet_id_, other->helmet_id_);
    std::swap(state_, other->state_);
    std::swap(time_, other->time_);
    std::swap(is_online_, other->is_online_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_friend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_friend_descriptor_;
  metadata.reflection = game_friend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dict_game_friend::kListRoleIndexFieldNumber;
const int dict_game_friend::kListFriendsFieldNumber;
#endif  // !_MSC_VER

dict_game_friend::dict_game_friend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dict_game_friend::InitAsDefaultInstance() {
}

dict_game_friend::dict_game_friend(const dict_game_friend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dict_game_friend::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dict_game_friend::~dict_game_friend() {
  SharedDtor();
}

void dict_game_friend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void dict_game_friend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dict_game_friend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dict_game_friend_descriptor_;
}

const dict_game_friend& dict_game_friend::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Database_2eproto();
  return *default_instance_;
}

dict_game_friend* dict_game_friend::default_instance_ = nullptr;

dict_game_friend* dict_game_friend::New() const {
  return new dict_game_friend;
}

void dict_game_friend::Clear() {
  list_role_index_.Clear();
  list_friends_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dict_game_friend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated sint64 list_role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_list_role_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 8, input, this->mutable_list_role_index())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_list_role_index())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_list_role_index;
        if (input->ExpectTag(18)) goto parse_list_friends;
        break;
      }

      // repeated .game_friend list_friends = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_friends()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list_friends;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dict_game_friend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated sint64 list_role_index = 1;
  for (int i = 0; i < this->list_role_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(
      1, this->list_role_index(i), output);
  }

  // repeated .game_friend list_friends = 2;
  for (int i = 0; i < this->list_friends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list_friends(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dict_game_friend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated sint64 list_role_index = 1;
  for (int i = 0; i < this->list_role_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64ToArray(1, this->list_role_index(i), target);
  }

  // repeated .game_friend list_friends = 2;
  for (int i = 0; i < this->list_friends_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->list_friends(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dict_game_friend::ByteSize() const {
  int total_size = 0;

  // repeated sint64 list_role_index = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->list_role_index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->list_role_index(i));
    }
    total_size += 1 * this->list_role_index_size() + data_size;
  }

  // repeated .game_friend list_friends = 2;
  total_size += 1 * this->list_friends_size();
  for (int i = 0; i < this->list_friends_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_friends(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dict_game_friend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dict_game_friend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dict_game_friend*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dict_game_friend::MergeFrom(const dict_game_friend& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_role_index_.MergeFrom(from.list_role_index_);
  list_friends_.MergeFrom(from.list_friends_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dict_game_friend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dict_game_friend::CopyFrom(const dict_game_friend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dict_game_friend::IsInitialized() const {

  for (int i = 0; i < list_friends_size(); i++) {
    if (!this->list_friends(i).IsInitialized()) return false;
  }
  return true;
}

void dict_game_friend::Swap(dict_game_friend* other) {
  if (other != this) {
    list_role_index_.Swap(&other->list_role_index_);
    list_friends_.Swap(&other->list_friends_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dict_game_friend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dict_game_friend_descriptor_;
  metadata.reflection = dict_game_friend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int summonpet::kRoleIndexFieldNumber;
const int summonpet::kRebornSumFieldNumber;
const int summonpet::kPublicInfoFieldNumber;
const int summonpet::kMemoryInfoFieldNumber;
const int summonpet::kAttrInfoFieldNumber;
const int summonpet::kSkillInfoFieldNumber;
const int summonpet::kRewardInfoFieldNumber;
const int summonpet::kIsFollowFieldNumber;
const int summonpet::kIsComradeFieldNumber;
#endif  // !_MSC_VER

summonpet::summonpet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void summonpet::InitAsDefaultInstance() {
  public_info_ = const_cast< ::role_info_public*>(&::role_info_public::default_instance());
  memory_info_ = const_cast< ::role_info_memory*>(&::role_info_memory::default_instance());
  attr_info_ = const_cast< ::role_info_attr*>(&::role_info_attr::default_instance());
  skill_info_ = const_cast< ::role_info_skill*>(&::role_info_skill::default_instance());
  reward_info_ = const_cast< ::role_info_reward*>(&::role_info_reward::default_instance());
}

summonpet::summonpet(const summonpet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void summonpet::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  reborn_sum_ = 0;
  public_info_ = nullptr;
  memory_info_ = nullptr;
  attr_info_ = nullptr;
  skill_info_ = nullptr;
  reward_info_ = nullptr;
  is_follow_ = false;
  is_comrade_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

summonpet::~summonpet() {
  SharedDtor();
}

void summonpet::SharedDtor() {
  if (this != default_instance_) {
    delete public_info_;
    delete memory_info_;
    delete attr_info_;
    delete skill_info_;
    delete reward_info_;
  }
}

void summonpet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* summonpet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return summonpet_descriptor_;
}

const summonpet& summonpet::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Database_2eproto();
  return *default_instance_;
}

summonpet* summonpet::default_instance_ = nullptr;

summonpet* summonpet::New() const {
  return new summonpet;
}

void summonpet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    reborn_sum_ = 0;
    if (has_public_info()) {
      if (public_info_ != nullptr) public_info_->::role_info_public::Clear();
    }
    if (has_memory_info()) {
      if (memory_info_ != nullptr) memory_info_->::role_info_memory::Clear();
    }
    if (has_attr_info()) {
      if (attr_info_ != nullptr) attr_info_->::role_info_attr::Clear();
    }
    if (has_skill_info()) {
      if (skill_info_ != nullptr) skill_info_->::role_info_skill::Clear();
    }
    if (has_reward_info()) {
      if (reward_info_ != nullptr) reward_info_->::role_info_reward::Clear();
    }
    is_follow_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    is_comrade_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool summonpet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reborn_sum;
        break;
      }

      // required sint32 reborn_sum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reborn_sum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &reborn_sum_)));
          set_has_reborn_sum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_public_info;
        break;
      }

      // required .role_info_public public_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_public_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_public_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_memory_info;
        break;
      }

      // optional .role_info_memory memory_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_memory_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_memory_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_attr_info;
        break;
      }

      // required .role_info_attr attr_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attr_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_skill_info;
        break;
      }

      // required .role_info_skill skill_info = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_reward_info;
        break;
      }

      // optional .role_info_reward reward_info = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_is_follow;
        break;
      }

      // required bool is_follow = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_follow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_follow_)));
          set_has_is_follow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_is_comrade;
        break;
      }

      // required bool is_comrade = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_comrade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_comrade_)));
          set_has_is_comrade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void summonpet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->role_index(), output);
  }

  // required sint32 reborn_sum = 2;
  if (has_reborn_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->reborn_sum(), output);
  }

  // required .role_info_public public_info = 3;
  if (has_public_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->public_info(), output);
  }

  // optional .role_info_memory memory_info = 4;
  if (has_memory_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->memory_info(), output);
  }

  // required .role_info_attr attr_info = 5;
  if (has_attr_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->attr_info(), output);
  }

  // required .role_info_skill skill_info = 7;
  if (has_skill_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->skill_info(), output);
  }

  // optional .role_info_reward reward_info = 8;
  if (has_reward_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->reward_info(), output);
  }

  // required bool is_follow = 9;
  if (has_is_follow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_follow(), output);
  }

  // required bool is_comrade = 10;
  if (has_is_comrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_comrade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* summonpet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->role_index(), target);
  }

  // required sint32 reborn_sum = 2;
  if (has_reborn_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->reborn_sum(), target);
  }

  // required .role_info_public public_info = 3;
  if (has_public_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->public_info(), target);
  }

  // optional .role_info_memory memory_info = 4;
  if (has_memory_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->memory_info(), target);
  }

  // required .role_info_attr attr_info = 5;
  if (has_attr_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->attr_info(), target);
  }

  // required .role_info_skill skill_info = 7;
  if (has_skill_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->skill_info(), target);
  }

  // optional .role_info_reward reward_info = 8;
  if (has_reward_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->reward_info(), target);
  }

  // required bool is_follow = 9;
  if (has_is_follow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_follow(), target);
  }

  // required bool is_comrade = 10;
  if (has_is_comrade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_comrade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int summonpet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->role_index());
    }

    // required sint32 reborn_sum = 2;
    if (has_reborn_sum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->reborn_sum());
    }

    // required .role_info_public public_info = 3;
    if (has_public_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->public_info());
    }

    // optional .role_info_memory memory_info = 4;
    if (has_memory_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->memory_info());
    }

    // required .role_info_attr attr_info = 5;
    if (has_attr_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attr_info());
    }

    // required .role_info_skill skill_info = 7;
    if (has_skill_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill_info());
    }

    // optional .role_info_reward reward_info = 8;
    if (has_reward_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward_info());
    }

    // required bool is_follow = 9;
    if (has_is_follow()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool is_comrade = 10;
    if (has_is_comrade()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void summonpet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const summonpet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const summonpet*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void summonpet::MergeFrom(const summonpet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_reborn_sum()) {
      set_reborn_sum(from.reborn_sum());
    }
    if (from.has_public_info()) {
      mutable_public_info()->::role_info_public::MergeFrom(from.public_info());
    }
    if (from.has_memory_info()) {
      mutable_memory_info()->::role_info_memory::MergeFrom(from.memory_info());
    }
    if (from.has_attr_info()) {
      mutable_attr_info()->::role_info_attr::MergeFrom(from.attr_info());
    }
    if (from.has_skill_info()) {
      mutable_skill_info()->::role_info_skill::MergeFrom(from.skill_info());
    }
    if (from.has_reward_info()) {
      mutable_reward_info()->::role_info_reward::MergeFrom(from.reward_info());
    }
    if (from.has_is_follow()) {
      set_is_follow(from.is_follow());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_is_comrade()) {
      set_is_comrade(from.is_comrade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void summonpet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void summonpet::CopyFrom(const summonpet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool summonpet::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001b7) != 0x000001b7) return false;

  if (has_reward_info()) {
    if (!this->reward_info().IsInitialized()) return false;
  }
  return true;
}

void summonpet::Swap(summonpet* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(reborn_sum_, other->reborn_sum_);
    std::swap(public_info_, other->public_info_);
    std::swap(memory_info_, other->memory_info_);
    std::swap(attr_info_, other->attr_info_);
    std::swap(skill_info_, other->skill_info_);
    std::swap(reward_info_, other->reward_info_);
    std::swap(is_follow_, other->is_follow_);
    std::swap(is_comrade_, other->is_comrade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata summonpet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = summonpet_descriptor_;
  metadata.reflection = summonpet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dict_summonpet::kListRoleIndexFieldNumber;
const int dict_summonpet::kListSummonpetInfoFieldNumber;
#endif  // !_MSC_VER

dict_summonpet::dict_summonpet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dict_summonpet::InitAsDefaultInstance() {
}

dict_summonpet::dict_summonpet(const dict_summonpet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dict_summonpet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dict_summonpet::~dict_summonpet() {
  SharedDtor();
}

void dict_summonpet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void dict_summonpet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dict_summonpet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dict_summonpet_descriptor_;
}

const dict_summonpet& dict_summonpet::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Database_2eproto();
  return *default_instance_;
}

dict_summonpet* dict_summonpet::default_instance_ = nullptr;

dict_summonpet* dict_summonpet::New() const {
  return new dict_summonpet;
}

void dict_summonpet::Clear() {
  list_role_index_.Clear();
  list_summonpet_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dict_summonpet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated sint64 list_role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_list_role_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 8, input, this->mutable_list_role_index())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_list_role_index())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_list_role_index;
        if (input->ExpectTag(18)) goto parse_list_summonpet_info;
        break;
      }

      // repeated .summonpet list_summonpet_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_summonpet_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_summonpet_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list_summonpet_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dict_summonpet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated sint64 list_role_index = 1;
  for (int i = 0; i < this->list_role_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(
      1, this->list_role_index(i), output);
  }

  // repeated .summonpet list_summonpet_info = 2;
  for (int i = 0; i < this->list_summonpet_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list_summonpet_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dict_summonpet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated sint64 list_role_index = 1;
  for (int i = 0; i < this->list_role_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64ToArray(1, this->list_role_index(i), target);
  }

  // repeated .summonpet list_summonpet_info = 2;
  for (int i = 0; i < this->list_summonpet_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->list_summonpet_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dict_summonpet::ByteSize() const {
  int total_size = 0;

  // repeated sint64 list_role_index = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->list_role_index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->list_role_index(i));
    }
    total_size += 1 * this->list_role_index_size() + data_size;
  }

  // repeated .summonpet list_summonpet_info = 2;
  total_size += 1 * this->list_summonpet_info_size();
  for (int i = 0; i < this->list_summonpet_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_summonpet_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dict_summonpet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dict_summonpet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dict_summonpet*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dict_summonpet::MergeFrom(const dict_summonpet& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_role_index_.MergeFrom(from.list_role_index_);
  list_summonpet_info_.MergeFrom(from.list_summonpet_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dict_summonpet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dict_summonpet::CopyFrom(const dict_summonpet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dict_summonpet::IsInitialized() const {

  for (int i = 0; i < list_summonpet_info_size(); i++) {
    if (!this->list_summonpet_info(i).IsInitialized()) return false;
  }
  return true;
}

void dict_summonpet::Swap(dict_summonpet* other) {
  if (other != this) {
    list_role_index_.Swap(&other->list_role_index_);
    list_summonpet_info_.Swap(&other->list_summonpet_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dict_summonpet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dict_summonpet_descriptor_;
  metadata.reflection = dict_summonpet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int task::kListCompletedTaskListFieldNumber;
const int task::kListCanAcceptTaskListFieldNumber;
const int task::kListAcceptedTaskListFieldNumber;
#endif  // !_MSC_VER

task::task()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void task::InitAsDefaultInstance() {
}

task::task(const task& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void task::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

task::~task() {
  SharedDtor();
}

void task::SharedDtor() {
  if (this != default_instance_) {
  }
}

void task::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* task::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return task_descriptor_;
}

const task& task::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Database_2eproto();
  return *default_instance_;
}

task* task::default_instance_ = nullptr;

task* task::New() const {
  return new task;
}

void task::Clear() {
  list_completed_task_list_.Clear();
  list_can_accept_task_list_.Clear();
  list_accepted_task_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated sint32 list_completed_task_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_list_completed_task_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 8, input, this->mutable_list_completed_task_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_list_completed_task_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_list_completed_task_list;
        if (input->ExpectTag(18)) goto parse_list_can_accept_task_list;
        break;
      }

      // repeated .task_info list_can_accept_task_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_can_accept_task_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_can_accept_task_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list_can_accept_task_list;
        if (input->ExpectTag(26)) goto parse_list_accepted_task_list;
        break;
      }

      // repeated .task_info list_accepted_task_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_accepted_task_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list_accepted_task_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_list_accepted_task_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated sint32 list_completed_task_list = 1;
  for (int i = 0; i < this->list_completed_task_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      1, this->list_completed_task_list(i), output);
  }

  // repeated .task_info list_can_accept_task_list = 2;
  for (int i = 0; i < this->list_can_accept_task_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list_can_accept_task_list(i), output);
  }

  // repeated .task_info list_accepted_task_list = 3;
  for (int i = 0; i < this->list_accepted_task_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->list_accepted_task_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* task::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated sint32 list_completed_task_list = 1;
  for (int i = 0; i < this->list_completed_task_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32ToArray(1, this->list_completed_task_list(i), target);
  }

  // repeated .task_info list_can_accept_task_list = 2;
  for (int i = 0; i < this->list_can_accept_task_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->list_can_accept_task_list(i), target);
  }

  // repeated .task_info list_accepted_task_list = 3;
  for (int i = 0; i < this->list_accepted_task_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->list_accepted_task_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int task::ByteSize() const {
  int total_size = 0;

  // repeated sint32 list_completed_task_list = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->list_completed_task_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->list_completed_task_list(i));
    }
    total_size += 1 * this->list_completed_task_list_size() + data_size;
  }

  // repeated .task_info list_can_accept_task_list = 2;
  total_size += 1 * this->list_can_accept_task_list_size();
  for (int i = 0; i < this->list_can_accept_task_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_can_accept_task_list(i));
  }

  // repeated .task_info list_accepted_task_list = 3;
  total_size += 1 * this->list_accepted_task_list_size();
  for (int i = 0; i < this->list_accepted_task_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list_accepted_task_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void task::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const task* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const task*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void task::MergeFrom(const task& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_completed_task_list_.MergeFrom(from.list_completed_task_list_);
  list_can_accept_task_list_.MergeFrom(from.list_can_accept_task_list_);
  list_accepted_task_list_.MergeFrom(from.list_accepted_task_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void task::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void task::CopyFrom(const task& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool task::IsInitialized() const {

  for (int i = 0; i < list_can_accept_task_list_size(); i++) {
    if (!this->list_can_accept_task_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < list_accepted_task_list_size(); i++) {
    if (!this->list_accepted_task_list(i).IsInitialized()) return false;
  }
  return true;
}

void task::Swap(task* other) {
  if (other != this) {
    list_completed_task_list_.Swap(&other->list_completed_task_list_);
    list_can_accept_task_list_.Swap(&other->list_can_accept_task_list_);
    list_accepted_task_list_.Swap(&other->list_accepted_task_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata task::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = task_descriptor_;
  metadata.reflection = task_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

success::success()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void success::InitAsDefaultInstance() {
}

success::success(const success& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void success::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

success::~success() {
  SharedDtor();
}

void success::SharedDtor() {
  if (this != default_instance_) {
  }
}

void success::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* success::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return success_descriptor_;
}

const success& success::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Database_2eproto();
  return *default_instance_;
}

success* success::default_instance_ = nullptr;

success* success::New() const {
  return new success;
}

void success::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool success::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void success::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* success::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int success::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void success::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const success* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const success*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void success::MergeFrom(const success& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void success::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void success::CopyFrom(const success& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool success::IsInitialized() const {

  return true;
}

void success::Swap(success* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata success::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = success_descriptor_;
  metadata.reflection = success_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

guide::guide()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void guide::InitAsDefaultInstance() {
}

guide::guide(const guide& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void guide::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guide::~guide() {
  SharedDtor();
}

void guide::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guide::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guide::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guide_descriptor_;
}

const guide& guide::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Database_2eproto();
  return *default_instance_;
}

guide* guide::default_instance_ = nullptr;

guide* guide::New() const {
  return new guide;
}

void guide::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guide::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void guide::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* guide::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int guide::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guide::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guide* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guide*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guide::MergeFrom(const guide& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guide::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guide::CopyFrom(const guide& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guide::IsInitialized() const {

  return true;
}

void guide::Swap(guide* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guide::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guide_descriptor_;
  metadata.reflection = guide_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_info_config::kFollowerAutoComradeFieldNumber;
#endif  // !_MSC_VER

role_info_config::role_info_config()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_info_config::InitAsDefaultInstance() {
}

role_info_config::role_info_config(const role_info_config& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_info_config::SharedCtor() {
  _cached_size_ = 0;
  follower_auto_comrade_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_info_config::~role_info_config() {
  SharedDtor();
}

void role_info_config::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_info_config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_info_config::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_info_config_descriptor_;
}

const role_info_config& role_info_config::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Database_2eproto();
  return *default_instance_;
}

role_info_config* role_info_config::default_instance_ = nullptr;

role_info_config* role_info_config::New() const {
  return new role_info_config;
}

void role_info_config::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    follower_auto_comrade_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_info_config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool follower_auto_comrade = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &follower_auto_comrade_)));
          set_has_follower_auto_comrade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_info_config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool follower_auto_comrade = 2;
  if (has_follower_auto_comrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->follower_auto_comrade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_info_config::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool follower_auto_comrade = 2;
  if (has_follower_auto_comrade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->follower_auto_comrade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_info_config::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool follower_auto_comrade = 2;
    if (has_follower_auto_comrade()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_info_config::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_info_config* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_info_config*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_info_config::MergeFrom(const role_info_config& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_follower_auto_comrade()) {
      set_follower_auto_comrade(from.follower_auto_comrade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_info_config::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_info_config::CopyFrom(const role_info_config& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_info_config::IsInitialized() const {

  return true;
}

void role_info_config::Swap(role_info_config* other) {
  if (other != this) {
    std::swap(follower_auto_comrade_, other->follower_auto_comrade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_info_config::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_info_config_descriptor_;
  metadata.reflection = role_info_config_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int times::kFaceShopLastUpdateTimeFieldNumber;
#endif  // !_MSC_VER

times::times()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void times::InitAsDefaultInstance() {
}

times::times(const times& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void times::SharedCtor() {
  _cached_size_ = 0;
  face_shop_last_update_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

times::~times() {
  SharedDtor();
}

void times::SharedDtor() {
  if (this != default_instance_) {
  }
}

void times::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* times::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return times_descriptor_;
}

const times& times::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Database_2eproto();
  return *default_instance_;
}

times* times::default_instance_ = nullptr;

times* times::New() const {
  return new times;
}

void times::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    face_shop_last_update_time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool times::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 face_shop_last_update_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &face_shop_last_update_time_)));
          set_has_face_shop_last_update_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void times::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint64 face_shop_last_update_time = 2;
  if (has_face_shop_last_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->face_shop_last_update_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* times::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint64 face_shop_last_update_time = 2;
  if (has_face_shop_last_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->face_shop_last_update_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int times::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint64 face_shop_last_update_time = 2;
    if (has_face_shop_last_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->face_shop_last_update_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void times::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const times* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const times*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void times::MergeFrom(const times& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_face_shop_last_update_time()) {
      set_face_shop_last_update_time(from.face_shop_last_update_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void times::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void times::CopyFrom(const times& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool times::IsInitialized() const {

  return true;
}

void times::Swap(times* other) {
  if (other != this) {
    std::swap(face_shop_last_update_time_, other->face_shop_last_update_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata times::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = times_descriptor_;
  metadata.reflection = times_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dict_comrade_role::kKeysFieldNumber;
const int dict_comrade_role::kValuesFieldNumber;
#endif  // !_MSC_VER

dict_comrade_role::dict_comrade_role()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dict_comrade_role::InitAsDefaultInstance() {
}

dict_comrade_role::dict_comrade_role(const dict_comrade_role& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dict_comrade_role::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dict_comrade_role::~dict_comrade_role() {
  SharedDtor();
}

void dict_comrade_role::SharedDtor() {
  if (this != default_instance_) {
  }
}

void dict_comrade_role::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dict_comrade_role::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dict_comrade_role_descriptor_;
}

const dict_comrade_role& dict_comrade_role::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Database_2eproto();
  return *default_instance_;
}

dict_comrade_role* dict_comrade_role::default_instance_ = nullptr;

dict_comrade_role* dict_comrade_role::New() const {
  return new dict_comrade_role;
}

void dict_comrade_role::Clear() {
  keys_.Clear();
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dict_comrade_role::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated sint32 keys = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keys:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 8, input, this->mutable_keys())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_keys())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_keys;
        if (input->ExpectTag(16)) goto parse_values;
        break;
      }

      // repeated sint64 values = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 16, input, this->mutable_values())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_values())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dict_comrade_role::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated sint32 keys = 1;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      1, this->keys(i), output);
  }

  // repeated sint64 values = 2;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(
      2, this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dict_comrade_role::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated sint32 keys = 1;
  for (int i = 0; i < this->keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32ToArray(1, this->keys(i), target);
  }

  // repeated sint64 values = 2;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64ToArray(2, this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dict_comrade_role::ByteSize() const {
  int total_size = 0;

  // repeated sint32 keys = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->keys_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->keys(i));
    }
    total_size += 1 * this->keys_size() + data_size;
  }

  // repeated sint64 values = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->values_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->values(i));
    }
    total_size += 1 * this->values_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dict_comrade_role::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dict_comrade_role* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dict_comrade_role*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dict_comrade_role::MergeFrom(const dict_comrade_role& from) {
  GOOGLE_CHECK_NE(&from, this);
  keys_.MergeFrom(from.keys_);
  values_.MergeFrom(from.values_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dict_comrade_role::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dict_comrade_role::CopyFrom(const dict_comrade_role& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dict_comrade_role::IsInitialized() const {

  return true;
}

void dict_comrade_role::Swap(dict_comrade_role* other) {
  if (other != this) {
    keys_.Swap(&other->keys_);
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dict_comrade_role::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dict_comrade_role_descriptor_;
  metadata.reflection = dict_comrade_role_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_info_memory::kListFollowRoleFieldNumber;
const int role_info_memory::kComradeInfoFieldNumber;
const int role_info_memory::kIsOnEnterGameFieldNumber;
const int role_info_memory::kBattleTeamIndexFieldNumber;
#endif  // !_MSC_VER

role_info_memory::role_info_memory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_info_memory::InitAsDefaultInstance() {
  comrade_info_ = const_cast< ::dict_comrade_role*>(&::dict_comrade_role::default_instance());
}

role_info_memory::role_info_memory(const role_info_memory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_info_memory::SharedCtor() {
  _cached_size_ = 0;
  comrade_info_ = nullptr;
  is_on_enter_game_ = false;
  battle_team_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_info_memory::~role_info_memory() {
  SharedDtor();
}

void role_info_memory::SharedDtor() {
  if (this != default_instance_) {
    delete comrade_info_;
  }
}

void role_info_memory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_info_memory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_info_memory_descriptor_;
}

const role_info_memory& role_info_memory::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Database_2eproto();
  return *default_instance_;
}

role_info_memory* role_info_memory::default_instance_ = nullptr;

role_info_memory* role_info_memory::New() const {
  return new role_info_memory;
}

void role_info_memory::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_comrade_info()) {
      if (comrade_info_ != nullptr) comrade_info_->::dict_comrade_role::Clear();
    }
    is_on_enter_game_ = false;
    battle_team_index_ = 0;
  }
  list_follow_role_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_info_memory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated sint64 list_follow_role = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_list_follow_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 8, input, this->mutable_list_follow_role())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_list_follow_role())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_list_follow_role;
        if (input->ExpectTag(18)) goto parse_comrade_info;
        break;
      }

      // optional .dict_comrade_role comrade_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comrade_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_comrade_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_on_enter_game;
        break;
      }

      // optional bool is_on_enter_game = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_on_enter_game:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_on_enter_game_)));
          set_has_is_on_enter_game();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_battle_team_index;
        break;
      }

      // optional sint32 battle_team_index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_team_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &battle_team_index_)));
          set_has_battle_team_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_info_memory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated sint64 list_follow_role = 1;
  for (int i = 0; i < this->list_follow_role_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(
      1, this->list_follow_role(i), output);
  }

  // optional .dict_comrade_role comrade_info = 2;
  if (has_comrade_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->comrade_info(), output);
  }

  // optional bool is_on_enter_game = 4;
  if (has_is_on_enter_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_on_enter_game(), output);
  }

  // optional sint32 battle_team_index = 5;
  if (has_battle_team_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->battle_team_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_info_memory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated sint64 list_follow_role = 1;
  for (int i = 0; i < this->list_follow_role_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64ToArray(1, this->list_follow_role(i), target);
  }

  // optional .dict_comrade_role comrade_info = 2;
  if (has_comrade_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->comrade_info(), target);
  }

  // optional bool is_on_enter_game = 4;
  if (has_is_on_enter_game()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_on_enter_game(), target);
  }

  // optional sint32 battle_team_index = 5;
  if (has_battle_team_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->battle_team_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_info_memory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .dict_comrade_role comrade_info = 2;
    if (has_comrade_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->comrade_info());
    }

    // optional bool is_on_enter_game = 4;
    if (has_is_on_enter_game()) {
      total_size += 1 + 1;
    }

    // optional sint32 battle_team_index = 5;
    if (has_battle_team_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->battle_team_index());
    }

  }
  // repeated sint64 list_follow_role = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->list_follow_role_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->list_follow_role(i));
    }
    total_size += 1 * this->list_follow_role_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_info_memory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_info_memory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_info_memory*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_info_memory::MergeFrom(const role_info_memory& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_follow_role_.MergeFrom(from.list_follow_role_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_comrade_info()) {
      mutable_comrade_info()->::dict_comrade_role::MergeFrom(from.comrade_info());
    }
    if (from.has_is_on_enter_game()) {
      set_is_on_enter_game(from.is_on_enter_game());
    }
    if (from.has_battle_team_index()) {
      set_battle_team_index(from.battle_team_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_info_memory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_info_memory::CopyFrom(const role_info_memory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_info_memory::IsInitialized() const {

  return true;
}

void role_info_memory::Swap(role_info_memory* other) {
  if (other != this) {
    list_follow_role_.Swap(&other->list_follow_role_);
    std::swap(comrade_info_, other->comrade_info_);
    std::swap(is_on_enter_game_, other->is_on_enter_game_);
    std::swap(battle_team_index_, other->battle_team_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_info_memory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_info_memory_descriptor_;
  metadata.reflection = role_info_memory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_info_public::kRoleIndexFieldNumber;
const int role_info_public::kTeamIndexFieldNumber;
const int role_info_public::kTeamPosFieldNumber;
const int role_info_public::kRebornSumFieldNumber;
const int role_info_public::kObjectTypeFieldNumber;
const int role_info_public::kRacialFieldNumber;
const int role_info_public::kGenderFieldNumber;
const int role_info_public::kObjectResFieldNumber;
const int role_info_public::kHeadIconFileSmallFieldNumber;
const int role_info_public::kHeadIconKeySmallFieldNumber;
const int role_info_public::kHeadIconFileMediumFieldNumber;
const int role_info_public::kHeadIconKeyMediumFieldNumber;
const int role_info_public::kHeadIconFileBigFieldNumber;
const int role_info_public::kHeadIconKeyBigFieldNumber;
const int role_info_public::kHeadIconFilePortraitFieldNumber;
const int role_info_public::kHeadIconKeyPortraitFieldNumber;
const int role_info_public::kNickNameFieldNumber;
const int role_info_public::kLevelFieldNumber;
const int role_info_public::kSceneIdFieldNumber;
const int role_info_public::kDirFieldNumber;
const int role_info_public::kPosXFieldNumber;
const int role_info_public::kPosYFieldNumber;
#endif  // !_MSC_VER

role_info_public::role_info_public()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_info_public::InitAsDefaultInstance() {
  object_res_ = const_cast< ::universal_data*>(&::universal_data::default_instance());
}

role_info_public::role_info_public(const role_info_public& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_info_public::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  team_index_ = GOOGLE_LONGLONG(0);
  team_pos_ = 0;
  reborn_sum_ = 0;
  object_type_ = 0;
  racial_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  object_res_ = nullptr;
  head_icon_file_small_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  head_icon_key_small_ = 0u;
  head_icon_file_medium_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  head_icon_key_medium_ = 0u;
  head_icon_file_big_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  head_icon_key_big_ = 0u;
  head_icon_file_portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  head_icon_key_portrait_ = 0u;
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = GOOGLE_LONGLONG(0);
  scene_id_ = 0;
  dir_ = 0;
  pos_x_ = 0;
  pos_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_info_public::~role_info_public() {
  SharedDtor();
}

void role_info_public::SharedDtor() {
  if (racial_ != &::google::protobuf::internal::kEmptyString) {
    delete racial_;
  }
  if (gender_ != &::google::protobuf::internal::kEmptyString) {
    delete gender_;
  }
  if (head_icon_file_small_ != &::google::protobuf::internal::kEmptyString) {
    delete head_icon_file_small_;
  }
  if (head_icon_file_medium_ != &::google::protobuf::internal::kEmptyString) {
    delete head_icon_file_medium_;
  }
  if (head_icon_file_big_ != &::google::protobuf::internal::kEmptyString) {
    delete head_icon_file_big_;
  }
  if (head_icon_file_portrait_ != &::google::protobuf::internal::kEmptyString) {
    delete head_icon_file_portrait_;
  }
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (this != default_instance_) {
    delete object_res_;
  }
}

void role_info_public::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_info_public::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_info_public_descriptor_;
}

const role_info_public& role_info_public::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Database_2eproto();
  return *default_instance_;
}

role_info_public* role_info_public::default_instance_ = nullptr;

role_info_public* role_info_public::New() const {
  return new role_info_public;
}

void role_info_public::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    team_index_ = GOOGLE_LONGLONG(0);
    team_pos_ = 0;
    reborn_sum_ = 0;
    object_type_ = 0;
    if (has_racial()) {
      if (racial_ != &::google::protobuf::internal::kEmptyString) {
        racial_->clear();
      }
    }
    if (has_gender()) {
      if (gender_ != &::google::protobuf::internal::kEmptyString) {
        gender_->clear();
      }
    }
    if (has_object_res()) {
      if (object_res_ != nullptr) object_res_->::universal_data::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_head_icon_file_small()) {
      if (head_icon_file_small_ != &::google::protobuf::internal::kEmptyString) {
        head_icon_file_small_->clear();
      }
    }
    head_icon_key_small_ = 0u;
    if (has_head_icon_file_medium()) {
      if (head_icon_file_medium_ != &::google::protobuf::internal::kEmptyString) {
        head_icon_file_medium_->clear();
      }
    }
    head_icon_key_medium_ = 0u;
    if (has_head_icon_file_big()) {
      if (head_icon_file_big_ != &::google::protobuf::internal::kEmptyString) {
        head_icon_file_big_->clear();
      }
    }
    head_icon_key_big_ = 0u;
    if (has_head_icon_file_portrait()) {
      if (head_icon_file_portrait_ != &::google::protobuf::internal::kEmptyString) {
        head_icon_file_portrait_->clear();
      }
    }
    head_icon_key_portrait_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
        nick_name_->clear();
      }
    }
    level_ = GOOGLE_LONGLONG(0);
    scene_id_ = 0;
    dir_ = 0;
    pos_x_ = 0;
    pos_y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_info_public::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team_index;
        break;
      }

      // optional sint64 team_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &team_index_)));
          set_has_team_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_team_pos;
        break;
      }

      // optional sint32 team_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &team_pos_)));
          set_has_team_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_reborn_sum;
        break;
      }

      // optional sint32 reborn_sum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reborn_sum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &reborn_sum_)));
          set_has_reborn_sum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_object_type;
        break;
      }

      // optional .E_OBJECT_TYPE object_type = 5 [default = EOT_INVALID];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_object_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::E_OBJECT_TYPE_IsValid(value)) {
            set_object_type(static_cast< ::E_OBJECT_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_racial;
        break;
      }

      // optional bytes racial = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_racial:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_racial()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_gender;
        break;
      }

      // optional bytes gender = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gender()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_object_res;
        break;
      }

      // optional .universal_data object_res = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_object_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_object_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_head_icon_file_small;
        break;
      }

      // optional bytes head_icon_file_small = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head_icon_file_small:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_head_icon_file_small()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_head_icon_key_small;
        break;
      }

      // optional uint32 head_icon_key_small = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_icon_key_small:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_icon_key_small_)));
          set_has_head_icon_key_small();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_head_icon_file_medium;
        break;
      }

      // optional bytes head_icon_file_medium = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head_icon_file_medium:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_head_icon_file_medium()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_head_icon_key_medium;
        break;
      }

      // optional uint32 head_icon_key_medium = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_icon_key_medium:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_icon_key_medium_)));
          set_has_head_icon_key_medium();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_head_icon_file_big;
        break;
      }

      // optional bytes head_icon_file_big = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head_icon_file_big:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_head_icon_file_big()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_head_icon_key_big;
        break;
      }

      // optional uint32 head_icon_key_big = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_icon_key_big:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_icon_key_big_)));
          set_has_head_icon_key_big();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_head_icon_file_portrait;
        break;
      }

      // optional bytes head_icon_file_portrait = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head_icon_file_portrait:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_head_icon_file_portrait()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_head_icon_key_portrait;
        break;
      }

      // optional uint32 head_icon_key_portrait = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_icon_key_portrait:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_icon_key_portrait_)));
          set_has_head_icon_key_portrait();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_nick_name;
        break;
      }

      // optional bytes nick_name = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nick_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(808)) goto parse_level;
        break;
      }

      // optional sint64 level = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1608)) goto parse_scene_id;
        break;
      }

      // optional sint32 scene_id = 201;
      case 201: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1616)) goto parse_dir;
        break;
      }

      // optional sint32 dir = 202;
      case 202: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1629)) goto parse_pos_x;
        break;
      }

      // optional float pos_x = 203;
      case 203: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_x_)));
          set_has_pos_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1637)) goto parse_pos_y;
        break;
      }

      // optional float pos_y = 204;
      case 204: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_y_)));
          set_has_pos_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_info_public::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->role_index(), output);
  }

  // optional sint64 team_index = 2;
  if (has_team_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->team_index(), output);
  }

  // optional sint32 team_pos = 3;
  if (has_team_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->team_pos(), output);
  }

  // optional sint32 reborn_sum = 4;
  if (has_reborn_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->reborn_sum(), output);
  }

  // optional .E_OBJECT_TYPE object_type = 5 [default = EOT_INVALID];
  if (has_object_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->object_type(), output);
  }

  // optional bytes racial = 10;
  if (has_racial()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->racial(), output);
  }

  // optional bytes gender = 11;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      11, this->gender(), output);
  }

  // optional .universal_data object_res = 12;
  if (has_object_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->object_res(), output);
  }

  // optional bytes head_icon_file_small = 20;
  if (has_head_icon_file_small()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      20, this->head_icon_file_small(), output);
  }

  // optional uint32 head_icon_key_small = 21;
  if (has_head_icon_key_small()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->head_icon_key_small(), output);
  }

  // optional bytes head_icon_file_medium = 22;
  if (has_head_icon_file_medium()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      22, this->head_icon_file_medium(), output);
  }

  // optional uint32 head_icon_key_medium = 23;
  if (has_head_icon_key_medium()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->head_icon_key_medium(), output);
  }

  // optional bytes head_icon_file_big = 24;
  if (has_head_icon_file_big()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      24, this->head_icon_file_big(), output);
  }

  // optional uint32 head_icon_key_big = 25;
  if (has_head_icon_key_big()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->head_icon_key_big(), output);
  }

  // optional bytes head_icon_file_portrait = 26;
  if (has_head_icon_file_portrait()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      26, this->head_icon_file_portrait(), output);
  }

  // optional uint32 head_icon_key_portrait = 27;
  if (has_head_icon_key_portrait()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->head_icon_key_portrait(), output);
  }

  // optional bytes nick_name = 100;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      100, this->nick_name(), output);
  }

  // optional sint64 level = 101;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(101, this->level(), output);
  }

  // optional sint32 scene_id = 201;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(201, this->scene_id(), output);
  }

  // optional sint32 dir = 202;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(202, this->dir(), output);
  }

  // optional float pos_x = 203;
  if (has_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(203, this->pos_x(), output);
  }

  // optional float pos_y = 204;
  if (has_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(204, this->pos_y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_info_public::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->role_index(), target);
  }

  // optional sint64 team_index = 2;
  if (has_team_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->team_index(), target);
  }

  // optional sint32 team_pos = 3;
  if (has_team_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->team_pos(), target);
  }

  // optional sint32 reborn_sum = 4;
  if (has_reborn_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->reborn_sum(), target);
  }

  // optional .E_OBJECT_TYPE object_type = 5 [default = EOT_INVALID];
  if (has_object_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->object_type(), target);
  }

  // optional bytes racial = 10;
  if (has_racial()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->racial(), target);
  }

  // optional bytes gender = 11;
  if (has_gender()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->gender(), target);
  }

  // optional .universal_data object_res = 12;
  if (has_object_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->object_res(), target);
  }

  // optional bytes head_icon_file_small = 20;
  if (has_head_icon_file_small()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->head_icon_file_small(), target);
  }

  // optional uint32 head_icon_key_small = 21;
  if (has_head_icon_key_small()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->head_icon_key_small(), target);
  }

  // optional bytes head_icon_file_medium = 22;
  if (has_head_icon_file_medium()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        22, this->head_icon_file_medium(), target);
  }

  // optional uint32 head_icon_key_medium = 23;
  if (has_head_icon_key_medium()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->head_icon_key_medium(), target);
  }

  // optional bytes head_icon_file_big = 24;
  if (has_head_icon_file_big()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        24, this->head_icon_file_big(), target);
  }

  // optional uint32 head_icon_key_big = 25;
  if (has_head_icon_key_big()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->head_icon_key_big(), target);
  }

  // optional bytes head_icon_file_portrait = 26;
  if (has_head_icon_file_portrait()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        26, this->head_icon_file_portrait(), target);
  }

  // optional uint32 head_icon_key_portrait = 27;
  if (has_head_icon_key_portrait()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->head_icon_key_portrait(), target);
  }

  // optional bytes nick_name = 100;
  if (has_nick_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        100, this->nick_name(), target);
  }

  // optional sint64 level = 101;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(101, this->level(), target);
  }

  // optional sint32 scene_id = 201;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(201, this->scene_id(), target);
  }

  // optional sint32 dir = 202;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(202, this->dir(), target);
  }

  // optional float pos_x = 203;
  if (has_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(203, this->pos_x(), target);
  }

  // optional float pos_y = 204;
  if (has_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(204, this->pos_y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_info_public::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->role_index());
    }

    // optional sint64 team_index = 2;
    if (has_team_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->team_index());
    }

    // optional sint32 team_pos = 3;
    if (has_team_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->team_pos());
    }

    // optional sint32 reborn_sum = 4;
    if (has_reborn_sum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->reborn_sum());
    }

    // optional .E_OBJECT_TYPE object_type = 5 [default = EOT_INVALID];
    if (has_object_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->object_type());
    }

    // optional bytes racial = 10;
    if (has_racial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->racial());
    }

    // optional bytes gender = 11;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->gender());
    }

    // optional .universal_data object_res = 12;
    if (has_object_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->object_res());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes head_icon_file_small = 20;
    if (has_head_icon_file_small()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->head_icon_file_small());
    }

    // optional uint32 head_icon_key_small = 21;
    if (has_head_icon_key_small()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_icon_key_small());
    }

    // optional bytes head_icon_file_medium = 22;
    if (has_head_icon_file_medium()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->head_icon_file_medium());
    }

    // optional uint32 head_icon_key_medium = 23;
    if (has_head_icon_key_medium()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_icon_key_medium());
    }

    // optional bytes head_icon_file_big = 24;
    if (has_head_icon_file_big()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->head_icon_file_big());
    }

    // optional uint32 head_icon_key_big = 25;
    if (has_head_icon_key_big()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_icon_key_big());
    }

    // optional bytes head_icon_file_portrait = 26;
    if (has_head_icon_file_portrait()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->head_icon_file_portrait());
    }

    // optional uint32 head_icon_key_portrait = 27;
    if (has_head_icon_key_portrait()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_icon_key_portrait());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bytes nick_name = 100;
    if (has_nick_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nick_name());
    }

    // optional sint64 level = 101;
    if (has_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->level());
    }

    // optional sint32 scene_id = 201;
    if (has_scene_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->scene_id());
    }

    // optional sint32 dir = 202;
    if (has_dir()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->dir());
    }

    // optional float pos_x = 203;
    if (has_pos_x()) {
      total_size += 2 + 4;
    }

    // optional float pos_y = 204;
    if (has_pos_y()) {
      total_size += 2 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_info_public::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_info_public* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_info_public*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_info_public::MergeFrom(const role_info_public& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_team_index()) {
      set_team_index(from.team_index());
    }
    if (from.has_team_pos()) {
      set_team_pos(from.team_pos());
    }
    if (from.has_reborn_sum()) {
      set_reborn_sum(from.reborn_sum());
    }
    if (from.has_object_type()) {
      set_object_type(from.object_type());
    }
    if (from.has_racial()) {
      set_racial(from.racial());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_object_res()) {
      mutable_object_res()->::universal_data::MergeFrom(from.object_res());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_head_icon_file_small()) {
      set_head_icon_file_small(from.head_icon_file_small());
    }
    if (from.has_head_icon_key_small()) {
      set_head_icon_key_small(from.head_icon_key_small());
    }
    if (from.has_head_icon_file_medium()) {
      set_head_icon_file_medium(from.head_icon_file_medium());
    }
    if (from.has_head_icon_key_medium()) {
      set_head_icon_key_medium(from.head_icon_key_medium());
    }
    if (from.has_head_icon_file_big()) {
      set_head_icon_file_big(from.head_icon_file_big());
    }
    if (from.has_head_icon_key_big()) {
      set_head_icon_key_big(from.head_icon_key_big());
    }
    if (from.has_head_icon_file_portrait()) {
      set_head_icon_file_portrait(from.head_icon_file_portrait());
    }
    if (from.has_head_icon_key_portrait()) {
      set_head_icon_key_portrait(from.head_icon_key_portrait());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_pos_x()) {
      set_pos_x(from.pos_x());
    }
    if (from.has_pos_y()) {
      set_pos_y(from.pos_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_info_public::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_info_public::CopyFrom(const role_info_public& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_info_public::IsInitialized() const {

  return true;
}

void role_info_public::Swap(role_info_public* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(team_index_, other->team_index_);
    std::swap(team_pos_, other->team_pos_);
    std::swap(reborn_sum_, other->reborn_sum_);
    std::swap(object_type_, other->object_type_);
    std::swap(racial_, other->racial_);
    std::swap(gender_, other->gender_);
    std::swap(object_res_, other->object_res_);
    std::swap(head_icon_file_small_, other->head_icon_file_small_);
    std::swap(head_icon_key_small_, other->head_icon_key_small_);
    std::swap(head_icon_file_medium_, other->head_icon_file_medium_);
    std::swap(head_icon_key_medium_, other->head_icon_key_medium_);
    std::swap(head_icon_file_big_, other->head_icon_file_big_);
    std::swap(head_icon_key_big_, other->head_icon_key_big_);
    std::swap(head_icon_file_portrait_, other->head_icon_file_portrait_);
    std::swap(head_icon_key_portrait_, other->head_icon_key_portrait_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(level_, other->level_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(dir_, other->dir_);
    std::swap(pos_x_, other->pos_x_);
    std::swap(pos_y_, other->pos_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_info_public::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_info_public_descriptor_;
  metadata.reflection = role_info_public_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_info_private::kBattleIndexFieldNumber;
const int role_info_private::kGameCoinFieldNumber;
const int role_info_private::kStaminaFieldNumber;
const int role_info_private::kDiamondCoinFieldNumber;
const int role_info_private::kSkillPointFieldNumber;
const int role_info_private::kVipLevelFieldNumber;
const int role_info_private::kListWatcherRoleIndexFieldNumber;
const int role_info_private::kPhoneFieldNumber;
const int role_info_private::kEmailFieldNumber;
const int role_info_private::kQqFieldNumber;
const int role_info_private::kPlatformTypeFieldNumber;
#endif  // !_MSC_VER

role_info_private::role_info_private()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_info_private::InitAsDefaultInstance() {
}

role_info_private::role_info_private(const role_info_private& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_info_private::SharedCtor() {
  _cached_size_ = 0;
  battle_index_ = GOOGLE_LONGLONG(0);
  game_coin_ = GOOGLE_LONGLONG(0);
  stamina_ = 0;
  diamond_coin_ = GOOGLE_LONGLONG(0);
  skill_point_ = 0;
  vip_level_ = 0;
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  qq_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platform_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_info_private::~role_info_private() {
  SharedDtor();
}

void role_info_private::SharedDtor() {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (qq_ != &::google::protobuf::internal::kEmptyString) {
    delete qq_;
  }
  if (platform_type_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_type_;
  }
  if (this != default_instance_) {
  }
}

void role_info_private::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_info_private::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_info_private_descriptor_;
}

const role_info_private& role_info_private::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Database_2eproto();
  return *default_instance_;
}

role_info_private* role_info_private::default_instance_ = nullptr;

role_info_private* role_info_private::New() const {
  return new role_info_private;
}

void role_info_private::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battle_index_ = GOOGLE_LONGLONG(0);
    game_coin_ = GOOGLE_LONGLONG(0);
    stamina_ = 0;
    diamond_coin_ = GOOGLE_LONGLONG(0);
    skill_point_ = 0;
    vip_level_ = 0;
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::kEmptyString) {
        phone_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::kEmptyString) {
        email_->clear();
      }
    }
    if (has_qq()) {
      if (qq_ != &::google::protobuf::internal::kEmptyString) {
        qq_->clear();
      }
    }
    if (has_platform_type()) {
      if (platform_type_ != &::google::protobuf::internal::kEmptyString) {
        platform_type_->clear();
      }
    }
  }
  list_watcher_role_index_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_info_private::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 battle_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &battle_index_)));
          set_has_battle_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game_coin;
        break;
      }

      // required sint64 game_coin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &game_coin_)));
          set_has_game_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_stamina;
        break;
      }

      // required sint32 stamina = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stamina:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &stamina_)));
          set_has_stamina();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_diamond_coin;
        break;
      }

      // required sint64 diamond_coin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &diamond_coin_)));
          set_has_diamond_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_skill_point;
        break;
      }

      // required sint32 skill_point = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &skill_point_)));
          set_has_skill_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_vip_level;
        break;
      }

      // required sint32 vip_level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_list_watcher_role_index;
        break;
      }

      // repeated sint64 list_watcher_role_index = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_list_watcher_role_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 2, 400, input, this->mutable_list_watcher_role_index())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_list_watcher_role_index())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_list_watcher_role_index;
        if (input->ExpectTag(802)) goto parse_phone;
        break;
      }

      // optional bytes phone = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_phone()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(810)) goto parse_email;
        break;
      }

      // optional bytes email = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_email()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(818)) goto parse_qq;
        break;
      }

      // optional bytes qq = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_qq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(826)) goto parse_platform_type;
        break;
      }

      // optional bytes platform_type = 103;
      case 103: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platform_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_platform_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_info_private::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 battle_index = 1;
  if (has_battle_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->battle_index(), output);
  }

  // required sint64 game_coin = 2;
  if (has_game_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->game_coin(), output);
  }

  // required sint32 stamina = 3;
  if (has_stamina()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->stamina(), output);
  }

  // required sint64 diamond_coin = 4;
  if (has_diamond_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->diamond_coin(), output);
  }

  // required sint32 skill_point = 5;
  if (has_skill_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->skill_point(), output);
  }

  // required sint32 vip_level = 6;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->vip_level(), output);
  }

  // repeated sint64 list_watcher_role_index = 50;
  for (int i = 0; i < this->list_watcher_role_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(
      50, this->list_watcher_role_index(i), output);
  }

  // optional bytes phone = 100;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      100, this->phone(), output);
  }

  // optional bytes email = 101;
  if (has_email()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      101, this->email(), output);
  }

  // optional bytes qq = 102;
  if (has_qq()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      102, this->qq(), output);
  }

  // optional bytes platform_type = 103;
  if (has_platform_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      103, this->platform_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_info_private::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 battle_index = 1;
  if (has_battle_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->battle_index(), target);
  }

  // required sint64 game_coin = 2;
  if (has_game_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->game_coin(), target);
  }

  // required sint32 stamina = 3;
  if (has_stamina()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->stamina(), target);
  }

  // required sint64 diamond_coin = 4;
  if (has_diamond_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(4, this->diamond_coin(), target);
  }

  // required sint32 skill_point = 5;
  if (has_skill_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->skill_point(), target);
  }

  // required sint32 vip_level = 6;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->vip_level(), target);
  }

  // repeated sint64 list_watcher_role_index = 50;
  for (int i = 0; i < this->list_watcher_role_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64ToArray(50, this->list_watcher_role_index(i), target);
  }

  // optional bytes phone = 100;
  if (has_phone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        100, this->phone(), target);
  }

  // optional bytes email = 101;
  if (has_email()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        101, this->email(), target);
  }

  // optional bytes qq = 102;
  if (has_qq()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        102, this->qq(), target);
  }

  // optional bytes platform_type = 103;
  if (has_platform_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        103, this->platform_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_info_private::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 battle_index = 1;
    if (has_battle_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->battle_index());
    }

    // required sint64 game_coin = 2;
    if (has_game_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->game_coin());
    }

    // required sint32 stamina = 3;
    if (has_stamina()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->stamina());
    }

    // required sint64 diamond_coin = 4;
    if (has_diamond_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->diamond_coin());
    }

    // required sint32 skill_point = 5;
    if (has_skill_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->skill_point());
    }

    // required sint32 vip_level = 6;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->vip_level());
    }

    // optional bytes phone = 100;
    if (has_phone()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->phone());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes email = 101;
    if (has_email()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->email());
    }

    // optional bytes qq = 102;
    if (has_qq()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->qq());
    }

    // optional bytes platform_type = 103;
    if (has_platform_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->platform_type());
    }

  }
  // repeated sint64 list_watcher_role_index = 50;
  {
    int data_size = 0;
    for (int i = 0; i < this->list_watcher_role_index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->list_watcher_role_index(i));
    }
    total_size += 2 * this->list_watcher_role_index_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_info_private::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_info_private* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_info_private*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_info_private::MergeFrom(const role_info_private& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_watcher_role_index_.MergeFrom(from.list_watcher_role_index_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battle_index()) {
      set_battle_index(from.battle_index());
    }
    if (from.has_game_coin()) {
      set_game_coin(from.game_coin());
    }
    if (from.has_stamina()) {
      set_stamina(from.stamina());
    }
    if (from.has_diamond_coin()) {
      set_diamond_coin(from.diamond_coin());
    }
    if (from.has_skill_point()) {
      set_skill_point(from.skill_point());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_phone()) {
      set_phone(from.phone());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_qq()) {
      set_qq(from.qq());
    }
    if (from.has_platform_type()) {
      set_platform_type(from.platform_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_info_private::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_info_private::CopyFrom(const role_info_private& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_info_private::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void role_info_private::Swap(role_info_private* other) {
  if (other != this) {
    std::swap(battle_index_, other->battle_index_);
    std::swap(game_coin_, other->game_coin_);
    std::swap(stamina_, other->stamina_);
    std::swap(diamond_coin_, other->diamond_coin_);
    std::swap(skill_point_, other->skill_point_);
    std::swap(vip_level_, other->vip_level_);
    list_watcher_role_index_.Swap(&other->list_watcher_role_index_);
    std::swap(phone_, other->phone_);
    std::swap(email_, other->email_);
    std::swap(qq_, other->qq_);
    std::swap(platform_type_, other->platform_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_info_private::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_info_private_descriptor_;
  metadata.reflection = role_info_private_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_info_attr::kAttrKeyFieldNumber;
const int role_info_attr::kAttrValueFieldNumber;
#endif  // !_MSC_VER

role_info_attr::role_info_attr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_info_attr::InitAsDefaultInstance() {
}

role_info_attr::role_info_attr(const role_info_attr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_info_attr::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_info_attr::~role_info_attr() {
  SharedDtor();
}

void role_info_attr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_info_attr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_info_attr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_info_attr_descriptor_;
}

const role_info_attr& role_info_attr::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Database_2eproto();
  return *default_instance_;
}

role_info_attr* role_info_attr::default_instance_ = nullptr;

role_info_attr* role_info_attr::New() const {
  return new role_info_attr;
}

void role_info_attr::Clear() {
  attr_key_.Clear();
  attr_value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_info_attr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated sint32 attr_key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attr_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 8, input, this->mutable_attr_key())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_attr_key())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_attr_key;
        if (input->ExpectTag(16)) goto parse_attr_value;
        break;
      }

      // repeated sint64 attr_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attr_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 16, input, this->mutable_attr_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_attr_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attr_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_info_attr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated sint32 attr_key = 1;
  for (int i = 0; i < this->attr_key_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      1, this->attr_key(i), output);
  }

  // repeated sint64 attr_value = 2;
  for (int i = 0; i < this->attr_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(
      2, this->attr_value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_info_attr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated sint32 attr_key = 1;
  for (int i = 0; i < this->attr_key_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32ToArray(1, this->attr_key(i), target);
  }

  // repeated sint64 attr_value = 2;
  for (int i = 0; i < this->attr_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64ToArray(2, this->attr_value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_info_attr::ByteSize() const {
  int total_size = 0;

  // repeated sint32 attr_key = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->attr_key_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->attr_key(i));
    }
    total_size += 1 * this->attr_key_size() + data_size;
  }

  // repeated sint64 attr_value = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->attr_value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->attr_value(i));
    }
    total_size += 1 * this->attr_value_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_info_attr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_info_attr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_info_attr*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_info_attr::MergeFrom(const role_info_attr& from) {
  GOOGLE_CHECK_NE(&from, this);
  attr_key_.MergeFrom(from.attr_key_);
  attr_value_.MergeFrom(from.attr_value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_info_attr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_info_attr::CopyFrom(const role_info_attr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_info_attr::IsInitialized() const {

  return true;
}

void role_info_attr::Swap(role_info_attr* other) {
  if (other != this) {
    attr_key_.Swap(&other->attr_key_);
    attr_value_.Swap(&other->attr_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_info_attr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_info_attr_descriptor_;
  metadata.reflection = role_info_attr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_info_reward::kListExpFieldNumber;
const int role_info_reward::kListMoneyFieldNumber;
const int role_info_reward::kListItemFieldNumber;
#endif  // !_MSC_VER

role_info_reward::role_info_reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_info_reward::InitAsDefaultInstance() {
  list_item_ = const_cast< ::dict_item*>(&::dict_item::default_instance());
}

role_info_reward::role_info_reward(const role_info_reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_info_reward::SharedCtor() {
  _cached_size_ = 0;
  list_item_ = nullptr;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_info_reward::~role_info_reward() {
  SharedDtor();
}

void role_info_reward::SharedDtor() {
  if (this != default_instance_) {
    delete list_item_;
  }
}

void role_info_reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_info_reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_info_reward_descriptor_;
}

const role_info_reward& role_info_reward::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Database_2eproto();
  return *default_instance_;
}

role_info_reward* role_info_reward::default_instance_ = nullptr;

role_info_reward* role_info_reward::New() const {
  return new role_info_reward;
}

void role_info_reward::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_list_item()) {
      if (list_item_ != nullptr) list_item_->::dict_item::Clear();
    }
  }
  list_exp_.Clear();
  list_money_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_info_reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated sint64 list_exp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_list_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 80, input, this->mutable_list_exp())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_list_exp())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_list_exp;
        if (input->ExpectTag(88)) goto parse_list_money;
        break;
      }

      // repeated sint64 list_money = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_list_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 88, input, this->mutable_list_money())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_list_money())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_list_money;
        if (input->ExpectTag(98)) goto parse_list_item;
        break;
      }

      // required .dict_item list_item = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_list_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_info_reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated sint64 list_exp = 10;
  for (int i = 0; i < this->list_exp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(
      10, this->list_exp(i), output);
  }

  // repeated sint64 list_money = 11;
  for (int i = 0; i < this->list_money_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(
      11, this->list_money(i), output);
  }

  // required .dict_item list_item = 12;
  if (has_list_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->list_item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_info_reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated sint64 list_exp = 10;
  for (int i = 0; i < this->list_exp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64ToArray(10, this->list_exp(i), target);
  }

  // repeated sint64 list_money = 11;
  for (int i = 0; i < this->list_money_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64ToArray(11, this->list_money(i), target);
  }

  // required .dict_item list_item = 12;
  if (has_list_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->list_item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_info_reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required .dict_item list_item = 12;
    if (has_list_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list_item());
    }

  }
  // repeated sint64 list_exp = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->list_exp_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->list_exp(i));
    }
    total_size += 1 * this->list_exp_size() + data_size;
  }

  // repeated sint64 list_money = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->list_money_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->list_money(i));
    }
    total_size += 1 * this->list_money_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_info_reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_info_reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_info_reward*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_info_reward::MergeFrom(const role_info_reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_exp_.MergeFrom(from.list_exp_);
  list_money_.MergeFrom(from.list_money_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_list_item()) {
      mutable_list_item()->::dict_item::MergeFrom(from.list_item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_info_reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_info_reward::CopyFrom(const role_info_reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_info_reward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void role_info_reward::Swap(role_info_reward* other) {
  if (other != this) {
    list_exp_.Swap(&other->list_exp_);
    list_money_.Swap(&other->list_money_);
    std::swap(list_item_, other->list_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_info_reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_info_reward_descriptor_;
  metadata.reflection = role_info_reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int roleinfo_extend_attr_1::kTestDataFieldNumber;
#endif  // !_MSC_VER

roleinfo_extend_attr_1::roleinfo_extend_attr_1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void roleinfo_extend_attr_1::InitAsDefaultInstance() {
}

roleinfo_extend_attr_1::roleinfo_extend_attr_1(const roleinfo_extend_attr_1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void roleinfo_extend_attr_1::SharedCtor() {
  _cached_size_ = 0;
  test_data_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

roleinfo_extend_attr_1::~roleinfo_extend_attr_1() {
  SharedDtor();
}

void roleinfo_extend_attr_1::SharedDtor() {
  if (this != default_instance_) {
  }
}

void roleinfo_extend_attr_1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* roleinfo_extend_attr_1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return roleinfo_extend_attr_1_descriptor_;
}

const roleinfo_extend_attr_1& roleinfo_extend_attr_1::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Database_2eproto();
  return *default_instance_;
}

roleinfo_extend_attr_1* roleinfo_extend_attr_1::default_instance_ = nullptr;

roleinfo_extend_attr_1* roleinfo_extend_attr_1::New() const {
  return new roleinfo_extend_attr_1;
}

void roleinfo_extend_attr_1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    test_data_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool roleinfo_extend_attr_1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 test_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &test_data_)));
          set_has_test_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void roleinfo_extend_attr_1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint64 test_data = 1;
  if (has_test_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->test_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* roleinfo_extend_attr_1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint64 test_data = 1;
  if (has_test_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->test_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int roleinfo_extend_attr_1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint64 test_data = 1;
    if (has_test_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->test_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void roleinfo_extend_attr_1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const roleinfo_extend_attr_1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const roleinfo_extend_attr_1*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void roleinfo_extend_attr_1::MergeFrom(const roleinfo_extend_attr_1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test_data()) {
      set_test_data(from.test_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void roleinfo_extend_attr_1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void roleinfo_extend_attr_1::CopyFrom(const roleinfo_extend_attr_1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool roleinfo_extend_attr_1::IsInitialized() const {

  return true;
}

void roleinfo_extend_attr_1::Swap(roleinfo_extend_attr_1* other) {
  if (other != this) {
    std::swap(test_data_, other->test_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata roleinfo_extend_attr_1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = roleinfo_extend_attr_1_descriptor_;
  metadata.reflection = roleinfo_extend_attr_1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int roleinfo_extend_attr_2::kTestDataFieldNumber;
#endif  // !_MSC_VER

roleinfo_extend_attr_2::roleinfo_extend_attr_2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void roleinfo_extend_attr_2::InitAsDefaultInstance() {
}

roleinfo_extend_attr_2::roleinfo_extend_attr_2(const roleinfo_extend_attr_2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void roleinfo_extend_attr_2::SharedCtor() {
  _cached_size_ = 0;
  test_data_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

roleinfo_extend_attr_2::~roleinfo_extend_attr_2() {
  SharedDtor();
}

void roleinfo_extend_attr_2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void roleinfo_extend_attr_2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* roleinfo_extend_attr_2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return roleinfo_extend_attr_2_descriptor_;
}

const roleinfo_extend_attr_2& roleinfo_extend_attr_2::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Database_2eproto();
  return *default_instance_;
}

roleinfo_extend_attr_2* roleinfo_extend_attr_2::default_instance_ = nullptr;

roleinfo_extend_attr_2* roleinfo_extend_attr_2::New() const {
  return new roleinfo_extend_attr_2;
}

void roleinfo_extend_attr_2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    test_data_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool roleinfo_extend_attr_2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 test_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &test_data_)));
          set_has_test_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void roleinfo_extend_attr_2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint64 test_data = 1;
  if (has_test_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->test_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* roleinfo_extend_attr_2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint64 test_data = 1;
  if (has_test_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->test_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int roleinfo_extend_attr_2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint64 test_data = 1;
    if (has_test_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->test_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void roleinfo_extend_attr_2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const roleinfo_extend_attr_2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const roleinfo_extend_attr_2*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void roleinfo_extend_attr_2::MergeFrom(const roleinfo_extend_attr_2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test_data()) {
      set_test_data(from.test_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void roleinfo_extend_attr_2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void roleinfo_extend_attr_2::CopyFrom(const roleinfo_extend_attr_2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool roleinfo_extend_attr_2::IsInitialized() const {

  return true;
}

void roleinfo_extend_attr_2::Swap(roleinfo_extend_attr_2* other) {
  if (other != this) {
    std::swap(test_data_, other->test_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata roleinfo_extend_attr_2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = roleinfo_extend_attr_2_descriptor_;
  metadata.reflection = roleinfo_extend_attr_2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int roleinfo_extend_attr_3::kTestDataFieldNumber;
#endif  // !_MSC_VER

roleinfo_extend_attr_3::roleinfo_extend_attr_3()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void roleinfo_extend_attr_3::InitAsDefaultInstance() {
}

roleinfo_extend_attr_3::roleinfo_extend_attr_3(const roleinfo_extend_attr_3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void roleinfo_extend_attr_3::SharedCtor() {
  _cached_size_ = 0;
  test_data_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

roleinfo_extend_attr_3::~roleinfo_extend_attr_3() {
  SharedDtor();
}

void roleinfo_extend_attr_3::SharedDtor() {
  if (this != default_instance_) {
  }
}

void roleinfo_extend_attr_3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* roleinfo_extend_attr_3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return roleinfo_extend_attr_3_descriptor_;
}

const roleinfo_extend_attr_3& roleinfo_extend_attr_3::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Database_2eproto();
  return *default_instance_;
}

roleinfo_extend_attr_3* roleinfo_extend_attr_3::default_instance_ = nullptr;

roleinfo_extend_attr_3* roleinfo_extend_attr_3::New() const {
  return new roleinfo_extend_attr_3;
}

void roleinfo_extend_attr_3::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    test_data_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool roleinfo_extend_attr_3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 test_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &test_data_)));
          set_has_test_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void roleinfo_extend_attr_3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint64 test_data = 1;
  if (has_test_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->test_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* roleinfo_extend_attr_3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint64 test_data = 1;
  if (has_test_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->test_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int roleinfo_extend_attr_3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint64 test_data = 1;
    if (has_test_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->test_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void roleinfo_extend_attr_3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const roleinfo_extend_attr_3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const roleinfo_extend_attr_3*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void roleinfo_extend_attr_3::MergeFrom(const roleinfo_extend_attr_3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test_data()) {
      set_test_data(from.test_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void roleinfo_extend_attr_3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void roleinfo_extend_attr_3::CopyFrom(const roleinfo_extend_attr_3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool roleinfo_extend_attr_3::IsInitialized() const {

  return true;
}

void roleinfo_extend_attr_3::Swap(roleinfo_extend_attr_3* other) {
  if (other != this) {
    std::swap(test_data_, other->test_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata roleinfo_extend_attr_3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = roleinfo_extend_attr_3_descriptor_;
  metadata.reflection = roleinfo_extend_attr_3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int roleinfo_extend_attr_4::kTestDataFieldNumber;
#endif  // !_MSC_VER

roleinfo_extend_attr_4::roleinfo_extend_attr_4()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void roleinfo_extend_attr_4::InitAsDefaultInstance() {
}

roleinfo_extend_attr_4::roleinfo_extend_attr_4(const roleinfo_extend_attr_4& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void roleinfo_extend_attr_4::SharedCtor() {
  _cached_size_ = 0;
  test_data_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

roleinfo_extend_attr_4::~roleinfo_extend_attr_4() {
  SharedDtor();
}

void roleinfo_extend_attr_4::SharedDtor() {
  if (this != default_instance_) {
  }
}

void roleinfo_extend_attr_4::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* roleinfo_extend_attr_4::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return roleinfo_extend_attr_4_descriptor_;
}

const roleinfo_extend_attr_4& roleinfo_extend_attr_4::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Database_2eproto();
  return *default_instance_;
}

roleinfo_extend_attr_4* roleinfo_extend_attr_4::default_instance_ = nullptr;

roleinfo_extend_attr_4* roleinfo_extend_attr_4::New() const {
  return new roleinfo_extend_attr_4;
}

void roleinfo_extend_attr_4::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    test_data_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool roleinfo_extend_attr_4::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 test_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &test_data_)));
          set_has_test_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void roleinfo_extend_attr_4::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint64 test_data = 1;
  if (has_test_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->test_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* roleinfo_extend_attr_4::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint64 test_data = 1;
  if (has_test_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->test_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int roleinfo_extend_attr_4::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint64 test_data = 1;
    if (has_test_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->test_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void roleinfo_extend_attr_4::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const roleinfo_extend_attr_4* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const roleinfo_extend_attr_4*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void roleinfo_extend_attr_4::MergeFrom(const roleinfo_extend_attr_4& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test_data()) {
      set_test_data(from.test_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void roleinfo_extend_attr_4::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void roleinfo_extend_attr_4::CopyFrom(const roleinfo_extend_attr_4& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool roleinfo_extend_attr_4::IsInitialized() const {

  return true;
}

void roleinfo_extend_attr_4::Swap(roleinfo_extend_attr_4* other) {
  if (other != this) {
    std::swap(test_data_, other->test_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata roleinfo_extend_attr_4::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = roleinfo_extend_attr_4_descriptor_;
  metadata.reflection = roleinfo_extend_attr_4_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int roleinfo_extend_attr_5::kTestDataFieldNumber;
#endif  // !_MSC_VER

roleinfo_extend_attr_5::roleinfo_extend_attr_5()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void roleinfo_extend_attr_5::InitAsDefaultInstance() {
}

roleinfo_extend_attr_5::roleinfo_extend_attr_5(const roleinfo_extend_attr_5& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void roleinfo_extend_attr_5::SharedCtor() {
  _cached_size_ = 0;
  test_data_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

roleinfo_extend_attr_5::~roleinfo_extend_attr_5() {
  SharedDtor();
}

void roleinfo_extend_attr_5::SharedDtor() {
  if (this != default_instance_) {
  }
}

void roleinfo_extend_attr_5::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* roleinfo_extend_attr_5::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return roleinfo_extend_attr_5_descriptor_;
}

const roleinfo_extend_attr_5& roleinfo_extend_attr_5::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Database_2eproto();
  return *default_instance_;
}

roleinfo_extend_attr_5* roleinfo_extend_attr_5::default_instance_ = nullptr;

roleinfo_extend_attr_5* roleinfo_extend_attr_5::New() const {
  return new roleinfo_extend_attr_5;
}

void roleinfo_extend_attr_5::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    test_data_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool roleinfo_extend_attr_5::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 test_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &test_data_)));
          set_has_test_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void roleinfo_extend_attr_5::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint64 test_data = 1;
  if (has_test_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->test_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* roleinfo_extend_attr_5::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint64 test_data = 1;
  if (has_test_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->test_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int roleinfo_extend_attr_5::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint64 test_data = 1;
    if (has_test_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->test_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void roleinfo_extend_attr_5::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const roleinfo_extend_attr_5* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const roleinfo_extend_attr_5*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void roleinfo_extend_attr_5::MergeFrom(const roleinfo_extend_attr_5& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test_data()) {
      set_test_data(from.test_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void roleinfo_extend_attr_5::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void roleinfo_extend_attr_5::CopyFrom(const roleinfo_extend_attr_5& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool roleinfo_extend_attr_5::IsInitialized() const {

  return true;
}

void roleinfo_extend_attr_5::Swap(roleinfo_extend_attr_5* other) {
  if (other != this) {
    std::swap(test_data_, other->test_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata roleinfo_extend_attr_5::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = roleinfo_extend_attr_5_descriptor_;
  metadata.reflection = roleinfo_extend_attr_5_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_info::kRoleIndexFieldNumber;
const int role_info::kAccountFieldNumber;
const int role_info::kPublicInfoFieldNumber;
const int role_info::kPrivateInfoFieldNumber;
const int role_info::kAttrInfoFieldNumber;
const int role_info::kMemoryInfoFieldNumber;
const int role_info::kSkillInfoFieldNumber;
const int role_info::kRewardInfoFieldNumber;
const int role_info::kConfigInfoFieldNumber;
const int role_info::kBagPageCountFieldNumber;
const int role_info::kItemsFieldNumber;
const int role_info::kEquipsFieldNumber;
const int role_info::kSummonpetsFieldNumber;
const int role_info::kFriendsFieldNumber;
const int role_info::kTaskInfoFieldNumber;
const int role_info::kListSuccessFieldNumber;
const int role_info::kListGuideFieldNumber;
const int role_info::kTimesFieldNumber;
const int role_info::kExtendAttr1FieldNumber;
const int role_info::kExtendAttr2FieldNumber;
const int role_info::kExtendAttr3FieldNumber;
const int role_info::kExtendAttr4FieldNumber;
const int role_info::kExtendAttr5FieldNumber;
#endif  // !_MSC_VER

role_info::role_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_info::InitAsDefaultInstance() {
  public_info_ = const_cast< ::role_info_public*>(&::role_info_public::default_instance());
  private_info_ = const_cast< ::role_info_private*>(&::role_info_private::default_instance());
  attr_info_ = const_cast< ::role_info_attr*>(&::role_info_attr::default_instance());
  memory_info_ = const_cast< ::role_info_memory*>(&::role_info_memory::default_instance());
  skill_info_ = const_cast< ::role_info_skill*>(&::role_info_skill::default_instance());
  reward_info_ = const_cast< ::role_info_reward*>(&::role_info_reward::default_instance());
  config_info_ = const_cast< ::role_info_config*>(&::role_info_config::default_instance());
  items_ = const_cast< ::dict_item*>(&::dict_item::default_instance());
  equips_ = const_cast< ::dict_item*>(&::dict_item::default_instance());
  summonpets_ = const_cast< ::dict_summonpet*>(&::dict_summonpet::default_instance());
  friends_ = const_cast< ::dict_game_friend*>(&::dict_game_friend::default_instance());
  task_info_ = const_cast< ::task*>(&::task::default_instance());
  list_success_ = const_cast< ::success*>(&::success::default_instance());
  list_guide_ = const_cast< ::guide*>(&::guide::default_instance());
  times_ = const_cast< ::times*>(&::times::default_instance());
  extend_attr1_ = const_cast< ::roleinfo_extend_attr_1*>(&::roleinfo_extend_attr_1::default_instance());
  extend_attr2_ = const_cast< ::roleinfo_extend_attr_2*>(&::roleinfo_extend_attr_2::default_instance());
  extend_attr3_ = const_cast< ::roleinfo_extend_attr_3*>(&::roleinfo_extend_attr_3::default_instance());
  extend_attr4_ = const_cast< ::roleinfo_extend_attr_4*>(&::roleinfo_extend_attr_4::default_instance());
  extend_attr5_ = const_cast< ::roleinfo_extend_attr_5*>(&::roleinfo_extend_attr_5::default_instance());
}

role_info::role_info(const role_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_info::SharedCtor() {
  _cached_size_ = 0;
  role_index_ = GOOGLE_LONGLONG(0);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  public_info_ = nullptr;
  private_info_ = nullptr;
  attr_info_ = nullptr;
  memory_info_ = nullptr;
  skill_info_ = nullptr;
  reward_info_ = nullptr;
  config_info_ = nullptr;
  bag_page_count_ = 0;
  items_ = nullptr;
  equips_ = nullptr;
  summonpets_ = nullptr;
  friends_ = nullptr;
  task_info_ = nullptr;
  list_success_ = nullptr;
  list_guide_ = nullptr;
  times_ = nullptr;
  extend_attr1_ = nullptr;
  extend_attr2_ = nullptr;
  extend_attr3_ = nullptr;
  extend_attr4_ = nullptr;
  extend_attr5_ = nullptr;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_info::~role_info() {
  SharedDtor();
}

void role_info::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
    delete public_info_;
    delete private_info_;
    delete attr_info_;
    delete memory_info_;
    delete skill_info_;
    delete reward_info_;
    delete config_info_;
    delete items_;
    delete equips_;
    delete summonpets_;
    delete friends_;
    delete task_info_;
    delete list_success_;
    delete list_guide_;
    delete times_;
    delete extend_attr1_;
    delete extend_attr2_;
    delete extend_attr3_;
    delete extend_attr4_;
    delete extend_attr5_;
  }
}

void role_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_info_descriptor_;
}

const role_info& role_info::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_Database_2eproto();
  return *default_instance_;
}

role_info* role_info::default_instance_ = nullptr;

role_info* role_info::New() const {
  return new role_info;
}

void role_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_index_ = GOOGLE_LONGLONG(0);
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_public_info()) {
      if (public_info_ != nullptr) public_info_->::role_info_public::Clear();
    }
    if (has_private_info()) {
      if (private_info_ != nullptr) private_info_->::role_info_private::Clear();
    }
    if (has_attr_info()) {
      if (attr_info_ != nullptr) attr_info_->::role_info_attr::Clear();
    }
    if (has_memory_info()) {
      if (memory_info_ != nullptr) memory_info_->::role_info_memory::Clear();
    }
    if (has_skill_info()) {
      if (skill_info_ != nullptr) skill_info_->::role_info_skill::Clear();
    }
    if (has_reward_info()) {
      if (reward_info_ != nullptr) reward_info_->::role_info_reward::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_config_info()) {
      if (config_info_ != nullptr) config_info_->::role_info_config::Clear();
    }
    bag_page_count_ = 0;
    if (has_items()) {
      if (items_ != nullptr) items_->::dict_item::Clear();
    }
    if (has_equips()) {
      if (equips_ != nullptr) equips_->::dict_item::Clear();
    }
    if (has_summonpets()) {
      if (summonpets_ != nullptr) summonpets_->::dict_summonpet::Clear();
    }
    if (has_friends()) {
      if (friends_ != nullptr) friends_->::dict_game_friend::Clear();
    }
    if (has_task_info()) {
      if (task_info_ != nullptr) task_info_->::task::Clear();
    }
    if (has_list_success()) {
      if (list_success_ != nullptr) list_success_->::success::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_list_guide()) {
      if (list_guide_ != nullptr) list_guide_->::guide::Clear();
    }
    if (has_times()) {
      if (times_ != nullptr) times_->::times::Clear();
    }
    if (has_extend_attr1()) {
      if (extend_attr1_ != nullptr) extend_attr1_->::roleinfo_extend_attr_1::Clear();
    }
    if (has_extend_attr2()) {
      if (extend_attr2_ != nullptr) extend_attr2_->::roleinfo_extend_attr_2::Clear();
    }
    if (has_extend_attr3()) {
      if (extend_attr3_ != nullptr) extend_attr3_->::roleinfo_extend_attr_3::Clear();
    }
    if (has_extend_attr4()) {
      if (extend_attr4_ != nullptr) extend_attr4_->::roleinfo_extend_attr_4::Clear();
    }
    if (has_extend_attr5()) {
      if (extend_attr5_ != nullptr) extend_attr5_->::roleinfo_extend_attr_5::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint64 role_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &role_index_)));
          set_has_role_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // required bytes account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_public_info;
        break;
      }

      // required .role_info_public public_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_public_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_public_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_private_info;
        break;
      }

      // optional .role_info_private private_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_private_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_private_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_attr_info;
        break;
      }

      // optional .role_info_attr attr_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attr_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_memory_info;
        break;
      }

      // optional .role_info_memory memory_info = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_memory_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_memory_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_skill_info;
        break;
      }

      // optional .role_info_skill skill_info = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_reward_info;
        break;
      }

      // optional .role_info_reward reward_info = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_config_info;
        break;
      }

      // optional .role_info_config config_info = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_config_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_bag_page_count;
        break;
      }

      // optional sint32 bag_page_count = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bag_page_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bag_page_count_)));
          set_has_bag_page_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(826)) goto parse_items;
        break;
      }

      // optional .dict_item items = 103;
      case 103: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(850)) goto parse_equips;
        break;
      }

      // optional .dict_item equips = 106;
      case 106: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equips()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1618)) goto parse_summonpets;
        break;
      }

      // optional .dict_summonpet summonpets = 202;
      case 202: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_summonpets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_summonpets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1626)) goto parse_friends;
        break;
      }

      // optional .dict_game_friend friends = 203;
      case 203: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friends()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1634)) goto parse_task_info;
        break;
      }

      // optional .task task_info = 204;
      case 204: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1642)) goto parse_list_success;
        break;
      }

      // optional .success list_success = 205;
      case 205: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_success:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_list_success()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1650)) goto parse_list_guide;
        break;
      }

      // optional .guide list_guide = 206;
      case 206: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_guide:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_list_guide()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1666)) goto parse_times;
        break;
      }

      // optional .times times = 208;
      case 208: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_times:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_times()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2410)) goto parse_extend_attr1;
        break;
      }

      // optional .roleinfo_extend_attr_1 extend_attr1 = 301;
      case 301: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extend_attr1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extend_attr1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2418)) goto parse_extend_attr2;
        break;
      }

      // optional .roleinfo_extend_attr_2 extend_attr2 = 302;
      case 302: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extend_attr2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extend_attr2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2426)) goto parse_extend_attr3;
        break;
      }

      // optional .roleinfo_extend_attr_3 extend_attr3 = 303;
      case 303: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extend_attr3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extend_attr3()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2434)) goto parse_extend_attr4;
        break;
      }

      // optional .roleinfo_extend_attr_4 extend_attr4 = 304;
      case 304: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extend_attr4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extend_attr4()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2442)) goto parse_extend_attr5;
        break;
      }

      // optional .roleinfo_extend_attr_5 extend_attr5 = 305;
      case 305: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extend_attr5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extend_attr5()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->role_index(), output);
  }

  // required bytes account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->account(), output);
  }

  // required .role_info_public public_info = 3;
  if (has_public_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->public_info(), output);
  }

  // optional .role_info_private private_info = 4;
  if (has_private_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->private_info(), output);
  }

  // optional .role_info_attr attr_info = 5;
  if (has_attr_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->attr_info(), output);
  }

  // optional .role_info_memory memory_info = 6;
  if (has_memory_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->memory_info(), output);
  }

  // optional .role_info_skill skill_info = 7;
  if (has_skill_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->skill_info(), output);
  }

  // optional .role_info_reward reward_info = 8;
  if (has_reward_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->reward_info(), output);
  }

  // optional .role_info_config config_info = 9;
  if (has_config_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->config_info(), output);
  }

  // optional sint32 bag_page_count = 10;
  if (has_bag_page_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(10, this->bag_page_count(), output);
  }

  // optional .dict_item items = 103;
  if (has_items()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103, this->items(), output);
  }

  // optional .dict_item equips = 106;
  if (has_equips()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      106, this->equips(), output);
  }

  // optional .dict_summonpet summonpets = 202;
  if (has_summonpets()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      202, this->summonpets(), output);
  }

  // optional .dict_game_friend friends = 203;
  if (has_friends()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      203, this->friends(), output);
  }

  // optional .task task_info = 204;
  if (has_task_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      204, this->task_info(), output);
  }

  // optional .success list_success = 205;
  if (has_list_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      205, this->list_success(), output);
  }

  // optional .guide list_guide = 206;
  if (has_list_guide()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      206, this->list_guide(), output);
  }

  // optional .times times = 208;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      208, this->times(), output);
  }

  // optional .roleinfo_extend_attr_1 extend_attr1 = 301;
  if (has_extend_attr1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      301, this->extend_attr1(), output);
  }

  // optional .roleinfo_extend_attr_2 extend_attr2 = 302;
  if (has_extend_attr2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      302, this->extend_attr2(), output);
  }

  // optional .roleinfo_extend_attr_3 extend_attr3 = 303;
  if (has_extend_attr3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      303, this->extend_attr3(), output);
  }

  // optional .roleinfo_extend_attr_4 extend_attr4 = 304;
  if (has_extend_attr4()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      304, this->extend_attr4(), output);
  }

  // optional .roleinfo_extend_attr_5 extend_attr5 = 305;
  if (has_extend_attr5()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      305, this->extend_attr5(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint64 role_index = 1;
  if (has_role_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->role_index(), target);
  }

  // required bytes account = 2;
  if (has_account()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->account(), target);
  }

  // required .role_info_public public_info = 3;
  if (has_public_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->public_info(), target);
  }

  // optional .role_info_private private_info = 4;
  if (has_private_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->private_info(), target);
  }

  // optional .role_info_attr attr_info = 5;
  if (has_attr_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->attr_info(), target);
  }

  // optional .role_info_memory memory_info = 6;
  if (has_memory_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->memory_info(), target);
  }

  // optional .role_info_skill skill_info = 7;
  if (has_skill_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->skill_info(), target);
  }

  // optional .role_info_reward reward_info = 8;
  if (has_reward_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->reward_info(), target);
  }

  // optional .role_info_config config_info = 9;
  if (has_config_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->config_info(), target);
  }

  // optional sint32 bag_page_count = 10;
  if (has_bag_page_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(10, this->bag_page_count(), target);
  }

  // optional .dict_item items = 103;
  if (has_items()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        103, this->items(), target);
  }

  // optional .dict_item equips = 106;
  if (has_equips()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        106, this->equips(), target);
  }

  // optional .dict_summonpet summonpets = 202;
  if (has_summonpets()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        202, this->summonpets(), target);
  }

  // optional .dict_game_friend friends = 203;
  if (has_friends()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        203, this->friends(), target);
  }

  // optional .task task_info = 204;
  if (has_task_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        204, this->task_info(), target);
  }

  // optional .success list_success = 205;
  if (has_list_success()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        205, this->list_success(), target);
  }

  // optional .guide list_guide = 206;
  if (has_list_guide()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        206, this->list_guide(), target);
  }

  // optional .times times = 208;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        208, this->times(), target);
  }

  // optional .roleinfo_extend_attr_1 extend_attr1 = 301;
  if (has_extend_attr1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        301, this->extend_attr1(), target);
  }

  // optional .roleinfo_extend_attr_2 extend_attr2 = 302;
  if (has_extend_attr2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        302, this->extend_attr2(), target);
  }

  // optional .roleinfo_extend_attr_3 extend_attr3 = 303;
  if (has_extend_attr3()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        303, this->extend_attr3(), target);
  }

  // optional .roleinfo_extend_attr_4 extend_attr4 = 304;
  if (has_extend_attr4()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        304, this->extend_attr4(), target);
  }

  // optional .roleinfo_extend_attr_5 extend_attr5 = 305;
  if (has_extend_attr5()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        305, this->extend_attr5(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint64 role_index = 1;
    if (has_role_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->role_index());
    }

    // required bytes account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

    // required .role_info_public public_info = 3;
    if (has_public_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->public_info());
    }

    // optional .role_info_private private_info = 4;
    if (has_private_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->private_info());
    }

    // optional .role_info_attr attr_info = 5;
    if (has_attr_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attr_info());
    }

    // optional .role_info_memory memory_info = 6;
    if (has_memory_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->memory_info());
    }

    // optional .role_info_skill skill_info = 7;
    if (has_skill_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill_info());
    }

    // optional .role_info_reward reward_info = 8;
    if (has_reward_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward_info());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .role_info_config config_info = 9;
    if (has_config_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->config_info());
    }

    // optional sint32 bag_page_count = 10;
    if (has_bag_page_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->bag_page_count());
    }

    // optional .dict_item items = 103;
    if (has_items()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items());
    }

    // optional .dict_item equips = 106;
    if (has_equips()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equips());
    }

    // optional .dict_summonpet summonpets = 202;
    if (has_summonpets()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->summonpets());
    }

    // optional .dict_game_friend friends = 203;
    if (has_friends()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friends());
    }

    // optional .task task_info = 204;
    if (has_task_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->task_info());
    }

    // optional .success list_success = 205;
    if (has_list_success()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list_success());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .guide list_guide = 206;
    if (has_list_guide()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list_guide());
    }

    // optional .times times = 208;
    if (has_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->times());
    }

    // optional .roleinfo_extend_attr_1 extend_attr1 = 301;
    if (has_extend_attr1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->extend_attr1());
    }

    // optional .roleinfo_extend_attr_2 extend_attr2 = 302;
    if (has_extend_attr2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->extend_attr2());
    }

    // optional .roleinfo_extend_attr_3 extend_attr3 = 303;
    if (has_extend_attr3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->extend_attr3());
    }

    // optional .roleinfo_extend_attr_4 extend_attr4 = 304;
    if (has_extend_attr4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->extend_attr4());
    }

    // optional .roleinfo_extend_attr_5 extend_attr5 = 305;
    if (has_extend_attr5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->extend_attr5());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_info*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_info::MergeFrom(const role_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_index()) {
      set_role_index(from.role_index());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_public_info()) {
      mutable_public_info()->::role_info_public::MergeFrom(from.public_info());
    }
    if (from.has_private_info()) {
      mutable_private_info()->::role_info_private::MergeFrom(from.private_info());
    }
    if (from.has_attr_info()) {
      mutable_attr_info()->::role_info_attr::MergeFrom(from.attr_info());
    }
    if (from.has_memory_info()) {
      mutable_memory_info()->::role_info_memory::MergeFrom(from.memory_info());
    }
    if (from.has_skill_info()) {
      mutable_skill_info()->::role_info_skill::MergeFrom(from.skill_info());
    }
    if (from.has_reward_info()) {
      mutable_reward_info()->::role_info_reward::MergeFrom(from.reward_info());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_config_info()) {
      mutable_config_info()->::role_info_config::MergeFrom(from.config_info());
    }
    if (from.has_bag_page_count()) {
      set_bag_page_count(from.bag_page_count());
    }
    if (from.has_items()) {
      mutable_items()->::dict_item::MergeFrom(from.items());
    }
    if (from.has_equips()) {
      mutable_equips()->::dict_item::MergeFrom(from.equips());
    }
    if (from.has_summonpets()) {
      mutable_summonpets()->::dict_summonpet::MergeFrom(from.summonpets());
    }
    if (from.has_friends()) {
      mutable_friends()->::dict_game_friend::MergeFrom(from.friends());
    }
    if (from.has_task_info()) {
      mutable_task_info()->::task::MergeFrom(from.task_info());
    }
    if (from.has_list_success()) {
      mutable_list_success()->::success::MergeFrom(from.list_success());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_list_guide()) {
      mutable_list_guide()->::guide::MergeFrom(from.list_guide());
    }
    if (from.has_times()) {
      mutable_times()->::times::MergeFrom(from.times());
    }
    if (from.has_extend_attr1()) {
      mutable_extend_attr1()->::roleinfo_extend_attr_1::MergeFrom(from.extend_attr1());
    }
    if (from.has_extend_attr2()) {
      mutable_extend_attr2()->::roleinfo_extend_attr_2::MergeFrom(from.extend_attr2());
    }
    if (from.has_extend_attr3()) {
      mutable_extend_attr3()->::roleinfo_extend_attr_3::MergeFrom(from.extend_attr3());
    }
    if (from.has_extend_attr4()) {
      mutable_extend_attr4()->::roleinfo_extend_attr_4::MergeFrom(from.extend_attr4());
    }
    if (from.has_extend_attr5()) {
      mutable_extend_attr5()->::roleinfo_extend_attr_5::MergeFrom(from.extend_attr5());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_info::CopyFrom(const role_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_private_info()) {
    if (!this->private_info().IsInitialized()) return false;
  }
  if (has_reward_info()) {
    if (!this->reward_info().IsInitialized()) return false;
  }
  if (has_summonpets()) {
    if (!this->summonpets().IsInitialized()) return false;
  }
  if (has_friends()) {
    if (!this->friends().IsInitialized()) return false;
  }
  if (has_task_info()) {
    if (!this->task_info().IsInitialized()) return false;
  }
  return true;
}

void role_info::Swap(role_info* other) {
  if (other != this) {
    std::swap(role_index_, other->role_index_);
    std::swap(account_, other->account_);
    std::swap(public_info_, other->public_info_);
    std::swap(private_info_, other->private_info_);
    std::swap(attr_info_, other->attr_info_);
    std::swap(memory_info_, other->memory_info_);
    std::swap(skill_info_, other->skill_info_);
    std::swap(reward_info_, other->reward_info_);
    std::swap(config_info_, other->config_info_);
    std::swap(bag_page_count_, other->bag_page_count_);
    std::swap(items_, other->items_);
    std::swap(equips_, other->equips_);
    std::swap(summonpets_, other->summonpets_);
    std::swap(friends_, other->friends_);
    std::swap(task_info_, other->task_info_);
    std::swap(list_success_, other->list_success_);
    std::swap(list_guide_, other->list_guide_);
    std::swap(times_, other->times_);
    std::swap(extend_attr1_, other->extend_attr1_);
    std::swap(extend_attr2_, other->extend_attr2_);
    std::swap(extend_attr3_, other->extend_attr3_);
    std::swap(extend_attr4_, other->extend_attr4_);
    std::swap(extend_attr5_, other->extend_attr5_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_info_descriptor_;
  metadata.reflection = role_info_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
