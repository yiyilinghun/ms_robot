// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Task.proto

#ifndef PROTOBUF_Task_2eproto__INCLUDED
#define PROTOBUF_Task_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "EnumDef.pb.h"
#include "Common.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Task_2eproto();
void protobuf_AssignDesc_Task_2eproto();
void protobuf_ShutdownFile_Task_2eproto();

class task_info;
class S2C_SyncCanAcceptTaskInfo;
class S2C_SyncAcceptedTaskInfo;
class C2S_AcceptTask;
class S2C_AcceptTask;
class C2S_CompleteTask;
class S2C_CompleteTask;

// ===================================================================

class task_info : public ::google::protobuf::Message {
 public:
  task_info();
  virtual ~task_info();

  task_info(const task_info& from);

  inline task_info& operator=(const task_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const task_info& default_instance();

  void Swap(task_info* other);

  // implements Message ----------------------------------------------

  task_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const task_info& from);
  void MergeFrom(const task_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint32 task_id = 1;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  inline ::google::protobuf::int32 task_id() const;
  inline void set_task_id(::google::protobuf::int32 value);

  // required sint32 task_type = 2;
  inline bool has_task_type() const;
  inline void clear_task_type();
  static const int kTaskTypeFieldNumber = 2;
  inline ::google::protobuf::int32 task_type() const;
  inline void set_task_type(::google::protobuf::int32 value);

  // required bytes task_name_id = 3;
  inline bool has_task_name_id() const;
  inline void clear_task_name_id();
  static const int kTaskNameIdFieldNumber = 3;
  inline const ::std::string& task_name_id() const;
  inline void set_task_name_id(const ::std::string& value);
  inline void set_task_name_id(const char* value);
  inline void set_task_name_id(const void* value, size_t size);
  inline ::std::string* mutable_task_name_id();
  inline ::std::string* release_task_name_id();
  inline void set_allocated_task_name_id(::std::string* task_name_id);

  // required bytes task_des = 4;
  inline bool has_task_des() const;
  inline void clear_task_des();
  static const int kTaskDesFieldNumber = 4;
  inline const ::std::string& task_des() const;
  inline void set_task_des(const ::std::string& value);
  inline void set_task_des(const char* value);
  inline void set_task_des(const void* value, size_t size);
  inline ::std::string* mutable_task_des();
  inline ::std::string* release_task_des();
  inline void set_allocated_task_des(::std::string* task_des);

  // required sint32 task_npc = 5;
  inline bool has_task_npc() const;
  inline void clear_task_npc();
  static const int kTaskNpcFieldNumber = 5;
  inline ::google::protobuf::int32 task_npc() const;
  inline void set_task_npc(::google::protobuf::int32 value);

  // repeated .item_config list_task_reward = 6;
  inline int list_task_reward_size() const;
  inline void clear_list_task_reward();
  static const int kListTaskRewardFieldNumber = 6;
  inline const ::item_config& list_task_reward(int index) const;
  inline ::item_config* mutable_list_task_reward(int index);
  inline ::item_config* add_list_task_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::item_config >&
      list_task_reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::item_config >*
      mutable_list_task_reward();

  // repeated sint64 list_task_progress_param = 7;
  inline int list_task_progress_param_size() const;
  inline void clear_list_task_progress_param();
  static const int kListTaskProgressParamFieldNumber = 7;
  inline ::google::protobuf::int64 list_task_progress_param(int index) const;
  inline void set_list_task_progress_param(int index, ::google::protobuf::int64 value);
  inline void add_list_task_progress_param(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      list_task_progress_param() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_list_task_progress_param();

  // required bool task_can_complete = 8;
  inline bool has_task_can_complete() const;
  inline void clear_task_can_complete();
  static const int kTaskCanCompleteFieldNumber = 8;
  inline bool task_can_complete() const;
  inline void set_task_can_complete(bool value);

  // @@protoc_insertion_point(class_scope:task_info)
 private:
  inline void set_has_task_id();
  inline void clear_has_task_id();
  inline void set_has_task_type();
  inline void clear_has_task_type();
  inline void set_has_task_name_id();
  inline void clear_has_task_name_id();
  inline void set_has_task_des();
  inline void clear_has_task_des();
  inline void set_has_task_npc();
  inline void clear_has_task_npc();
  inline void set_has_task_can_complete();
  inline void clear_has_task_can_complete();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 task_id_;
  ::google::protobuf::int32 task_type_;
  ::std::string* task_name_id_;
  ::std::string* task_des_;
  ::google::protobuf::RepeatedPtrField< ::item_config > list_task_reward_;
  ::google::protobuf::int32 task_npc_;
  bool task_can_complete_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > list_task_progress_param_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_Task_2eproto();
  friend void protobuf_AssignDesc_Task_2eproto();
  friend void protobuf_ShutdownFile_Task_2eproto();

  void InitAsDefaultInstance();
  static task_info* default_instance_;
};
// -------------------------------------------------------------------

class S2C_SyncCanAcceptTaskInfo : public ::google::protobuf::Message {
 public:
  S2C_SyncCanAcceptTaskInfo();
  virtual ~S2C_SyncCanAcceptTaskInfo();

  S2C_SyncCanAcceptTaskInfo(const S2C_SyncCanAcceptTaskInfo& from);

  inline S2C_SyncCanAcceptTaskInfo& operator=(const S2C_SyncCanAcceptTaskInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_SyncCanAcceptTaskInfo& default_instance();

  void Swap(S2C_SyncCanAcceptTaskInfo* other);

  // implements Message ----------------------------------------------

  S2C_SyncCanAcceptTaskInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_SyncCanAcceptTaskInfo& from);
  void MergeFrom(const S2C_SyncCanAcceptTaskInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .task_info list_task = 1;
  inline int list_task_size() const;
  inline void clear_list_task();
  static const int kListTaskFieldNumber = 1;
  inline const ::task_info& list_task(int index) const;
  inline ::task_info* mutable_list_task(int index);
  inline ::task_info* add_list_task();
  inline const ::google::protobuf::RepeatedPtrField< ::task_info >&
      list_task() const;
  inline ::google::protobuf::RepeatedPtrField< ::task_info >*
      mutable_list_task();

  // @@protoc_insertion_point(class_scope:S2C_SyncCanAcceptTaskInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::task_info > list_task_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Task_2eproto();
  friend void protobuf_AssignDesc_Task_2eproto();
  friend void protobuf_ShutdownFile_Task_2eproto();

  void InitAsDefaultInstance();
  static S2C_SyncCanAcceptTaskInfo* default_instance_;
};
// -------------------------------------------------------------------

class S2C_SyncAcceptedTaskInfo : public ::google::protobuf::Message {
 public:
  S2C_SyncAcceptedTaskInfo();
  virtual ~S2C_SyncAcceptedTaskInfo();

  S2C_SyncAcceptedTaskInfo(const S2C_SyncAcceptedTaskInfo& from);

  inline S2C_SyncAcceptedTaskInfo& operator=(const S2C_SyncAcceptedTaskInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_SyncAcceptedTaskInfo& default_instance();

  void Swap(S2C_SyncAcceptedTaskInfo* other);

  // implements Message ----------------------------------------------

  S2C_SyncAcceptedTaskInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_SyncAcceptedTaskInfo& from);
  void MergeFrom(const S2C_SyncAcceptedTaskInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .task_info list_task = 1;
  inline int list_task_size() const;
  inline void clear_list_task();
  static const int kListTaskFieldNumber = 1;
  inline const ::task_info& list_task(int index) const;
  inline ::task_info* mutable_list_task(int index);
  inline ::task_info* add_list_task();
  inline const ::google::protobuf::RepeatedPtrField< ::task_info >&
      list_task() const;
  inline ::google::protobuf::RepeatedPtrField< ::task_info >*
      mutable_list_task();

  // @@protoc_insertion_point(class_scope:S2C_SyncAcceptedTaskInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::task_info > list_task_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Task_2eproto();
  friend void protobuf_AssignDesc_Task_2eproto();
  friend void protobuf_ShutdownFile_Task_2eproto();

  void InitAsDefaultInstance();
  static S2C_SyncAcceptedTaskInfo* default_instance_;
};
// -------------------------------------------------------------------

class C2S_AcceptTask : public ::google::protobuf::Message {
 public:
  C2S_AcceptTask();
  virtual ~C2S_AcceptTask();

  C2S_AcceptTask(const C2S_AcceptTask& from);

  inline C2S_AcceptTask& operator=(const C2S_AcceptTask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2S_AcceptTask& default_instance();

  void Swap(C2S_AcceptTask* other);

  // implements Message ----------------------------------------------

  C2S_AcceptTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2S_AcceptTask& from);
  void MergeFrom(const C2S_AcceptTask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint64 role_index = 1;
  inline bool has_role_index() const;
  inline void clear_role_index();
  static const int kRoleIndexFieldNumber = 1;
  inline ::google::protobuf::int64 role_index() const;
  inline void set_role_index(::google::protobuf::int64 value);

  // required sint32 task_id = 2;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 2;
  inline ::google::protobuf::int32 task_id() const;
  inline void set_task_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:C2S_AcceptTask)
 private:
  inline void set_has_role_index();
  inline void clear_has_role_index();
  inline void set_has_task_id();
  inline void clear_has_task_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 role_index_;
  ::google::protobuf::int32 task_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Task_2eproto();
  friend void protobuf_AssignDesc_Task_2eproto();
  friend void protobuf_ShutdownFile_Task_2eproto();

  void InitAsDefaultInstance();
  static C2S_AcceptTask* default_instance_;
};
// -------------------------------------------------------------------

class S2C_AcceptTask : public ::google::protobuf::Message {
 public:
  S2C_AcceptTask();
  virtual ~S2C_AcceptTask();

  S2C_AcceptTask(const S2C_AcceptTask& from);

  inline S2C_AcceptTask& operator=(const S2C_AcceptTask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_AcceptTask& default_instance();

  void Swap(S2C_AcceptTask* other);

  // implements Message ----------------------------------------------

  S2C_AcceptTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_AcceptTask& from);
  void MergeFrom(const S2C_AcceptTask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint64 role_index = 1;
  inline bool has_role_index() const;
  inline void clear_role_index();
  static const int kRoleIndexFieldNumber = 1;
  inline ::google::protobuf::int64 role_index() const;
  inline void set_role_index(::google::protobuf::int64 value);

  // required sint32 task_id = 2;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 2;
  inline ::google::protobuf::int32 task_id() const;
  inline void set_task_id(::google::protobuf::int32 value);

  // required bool ret_code = 3;
  inline bool has_ret_code() const;
  inline void clear_ret_code();
  static const int kRetCodeFieldNumber = 3;
  inline bool ret_code() const;
  inline void set_ret_code(bool value);

  // @@protoc_insertion_point(class_scope:S2C_AcceptTask)
 private:
  inline void set_has_role_index();
  inline void clear_has_role_index();
  inline void set_has_task_id();
  inline void clear_has_task_id();
  inline void set_has_ret_code();
  inline void clear_has_ret_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 role_index_;
  ::google::protobuf::int32 task_id_;
  bool ret_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Task_2eproto();
  friend void protobuf_AssignDesc_Task_2eproto();
  friend void protobuf_ShutdownFile_Task_2eproto();

  void InitAsDefaultInstance();
  static S2C_AcceptTask* default_instance_;
};
// -------------------------------------------------------------------

class C2S_CompleteTask : public ::google::protobuf::Message {
 public:
  C2S_CompleteTask();
  virtual ~C2S_CompleteTask();

  C2S_CompleteTask(const C2S_CompleteTask& from);

  inline C2S_CompleteTask& operator=(const C2S_CompleteTask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2S_CompleteTask& default_instance();

  void Swap(C2S_CompleteTask* other);

  // implements Message ----------------------------------------------

  C2S_CompleteTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2S_CompleteTask& from);
  void MergeFrom(const C2S_CompleteTask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint64 role_index = 1;
  inline bool has_role_index() const;
  inline void clear_role_index();
  static const int kRoleIndexFieldNumber = 1;
  inline ::google::protobuf::int64 role_index() const;
  inline void set_role_index(::google::protobuf::int64 value);

  // required sint32 task_id = 2;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 2;
  inline ::google::protobuf::int32 task_id() const;
  inline void set_task_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:C2S_CompleteTask)
 private:
  inline void set_has_role_index();
  inline void clear_has_role_index();
  inline void set_has_task_id();
  inline void clear_has_task_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 role_index_;
  ::google::protobuf::int32 task_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Task_2eproto();
  friend void protobuf_AssignDesc_Task_2eproto();
  friend void protobuf_ShutdownFile_Task_2eproto();

  void InitAsDefaultInstance();
  static C2S_CompleteTask* default_instance_;
};
// -------------------------------------------------------------------

class S2C_CompleteTask : public ::google::protobuf::Message {
 public:
  S2C_CompleteTask();
  virtual ~S2C_CompleteTask();

  S2C_CompleteTask(const S2C_CompleteTask& from);

  inline S2C_CompleteTask& operator=(const S2C_CompleteTask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_CompleteTask& default_instance();

  void Swap(S2C_CompleteTask* other);

  // implements Message ----------------------------------------------

  S2C_CompleteTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_CompleteTask& from);
  void MergeFrom(const S2C_CompleteTask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint64 role_index = 1;
  inline bool has_role_index() const;
  inline void clear_role_index();
  static const int kRoleIndexFieldNumber = 1;
  inline ::google::protobuf::int64 role_index() const;
  inline void set_role_index(::google::protobuf::int64 value);

  // required sint32 task_id = 2;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 2;
  inline ::google::protobuf::int32 task_id() const;
  inline void set_task_id(::google::protobuf::int32 value);

  // required bool ret_code = 3;
  inline bool has_ret_code() const;
  inline void clear_ret_code();
  static const int kRetCodeFieldNumber = 3;
  inline bool ret_code() const;
  inline void set_ret_code(bool value);

  // @@protoc_insertion_point(class_scope:S2C_CompleteTask)
 private:
  inline void set_has_role_index();
  inline void clear_has_role_index();
  inline void set_has_task_id();
  inline void clear_has_task_id();
  inline void set_has_ret_code();
  inline void clear_has_ret_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 role_index_;
  ::google::protobuf::int32 task_id_;
  bool ret_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Task_2eproto();
  friend void protobuf_AssignDesc_Task_2eproto();
  friend void protobuf_ShutdownFile_Task_2eproto();

  void InitAsDefaultInstance();
  static S2C_CompleteTask* default_instance_;
};
// ===================================================================


// ===================================================================

// task_info

// required sint32 task_id = 1;
inline bool task_info::has_task_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void task_info::set_has_task_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void task_info::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void task_info::clear_task_id() {
  task_id_ = 0;
  clear_has_task_id();
}
inline ::google::protobuf::int32 task_info::task_id() const {
  return task_id_;
}
inline void task_info::set_task_id(::google::protobuf::int32 value) {
  set_has_task_id();
  task_id_ = value;
}

// required sint32 task_type = 2;
inline bool task_info::has_task_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void task_info::set_has_task_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void task_info::clear_has_task_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void task_info::clear_task_type() {
  task_type_ = 0;
  clear_has_task_type();
}
inline ::google::protobuf::int32 task_info::task_type() const {
  return task_type_;
}
inline void task_info::set_task_type(::google::protobuf::int32 value) {
  set_has_task_type();
  task_type_ = value;
}

// required bytes task_name_id = 3;
inline bool task_info::has_task_name_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void task_info::set_has_task_name_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void task_info::clear_has_task_name_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void task_info::clear_task_name_id() {
  if (task_name_id_ != &::google::protobuf::internal::kEmptyString) {
    task_name_id_->clear();
  }
  clear_has_task_name_id();
}
inline const ::std::string& task_info::task_name_id() const {
  return *task_name_id_;
}
inline void task_info::set_task_name_id(const ::std::string& value) {
  set_has_task_name_id();
  if (task_name_id_ == &::google::protobuf::internal::kEmptyString) {
    task_name_id_ = new ::std::string;
  }
  task_name_id_->assign(value);
}
inline void task_info::set_task_name_id(const char* value) {
  set_has_task_name_id();
  if (task_name_id_ == &::google::protobuf::internal::kEmptyString) {
    task_name_id_ = new ::std::string;
  }
  task_name_id_->assign(value);
}
inline void task_info::set_task_name_id(const void* value, size_t size) {
  set_has_task_name_id();
  if (task_name_id_ == &::google::protobuf::internal::kEmptyString) {
    task_name_id_ = new ::std::string;
  }
  task_name_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* task_info::mutable_task_name_id() {
  set_has_task_name_id();
  if (task_name_id_ == &::google::protobuf::internal::kEmptyString) {
    task_name_id_ = new ::std::string;
  }
  return task_name_id_;
}
inline ::std::string* task_info::release_task_name_id() {
  clear_has_task_name_id();
  if (task_name_id_ == &::google::protobuf::internal::kEmptyString) {
    return nullptr;
  } else {
    ::std::string* temp = task_name_id_;
    task_name_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void task_info::set_allocated_task_name_id(::std::string* task_name_id) {
  if (task_name_id_ != &::google::protobuf::internal::kEmptyString) {
    delete task_name_id_;
  }
  if (task_name_id) {
    set_has_task_name_id();
    task_name_id_ = task_name_id;
  } else {
    clear_has_task_name_id();
    task_name_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes task_des = 4;
inline bool task_info::has_task_des() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void task_info::set_has_task_des() {
  _has_bits_[0] |= 0x00000008u;
}
inline void task_info::clear_has_task_des() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void task_info::clear_task_des() {
  if (task_des_ != &::google::protobuf::internal::kEmptyString) {
    task_des_->clear();
  }
  clear_has_task_des();
}
inline const ::std::string& task_info::task_des() const {
  return *task_des_;
}
inline void task_info::set_task_des(const ::std::string& value) {
  set_has_task_des();
  if (task_des_ == &::google::protobuf::internal::kEmptyString) {
    task_des_ = new ::std::string;
  }
  task_des_->assign(value);
}
inline void task_info::set_task_des(const char* value) {
  set_has_task_des();
  if (task_des_ == &::google::protobuf::internal::kEmptyString) {
    task_des_ = new ::std::string;
  }
  task_des_->assign(value);
}
inline void task_info::set_task_des(const void* value, size_t size) {
  set_has_task_des();
  if (task_des_ == &::google::protobuf::internal::kEmptyString) {
    task_des_ = new ::std::string;
  }
  task_des_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* task_info::mutable_task_des() {
  set_has_task_des();
  if (task_des_ == &::google::protobuf::internal::kEmptyString) {
    task_des_ = new ::std::string;
  }
  return task_des_;
}
inline ::std::string* task_info::release_task_des() {
  clear_has_task_des();
  if (task_des_ == &::google::protobuf::internal::kEmptyString) {
    return nullptr;
  } else {
    ::std::string* temp = task_des_;
    task_des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void task_info::set_allocated_task_des(::std::string* task_des) {
  if (task_des_ != &::google::protobuf::internal::kEmptyString) {
    delete task_des_;
  }
  if (task_des) {
    set_has_task_des();
    task_des_ = task_des;
  } else {
    clear_has_task_des();
    task_des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required sint32 task_npc = 5;
inline bool task_info::has_task_npc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void task_info::set_has_task_npc() {
  _has_bits_[0] |= 0x00000010u;
}
inline void task_info::clear_has_task_npc() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void task_info::clear_task_npc() {
  task_npc_ = 0;
  clear_has_task_npc();
}
inline ::google::protobuf::int32 task_info::task_npc() const {
  return task_npc_;
}
inline void task_info::set_task_npc(::google::protobuf::int32 value) {
  set_has_task_npc();
  task_npc_ = value;
}

// repeated .item_config list_task_reward = 6;
inline int task_info::list_task_reward_size() const {
  return list_task_reward_.size();
}
inline void task_info::clear_list_task_reward() {
  list_task_reward_.Clear();
}
inline const ::item_config& task_info::list_task_reward(int index) const {
  return list_task_reward_.Get(index);
}
inline ::item_config* task_info::mutable_list_task_reward(int index) {
  return list_task_reward_.Mutable(index);
}
inline ::item_config* task_info::add_list_task_reward() {
  return list_task_reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::item_config >&
task_info::list_task_reward() const {
  return list_task_reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::item_config >*
task_info::mutable_list_task_reward() {
  return &list_task_reward_;
}

// repeated sint64 list_task_progress_param = 7;
inline int task_info::list_task_progress_param_size() const {
  return list_task_progress_param_.size();
}
inline void task_info::clear_list_task_progress_param() {
  list_task_progress_param_.Clear();
}
inline ::google::protobuf::int64 task_info::list_task_progress_param(int index) const {
  return list_task_progress_param_.Get(index);
}
inline void task_info::set_list_task_progress_param(int index, ::google::protobuf::int64 value) {
  list_task_progress_param_.Set(index, value);
}
inline void task_info::add_list_task_progress_param(::google::protobuf::int64 value) {
  list_task_progress_param_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
task_info::list_task_progress_param() const {
  return list_task_progress_param_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
task_info::mutable_list_task_progress_param() {
  return &list_task_progress_param_;
}

// required bool task_can_complete = 8;
inline bool task_info::has_task_can_complete() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void task_info::set_has_task_can_complete() {
  _has_bits_[0] |= 0x00000080u;
}
inline void task_info::clear_has_task_can_complete() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void task_info::clear_task_can_complete() {
  task_can_complete_ = false;
  clear_has_task_can_complete();
}
inline bool task_info::task_can_complete() const {
  return task_can_complete_;
}
inline void task_info::set_task_can_complete(bool value) {
  set_has_task_can_complete();
  task_can_complete_ = value;
}

// -------------------------------------------------------------------

// S2C_SyncCanAcceptTaskInfo

// repeated .task_info list_task = 1;
inline int S2C_SyncCanAcceptTaskInfo::list_task_size() const {
  return list_task_.size();
}
inline void S2C_SyncCanAcceptTaskInfo::clear_list_task() {
  list_task_.Clear();
}
inline const ::task_info& S2C_SyncCanAcceptTaskInfo::list_task(int index) const {
  return list_task_.Get(index);
}
inline ::task_info* S2C_SyncCanAcceptTaskInfo::mutable_list_task(int index) {
  return list_task_.Mutable(index);
}
inline ::task_info* S2C_SyncCanAcceptTaskInfo::add_list_task() {
  return list_task_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::task_info >&
S2C_SyncCanAcceptTaskInfo::list_task() const {
  return list_task_;
}
inline ::google::protobuf::RepeatedPtrField< ::task_info >*
S2C_SyncCanAcceptTaskInfo::mutable_list_task() {
  return &list_task_;
}

// -------------------------------------------------------------------

// S2C_SyncAcceptedTaskInfo

// repeated .task_info list_task = 1;
inline int S2C_SyncAcceptedTaskInfo::list_task_size() const {
  return list_task_.size();
}
inline void S2C_SyncAcceptedTaskInfo::clear_list_task() {
  list_task_.Clear();
}
inline const ::task_info& S2C_SyncAcceptedTaskInfo::list_task(int index) const {
  return list_task_.Get(index);
}
inline ::task_info* S2C_SyncAcceptedTaskInfo::mutable_list_task(int index) {
  return list_task_.Mutable(index);
}
inline ::task_info* S2C_SyncAcceptedTaskInfo::add_list_task() {
  return list_task_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::task_info >&
S2C_SyncAcceptedTaskInfo::list_task() const {
  return list_task_;
}
inline ::google::protobuf::RepeatedPtrField< ::task_info >*
S2C_SyncAcceptedTaskInfo::mutable_list_task() {
  return &list_task_;
}

// -------------------------------------------------------------------

// C2S_AcceptTask

// required sint64 role_index = 1;
inline bool C2S_AcceptTask::has_role_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2S_AcceptTask::set_has_role_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2S_AcceptTask::clear_has_role_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2S_AcceptTask::clear_role_index() {
  role_index_ = GOOGLE_LONGLONG(0);
  clear_has_role_index();
}
inline ::google::protobuf::int64 C2S_AcceptTask::role_index() const {
  return role_index_;
}
inline void C2S_AcceptTask::set_role_index(::google::protobuf::int64 value) {
  set_has_role_index();
  role_index_ = value;
}

// required sint32 task_id = 2;
inline bool C2S_AcceptTask::has_task_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2S_AcceptTask::set_has_task_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2S_AcceptTask::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2S_AcceptTask::clear_task_id() {
  task_id_ = 0;
  clear_has_task_id();
}
inline ::google::protobuf::int32 C2S_AcceptTask::task_id() const {
  return task_id_;
}
inline void C2S_AcceptTask::set_task_id(::google::protobuf::int32 value) {
  set_has_task_id();
  task_id_ = value;
}

// -------------------------------------------------------------------

// S2C_AcceptTask

// required sint64 role_index = 1;
inline bool S2C_AcceptTask::has_role_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2C_AcceptTask::set_has_role_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2C_AcceptTask::clear_has_role_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2C_AcceptTask::clear_role_index() {
  role_index_ = GOOGLE_LONGLONG(0);
  clear_has_role_index();
}
inline ::google::protobuf::int64 S2C_AcceptTask::role_index() const {
  return role_index_;
}
inline void S2C_AcceptTask::set_role_index(::google::protobuf::int64 value) {
  set_has_role_index();
  role_index_ = value;
}

// required sint32 task_id = 2;
inline bool S2C_AcceptTask::has_task_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2C_AcceptTask::set_has_task_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2C_AcceptTask::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2C_AcceptTask::clear_task_id() {
  task_id_ = 0;
  clear_has_task_id();
}
inline ::google::protobuf::int32 S2C_AcceptTask::task_id() const {
  return task_id_;
}
inline void S2C_AcceptTask::set_task_id(::google::protobuf::int32 value) {
  set_has_task_id();
  task_id_ = value;
}

// required bool ret_code = 3;
inline bool S2C_AcceptTask::has_ret_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2C_AcceptTask::set_has_ret_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2C_AcceptTask::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2C_AcceptTask::clear_ret_code() {
  ret_code_ = false;
  clear_has_ret_code();
}
inline bool S2C_AcceptTask::ret_code() const {
  return ret_code_;
}
inline void S2C_AcceptTask::set_ret_code(bool value) {
  set_has_ret_code();
  ret_code_ = value;
}

// -------------------------------------------------------------------

// C2S_CompleteTask

// required sint64 role_index = 1;
inline bool C2S_CompleteTask::has_role_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2S_CompleteTask::set_has_role_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2S_CompleteTask::clear_has_role_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2S_CompleteTask::clear_role_index() {
  role_index_ = GOOGLE_LONGLONG(0);
  clear_has_role_index();
}
inline ::google::protobuf::int64 C2S_CompleteTask::role_index() const {
  return role_index_;
}
inline void C2S_CompleteTask::set_role_index(::google::protobuf::int64 value) {
  set_has_role_index();
  role_index_ = value;
}

// required sint32 task_id = 2;
inline bool C2S_CompleteTask::has_task_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2S_CompleteTask::set_has_task_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2S_CompleteTask::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2S_CompleteTask::clear_task_id() {
  task_id_ = 0;
  clear_has_task_id();
}
inline ::google::protobuf::int32 C2S_CompleteTask::task_id() const {
  return task_id_;
}
inline void C2S_CompleteTask::set_task_id(::google::protobuf::int32 value) {
  set_has_task_id();
  task_id_ = value;
}

// -------------------------------------------------------------------

// S2C_CompleteTask

// required sint64 role_index = 1;
inline bool S2C_CompleteTask::has_role_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2C_CompleteTask::set_has_role_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2C_CompleteTask::clear_has_role_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2C_CompleteTask::clear_role_index() {
  role_index_ = GOOGLE_LONGLONG(0);
  clear_has_role_index();
}
inline ::google::protobuf::int64 S2C_CompleteTask::role_index() const {
  return role_index_;
}
inline void S2C_CompleteTask::set_role_index(::google::protobuf::int64 value) {
  set_has_role_index();
  role_index_ = value;
}

// required sint32 task_id = 2;
inline bool S2C_CompleteTask::has_task_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2C_CompleteTask::set_has_task_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2C_CompleteTask::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2C_CompleteTask::clear_task_id() {
  task_id_ = 0;
  clear_has_task_id();
}
inline ::google::protobuf::int32 S2C_CompleteTask::task_id() const {
  return task_id_;
}
inline void S2C_CompleteTask::set_task_id(::google::protobuf::int32 value) {
  set_has_task_id();
  task_id_ = value;
}

// required bool ret_code = 3;
inline bool S2C_CompleteTask::has_ret_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2C_CompleteTask::set_has_ret_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2C_CompleteTask::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2C_CompleteTask::clear_ret_code() {
  ret_code_ = false;
  clear_has_ret_code();
}
inline bool S2C_CompleteTask::ret_code() const {
  return ret_code_;
}
inline void S2C_CompleteTask::set_ret_code(bool value) {
  set_has_ret_code();
  ret_code_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Task_2eproto__INCLUDED
